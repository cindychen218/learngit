/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	var parentJsonpFunction = window["webpackJsonp"];
/******/ 	window["webpackJsonp"] = function webpackJsonpCallback(chunkIds, moreModules, executeModules) {
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [], result;
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(chunkIds, moreModules, executeModules);
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 	};
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// objects to store loaded and loading chunks
/******/ 	var installedChunks = {
/******/ 		18: 0
/******/ 	};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/ 	// This file contains only the entry chunk.
/******/ 	// The chunk loading function for additional chunks
/******/ 	__webpack_require__.e = function requireEnsure(chunkId) {
/******/ 		var installedChunkData = installedChunks[chunkId];
/******/ 		if(installedChunkData === 0) {
/******/ 			return new Promise(function(resolve) { resolve(); });
/******/ 		}
/******/
/******/ 		// a Promise means "currently loading".
/******/ 		if(installedChunkData) {
/******/ 			return installedChunkData[2];
/******/ 		}
/******/
/******/ 		// setup Promise in chunk cache
/******/ 		var promise = new Promise(function(resolve, reject) {
/******/ 			installedChunkData = installedChunks[chunkId] = [resolve, reject];
/******/ 		});
/******/ 		installedChunkData[2] = promise;
/******/
/******/ 		// start chunk loading
/******/ 		var head = document.getElementsByTagName('head')[0];
/******/ 		var script = document.createElement('script');
/******/ 		script.type = 'text/javascript';
/******/ 		script.charset = 'utf-8';
/******/ 		script.async = true;
/******/ 		script.timeout = 120000;
/******/
/******/ 		if (__webpack_require__.nc) {
/******/ 			script.setAttribute("nonce", __webpack_require__.nc);
/******/ 		}
/******/ 		script.src = __webpack_require__.p + "chunk/" + ({"0":"fileview","1":"tableView","2":"steps","3":"selectButton","4":"searchPanel","5":"uploader","6":"fileupload","7":"citypicker","8":"vhanchor","9":"transfer","10":"tabsVertical","11":"suggest","12":"spinner","13":"selectData","14":"progress","15":"cascadepicker","16":"badge","17":"richText"}[chunkId]||chunkId) + "." + chunkId + ".js";
/******/ 		var timeout = setTimeout(onScriptComplete, 120000);
/******/ 		script.onerror = script.onload = onScriptComplete;
/******/ 		function onScriptComplete() {
/******/ 			// avoid mem leaks in IE.
/******/ 			script.onerror = script.onload = null;
/******/ 			clearTimeout(timeout);
/******/ 			var chunk = installedChunks[chunkId];
/******/ 			if(chunk !== 0) {
/******/ 				if(chunk) {
/******/ 					chunk[1](new Error('Loading chunk ' + chunkId + ' failed.'));
/******/ 				}
/******/ 				installedChunks[chunkId] = undefined;
/******/ 			}
/******/ 		};
/******/ 		head.appendChild(script);
/******/
/******/ 		return promise;
/******/ 	};
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// on error function for async loading
/******/ 	__webpack_require__.oe = function(err) { console.error(err); throw err; };
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 211);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = window.$;

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(3);
var core = __webpack_require__(23);
var hide = __webpack_require__(14);
var redefine = __webpack_require__(15);
var ctx = __webpack_require__(24);
var PROTOTYPE = 'prototype';

var $export = function (type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
  var key, own, out, exp;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    // export native or passed
    out = (own ? target : source)[key];
    // bind timers to global for call from export context
    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // extend global
    if (target) redefine(target, key, out, type & $export.U);
    // export
    if (exports[key] != out) hide(exports, key, exp);
    if (IS_PROTO && expProto[key] != out) expProto[key] = out;
  }
};
global.core = core;
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(6);
module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};


/***/ }),
/* 3 */
/***/ (function(module, exports) {

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self
  // eslint-disable-next-line no-new-func
  : Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef


/***/ }),
/* 4 */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(jQuery) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * Ta+3框架JS工具类，调用方式Ta.util.xxx();
 * @module Ta
 * @class util
 * @static
 */
(function (factory) {
	if (true) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(90)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {
		factory(jQuery);
	}
})(function ($) {
	__webpack_require__(91);
	$.extend(true, window, {
		Ta: {
			util: util()
		}
	});
	function util() {
		/*针对string的扩展*/
		String.prototype.trim = function () {
			return $.trim(this);
		};
		String.prototype.replaceAll = function (s1, s2) {
			return this.replace(new RegExp(s1, "gm"), s2);
		};
		return {
			//map使用需呀new出来
			"Map": Map,
			"InputPositon": InputPositon(),
			"isDate": isDate,
			"isDateTime": isDateTime,
			"isTime": isTime,
			"getCurDate": getCurDate,
			"getCurDateMonth": getCurDateMonth,
			"getCurDateYear": getCurDateYear,
			"getCurDateTime": getCurDateTime,
			"getCurDateFullTime": getCurDateFullTime,
			"getCurQuarter": getCurQuarter,
			"StringToDate": StringToDate,
			"StringToDateWithFormat": StringToDateWithFormat,
			"dateDiff": dateDiff,
			"getCurIssue": getCurIssue,
			"obj2string": obj2string,
			"moneyFormat": moneyFormat,
			"cnMoneyFormat": cnMoneyFormat,
			"floatAdd": floatAdd,
			"dataSensitive": dataSensitive()
		};
	}
	/**
  * MAP对象，实现MAP功能 接口： size() 获取MAP元素个数 isEmpty() 判断MAP是否为空 clear() 删除MAP所有元素
  * put(key, value) 向MAP中增加元素（key, value) remove(key)
  * 删除指定KEY的元素，成功返回True，失败返回False get(key) 获取指定KEY的元素值VALUE，失败返回NULL
  * element(index) 获取指定索引的元素（使用element.key，element.value获取KEY和VALUE），失败返回NULL
  * containsKey(key) 判断MAP中是否含有指定KEY的元素 containsValue(value) 判断MAP中是否含有指定VALUE的元素
  * values() 获取MAP中所有VALUE的数组（ARRAY） keys() 获取MAP中所有KEY的数组（ARRAY） 例子： var map =
  * new Ta.util.Map(); map.put("key", "value"); var val = map.get("key")
  * @method Map
  */
	function Map() {
		var elements = [];
		// 获取MAP元素个数
		function size() {
			return elements.length;
		}
		// 判断MAP是否为空
		function isEmpty() {
			return elements.length < 1;
		}
		// 删除MAP所有元素
		function clear() {
			elements = [];
		}
		function put(_key, _value) {
			elements.push({
				key: _key,
				value: _value
			});
		}
		// 删除指定KEY的元素，成功返回True，失败返回False
		function remove(_key) {
			var bln = false;
			try {
				for (var i = 0; i < elements.length; i++) {
					if (elements[i].key == _key) {
						elements.splice(i, 1);
						return true;
					}
				}
			} catch (e) {
				bln = false;
			}
			return bln;
		}
		// 获取指定KEY的元素值VALUE，失败返回NULL
		function get(_key) {
			try {
				for (var i = 0; i < elements.length; i++) {
					if (elements[i].key == _key) {
						return elements[i].value;
					}
				}
			} catch (e) {
				return null;
			}
			return null;
		}
		// 获取指定索引的元素（使用element.key，element.value获取KEY和VALUE），失败返回NULL
		function element(_index) {
			if (_index < 0 || _index >= elements.length) {
				return null;
			}
			return elements[_index];
		}
		// 判断MAP中是否含有指定KEY的元素
		function containsKey(_key) {
			var bln = false;
			try {
				for (var i = 0; i < elements.length; i++) {
					if (elements[i].key == _key) {
						bln = true;
					}
				}
			} catch (e) {
				bln = false;
			}
			return bln;
		}
		// 判断MAP中是否含有指定VALUE的元素
		function containsValue(_value) {
			var bln = false;
			try {
				for (var i = 0; i < elements.length; i++) {
					if (elements[i].value == _value) {
						bln = true;
					}
				}
			} catch (e) {
				bln = false;
			}
			return bln;
		}
		// 获取MAP中所有VALUE的数组（ARRAY）
		function values() {
			var arr = [];
			for (var i = 0; i < elements.length; i++) {
				arr.push(elements[i].value);
			}
			return arr;
		}
		// 获取MAP中所有KEY的数组（ARRAY）
		function keys() {
			var arr = [];
			for (var i = 0; i < elements.length; i++) {
				arr.push(elements[i].key);
			}
			return arr;
		}

		return {
			"size": size,
			"isEmpty": isEmpty,
			"clear": clear,
			"put": put,
			"remove": remove,
			"get": get,
			"element": element,
			"containsKey": containsKey,
			"containsValue": containsValue,
			"values": values,
			"keys": keys
		};
	}
	//map end
	/**
  * 判断是否为日期格式。
  * @method isDate
  * @param {String} dateval 目标串
  */
	function isDate(dateval) {
		var arr = [];
		if (dateval.length != 10) return false;

		if (dateval.indexOf("-") != -1) {
			arr = dateval.toString().split("-");
		} else if (dateval.indexOf("/") != -1) {
			arr = dateval.toString().split("/");
		} else {
			return false;
		}
		if (arr.length != 3) return false;

		// var reg = /^[1-9]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/;
		// yyyy-mm-dd || yyyy/mm/dd
		if (arr[0].length == 4) {
			var date = new Date(arr[0], arr[1] - 1, arr[2]);
			if (date.getFullYear() == arr[0] && date.getMonth() == arr[1] - 1 && date.getDate() == arr[2]) {
				return true;
			}
		}
		return false;
	}
	/**
  * 判断是否为日期时间格式。
  * @method isDateTime
  * @param {String} dateval 目标串
  */
	function isDateTime(dateval) {
		if (dateval.length != 19) return false;
		var arr = dateval.split(' ');
		if (!Ta.util.isDate(arr[0])) {
			return false;
		}

		if (!Ta.util.isTime(arr[1])) {
			return false;
		}

		return true;
	}
	/**
  * 判断是否为时间格式。
  * @method isTime
  * @param {String} dateval 目标串
  */
	function isTime(dateval) {
		if (dateval.length != 8) return false;

		var timeReg = /^(20|21|22|23|[0-1]\d):[0-5]\d:[0-5]\d$/;
		return timeReg.test(dateval);
		return true;
	}

	/**
  * 获取当前日期YYYY-MM-DD。
  * @method getCurDate
  */
	function getCurDate() {
		var d = new Date();
		var ret = d.getFullYear() + "-";
		ret += ("00" + (d.getMonth() + 1)).slice(-2) + "-";
		ret += ("00" + d.getDate()).slice(-2);
		return ret;
	}

	/**
  * 获取当前日期YYYY-MM。
  * @method getCurDateMonth
  */
	function getCurDateMonth() {
		var d = new Date();
		var ret = d.getFullYear() + "-";
		ret += ("00" + (d.getMonth() + 1)).slice(-2);
		return ret;
	}
	/**
  * 获取当前时间YYYY-MM-DD HH:MM:SS。
  * @method getCurDateTime
  */
	function getCurDateTime() {
		var d = new Date();
		var ret = d.getFullYear() + "-";
		ret += ("00" + (d.getMonth() + 1)).slice(-2) + "-";
		ret += ("00" + d.getDate()).slice(-2) + " ";
		ret += ("00" + d.getHours()).slice(-2) + ":";
		ret += ("00" + d.getMinutes()).slice(-2) + ":";
		ret += ("00" + d.getSeconds()).slice(-2);
		return ret;
	}
	/**
  * 获取当前时间YYYY-MM-DD HH:MM:SS.sss。
  * @method getCurDateFullTime
  */
	function getCurDateFullTime() {
		var d = new Date();
		var ret = d.getFullYear() + "-";
		ret += ("00" + (d.getMonth() + 1)).slice(-2) + "-";
		ret += ("00" + d.getDate()).slice(-2) + " ";
		ret += ("00" + d.getHours()).slice(-2) + ":";
		ret += ("00" + d.getMinutes()).slice(-2) + ":";
		ret += ("00" + d.getSeconds()).slice(-2) + ".";;
		ret += ("00" + d.getMilliseconds()).slice(-3);
		return ret;
	}
	/**
  * 获取当前季度YYYY年XX季度
  * @method getCurQuarter
  */
	function getCurQuarter() {
		var curDateMonth = getCurDateMonth();
		var ary = curDateMonth.split("-");
		var ret = ary[0] + '年';
		var month = new Number(ary[1]);
		if (month >= 1 && month <= 3) {
			ret += "01季度";
		} else if (month >= 4 && month <= 6) {
			ret += "02季度";
		} else if (month >= 7 && month <= 9) {
			ret += "03季度";
		} else if (month >= 10 && month <= 12) {
			ret += "04季度";
		}
		return ret;
	}
	/**
  * 获取当前期号YYYYMM。
  * @method getCurIssue
  */
	function getCurIssue() {
		var d = new Date();
		var ret = d.getFullYear();
		var month = d.getMonth() + 1;
		if (parseInt(month) < 10) {
			ret += "0" + month;
		} else {
			ret += "" + month;
		}
		return ret;
	}
	/**
  * 获取当前年份YYYY。
  * @method getCurDateYear
  */
	function getCurDateYear() {
		var d = new Date();
		var ret = d.getFullYear();
		return ret;
	}
	/**
  * 时间差计算 返回时间差
  * @method dateDiff
  * @author cy
  */
	function dateDiff(dtStart, dtEnd, strInterval) {

		if (typeof dtEnd == 'string') {
			dtEnd = StringToDate(dtEnd);
		}
		if (typeof dtStart == 'string') {
			dtStart = StringToDate(dtStart);
		}
		if (dtEnd && dtStart) {
			switch (strInterval) {
				case 's':
					return parseInt((dtEnd - dtStart) / 1000);
				case 'n':
					return parseInt((dtEnd - dtStart) / 60000);
				case 'h':
					return parseInt((dtEnd - dtStart) / 3600000);
				case 'd':
					return parseInt((dtEnd - dtStart) / 86400000);
				case 'w':
					return parseInt((dtEnd - dtStart) / (86400000 * 7));
				case 'M':
					return dtEnd.getMonth() + 1 + (dtEnd.getFullYear() - dtStart.getFullYear()) * 12 - (dtStart.getMonth() + 1);
				case 'y':
					return dtEnd.getFullYear() - dtStart.getFullYear();
				default:
					return parseInt((dtEnd - dtStart) / 1000);
			}
		}
		return false;
	}

	/**
  * 字符串转换成日期
  * @method StringToDate
  * @author cy
  */
	function StringToDate(value) {
		if (isDate(value) || isDateTime(value)) {
			value = value.replace(/\-/g, "/");
			var statedate = new Date(value);
			if (statedate != "Invalid Date") {
				return statedate;
			}
		}
		return false;
	}

	/**
  * 格式字符串转换成日期
  * @method StringToDateWithFormat
  * @author xiep
  */
	function StringToDateWithFormat(value, format) {
		var dateRule = [{
			variable: "y",
			length: 4,
			reg: /(yyyy|YYYY)/g
		}, {
			variable: "M",
			length: 2,
			reg: /(MM)/g
		}, {
			variable: "d",
			length: 2,
			reg: /(dd)/g
		}, {
			variable: "h",
			length: 2,
			reg: /(hh|HH)/g
		}, {
			variable: "m",
			length: 2,
			reg: /(mm)/g
		}, {
			variable: "s",
			length: 2,
			reg: /(ss)/g
		}];

		var now = new Date();
		var dateObj = {
			y: now.getFullYear(),
			M: now.getMonth() + 1, //月从0开始？
			d: "01",
			h: "00",
			m: "00",
			s: "00"
		};

		for (var i = 0; i < dateRule.length; i++) {

			if (dateRule[i].reg.test(format)) {
				dateObj[dateRule[i].variable] = value.substring(dateRule[i].reg.lastIndex - dateRule[i].length, dateRule[i].reg.lastIndex);
			}
		}
		//new Date IE11 不支持 new Date("2018-11-11 11:11:11")
		return new Date(dateObj.y + "/" + dateObj.M + "/" + dateObj.d + " " + dateObj.h + ":" + dateObj.m + ":" + dateObj.s);
	}

	function InputPositon() {
		var _style = {};
		function show(elem) {
			var p = getInputPositon(elem);
			var k = elem.value.replace(/[^\x00-\xff]/gmi, 'pp').length; // 将中文转换成pp后再计算长度
			// var k = $.trim(elem.value).length;//liys修改
			if (k == 0) return;
			var s = document.getElementById('__inputcharshow');
			if (!s) {
				var tmp = $('<div id="__inputcharshow" ></div>');
				tmp.appendTo('body');
				s = tmp[0];
			}
			if (p.bottom < 50) {
				if (/msie/.test(navigator.userAgent.toLowerCase())) {
					s.style.top = p.bottom - 20 + 'px';
					s.style.left = p.left + 16 + 'px';
				} else {
					s.style.top = p.bottom - 35 + 'px';
					s.style.left = p.left + 'px';
				}
			} else {
				if (/msie/.test(navigator.userAgent.toLowerCase())) {
					s.style.top = p.bottom + 30 + 'px';
					s.style.left = p.left + 16 + 'px';
				} else {
					s.style.top = p.bottom + 15 + 'px';
					s.style.left = p.left + 'px';
				}
			}
			s.style.display = 'block';
			if (typeof s.innerText == "undefined") s.textContent = k;else s.innerText = k;
		}

		function remove() {
			$("#__inputcharshow").remove();
		}
		/**
   * 获取当前window的top对象方法,放在单点登录跨域直接window.top的问题
   * */
		function getTop() {}
		/**
   * 获取输入光标在页面中的坐标
   * @method getInputPositon
   * @param {HTMLElement} elem
   *            输入框元素
   * @return {Object} 返回left和top,bottom
   */
		function getInputPositon(elem) {
			if (document.selection) {
				// IE Support
				elem.focus();
				// liys修改
				// 获取顶层id=header的元素
				var $topObj = top.$(".top-part");
				var top1 = $topObj.height(); // header高度
				// 获取顶层id=layout1的元素
				var $leftObj = top.$("#left-part");
				var $topPanel = $($leftObj.find('.left-top-part')[0]); // 顶部
				top1 = top1 + $topPanel.height();
				var $showleft = $($leftObj.find('.left-con-part ')[0]); // 左侧显示
				var left1 = $showleft.width();

				var Sel = document.selection.createRange();
				return {
					left: $(document).scrollLeft() + Sel.boundingLeft - left1,
					top: $(document).scrollTop() + Sel.boundingTop - top1,
					bottom: $(document).scrollTop() + Sel.boundingTop + Sel.boundingHeight - top1
					// left: Sel.boundingLeft,
					// top: Sel.boundingTop,
					// bottom: Sel.boundingTop + Sel.boundingHeight
				};
			} else {
				var cloneDiv = '{$clone_div}',
				    cloneLeft = '{$cloneLeft}',
				    cloneFocus = '{$cloneFocus}',
				    cloneRight = '{$cloneRight}';
				var none = '<span style="white-space:pre-wrap;"> </span>';
				var div = elem[cloneDiv] || document.createElement('div'),
				    focus = elem[cloneFocus] || document.createElement('span');
				var text = elem[cloneLeft] || document.createElement('span');
				var offset = _offset(elem),
				    index = _getFocus(elem),
				    focusOffset = {
					left: 0,
					top: 0
				};

				if (!elem[cloneDiv]) {
					elem[cloneDiv] = div, elem[cloneFocus] = focus;
					elem[cloneLeft] = text;
					div.appendChild(text);
					div.appendChild(focus);
					document.body.appendChild(div);
					focus.innerHTML = '|';
					focus.style.cssText = 'display:inline-block;width:0px;overflow:hidden;z-index:-100;word-wrap:break-word;word-break:break-all;';
					div.className = _cloneStyle(elem);
					div.style.cssText = 'visibility:hidden;display:inline-block;position:absolute;z-index:-100;word-wrap:break-word;word-break:break-all;overflow:hidden;';
				};
				div.style.left = _offset(elem).left + "px";
				div.style.top = _offset(elem).top + "px";
				var strTmp = elem.value.substring(0, index).replace(/</g, '<').replace(/>/g, '>').replace(/\n/g, '<br/>').replace(/\s/g, none);
				text.innerHTML = strTmp;

				focus.style.display = 'inline-block';
				try {
					focusOffset = _offset(focus);
				} catch (e) {};
				focus.style.display = 'none';
				return {
					left: focusOffset.left,
					top: focusOffset.top,
					bottom: focusOffset.bottom
				};
			}
		}

		// 克隆元素样式并返回类
		function _cloneStyle(elem, cache) {
			if (!cache && elem['${cloneName}']) return elem['${cloneName}'];
			var className,
			    name,
			    rstyle = /^(number|string)$/;
			var rname = /^(content|outline|outlineWidth)$/; // Opera: content;
			// IE8:outline &&
			var cssText = [],
			    sStyle = elem.style;

			for (name in sStyle) {
				if (!rname.test(name)) {
					var val = _getStyle(elem, name);
					if (val !== '' && rstyle.test(typeof val === "undefined" ? "undefined" : _typeof(val))) {
						// Firefox 4
						name = name.replace(/([A-Z])/g, "-$1").toLowerCase();
						cssText.push(name);
						cssText.push(':');
						cssText.push(val);
						cssText.push(';');
					};
				};
			};
			cssText = cssText.join('');
			elem['${cloneName}'] = className = 'clone' + new Date().getTime();
			_addHeadStyle('.' + className + '{' + cssText + '}');
			return className;
		}

		// 向页头插入样式
		function _addHeadStyle(content) {
			var style = _style[document];
			if (!style) {
				style = _style[document] = document.createElement('style');
				document.getElementsByTagName('head')[0].appendChild(style);
			};
			style.styleSheet && (style.styleSheet.cssText += content) || style.appendChild(document.createTextNode(content));
		}

		// 获取最终样式
		function _getStyle(elem, name) {
			if ('getComputedStyle' in window) {
				return getComputedStyle(elem, null)[name];
			} else {
				return elem.currentStyle[name];
			}
		}
		// 获取光标在文本框的位置
		/**
   * 获取光标在文本框的位置。
   * @method _getFocus
   * @private
   */
		function _getFocus(elem) {
			var index = 0;
			if (document.selection) {
				// IE Support
				elem.focus();
				var Sel = document.selection.createRange();
				if (elem.nodeName === 'TEXTAREA') {
					// textarea
					var Sel2 = Sel.duplicate();
					Sel2.moveToElementText(elem);
					var index = -1;
					while (Sel2.inRange(Sel)) {
						Sel2.moveStart('character');
						index++;
					}
					;
				} else if (elem.nodeName === 'INPUT') {
					// input
					Sel.moveStart('character', -elem.value.length);
					index = Sel.text.length;
				}
			} else if (elem.selectionStart || elem.selectionStart == '0') {
				// Firefox
				// support
				index = elem.selectionStart;
			}
			return index;
		}

		// 获取元素在页面中位置
		function _offset(elem) {
			var box = elem.getBoundingClientRect(),
			    doc = elem.ownerDocument,
			    body = doc.body,
			    docElem = doc.documentElement;
			var clientTop = docElem.clientTop || body.clientTop || 0,
			    clientLeft = docElem.clientLeft || body.clientLeft || 0;
			var top = box.top + (self.pageYOffset || docElem.scrollTop) - clientTop,
			    left = box.left + (self.pageXOffset || docElem.scrollLeft) - clientLeft;
			return {
				left: left,
				top: top,
				right: left + box.width,
				bottom: top + box.height
			};
		}

		return {
			"show": show,
			"remove": remove,
			"getInputPositon": getInputPositon,
			"_cloneStyle": _cloneStyle,
			"_addHeadStyle": _addHeadStyle,
			"_getStyle": _getStyle,
			"_getFocus": _getFocus,
			"_offset": _offset
		};
	}
	/**
  * 将json对象转换为string
  * @method obj2string
  * @param {Object} o json对象
  * @return {string}
  */
	function obj2string(o) {
		if (o == null || o == 'undefined') return null;
		var r = [];
		if (typeof o == "string") return o;

		if ((typeof o === "undefined" ? "undefined" : _typeof(o)) == "object") {
			if (!jQuery.isArray(o)) {
				for (var i in o) {
					if (typeof o[i] == 'string' || typeof o[i] == 'number') {
						if (o[i] != undefined) {
							// r.push("\""+ i + "\":\"" + o[i].toString().replace(/\"/g, "\\\"") + "\"");
							r.push("\"" + i + "\":\"" + o[i].toString().replace(/\\/g, "\\\\").replace(/\"/g, "\\\"") + "\"");
						} else {
							r.push("\"" + i + "\":null");
						}
					} else {
						r.push("\"" + i + "\":" + Ta.util.obj2string(o[i]));
					}
				}

				if (!!document.all && !/^\n?function\s*toString\(\)\s*\{\n?\s*\[native code\]\n?\s*\}\n?\s*$/.test(o.toString)) {
					r.push("toString:" + o.toString.toString());
				}

				r = "{" + r.join() + "}";
			} else {
				for (var i = 0; i < o.length; i++) {
					r.push(Ta.util.obj2string(o[i]));
				}r = "[" + r.join() + "]";
			}
			return r;
		}
		return o.toString();
	}

	/**
  * 将数字转换为金额显示，每三位逗号隔开
  * @method moneyFormat
  * @param {Number} money 数字
  * @param {Number} decimal 小数位
  * @param {string} symbol 金额前缀，如￥或$
  */
	function moneyFormat(money, decimal, symbol) {
		if (!money || isNaN(money)) return "";
		var num = parseFloat(money);
		num = String(num.toFixed(decimal ? decimal : 0));
		var re = /(-?\d+)(\d{3})/;
		while (re.test(num)) {
			num = num.replace(re, "$1,$2");
		}
		return symbol ? symbol + num : num;
	}

	/**
  * 将数字转换为中文的金额
  * @method cnMoneyFormat
  * @param {Number} money 数字
  */
	function cnMoneyFormat(money) {
		var cnMoney = "零元整";
		var strOutput = "";
		var strUnit = '仟佰拾亿仟佰拾万仟佰拾元角分';
		money += "00";
		var intPos = money.indexOf('.');
		if (intPos >= 0) {
			money = money.substring(0, intPos) + money.substr(intPos + 1, 2);
		}
		strUnit = strUnit.substr(strUnit.length - money.length);
		for (var i = 0; i < money.length; i++) {
			strOutput += '零壹贰叁肆伍陆柒捌玖'.substr(money.substr(i, 1), 1) + strUnit.substr(i, 1);
		}
		cnMoney = strOutput.replace(/零角零分$/, '整').replace(/零[仟佰拾]/g, '零').replace(/零{2,}/g, '零').replace(/零([亿|万])/g, '$1').replace(/零+元/, '元').replace(/亿零{0,3}万/, '亿').replace(/^元/, "零元");
		return cnMoney;
	}
	/**
  * 计算两个浮点数相加的结果。
  * @method floatAdd
  * @param {Number} arg1 Number对象
  * @param {Number} arg2 Number对象
  * @return {Number}
  */
	function floatAdd(arg1, arg2) {
		var r1, r2, m;
		try {
			r1 = arg1.toString().split(".")[1].length;
		} catch (e) {
			r1 = 0;
		}
		try {
			r2 = arg2.toString().split(".")[1].length;
		} catch (e) {
			r2 = 0;
		}
		m = Math.pow(10, Math.max(r1, r2));
		return ((arg1 * m + arg2 * m) / m).toFixed(m.toString().length - 1);
	}

	/**
 * 敏感数据处理
  * @return {{format: *, formatWithNum: *}}
  */
	function dataSensitive() {
		var ruleLib = {
			name: {
				indexRule: [{ start: 2, stop: null }],
				reqRule: { srcReq: /^(\w{1})\w*$/, descReq: "$1*" },
				desensitization: function desensitization(value) {
					return formatWithIndex(value, this.indexRule);
				}
			},
			idcard: {
				indexRule: [{ start: 4, stop: 14 }],
				reqRule: { srcReq: /^([\d]{3})\d{1,11}(\w*)$/, descReq: "$1********$2" },
				desensitization: function desensitization(value) {
					return formatWithIndex(value, this.indexRule);
				}
			},
			date: {
				indexRule: [{ start: 6, stop: 7 }, { start: 9, stop: 10 }],
				reqRule: { srcReq: /^([\d]{4}-)(\w*)$/, descReq: "$1********" },
				desensitization: function desensitization(value) {
					return formatWithIndex(value, this.indexRule);
				}
			},
			email: {
				reqRule: { srcReq: /^(\w+([-+.]\w+)*)@(\w+([-.]\w+)*\.\w+([-.]\w+)*)$/, descReq: "****@$3" },
				desensitization: function desensitization(value) {
					return formatWithReq(value, this.reqRule);
				}
			},
			zipcode: {
				indexRule: [{ start: 2, stop: null }],
				reqRule: { srcReq: /^([1-9])[0-9]{1,5}$/, descReq: "$1*****" },
				desensitization: function desensitization(value) {
					return formatWithIndex(value, this.indexRule);
				}
			},
			telphone: {
				indexRule: [{ start: 6, stop: null }],
				reqRule: { srcReq: /^([0-9]{3,4})-\d*$/, descReq: "$1-********" },
				desensitization: function desensitization(value) {
					return formatWithIndex(value, this.indexRule);
				}
			},
			mobile: {
				indexRule: [{ start: 4, stop: 7 }],
				reqRule: { srcReq: /^(1[3|4|5|7|8][0-9])\d{1,4}(\d*)$/, descReq: "$1****$2" },
				desensitization: function desensitization(value) {
					return formatWithIndex(value, this.indexRule);
				}
			},
			ip: {}
		};

		/**
   *
   * @param type
   * @param value
   * @param trueDigit  是否真实位数，默认true
   * @return {*}
   */
		function format(type, value) {
			if (typeof value == "undefined" || value == null) return "";
			value = value.toString();
			var rule = ruleLib[type];

			return rule.desensitization(value);
		}

		function formatWithReq(value, reqRule) {
			return value.replace(reqRule.srcReq, reqRule.descReq);
		}

		function formatWithIndex(value, indexRule) {
			if (typeof value == "undefined" || value == null) return "";
			value = value.toString();
			var valueLength = value.length;
			var values = value.split("");

			for (var j = 0; j < indexRule.length; j++) {
				var start = indexRule[j].start;
				var stop = indexRule[j].stop;

				if (valueLength < start) {
					continue;
				}

				start = start ? start - 1 : 0;
				stop = stop ? stop - 1 : values.length - 1;

				for (var i = start; i < valueLength && i <= stop; i++) {
					values.splice(i, 1, "*");
				}
			}

			return values.join("");
		}

		// function formatWithNum(value,start,end){
		// 	if(typeof value == "undefined" || value == null)return "";
		//     value = value.toString();
		//     var valueLength = value.length;
		//     if(valueLength < start){
		//         return value;
		//     }
		//
		//     var values = value.split("");
		//
		//     start = start?start-1:0;
		//     end = end?end-1:values.length-1;
		//
		//     for(var i = start;i<valueLength && i < end;i++){
		//         values.splice(i,1,"*");
		//     }
		//
		//     return values.join("");
		// }


		return {
			format: format,
			formatWithReq: formatWithReq,
			formatWithIndex: formatWithIndex
		};
	}
});
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 6 */
/***/ (function(module, exports) {

module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

var store = __webpack_require__(66)('wks');
var uid = __webpack_require__(43);
var Symbol = __webpack_require__(3).Symbol;
var USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function (name) {
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.15 ToLength
var toInteger = __webpack_require__(26);
var min = Math.min;
module.exports = function (it) {
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

// Thank's IE8 for his funny defineProperty
module.exports = !__webpack_require__(4)(function () {
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(2);
var IE8_DOM_DEFINE = __webpack_require__(157);
var toPrimitive = __webpack_require__(29);
var dP = Object.defineProperty;

exports.f = __webpack_require__(9) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.13 ToObject(argument)
var defined = __webpack_require__(30);
module.exports = function (it) {
  return Object(defined(it));
};


/***/ }),
/* 12 */
/***/ (function(module, exports) {

module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(jQuery, $) {

/**
 * 浏览器支持
 * @module jqueryExt
 * @depends jquery
 */
jQuery.browser = {};
jQuery.browser.mozilla = /firefox/.test(navigator.userAgent.toLowerCase());
jQuery.browser.webkit = /webkit/.test(navigator.userAgent.toLowerCase());
jQuery.browser.opera = /opera/.test(navigator.userAgent.toLowerCase());
jQuery.browser.msie11 = /rv:11.0/.test(navigator.userAgent.toLowerCase());
jQuery.browser.msie = /msie/.test(navigator.userAgent.toLowerCase()) || jQuery.browser.msie11;
/**
 * 表单提交扩展
 * @module jqueryExt
 * @depends jquery,base
 */
jQuery.fn.extend({
	taserialize: function taserialize(isIncludeNullFields) {
		return jQuery.param(this.taserializeArray(isIncludeNullFields));
	},
	taserializeArray: function taserializeArray(isIncludeNullFields) {
		if (typeof isIncludeNullFields == "undefined" ? Base.globvar.commitNullField === false : isIncludeNullFields === false) //默认提交空参数
			return this.map(function () {
				//如果是输入对象本身
				var isInput = this.tagName && (this.tagName.toLowerCase() == 'input' || this.tagName == "TEXTAREA") ? true : false;
				return this.elements ? jQuery.makeArray(this.elements) : jQuery.makeArray(isInput ? this : $(this).find(':input').get());
			}).filter(function () {
				return this.name && !this.disabled && (this.checked || /^(?:select|textarea)/i.test(this.nodeName) || /^(?:color|date|datetime|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i.test(this.type));
			}).map(function (i, elem) {
				var val = jQuery(this).val();
				return val == null || typeof val == 'string' && val.trim() == '' ? null : jQuery.isArray(val) ? jQuery.map(val, function (val, i) {
					return { name: elem.name, value: val.trim().replace(/\r?\n/g, "\r\n") };
				}) : { name: elem.name, value: val.trim().replace(/\r?\n/g, "\r\n") };
			}).get();else return this.map(function () {
			//如果是输入对象本身
			var isInput = this.tagName && (this.tagName.toLowerCase() == 'input' || this.tagName == "TEXTAREA") ? true : false;
			return this.elements ? jQuery.makeArray(this.elements) : jQuery.makeArray(isInput ? this : $(this).find(':input').get());
		}).filter(function () {
			return this.name && !this.disabled && (this.checked || /^(?:select|textarea)/i.test(this.nodeName) || /^(?:color|date|datetime|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i.test(this.type));
		}).get();
	}
});
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), __webpack_require__(0)))

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(10);
var createDesc = __webpack_require__(42);
module.exports = __webpack_require__(9) ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(3);
var hide = __webpack_require__(14);
var has = __webpack_require__(18);
var SRC = __webpack_require__(43)('src');
var $toString = __webpack_require__(287);
var TO_STRING = 'toString';
var TPL = ('' + $toString).split(TO_STRING);

__webpack_require__(23).inspectSource = function (it) {
  return $toString.call(it);
};

(module.exports = function (O, key, val, safe) {
  var isFunction = typeof val == 'function';
  if (isFunction) has(val, 'name') || hide(val, 'name', key);
  if (O[key] === val) return;
  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
  if (O === global) {
    O[key] = val;
  } else if (!safe) {
    delete O[key];
    hide(O, key, val);
  } else if (O[key]) {
    O[key] = val;
  } else {
    hide(O, key, val);
  }
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, TO_STRING, function toString() {
  return typeof this == 'function' && this[SRC] || $toString.call(this);
});


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(1);
var fails = __webpack_require__(4);
var defined = __webpack_require__(30);
var quot = /"/g;
// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
var createHTML = function (string, tag, attribute, value) {
  var S = String(defined(string));
  var p1 = '<' + tag;
  if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
  return p1 + '>' + S + '</' + tag + '>';
};
module.exports = function (NAME, exec) {
  var O = {};
  O[NAME] = exec(createHTML);
  $export($export.P + $export.F * fails(function () {
    var test = ''[NAME]('"');
    return test !== test.toLowerCase() || test.split('"').length > 3;
  }), 'String', O);
};


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(jQuery) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**========================== 表单部分的操作=======================================*/
/**
 * form表单常用方法,调用方式为Base.xxx();
 * @module Base
 * @class forms
 * @static
 */
(function (factory) {
	if (true) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(5), __webpack_require__(28)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {
		factory(jQuery);
	}
})(function ($) {
	$.extend(true, window, {
		Base: core()
	});

	function core() {
		/**
   * 获取当前输入对象的前面一个输入对象或按钮。
   * @method _getPreFormField
   * @param {String} curid 当前对象id
   * @return {Object} 前一个组件对象
   */
		function _getPreFormField(curid) {
			var ids = [];
			$("textarea:visible,input:visible").filter(function () {
				return typeof $(this).attr("readonly") == 'undefined' && typeof $(this).attr("disabled") == 'undefined';
			}).each(function () {
				if (typeof this.id != 'undefined') ids.push(this.id);
			});
			var obj = getObj(curid);
			if (obj) {
				if (obj.cmptype) {
					curid = obj.getInput().attr("id");
				}
				return getPreInput(curid, ids);
			} else {
				//当前焦点不明确，定位到页面第一个焦点
				return ids[0];
			}

			function getPreInput(curid, ids) {
				var inWin = false;
				if ($("#" + curid).parents('div.window-body').length > 0) {
					inWin = true;
				}
				for (var i = ids.length - 1; i >= 0; i--) {
					if (ids[i] == curid) {
						var m = i - 1;
						if (i == 0) {
							//当前对象恰好在最前
							m = ids.length - 1;
							return; //modify by xp 避免回车循环
						}
						for (; m >= 0; m--) {
							//从当前对象的后面一个开始想要可以置焦点的对象
							var $ele = $("#" + ids[m]);
							var nextId = $ele.attr('realId') || $ele.attr('id');
							if (typeof nextId == 'undefined') continue;
							if (inWin) {
								if ($ele.parents('div.window-body').length > 0) {
									return nextId;
								}
							} else {
								return nextId;
							}
						}
					}
				}
			}
		}

		/**
  * 获取下一个输入框（要求输入域都有自己的id属性）
   * @param curid
   * @return {*}
   * @private
  * @author xiep
   */
		function _getNextFormField(curid) {
			var ids = [];
			$("textarea:visible,input:visible").filter(function () {
				return typeof $(this).attr("readonly") == 'undefined' && typeof $(this).attr("disabled") == 'undefined';
			}).each(function () {
				if (typeof this.id != 'undefined') ids.push(this.id);
			});
			var obj = getObj(curid);
			if (obj) {
				if (obj.cmptype) {
					curid = obj.getInput().attr("id");
				}
				return getNextInput(curid, ids);
			} else {
				//当前焦点不明确，定位到页面第一个焦点
				return ids[0];
			}

			function getNextInput(curid, ids) {
				var inWin = false;
				if ($("#" + curid).parents('div.window-body').length > 0) {
					inWin = true;
				}
				for (var i = 0; i < ids.length; i++) {
					if (ids[i] == curid) {
						var m = i + 1;
						if (i == ids.length - 1) {
							//当前对象恰好在最后
							m = 0;
							return; //modify by xp 避免回车循环
						}
						for (; m < ids.length; m++) {
							//从当前对象的后面一个开始想要可以置焦点的对象
							var $ele = $("#" + ids[m]);
							var nextId = $ele.attr('realId') || $ele.attr('id');
							if (typeof nextId == 'undefined') continue;
							if (inWin) {
								if ($ele.parents('div.window-body').length > 0) {
									return nextId;
								}
							} else {
								return nextId;
							}
						}
					}
				}
			}
		}

		/**
   * 聚焦当前输入对象的前面一个输入对象或按钮。
   * @method _goPreFormField
   * @param {String} curid 当前id
   * @return
   */
		function _goPreFormField(id) {
			if ($dp) $dp.hide();
			var el = _getPreFormField(id);
			if (el) {
				if (typeof el === "string") {
					focus(el);
					el = $('#' + el);
				} else {
					focus(el.id);
				}

				//时间组件已默认选中,如果再在这里选中,会出现闪动问题,20130628,liys修改
				if ($(el).hasClass("Wdate")) {} else if (el.type == "text") el.select();
			}
		}

		/**
   * 聚焦当前输入对象的后面一个输入对象或按钮。
   * @method _goNextFormField
   * @param {String} curid 当前id
   * @return
   */
		function _goNextFormField(id) {
			if ($dp) $dp.hide();
			var el = _getNextFormField(id);
			if (el) {
				if (typeof el === "string") {
					focus(el);
					el = $('#' + el);
				} else {
					focus(el.id);
				}
				//时间组件已默认选中,如果再在这里选中,会出现闪动问题,20130628,liys修改
				if ($(el).hasClass("Wdate")) {} else if (el.type == "text") el.select();
			}
		}

		/**
   * 根据id获取对象。
   * @method getObj
   * @param {String} id 输入对象的id
   * @return {Object}  有可能为：html元素，tree对象，datagrid对象，selectinput对象
   */
		function getObj(id) {
			if (typeof id != "string") return null;
			var obj = Ta.core.TaUIManager.getCmp(id);
			if (obj) return obj;
			obj = $("#" + id);
			if (obj[0]) return obj[0];

			return null;
		}

		/**
   * 获取输入对象的label。
   * @method getFieldLabel
   * @param {String} id 输入对象id
   * @return {String} 输入对象label文字
   */
		function getFieldLabel(id) {
			var obj = getObj(id);
			if (!obj) return;
			if (obj.cmptype) {
				return obj.getInputLabel().text().trim();;
			} else {
				return $(obj.parentNode).find('>label[for=' + id + ']').text().trim();;
			}
		}
		/**
   * 设置输入对象的label。
   * @method setFieldLabel
   * @param {String} id 输入对象id
   * @param {String} lablel 新label
   */
		function setFieldLabel(id, label) {
			var obj = getObj(id);
			if (!obj) return;

			if (obj.getInputLabel) {
				obj.getInputLabel().text(label);
			} else {
				$(obj.parentNode).find('>label[for=' + id + ']').text(label);
			}
		}

		/**
   * 设置输入对象为是否只读。
   * @method _setReadOnly
   * @private
   * @param {String/Array} ids  输入对象的id或id数组,例如: "aac001" 或["aac001","aac002"]
   * @param {Boolean} isReadOnly  true 为只读，false为非只读
   */
		function _setReadOnly(ids, isReadOnly) {
			var obj;
			if (typeof ids == "string") ids = ids.split(",");
			for (var idc in ids) {
				obj = getObj(ids[idc]);
				if (obj) {
					if (obj.setReadOnly) {
						obj.setReadOnly(isReadOnly);
					} else {
						if (obj.tagName && (obj.tagName == 'FIELDSET' || obj.tagName == "DIV" || obj.tagName == "FORM")) {
							TaContainerSupport.setReadOnly(obj.id, isReadOnly);
						} else {
							$(obj).attr('readOnly', isReadOnly);
							if (isReadOnly) {
								$(obj).addClass('readonly');
							} else {
								$(obj).removeClass('readonly');
							}
						}
					}
				}
			}
		}
		/**
   * 设置输入对象为是否只读，只读模式下如果组件有值，仍然会向后台传递。
   * <br/>例如：
   * <br/>Base.setReadOnly("aac001");
   * <br/>Base.setReadOnly(["aac001","aac002"]);
   * <br/>Base.setReadOnly("aac001,aac002");
   * @method setReadOnly
   * @param {String/Array} ids  输入对象的id或id数组,例如: "aac001" 或["aac001","aac002"]数组，或者逗号,分开如aac001,aac002
   */
		function setReadOnly(ids) {
			_setReadOnly(ids, true);
		}

		/**
   * 设置输入对象为只读。
   * @method _setEnable
   * @private
   * @param {String/Array} ids  输入对象的id或id数组,例如: "aac001" 或["aac001","aac002"]
   * @param {Boolean} enable  true 为disabled=true，false为disabled=false
   */
		function _setEnable(ids, enable) {
			if (enable == null) enable = true;
			var obj;
			if (typeof ids == "string") ids = ids.split(",");
			for (var idc in ids) {
				obj = getObj(ids[idc]);
				if (obj) {
					if (obj.setEnable) {
						if (obj.setReadOnly) obj.setReadOnly(!enable);
						obj.setEnable(enable);
					} else {
						if (obj.tagName && (obj.tagName == 'FIELDSET' || obj.tagName == "DIV" || obj.tagName == "FORM")) {
							TaContainerSupport.setEnable(obj.id, enable);
						} else {
							if (enable) {
								$(obj).removeAttr('disabled');
								$(obj).removeAttr('readOnly');
								$(obj).show();
							} else {
								$(obj).attr('disabled', 'disabled');
							}
						}
					}
				}
			}
		}
		/**
   * 设置输入对象为可用（按钮为可用，输入框为可编辑）。
   * <br/>例如：
   * <br/>Base.setEnable("aac001");
   * <br/>Base.setEnable(["aac001","aac002"]);
   * <br/>Base.setEnable("aac001,aac002");
   * @method setEnable
   * @param {String/Array} ids  输入对象的id或id数组,例如: "aac001" 或["aac001","aac002"] 或者逗号,分开如aac001,aac002
   */
		function setEnable(ids) {
			_setEnable(ids, true);
		}

		/**
   * 设置输入对象为不可用，不可用状态时，组件不会将值传递到后台。
   * <br/>例如：
   * <br/>Base.setDisabled("aac001");
   * <br/>Base.setDisabled(["aac001","aac002"]);
   * <br/>Base.setDisabled("aac001,aac002");
   * @method setDisabled
   * @param {String/Array} ids  输入对象的id或id数组
   */
		function setDisabled(ids) {
			_setEnable(ids, false);
		}

		/**
   * 设置输入对象为必输项。
   * @method _setIsRequired
   * @private
   * @param {String/Array} ids  输入对象的id或id数组,例如: "aac001" 或["aac001","aac002"]
   * @param {Boolean} isRequired  true/false
   */
		function _setIsRequired(ids, isRequired) {
			var fnsetRequired = function fnsetRequired(id, isRequired) {
				var obj = getObj(id);
				if (!obj) return false;
				if (obj.setRequired) {
					obj.setRequired(isRequired);
				} else {
					if (obj.tagName && (obj.tagName == 'FIELDSET' || obj.tagName == "DIV" || obj.tagName == "FORM")) {
						TaContainerSupport.setRequired(obj.id, isRequired);
					} else {
						if (isRequired) {
							$(obj).attr('required', 'required');
						} else {
							$(obj).removeAttr('required');
						}
					}
				}
			};

			if (typeof ids == 'string') {
				ids = ids.split(',');
			}
			if (jQuery.isArray(ids)) {
				for (var i = 0; i < ids.length; i++) {
					ids[i] ? fnsetRequired(ids[i], isRequired) : null;
				}
			}
		}
		/**
   * 设置输入对象为必输。
   * <br/>例如：
   * <br/>Base.setRequired("aac001");
   * <br/>Base.setRequired(["aac001","aac002"]);
   * <br/>Base.setRequired("aac001,aac002");
   * @method setRequired
   * @param {String/Array} ids  输入对象的id或id数组,例如: "aac001" 或["aac001","aac002"]
   */
		function setRequired(ids) {
			_setIsRequired(ids, true);
		}
		/**
   * 设置输入对象为非必输。
   * <br/>例如：
   * <br/>Base.setDisRequired("aac001");
   * <br/>Base.setDisRequired(["aac001","aac002"]);
   * <br/>Base.setDisRequired("aac001,aac002");
   * @method setDisRequired
   * @param {String/Array} ids  输入对象的id或id数组,例如: "aac001" 或["aac001","aac002"]
   *
   */
		function setDisRequired(ids) {
			_setIsRequired(ids, false);
		}

		/**
   * 设置输入对象的值
   * <br>普通输入框为value字符串
   * <br>对于checkboxgroup或radiogroup应该为数组
   * <br>注:需要考虑下了列表,下拉多选,下拉树等组件
   * <br>如果设置下拉组件，下拉框内的值，数据应为数组，如[{id:'aaa', name:'dddd'},{id:'bb', name:'dddd'}]
   * @method setValue
   * @param {String/map} id  输入对象的id 或一个json格式的对象对多个输入框赋值
   * @param {String} value 值
   */
		function setValue(id, value) {
			//当value类型为String的时候，才做处理
			if (typeof value == 'string') {
				value = $.trim(value);
			}
			var _setValue = function _setValue(id, value) {
				var obj = getObj(id);
				if (!obj) return false;
				if (obj.setValue) {
					obj.setValue(value);
				} else {
					if (obj.tagName) {
						if (obj.type == "text" || obj.type == "hidden" || obj.type == "password" || obj.tagName == 'TEXTAREA') {
							if (value != null && typeof value == "string") {
								value = value.replaceAll("\\\\r", "\r");
								value = value.replaceAll("\\\\n", "\n");
								$(obj).val(value);
							} else {
								$(obj).val(value);
							}
						} else if (obj.type == 'radio' || obj.type == 'checkbox') {
							if (!value) {
								obj.checked = false;
							} else if (value && obj.value == value) {
								//当且仅当传入的value和标签的value值相等的时候才选中
								obj.checked = true;
							}
						}
					}
				}
			};
			if (value == null || value == "null" || value == "NULL") value = "";
			if ((typeof id === "undefined" ? "undefined" : _typeof(id)) == 'object') {
				for (var i in id) {
					if (typeof id[i] == "string") {
						_setValue(i, $.trim(id[i]));
					} else {
						_setValue(i, id[i]);
					}
				}
			} else {
				_setValue(id, value);
			}
		}

		/**
   *  获取输入对象的值
   *  普通输入框为字符串
   *  对于checkboxgroup或radiogroup 返回数组
   * @method getValue
   * @param {String} id  输入对象的id
   * @type {String/Array} value 值
   * @return String or Array
   */
		function getValue(id) {
			var obj = getObj(id);
			if (!obj) return false;
			if (obj.getValue) {
				return obj.getValue();
			} else {
				if (obj.tagName) {
					//表明是html元素，而不是寄存在TaUIManager里面的对象。
					if (obj.type == "text" || obj.type == "password" || obj.type == 'textarea' || obj.tagName == 'TEXTAREA') {
						return $(obj).val();
					} else if (obj.type == 'radio' || obj.type == 'checkbox') {
						return obj.checked ? $(obj).val() : null;
					}
				}
			}
		}
		/**
   * 让某个输入对象获取焦点
   * @method focus
   * @param {String} id 对象id
   */
		function focus(id) {
			var obj = getObj(id);
			if (!obj) return false;
			if (obj.setFocus) {
				obj.setFocus();
			} else {
				$(obj).focus();
			}
		}

		/**
   * 显示输入对象或按钮
   * @method showObj
   * @param {String/Array} ids 例如: "aac001" 或["aac001","aac002"]， 或者以逗号隔开
   * @param {boolean} isForce 是否是强制显示,默认为true-强制显示:强制显示时 本页面如果有fit属性的容器会自动调整
   * 高度,如果是false那么就不会自动调整,(如果是true的话,页面复杂在ie下可能会很卡,所以这样的情况可以设置这个属性为false)
   */
		function showObj(ids, isForce) {
			var show = function show(id) {
				var obj = getObj(id);
				if (!obj) return false;
				if (obj.setVisible) {
					obj.setVisible(true, true);
				} else {
					$(obj).show().css('visibility', 'visible');
				}
				//add by cy 显示后页面fit不能超出页面的问题
				isForce === false ? "" : $("#" + id).parents().nextAll("[fit=true]:first:visible").trigger("_resize");
			};
			if (typeof ids == 'string') {
				ids = ids.split(',');
			}
			if (jQuery.isArray(ids)) {
				for (var i = 0; i < ids.length; i++) {
					show(ids[i]);
				}
			}
		}

		/**
   * 隐藏输入对象
   * @method hideObj
   * @param {String/Array} ids 例如: "aac001" 或"aac001,aac002" 或["aac001","aac002"]，或者以逗号隔开
   * @param {Boolean} isHold 默认false 不占位，如果为为false就不占位
   * @param {boolean} isForce 是否是强制显示,默认为true-强制重绘:强制重绘时 本页面如果有fit属性的容器会自动调整
   * 高度,如果是false那么就不会自动调整,(如果是true的话,页面复杂在ie下可能会很卡,所以这样的情况可以设置这个属性为false)
   */
		function hideObj(ids, isHold, isForce) {
			var hide = function hide(id, isHold) {
				var obj = getObj(id);
				if (!obj) return false;
				if (obj.setVisible) {
					obj.setVisible(false, isHold);
				} else {
					if (isHold) $(obj).css('visibility', 'hidden');else $(obj).hide();
				}
				//add by cy 隐藏后页面fit不能铺满的问题
				isForce === false ? "" : $("#" + id).parents().nextAll("[fit=true]:first:visible").trigger("_resize");
			};
			isHold = isHold === true ? true : false;

			if (typeof ids == 'string') {
				ids = ids.split(',');
			}
			if (jQuery.isArray(ids)) {
				for (var i = 0; i < ids.length; i++) {
					hide(ids[i], isHold);
				}
			}
		}

		function validateData(ids, focusFirst, isHiddenValid, isReadOnlyValid) {
			if (!ids) return true;
			focusFirst = focusFirst === false ? false : true;
			isReadOnlyValid = isReadOnlyValid === false ? false : true;
			var firstValid;
			function validate(id) {
				var obj = getObj(id);
				if (!obj) return true;
				if (obj.cmptype && obj.cmptype !== "datagrid") {
					if (typeof obj.doValidate != "function") {
						//add by cy 在没有验证函数的时候或者不需要验证组件的时候,那么直接返回验证成功true
						return true;
					}
					var bvalid = obj.doValidate();
					if (!bvalid && focusFirst && !firstValid) {
						firstValid = id;
					}
					return bvalid;
				} else {
					if (obj.cmptype && obj.cmptype == 'datagrid') {
						//add by cy 表格不进行验证
						return true;
					} else if (obj.tagName && (obj.tagName == 'FIELDSET' || obj.tagName == "DIV" || obj.tagName == "FORM")) {
						var validresult = TaContainerSupport.doValidate(obj.id, isHiddenValid, isReadOnlyValid);
						if (validresult !== true && focusFirst && !firstValid) {
							firstValid = validresult;
						}
						return validresult === true;
					}
				}
			}

			if (typeof ids == 'string') {
				ids = ids.split(',');
			}
			if ($.isArray(ids)) {
				var bret = true;
				for (var i = 0; i < ids.length; i++) {
					if (ids[i] && ids[i] != '' && !validate(ids[i])) bret = false;
				}
				if (focusFirst && firstValid) {
					//判断是否在tab中
					if ($("#" + firstValid).closest(".tabs-panels").length > 0) {
						var tabid = $("#" + firstValid).closest(".tabs-panels").children("div").has("#" + firstValid)[0].id;
						if (tabid) Base.activeTab(tabid);
					}
					focus(firstValid);
				}
				return bret;
			}
		}

		/**
  *
   * @param ids
   * @param options 弹出消息参数控制
  * @param validType 校验样式类型，控制输入框校验样式，true/false/undifiend, 仅框架组件有效
   * @return {boolean}
   */
		function setValidateStyle(id, options, validType) {
			var obj = getObj(id);
			if (!obj) return false;
			var _op = {
				width: options.width,
				height: options.height,
				position: options.tipPosition,
				info: options.message,
				infoType: options.infoType || "info"
			};
			if (obj.cmptype) {
				Bubble.setTarget(obj.getInput(), _op);
				Bubble.showInfo();
				if (obj.setValidateStyle) obj.setValidateStyle(validType); //添加失败样式
			} else {
				Bubble.setTarget($(obj), _op);
				Bubble.showInfo();
			}
		}

		function clearValidateStyle(ids) {
			var clear = function clear(id) {
				var obj = getObj(id);
				if (!obj) return false;
				if (obj.cmptype) {
					Bubble.hideInfo();
					if (obj.setValidateStyle) obj.setValidateStyle();
				} else {
					Bubble.hideInfo();
					if (obj.tagName && (obj.tagName == 'FIELDSET' || obj.tagName == "DIV" || obj.tagName == "FORM")) {
						TaContainerSupport.cleanValidateStyle(obj.id);
					}
				}
			};
			if (typeof ids == 'string') {
				ids = ids.split(',');
			}
			if ($.isArray(ids)) {
				for (var i = 0; i < ids.length; i++) {
					clear(ids[i]);
				}
			}
		}

		/**
  * 重置id区域的input输入框的值
   * @param ids
   */
		function resetData(ids) {
			var _reset = function _reset(id) {
				var obj = getObj(id);
				if (!obj) return false;
				if (obj.cmptype && obj.reset) {
					obj.reset();
				} else {
					if (obj.tagName && (obj.tagName == 'FIELDSET' || obj.tagName == "DIV" || obj.tagName == "FORM")) {
						TaContainerSupport.resetData(obj.id);
					} else {
						//解决chrome下隐藏的输入框defaultValue无效的问题
						if (obj.type != "hidden") {
							obj.value = obj.defaultValue;
							if (obj.type == "radio" || obj.type == "checkbox") obj.checked = obj.defaultChecked;
						} else {
							if (navigator.userAgent.indexOf("Chrome") > -1) {
								obj.value = '';
							}
						}
					}
				}
			};
			if (typeof ids == 'string') {
				ids = ids.split(',');
			}
			if (jQuery.isArray(ids)) {
				for (var i = 0; i < ids.length; i++) {
					_reset(ids[i]);
				}
			}
			clearValidateStyle(ids);
		}

		/**
   * 清除一个id区域的input输入框的值，置radio/checkbox为非选择模式
   * @method clearData
   * @param {String} ids 某区域id
   */
		function clearData(ids) {
			var _clear = function _clear(id) {
				var obj = getObj(id);
				if (obj.cmptype && obj.setValue) {
					obj.setValue('');
				} else {
					if (obj.tagName && (obj.tagName == 'FIELDSET' || obj.tagName == "DIV" || obj.tagName == "FORM")) {
						TaContainerSupport.clearData(obj.id);
					} else {
						if ($(obj).is(':radio') || $(obj).is(':checkbox')) {
							$(obj).attr("checked", false);
						} else {
							$(obj).val('');
						}
					}
				}
			};

			if (typeof ids == 'string') {
				ids = ids.split(',');
			}
			if (jQuery.isArray(ids)) {
				for (var i = 0; i < ids.length; i++) {
					_clear(ids[i]);
				}
			}
		}

		function cancelBubble(event) {
			if (event == null) event = window.event;
			event.cancelBubble = true;
			event.returnValue = false;
			if (event.stopPropagation) {
				event.stopPropagation();
				event.preventDefault();
			}
		}

		/**
   * 通过身份证号码获取出生年月日
   * @method getIdCardBirthday
   * @param {String} idCard 身份证号码
   * @return {String} yyyy-MM-dd
   */
		function getIdCardBirthday(idCard) {
			var year, month, day;
			// 身份证为15位或者18位
			if (idCard.length == 15) {
				year = idCard.substring(6, 8);
				month = idCard.substring(8, 10);
				day = idCard.substring(10, 12);
			} else {
				year = idCard.substring(6, 10);
				month = idCard.substring(10, 12);
				day = idCard.substring(12, 14);
			}
			// 按照yyyy-MM-dd自动补齐
			if (year.length == 2) year = "19" + year;
			if (month.indexOf("0") == 0) month = month.substring(1);
			if (day.indexOf("0") == 0) day = day.substring(1);
			return year + "-" + month + "-" + day;
		}
		/**
   * 获取身份证号码性别
   * @method getIdCardGender
   * @param {String} idCard  身份证号码
   * @return {String}
   */
		function getIdCardGender(idCard) {
			var gender;
			// 身份证为15位或者18位
			if (idCard.length == 15) {
				gender = idCard.substr(14, 1);
			} else {
				gender = idCard.substr(16, 1);
			}
			return gender % 2 == 0 ? '女' : '男';
		}

		/**
   * 身份证15to18
   * @method idcard218
   * @param {String} sId 身份证号
   * @return {Boolean}
   */
		function idcard218(sId) {
			if (sId.length == 15) {
				if (!/^\d{14}(\d|x)$/i.test(sId)) {
					this.message = "你输入的身份证长度或格式错误";
					return false;
				} else {
					sId = sId.substr(0, 6) + '19' + sId.substr(6, 9);
					sId += getVCode(sId);
				}
			}
			function getVCode(CardNo17) {
				var Wi = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2, 1];
				var Ai = ['1', '0', 'X', '9', '8', '7', '6', '5', '4', '3', '2'];
				var cardNoSum = 0;
				for (var i = 0; i < CardNo17.length; i++) {
					cardNoSum += CardNo17.charAt(i) * Wi[i];
				}var seq = cardNoSum % 11;
				return Ai[seq];
			}
			return sId;
		}

		/**
   * 设置selectData组件的值
   * @method setSelectDataValue
   * @param {String} id, 组件id
   * @param {String} defaultId 隐藏值
   * @param {String}  defaultName 显示值
   * @param {String}  setValue 多选时赋值方式  true:追加  false:覆盖
   */
		function setSelectDataValue(id, defaultId, defaultName, flag) {
			if (id != null && defaultId != null && defaultName != null) {
				var obj = getObj(id);
				if (obj.cmptype == "TaSelectData") {
					obj.setValue(defaultId, defaultName, flag);
				}
			}
		}

		/**
   * 输入框内容全选
   * @param obj 可为单个输入框id,如"aac001"，也可以为一个jquery对象或者dom对象，如$("#aac001")，$("#aac001").get(0);
   */
		function selectValue(obj) {
			if (obj != null) {
				if (typeof obj == "string") {
					$('#' + obj).select();
				} else if ((typeof obj === "undefined" ? "undefined" : _typeof(obj)) == "object") {
					if (obj instanceof jQuery) {
						obj.select();
					} else {
						$(obj).select();
					}
				} else {
					return;
				}
			} else {
				return;
			}
		}

		/**
   * 获取当前值，作为历史数据
   * 获取值结构如下
   * [{ovDto['aac001_old']:'xxxx'}, ovDto['aac001_label']:'xxxx',ovDto['aac001_desc']:'xxxx'},{checkboxgp_old:[1,2,3]}]
   * 存为零时变量
   * @method saveOldValue
   * @param {} aids
   */
		function saveOldValue(submitIds) {
			if (submitIds == null) return;
			var oldValueObj = [];
			var aids = submitIds.split(',');
			for (var i = 0; i < aids.length; i++) {
				if (aids[i] == null || aids[i] == '') continue;
				var obj = getObj(aids[i]);

				if (obj == undefined) continue;

				var $obj = $(obj);

				//yanglq
				if (obj && obj.cmptype != 'datagrid' && ($obj.hasClass('panel') || $obj.hasClass('grid') || obj.cmptype || obj.tagName && (obj.tagName == 'FORM' || obj.tagName == 'FIELDSET' || obj.tagName == 'DIV' || obj.tagName == 'INPUT' || obj.tagName == 'TEXTAREA' || obj.tagName == 'SELECT'))) {
					if (obj.cmptype) obj = $("#" + aids[i]); //下拉框

					for (var j = 0; j < aids.length; j++) {
						//对ids进行校验，不能父子嵌套
						if (aids[j] == null || aids[j] == '') continue;
						var obj2 = getObj(aids[j]);
						if (obj2.cmptype == 'TaSelectInput') obj2 = $("#" + aids[j]);
						if (i != j && obj2.cmptype != 'datagrid') {
							//找到其他对象
							if ($(obj).has($(obj2)).length > 0) {
								alert(aids[j] + "对象在" + aids[i] + "对象里面，指定提交的元素id不能有包含与被包含关系");
								return false;
							}
							if ($(obj2).has($(obj)).length > 0) {
								alert(aids[i] + "对象在" + aids[j] + "对象里面，指定提交的元素id不能有包含与被包含关系");
								return false;
							}
						}
					}
					if ($obj.hasClass("amountfield")) {
						var mnyobj = {};
						mnyobj["__id"] = aids[i];
						mnyobj["ovDto['" + aids[i] + "']"] = $("#" + aids[i] + "_hidden").val().trim().replace(":", "").replace("*", "");
						mnyobj["ovDto['" + aids[i] + "__label']"] = $("#" + aids[i] + "_hidden").parent().parent().find("label").text().trim().replace(":", "").replace("*", "");
						oldValueObj.push(mnyobj);
					}
					$("#" + aids[i]).find("input,textarea").not(":hidden").each(function () {
						if ($(this).hasClass("ffb-input")) {
							var mnyobj = {};
							var id = this.id.replace("_desc", "");
							mnyobj["__id"] = id;
							mnyobj["ovDto['" + id + "']"] = $("#" + id).val().trim().replace(":", "").replace("*", "");
							mnyobj["ovDto['" + id + "__label']"] = $(this).parent().parent().parent().find("label").text().trim().replace(":", "").replace("*", "");
							mnyobj["ovDto['" + id + "__desc']"] = $(this).val().trim().replace(":", "").replace("*", "");
							oldValueObj.push(mnyobj);
						} else {
							var mnyobj = {};
							mnyobj["__id"] = this.id;
							mnyobj["ovDto['" + this.id + "']"] = $(this).val().trim().replace(":", "").replace("*", "");
							mnyobj["ovDto['" + this.id + "__label']"] = $(this).parent().parent().find("label").text().trim().replace(":", "").replace("*", "");
							oldValueObj.push(mnyobj);
						}
					});
				} else if ($obj.hasClass("amountfield")) {
					var mnyobj = {};
					mnyobj["__id"] = aids[i];
					mnyobj["ovDto['" + aids[i] + "']"] = $("#" + aids[i] + "_hidden").val().trim().replace(":", "").replace("*", "");
					mnyobj["ovDto['" + aids[i] + "__label']"] = $("#" + aids[i] + "_hidden").parent().parent().find("label").text().trim().replace(":", "").replace("*", "");
					oldValueObj.push(mnyobj);
				} else {
					alert("提交的submit ids只能是panel,fieldset,box,form elements,form,div,datagrid这些元素的id");
					return false;
				}
			}
			document._oldValueObj = oldValueObj;
			return oldValueObj;
		}
		function spinnerImgClick(id) {
			var spinner = Ta.core.TaUIManager.getCmp(id);
			if (spinner) {
				spinner.spinnerImgClick(id);
			}
		}
		/**
   * 性能最好的插入排序
   */
		function insertSort(arr, sortfn, desc) {
			for (var i = 1; i < arr.length; i++) {
				var tmp = arr[i],
				    j = i;
				while (arr[j - 1] > tmp) {
					arr[j] = arr[j - 1];
					--j;
				}
				arr[j] = tmp;
			}
			return arr;
		}

		/**
  * 针对checkboxgroup、checkbox和radiogrooup、radio，设置选中/不选中
  * @private
  * @method _setChecked
  */
		function _setChecked(id, checked) {
			//modify by xp
			var obj = getObj(id);
			if (obj) {
				if (obj.setChecked) {
					//checkbox和radio
					obj.setChecked(checked);
				} else if (obj.setAllChecked) {
					//tacheckboxGroup
					obj.setAllChecked(checked);
				} else {
					$(obj).attr("checked", checked);
				}
			}
		}

		function setChecked(id) {
			_setChecked(id, true);
		}

		/**
   * 针对checkboxgroup、checkbox和radio，取消选中
   * @private
   * @method setUnChecked
   */
		function setUnChecked(id) {
			// add by xp
			_setChecked(id, false);
		}

		/**
   * 文本框的提示文字信息
   * @method funPlaceholder
   * @param {Object} dom元素,必须是原生的document元素,不能是jquery的对象;
   */
		function funPlaceholder(element) {

			//检测是否需要模拟placeholder
			var placeholder = '';
			if (element && !("placeholder" in document.createElement("input")) && (placeholder = element.getAttribute("placeholder"))) {
				//当前文本控件是否有id, 没有则创建
				var idLabel = element.id;
				if (!idLabel) {
					idLabel = "placeholder_" + new Date().getTime();
					element.id = idLabel;
				}
				//创建label元素
				var eleLabel = document.createElement("label");
				eleLabel.htmlFor = idLabel;
				eleLabel.style.position = "absolute";
				//根据文本框实际尺寸修改这里的margin值
				eleLabel.style.margin = "0 0 0 0";
				eleLabel.style.color = "graytext";
				eleLabel.style.cursor = "text";
				//add by cy 解决ie9下placeholder换行问题
				eleLabel.style.overflow = "hidden";
				eleLabel.style.height = "16px";
				eleLabel.style.display = "block";
				//插入创建的label元素节点
				element.parentNode.insertBefore(eleLabel, element);

				//事件
				element.onfocus = function () {
					eleLabel.innerHTML = "";
				};
				element.onblur = function () {

					if (this.value === "") {
						eleLabel.innerHTML = placeholder;
					}
				};
				//处理点击到label上面,提示不消失
				eleLabel.onclick = function () {
					element.focus();
				};
				element.onpropertychange = function () {
					if (element.value != "") {
						eleLabel.innerHTML = "";
					}
				};

				//样式初始化
				if (element.value === "") {

					eleLabel.innerHTML = placeholder;
				}
			}
		}

		return {
			_getPreFormField: _getPreFormField,
			_getNextFormField: _getNextFormField,
			_goPreFormField: _goPreFormField,
			_goNextFormField: _goNextFormField,
			getObj: getObj,
			getFieldLabel: getFieldLabel,
			setFieldLabel: setFieldLabel,
			_setReadOnly: _setReadOnly,
			setReadOnly: setReadOnly,
			_setEnable: _setEnable,
			setEnable: setEnable,
			setDisabled: setDisabled,
			_setIsRequired: _setIsRequired,
			setRequired: setRequired,
			setDisRequired: setDisRequired,
			setValue: setValue,
			getValue: getValue,
			focus: focus,
			showObj: showObj,
			hideObj: hideObj,
			clearData: clearData,
			cancelBubble: cancelBubble,
			getIdCardBirthday: getIdCardBirthday,
			getIdCardGender: getIdCardGender,
			idcard218: idcard218,
			selectValue: selectValue,
			saveOldValue: saveOldValue,
			spinnerImgClick: spinnerImgClick,
			insertSort: insertSort,
			setChecked: setChecked,
			setUnChecked: setUnChecked,
			funPlaceholder: funPlaceholder,
			setSelectDataValue: setSelectDataValue,

			resetData: resetData,
			validateData: validateData,
			setValidateStyle: setValidateStyle,
			clearValidateStyle: clearValidateStyle
		};
	}
});
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 18 */
/***/ (function(module, exports) {

var hasOwnProperty = {}.hasOwnProperty;
module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = __webpack_require__(67);
var defined = __webpack_require__(30);
module.exports = function (it) {
  return IObject(defined(it));
};


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

var pIE = __webpack_require__(68);
var createDesc = __webpack_require__(42);
var toIObject = __webpack_require__(19);
var toPrimitive = __webpack_require__(29);
var has = __webpack_require__(18);
var IE8_DOM_DEFINE = __webpack_require__(157);
var gOPD = Object.getOwnPropertyDescriptor;

exports.f = __webpack_require__(9) ? gOPD : function getOwnPropertyDescriptor(O, P) {
  O = toIObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return gOPD(O, P);
  } catch (e) { /* empty */ }
  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
};


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has = __webpack_require__(18);
var toObject = __webpack_require__(11);
var IE_PROTO = __webpack_require__(108)('IE_PROTO');
var ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

__webpack_require__(95);
(function (factory) {
	if (true) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(37), __webpack_require__(61), __webpack_require__(55)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {
		factory(jQuery);
	}
})(function ($) {

	__webpack_require__(98);
	$.extend(true, window, {
		TaWindow: TaWindow
	});

	function TaWindow($windowId) {
		var defaults = {
			zIndex: 999999,
			draggable: true,
			resizable: true,
			modal: false,
			// window's property which difference from panel
			title: 'New Window',
			collapsible: true,
			minimizable: true,
			maximizable: true,
			closable: true,
			closed: false
		};
		function taWindow(options, param) {
			if (typeof options == 'string') {
				switch (options) {
					case 'options':
						return $.data($windowId[0], 'window').options;
					case 'window':
						return $.data($windowId[0], 'window').window;
					case 'setTitle':
						return $windowId.each(function () {
							//						$(this).ta3panel('setTitle', param);
							new TaPanel($(this)).ta3panel('setTitle', param);
						});
					case 'open':
						return $windowId.each(function () {
							//						$(this).ta3panel('open', param);
							new TaPanel($(this)).ta3panel('open', param);
						});
					case 'close':
						return $windowId.each(function () {
							//						$(this).ta3panel('close', param);
							new TaPanel($(this)).ta3panel('close', param);
						});
					case 'destroy':
						return $windowId.each(function () {
							//						$(this).ta3panel('destroy', param);
							new TaPanel($(this)).ta3panel('destroy', param);
						});
					case 'refresh':
						return $windowId.each(function () {
							//						$(this).ta3panel('refresh');
							new TaPanel($(this)).ta3panel('refresh');
						});
					case 'resize':
						return $windowId.each(function () {
							//						$(this).ta3panel('resize', param);
							new TaPanel($(this)).ta3panel('resize', param);
						});
					case 'move':
						return $windowId.each(function () {
							//						$(this).ta3panel('move', param);
							new TaPanel($(this)).ta3panel('move', param);
						});
					case 'maximize':
						return $windowId.each(function () {
							//						$(this).ta3panel('maximize');
							new TaPanel($(this)).ta3panel('maximize');
						});
					case 'minimize':
						return $windowId.each(function () {
							//						$(this).ta3panel('minimize');
							new TaPanel($(this)).ta3panel('minimize');
						});
					case 'restore':
						return $windowId.each(function () {
							//						$(this).ta3panel('restore');
							new TaPanel($(this)).ta3panel('restore');
						});
					case 'collapse':
						return $windowId.each(function () {
							//						$(this).ta3panel('collapse', param);
							new TaPanel($(this)).ta3panel('collapse', param);
						});
					case 'expand':
						return $windowId.each(function () {
							//						$(this).ta3panel('expand', param);
							new TaPanel.ta3panel('expand', param);
						});
				}
			}

			options = options || {};
			return $windowId.each(function () {
				init(this, options);
				setProperties(this);
			});
		}

		function setSize(target, param) {
			//			$(target).ta3panel('resize');
			new TaPanel($(target)).ta3panel('resize');
		}

		/**
   * create and initialize window, the window is created based on panel component
   */
		function init(target, options) {
			var state = $.data(target, 'window');
			var opts;
			if (state) {
				opts = $.extend(state.opts, options);
			} else {
				var t = $(target);
				opts = $.extend({}, defaults, {
					title: t.attr('title'),
					collapsible: t.attr('collapsible') ? t.attr('collapsible') == 'true' : undefined,
					minimizable: t.attr('minimizable') ? t.attr('minimizable') == 'true' : undefined,
					maximizable: t.attr('maximizable') ? t.attr('maximizable') == 'true' : undefined,
					closable: t.attr('closable') ? t.attr('closable') == 'true' : undefined,
					closed: t.attr('closed') ? t.attr('closed') == 'true' : undefined,
					modal: t.attr('modal') ? t.attr('modal') == 'true' : undefined,
					//add by cy openwindow 添加最大最小宽高
					maxheight: undefined,
					minheight: undefined,
					maxwidth: undefined,
					minwidth: undefined
				}, options);
				//liys add 弹出框宽度增加百分比配置，兼容屏幕分辨率
				if (opts.width && isNaN(opts.width)) {
					if (opts.width.lastIndexOf("%") == opts.width.length - 1) {
						var tem = opts.width.substring(0, opts.width.length - 1);
						if (!isNaN(tem)) {
							tem = tem / 100;
						}
						opts.width = Math.ceil(getPageArea().width * tem);
						//add by cy 添加最大高度最大宽度,最小高度,最小宽度属性
						if (opts.maxwidth && opts.maxwidth > 0) {
							opts.width = opts.width > opts.maxwidth ? opts.maxwidth : opts.width;
						}
						if (opts.minWidth && opts.minWidth > 0) {
							opts.width = opts.width < opts.minWidth ? opts.minWidth : opts.width;
						}
					}
				}
				//liys add 弹出框高度增加百分比配置，兼容屏幕分辨率
				if (opts.height && isNaN(opts.height)) {
					if (opts.height.lastIndexOf("%") == opts.height.length - 1) {
						var tem = opts.height.substring(0, opts.height.length - 1);
						if (!isNaN(tem)) {
							tem = tem / 100;
						}
						opts.height = Math.ceil(getPageArea().height * tem);
						//add by cy 添加最大高度最大宽度,最小高度,最小宽度属性
						if (opts.maxheight && opts.maxheight > 0) {
							opts.height = opts.height > opts.maxheight ? opts.maxheight : opts.height;
						}
						if (opts.minheight && opts.minheight > 0) {
							opts.height = opts.height < opts.minheight ? opts.minheight : opts.height;
						}
					}
				}
				if (opts.border) {
					//add by cy
					opts.width = opts.width - 2;
					opts.height = opts.height - 2;
				}
				$(target).attr('title', '');
				state = $.data(target, 'window', {});
			}

			// create window
			//			var win = $(target).ta3panel($.extend({}, opts, {
			var win = new TaPanel($(target)).ta3panel($.extend({}, opts, {
				border: true,
				doSize: true, // size the panel, the property undefined in window component
				closed: true, // close the panel
				cls: 'window',
				headerCls: 'window-header',
				bodyCls: 'window-body',
				onBeforeDestroy: function onBeforeDestroy() {
					if (opts.onBeforeDestroy) {
						if (opts.onBeforeDestroy.call(target) == false) return false;
					}
					var state = $.data(target, 'window');
					if (state.mask) state.mask.remove();
				},
				onClose: function onClose() {
					var state = $.data(target, 'window');
					if (state.mask) state.mask.hide();

					if (opts.onClose) opts.onClose.call(target);
				},
				onOpen: function onOpen() {
					var state = $.data(target, 'window');
					var z_index = state.opts.zIndex || defaults.zIndex;
					if (state.mask) {
						state.mask.css({
							display: 'block',
							zIndex: z_index++
						});
					}
					state.window.css('z-index', z_index++);
					//					if (state.mask) state.mask.show();
					//add by cy 直接弹出tawindow框时表格不会重新布局导致页面混乱
					$(target).find(".datagrid").each(function () {
						$(this).triggerHandler("_resize");
					});

					if (opts.onOpen) opts.onOpen.call(target);
				},
				onResize: function onResize(width, height) {
					var state = $.data(target, 'window');
					if (opts.onResize) opts.onResize.call(target, width, height);
				},
				onMove: function onMove(left, top) {
					var state = $.data(target, 'window');
					if (opts.onMove) opts.onMove.call(target, left, top);
				},
				onMinimize: function onMinimize() {
					var state = $.data(target, 'window');
					if (state.mask) state.mask.hide();

					if (opts.onMinimize) opts.onMinimize.call(target);
				},
				onBeforeCollapse: function onBeforeCollapse() {
					if (opts.onBeforeCollapse) {
						if (opts.onBeforeCollapse.call(target) == false) return false;
					}
					var state = $.data(target, 'window');
				},
				onExpand: function onExpand() {
					var state = $.data(target, 'window');
					if (opts.onExpand) opts.onExpand.call(target);
				}
			}));

			var panel = new TaPanel(win);
			// save the window state
			//state.options = win.ta3panel('options');
			state.options = panel.ta3panel('options');
			state.opts = opts;
			//state.window = win.ta3panel('panel');
			state.window = panel.ta3panel('panel');

			// create mask
			if (state.mask) state.mask.remove();
			if (opts.modal == true) {
				state.mask = $('<div class="window-mask"></div>').appendTo('body');
				////modify by cy 蒙层显示优化,蒙层铺满body可以只通过css就可以控制
				state.mask.css({
					display: 'none'
				});
			}

			// if require center the window
			if (state.options.left == null) {
				var width = state.options.width;
				if (state.opts.border) {
					//add by cy
					width = width + 2;
				}
				if (isNaN(width)) {
					width = state.window.outerWidth(true);
				}
				state.options.left = ($(window).width() - width) / 2 + $(document).scrollLeft();
			}
			if (state.options.top == null) {
				var height = state.window.height();
				if (state.opts.border) {
					//add by cy
					height = height + 2;
				}
				if (isNaN(height)) {
					height = state.window.outerHeight(true);
				}
				state.options.top = ($(window).height() - height) / 2 + $(document).scrollTop();
			}

			win.each(function () {
				new TaPanel($(this)).ta3panel('move');
			});
			if (state.opts.closed == false) {
				win.each(function () {
					//					$(this).ta3panel('open');
					new TaPanel($(this)).ta3panel('open');
				});
			}
		}

		/**
   * set window drag and resize property
   */
		function setProperties(target) {
			var state = $.data(target, 'window');

			//state.window.draggable({
			new TaDraggable(state.window).draggable({
				handle: '>div.panel-header>div.panel-title',
				disabled: state.options.draggable == false,
				onStartDrag: function onStartDrag(e) {
					if (state.mask) state.mask.css('z-index', defaults.zIndex++);
					state.window.css('z-index', defaults.zIndex++);

					if (!state.proxy) {
						state.proxy = $('<div class="window-proxy"></div>').insertAfter(state.window);
					}
					state.proxy.css({
						display: 'none',
						zIndex: defaults.zIndex++,
						left: e.data.left,
						top: e.data.top,
						width: $.boxModel == true ? state.window.outerWidth(true) - (state.proxy.outerWidth(true) - state.proxy.width()) : state.window.outerWidth(true),
						height: $.boxModel == true ? state.window.outerHeight(true) - (state.proxy.outerHeight(true) - state.proxy.height()) : state.window.outerHeight(true)
					});
					setTimeout(function () {
						if (state.proxy) state.proxy.show();
					}, 500);
				},
				onDrag: function onDrag(e) {
					state.proxy.css({
						display: 'block',
						left: e.data.left,
						top: e.data.top
					});
					state.window.css({
						display: 'none'
					});

					return false;
				},
				onStopDrag: function onStopDrag(e) {
					if (e.data.left < 0) e.data.left = 0;
					if (e.data.top < 0) e.data.top = 0;
					if ($(window).height() - e.data.top < 30) e.data.top = $(window).height() - 30;
					if ($(window).width() - e.data.left < 60) e.data.left = $(window).width() - 60;
					state.options.left = e.data.left;
					state.options.top = e.data.top;
					//$(target).window('move');
					new TaWindow($(target)).window('move');
					state.proxy.remove();
					state.proxy = null;
					state.window.css({
						display: 'block'
					});
					//如果window被选中需要触发事件，要在这里添加
				}
			});

			//state.window.resizable({
			new TaResizable(state.window).resizable({
				disabled: state.options.resizable == false,
				onStartResize: function onStartResize(e) {
					if (!state.proxy) {
						state.proxy = $('<div class="window-proxy"></div>').insertAfter(state.window);
					}
					state.proxy.css({
						zIndex: defaults.zIndex++,
						left: e.data.left,
						top: e.data.top,
						width: $.boxModel == true ? e.data.width - (state.proxy.outerWidth(true) - state.proxy.width()) : e.data.width,
						height: $.boxModel == true ? e.data.height - (state.proxy.outerHeight(true) - state.proxy.height()) : e.data.height
					});
				},
				onResize: function onResize(e) {
					state.proxy.css({
						left: e.data.left,
						top: e.data.top,
						width: $.boxModel == true ? e.data.width - (state.proxy.outerWidth(true) - state.proxy.width()) : e.data.width,
						height: $.boxModel == true ? e.data.height - (state.proxy.outerHeight(true) - state.proxy.height()) : e.data.height
					});
					return false;
				},
				onStopResize: function onStopResize(e) {
					state.options.left = e.data.left;
					state.options.top = e.data.top;
					state.options.width = e.data.width;
					state.options.height = e.data.height;
					setSize(target);
					state.proxy.remove();
					state.proxy = null;
				}
			});
		}

		function getPageArea() {
			if (document.compatMode == 'BackCompat') {
				if (document.body.className.indexOf("no-scrollbar") < 0) {
					//判断body是否有滚动条  yanglq
					return {
						width: Math.max(document.body.scrollWidth, document.body.clientWidth),
						height: Math.max(document.body.scrollHeight, document.body.clientHeight)
					};
				} else {
					return {
						width: Math.max(document.body.offsetHeight, document.body.clientWidth),
						height: Math.max(document.body.offsetHeight, document.body.clientHeight)
					};
				}
			} else {
				if (document.body.className.indexOf("no-scrollbar") < 0) {
					return {
						width: Math.max(document.documentElement.scrollWidth, document.documentElement.clientWidth),
						height: Math.max(document.documentElement.scrollHeight, document.documentElement.clientHeight)
					};
				} else {
					return {
						width: Math.max(document.documentElement.offsetHeight, document.documentElement.clientWidth),
						height: Math.max(document.documentElement.offsetHeight, document.documentElement.clientHeight)
					};
				}
			}
		}

		// when window resize, reset the width and height of the window's mask
		//modify by cy 蒙层显示优化,蒙层铺满body可以只通过css就可以控制
		//$(window).resize(function(){
		//$('.window-mask').css({
		//	width: $(window).width(),
		//	height: $(window).height()
		//});
		//setTimeout(function(){
		//	$('.window-mask').css({
		//		width: getPageArea().width,
		//		height: getPageArea().height
		//	});
		//}, 50);
		//});
		$.extend(this, { // 为this对象
			"cmptype": 'window', // 将方法注册为公共方法
			"version": "3.13.0",
			"window": taWindow
		});
	}
	return TaWindow;
});

/***/ }),
/* 23 */
/***/ (function(module, exports) {

var core = module.exports = { version: '2.6.5' };
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

// optional / simple context binding
var aFunction = __webpack_require__(12);
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};


/***/ }),
/* 25 */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};


/***/ }),
/* 26 */
/***/ (function(module, exports) {

// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;
module.exports = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var fails = __webpack_require__(4);

module.exports = function (method, arg) {
  return !!method && fails(function () {
    // eslint-disable-next-line no-useless-call
    arg ? method.call(null, function () { /* empty */ }, 1) : method.call(null);
  });
};


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

(function (factory) {
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(62)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {
        factory(jQuery);
    }
})(function ($) {
    $.extend(true, window, {
        TaContainer: TaContainer,

        TaContainerSupport: {
            setReadOnly: taSetReadOnly,
            setEnable: taSetEnable,
            setVisible: taSetVisible,
            setRequired: taSetRequired,
            resetData: taResetData,
            clearData: taClearData,
            doValidate: taDoValidate,
            cleanValidateStyle: taCleanValidateStyle
        }
    });
    function TaContainer() {

        return {
            newSerialize: taSerialize

            // return $.extend(true, {
            //        newSerialize: taSerialize
            //    },window.TaContainerSupport);

        };function taSerialize(id, isIncludeNullFields) {
            var str = "";
            //children
            $("#" + id).find(":input").not(":button").not(".ComponentsSerialize").not($("div.datagrid").find(":input")).not("").each(function () {
                var id = this.getAttribute("realId") || this.id;
                if (id == "") return true;
                var obj = Base.getObj(id);
                if (obj == null) obj = this;
                if ("newSerialize" in obj) {
                    if (str == "") str += obj.newSerialize(this.id, isIncludeNullFields);else str += "&" + obj.newSerialize(this.id, isIncludeNullFields);
                } else {
                    if (str == "") str += $("#" + this.id).taserialize(isIncludeNullFields);else str += "&" + $("#" + this.id).taserialize(isIncludeNullFields);
                }
            });
            //datagrid
            $("#" + id).find("div.datagrid").each(function () {
                var obj = Base.getObj(this.id);
                if (str == "") str += obj.newSerialize(this.id, isIncludeNullFields);else str += "&" + obj.newSerialize(this.id, isIncludeNullFields);
            });
            return str;
        }
    }

    function taSetReadOnly(id, isReadOnly) {
        if (isReadOnly == null) isReadOnly = true;
        var $taObj = $("#" + id);
        if ($taObj) {
            var _doReadOnly = function _doReadOnly(obj) {
                $(obj).attr('readOnly', isReadOnly);
            };

            $taObj.attr('readOnly', isReadOnly);
            $taObj.find(":input[type!=hidden]").not(".datagrid :input").each(function () {
                var a = this.realId || this.id;
                var obj = Base.getObj(a);
                if (obj == null) {
                    _doReadOnly(this);
                } else if (obj.setReadOnly) {
                    obj.setReadOnly(isReadOnly);
                } else {
                    _doReadOnly(obj);
                }
            });
        }
    }
    function taSetEnable(id, enable) {
        if (enable == null) enable = true;
        var $taObj = $("#" + id);
        if ($taObj) {
            var _doEnable = function _doEnable(obj) {
                if (enable) {
                    $(obj).removeAttr('disabled');
                    $(obj).removeAttr('readOnly');
                    $(obj).show();
                } else {
                    $(obj).attr('disabled', 'disabled');
                }
            };

            if (enable) {
                $taObj.removeAttr('disabled');
                $taObj.removeAttr('readOnly');
                if (!$taObj.parent().hasClass("tabs-panels")) //yanglq 防止tab enable后，非当前页显示
                    $taObj.show();
            } else {
                //modify by xp 容器上不能放置disabled属性，IE下容器中的Input会继承容器的disabled属性,造成组件disabled行为异常
                //$taObj.attr('disabled','disabled');
                //$taObj.addClass('disabled');
            }
            $taObj.find(":input[type!=hidden],button").not(".datagrid :input").each(function () {
                var a = this.realId || this.id;
                var obj = Base.getObj(a);
                if (obj == null) {
                    _doEnable(this);
                } else if (obj.setEnable) {
                    if (obj.setReadOnly) obj.setReadOnly(!enable);
                    obj.setEnable(enable);
                } else {
                    _doEnable(obj);
                }
            });
        }
    }

    function taSetVisible(id, isVisiable, isHold) {
        var isShowObj = $("#" + id);
        if (isShowObj) {
            if (isVisiable) {
                isShowObj.show().css('visibility', 'visible');
            } else {
                if (isHold) {
                    isShowObj.css("visibility", "hidden");
                } else {
                    isShowObj.hide();
                }
            }
        }
    }

    function taSetRequired(id, isRequired) {
        var $taObj = $("#" + id);
        if ($taObj) {
            var _doRequired = function _doRequired(obj) {
                if (isRequired) {
                    $(obj).attr('required', 'required');
                } else {
                    $(obj).removeAttr('required');
                }
            };

            $taObj.find(":input[type!=hidden],.checkboxgroup-layout-Container,.radiogroup-layout-Container").not(".datagrid :input,:checkbox,:radio").each(function () {
                var a = this.realId || this.id;
                var obj = Base.getObj(a);
                if (obj == null) {
                    _doRequired(this);
                } else if (obj.cmptype && obj.setRequired) {
                    obj.setRequired(isRequired);
                } else {
                    _doRequired(obj);
                }
            });
        }
    }

    function taResetData(id) {
        var $taObj = $("#" + id);
        if ($taObj) {
            var _doReset = function _doReset(obj) {
                //解决chrome下隐藏的输入框defaultValue无效的问题
                if (obj.type != "hidden") {
                    obj.value = obj.defaultValue;
                    if (obj.type == "radio" || obj.type == "checkbox") obj.checked = obj.defaultChecked;
                } else {
                    if (navigator.userAgent.indexOf("Chrome") > -1) {
                        obj.value = '';
                    }
                }
            };

            $taObj.find(":input").not(".datagrid :input").each(function () {
                var a = this.realId || this.id;
                var obj = Base.getObj(a);
                if (obj == null) {
                    _doReset(this);
                } else if (obj.cmptype && obj.reset) {
                    obj.reset();
                } else {
                    _doReset(obj);
                }
            });
        }
    }

    function taClearData(id) {
        var $taObj = $("#" + id);
        if ($taObj) {
            var _doClear = function _doClear(obj) {
                if ($(obj).is(':radio') || $(obj).is(':checkbox')) {
                    $(obj).attr("checked", false);
                } else {
                    $(obj).val('');
                }
            };

            $taObj.find(":input").not(".datagrid :input").each(function () {
                var a = this.realId || this.id;
                var obj = Base.getObj(a);
                if (obj == null) {
                    _doClear(this);
                } else if (obj.cmptype && obj.setValue) {
                    obj.setValue('');
                } else {
                    _doClear(obj);
                }
            });
        }
    }

    function taDoValidate(id, isHiddenValid, isReadOnlyValid) {
        var $taObj = $("#" + id);
        isReadOnlyValid = isReadOnlyValid === false ? false : true;
        if ($taObj) {
            var validateResult = true;
            $taObj.find(":input[type!=hidden],.checkboxgroup-layout-Container,.radiogroup-layout-Container").not(".datagrid :input,:checkbox,:radio").each(function () {
                var a = this.getAttribute("realid") || this.id;
                var obj = Base.getObj(a);
                if (obj && obj.cmptype && obj.doValidate) {
                    if (typeof obj.getInput == "function") {
                        var input = obj.getInput();

                        if (input.attr('disabled') == true || input.attr('disabled') == 'disabled' || !isHiddenValid && input.is(':hidden') || input.attr('readOnly') == 'readonly' && !isReadOnlyValid) return true;
                    }
                    if (obj.cmptype == "tacheckboxGroup" && (!isHiddenValid && $("#" + a).is(':hidden') || !isReadOnlyValid && $("#" + a).find("input[type=checkbox]")[0].readOnly)) {
                        return true;
                    }
                    if (obj.doValidate() !== true && validateResult === true) {
                        validateResult = a;
                    }
                }
            });
            return validateResult;
        }
    }

    function taCleanValidateStyle(id) {
        var $taObj = $("#" + id);
        if ($taObj) {
            $taObj.find(":input").not(".datagrid :input").each(function () {
                var a = this.realId || this.id;
                var obj = Base.getObj(a);
                if (obj && obj.cmptype && obj.setValidateStyle) {
                    obj.setValidateStyle();
                }
            });
        }
        Bubble.hideInfo(); //清除泡泡
    }

    return TaContainer;
});

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = __webpack_require__(6);
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};


/***/ }),
/* 30 */
/***/ (function(module, exports) {

// 7.2.1 RequireObjectCoercible(argument)
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};


/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

// most Object methods by ES6 should accept primitives
var $export = __webpack_require__(1);
var core = __webpack_require__(23);
var fails = __webpack_require__(4);
module.exports = function (KEY, exec) {
  var fn = (core.Object || {})[KEY] || Object[KEY];
  var exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);
};


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx = __webpack_require__(24);
var IObject = __webpack_require__(67);
var toObject = __webpack_require__(11);
var toLength = __webpack_require__(8);
var asc = __webpack_require__(124);
module.exports = function (TYPE, $create) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  var create = $create || asc;
  return function ($this, callbackfn, that) {
    var O = toObject($this);
    var self = IObject(O);
    var f = ctx(callbackfn, that, 3);
    var length = toLength(self.length);
    var index = 0;
    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
    var val, res;
    for (;length > index; index++) if (NO_HOLES || index in self) {
      val = self[index];
      res = f(val, index, O);
      if (TYPE) {
        if (IS_MAP) result[index] = res;   // map
        else if (res) switch (TYPE) {
          case 3: return true;             // some
          case 5: return val;              // find
          case 6: return index;            // findIndex
          case 2: result.push(val);        // filter
        } else if (IS_EVERY) return false; // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

(function (factory) {
	if (true) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(62)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {
		factory(jQuery);
	}
})(function ($) {
	$.extend(true, window, {
		TaFieldComponent: TaFieldComponent
	});
	function TaFieldComponent() {
		this.newSerialize = function (id, isIncludeNullFields) {
			return $("#" + id).taserialize(isIncludeNullFields);
		};
		this.getInput = function (id) {
			return $("#" + id);
		};
	}

	//	TaFieldComponent.prototype=new TaComponent();
	return TaFieldComponent;
});

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

if (__webpack_require__(9)) {
  var LIBRARY = __webpack_require__(38);
  var global = __webpack_require__(3);
  var fails = __webpack_require__(4);
  var $export = __webpack_require__(1);
  var $typed = __webpack_require__(84);
  var $buffer = __webpack_require__(132);
  var ctx = __webpack_require__(24);
  var anInstance = __webpack_require__(49);
  var propertyDesc = __webpack_require__(42);
  var hide = __webpack_require__(14);
  var redefineAll = __webpack_require__(51);
  var toInteger = __webpack_require__(26);
  var toLength = __webpack_require__(8);
  var toIndex = __webpack_require__(185);
  var toAbsoluteIndex = __webpack_require__(45);
  var toPrimitive = __webpack_require__(29);
  var has = __webpack_require__(18);
  var classof = __webpack_require__(57);
  var isObject = __webpack_require__(6);
  var toObject = __webpack_require__(11);
  var isArrayIter = __webpack_require__(121);
  var create = __webpack_require__(46);
  var getPrototypeOf = __webpack_require__(21);
  var gOPN = __webpack_require__(47).f;
  var getIterFn = __webpack_require__(123);
  var uid = __webpack_require__(43);
  var wks = __webpack_require__(7);
  var createArrayMethod = __webpack_require__(32);
  var createArrayIncludes = __webpack_require__(74);
  var speciesConstructor = __webpack_require__(70);
  var ArrayIterators = __webpack_require__(126);
  var Iterators = __webpack_require__(59);
  var $iterDetect = __webpack_require__(79);
  var setSpecies = __webpack_require__(48);
  var arrayFill = __webpack_require__(125);
  var arrayCopyWithin = __webpack_require__(174);
  var $DP = __webpack_require__(10);
  var $GOPD = __webpack_require__(20);
  var dP = $DP.f;
  var gOPD = $GOPD.f;
  var RangeError = global.RangeError;
  var TypeError = global.TypeError;
  var Uint8Array = global.Uint8Array;
  var ARRAY_BUFFER = 'ArrayBuffer';
  var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;
  var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
  var PROTOTYPE = 'prototype';
  var ArrayProto = Array[PROTOTYPE];
  var $ArrayBuffer = $buffer.ArrayBuffer;
  var $DataView = $buffer.DataView;
  var arrayForEach = createArrayMethod(0);
  var arrayFilter = createArrayMethod(2);
  var arraySome = createArrayMethod(3);
  var arrayEvery = createArrayMethod(4);
  var arrayFind = createArrayMethod(5);
  var arrayFindIndex = createArrayMethod(6);
  var arrayIncludes = createArrayIncludes(true);
  var arrayIndexOf = createArrayIncludes(false);
  var arrayValues = ArrayIterators.values;
  var arrayKeys = ArrayIterators.keys;
  var arrayEntries = ArrayIterators.entries;
  var arrayLastIndexOf = ArrayProto.lastIndexOf;
  var arrayReduce = ArrayProto.reduce;
  var arrayReduceRight = ArrayProto.reduceRight;
  var arrayJoin = ArrayProto.join;
  var arraySort = ArrayProto.sort;
  var arraySlice = ArrayProto.slice;
  var arrayToString = ArrayProto.toString;
  var arrayToLocaleString = ArrayProto.toLocaleString;
  var ITERATOR = wks('iterator');
  var TAG = wks('toStringTag');
  var TYPED_CONSTRUCTOR = uid('typed_constructor');
  var DEF_CONSTRUCTOR = uid('def_constructor');
  var ALL_CONSTRUCTORS = $typed.CONSTR;
  var TYPED_ARRAY = $typed.TYPED;
  var VIEW = $typed.VIEW;
  var WRONG_LENGTH = 'Wrong length!';

  var $map = createArrayMethod(1, function (O, length) {
    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
  });

  var LITTLE_ENDIAN = fails(function () {
    // eslint-disable-next-line no-undef
    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
  });

  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {
    new Uint8Array(1).set({});
  });

  var toOffset = function (it, BYTES) {
    var offset = toInteger(it);
    if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');
    return offset;
  };

  var validate = function (it) {
    if (isObject(it) && TYPED_ARRAY in it) return it;
    throw TypeError(it + ' is not a typed array!');
  };

  var allocate = function (C, length) {
    if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {
      throw TypeError('It is not a typed array constructor!');
    } return new C(length);
  };

  var speciesFromList = function (O, list) {
    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
  };

  var fromList = function (C, list) {
    var index = 0;
    var length = list.length;
    var result = allocate(C, length);
    while (length > index) result[index] = list[index++];
    return result;
  };

  var addGetter = function (it, key, internal) {
    dP(it, key, { get: function () { return this._d[internal]; } });
  };

  var $from = function from(source /* , mapfn, thisArg */) {
    var O = toObject(source);
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var iterFn = getIterFn(O);
    var i, length, values, result, step, iterator;
    if (iterFn != undefined && !isArrayIter(iterFn)) {
      for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {
        values.push(step.value);
      } O = values;
    }
    if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);
    for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {
      result[i] = mapping ? mapfn(O[i], i) : O[i];
    }
    return result;
  };

  var $of = function of(/* ...items */) {
    var index = 0;
    var length = arguments.length;
    var result = allocate(this, length);
    while (length > index) result[index] = arguments[index++];
    return result;
  };

  // iOS Safari 6.x fails here
  var TO_LOCALE_BUG = !!Uint8Array && fails(function () { arrayToLocaleString.call(new Uint8Array(1)); });

  var $toLocaleString = function toLocaleString() {
    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
  };

  var proto = {
    copyWithin: function copyWithin(target, start /* , end */) {
      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
    },
    every: function every(callbackfn /* , thisArg */) {
      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    fill: function fill(value /* , start, end */) { // eslint-disable-line no-unused-vars
      return arrayFill.apply(validate(this), arguments);
    },
    filter: function filter(callbackfn /* , thisArg */) {
      return speciesFromList(this, arrayFilter(validate(this), callbackfn,
        arguments.length > 1 ? arguments[1] : undefined));
    },
    find: function find(predicate /* , thisArg */) {
      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    findIndex: function findIndex(predicate /* , thisArg */) {
      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    forEach: function forEach(callbackfn /* , thisArg */) {
      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    indexOf: function indexOf(searchElement /* , fromIndex */) {
      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    includes: function includes(searchElement /* , fromIndex */) {
      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    join: function join(separator) { // eslint-disable-line no-unused-vars
      return arrayJoin.apply(validate(this), arguments);
    },
    lastIndexOf: function lastIndexOf(searchElement /* , fromIndex */) { // eslint-disable-line no-unused-vars
      return arrayLastIndexOf.apply(validate(this), arguments);
    },
    map: function map(mapfn /* , thisArg */) {
      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    reduce: function reduce(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
      return arrayReduce.apply(validate(this), arguments);
    },
    reduceRight: function reduceRight(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
      return arrayReduceRight.apply(validate(this), arguments);
    },
    reverse: function reverse() {
      var that = this;
      var length = validate(that).length;
      var middle = Math.floor(length / 2);
      var index = 0;
      var value;
      while (index < middle) {
        value = that[index];
        that[index++] = that[--length];
        that[length] = value;
      } return that;
    },
    some: function some(callbackfn /* , thisArg */) {
      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    sort: function sort(comparefn) {
      return arraySort.call(validate(this), comparefn);
    },
    subarray: function subarray(begin, end) {
      var O = validate(this);
      var length = O.length;
      var $begin = toAbsoluteIndex(begin, length);
      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(
        O.buffer,
        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,
        toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin)
      );
    }
  };

  var $slice = function slice(start, end) {
    return speciesFromList(this, arraySlice.call(validate(this), start, end));
  };

  var $set = function set(arrayLike /* , offset */) {
    validate(this);
    var offset = toOffset(arguments[1], 1);
    var length = this.length;
    var src = toObject(arrayLike);
    var len = toLength(src.length);
    var index = 0;
    if (len + offset > length) throw RangeError(WRONG_LENGTH);
    while (index < len) this[offset + index] = src[index++];
  };

  var $iterators = {
    entries: function entries() {
      return arrayEntries.call(validate(this));
    },
    keys: function keys() {
      return arrayKeys.call(validate(this));
    },
    values: function values() {
      return arrayValues.call(validate(this));
    }
  };

  var isTAIndex = function (target, key) {
    return isObject(target)
      && target[TYPED_ARRAY]
      && typeof key != 'symbol'
      && key in target
      && String(+key) == String(key);
  };
  var $getDesc = function getOwnPropertyDescriptor(target, key) {
    return isTAIndex(target, key = toPrimitive(key, true))
      ? propertyDesc(2, target[key])
      : gOPD(target, key);
  };
  var $setDesc = function defineProperty(target, key, desc) {
    if (isTAIndex(target, key = toPrimitive(key, true))
      && isObject(desc)
      && has(desc, 'value')
      && !has(desc, 'get')
      && !has(desc, 'set')
      // TODO: add validation descriptor w/o calling accessors
      && !desc.configurable
      && (!has(desc, 'writable') || desc.writable)
      && (!has(desc, 'enumerable') || desc.enumerable)
    ) {
      target[key] = desc.value;
      return target;
    } return dP(target, key, desc);
  };

  if (!ALL_CONSTRUCTORS) {
    $GOPD.f = $getDesc;
    $DP.f = $setDesc;
  }

  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
    getOwnPropertyDescriptor: $getDesc,
    defineProperty: $setDesc
  });

  if (fails(function () { arrayToString.call({}); })) {
    arrayToString = arrayToLocaleString = function toString() {
      return arrayJoin.call(this);
    };
  }

  var $TypedArrayPrototype$ = redefineAll({}, proto);
  redefineAll($TypedArrayPrototype$, $iterators);
  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
  redefineAll($TypedArrayPrototype$, {
    slice: $slice,
    set: $set,
    constructor: function () { /* noop */ },
    toString: arrayToString,
    toLocaleString: $toLocaleString
  });
  addGetter($TypedArrayPrototype$, 'buffer', 'b');
  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
  addGetter($TypedArrayPrototype$, 'byteLength', 'l');
  addGetter($TypedArrayPrototype$, 'length', 'e');
  dP($TypedArrayPrototype$, TAG, {
    get: function () { return this[TYPED_ARRAY]; }
  });

  // eslint-disable-next-line max-statements
  module.exports = function (KEY, BYTES, wrapper, CLAMPED) {
    CLAMPED = !!CLAMPED;
    var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';
    var GETTER = 'get' + KEY;
    var SETTER = 'set' + KEY;
    var TypedArray = global[NAME];
    var Base = TypedArray || {};
    var TAC = TypedArray && getPrototypeOf(TypedArray);
    var FORCED = !TypedArray || !$typed.ABV;
    var O = {};
    var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
    var getter = function (that, index) {
      var data = that._d;
      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
    };
    var setter = function (that, index, value) {
      var data = that._d;
      if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
    };
    var addElement = function (that, index) {
      dP(that, index, {
        get: function () {
          return getter(this, index);
        },
        set: function (value) {
          return setter(this, index, value);
        },
        enumerable: true
      });
    };
    if (FORCED) {
      TypedArray = wrapper(function (that, data, $offset, $length) {
        anInstance(that, TypedArray, NAME, '_d');
        var index = 0;
        var offset = 0;
        var buffer, byteLength, length, klass;
        if (!isObject(data)) {
          length = toIndex(data);
          byteLength = length * BYTES;
          buffer = new $ArrayBuffer(byteLength);
        } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
          buffer = data;
          offset = toOffset($offset, BYTES);
          var $len = data.byteLength;
          if ($length === undefined) {
            if ($len % BYTES) throw RangeError(WRONG_LENGTH);
            byteLength = $len - offset;
            if (byteLength < 0) throw RangeError(WRONG_LENGTH);
          } else {
            byteLength = toLength($length) * BYTES;
            if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);
          }
          length = byteLength / BYTES;
        } else if (TYPED_ARRAY in data) {
          return fromList(TypedArray, data);
        } else {
          return $from.call(TypedArray, data);
        }
        hide(that, '_d', {
          b: buffer,
          o: offset,
          l: byteLength,
          e: length,
          v: new $DataView(buffer)
        });
        while (index < length) addElement(that, index++);
      });
      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
      hide(TypedArrayPrototype, 'constructor', TypedArray);
    } else if (!fails(function () {
      TypedArray(1);
    }) || !fails(function () {
      new TypedArray(-1); // eslint-disable-line no-new
    }) || !$iterDetect(function (iter) {
      new TypedArray(); // eslint-disable-line no-new
      new TypedArray(null); // eslint-disable-line no-new
      new TypedArray(1.5); // eslint-disable-line no-new
      new TypedArray(iter); // eslint-disable-line no-new
    }, true)) {
      TypedArray = wrapper(function (that, data, $offset, $length) {
        anInstance(that, TypedArray, NAME);
        var klass;
        // `ws` module bug, temporarily remove validation length for Uint8Array
        // https://github.com/websockets/ws/pull/645
        if (!isObject(data)) return new Base(toIndex(data));
        if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
          return $length !== undefined
            ? new Base(data, toOffset($offset, BYTES), $length)
            : $offset !== undefined
              ? new Base(data, toOffset($offset, BYTES))
              : new Base(data);
        }
        if (TYPED_ARRAY in data) return fromList(TypedArray, data);
        return $from.call(TypedArray, data);
      });
      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {
        if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);
      });
      TypedArray[PROTOTYPE] = TypedArrayPrototype;
      if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;
    }
    var $nativeIterator = TypedArrayPrototype[ITERATOR];
    var CORRECT_ITER_NAME = !!$nativeIterator
      && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);
    var $iterator = $iterators.values;
    hide(TypedArray, TYPED_CONSTRUCTOR, true);
    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
    hide(TypedArrayPrototype, VIEW, true);
    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);

    if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {
      dP(TypedArrayPrototype, TAG, {
        get: function () { return NAME; }
      });
    }

    O[NAME] = TypedArray;

    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);

    $export($export.S, NAME, {
      BYTES_PER_ELEMENT: BYTES
    });

    $export($export.S + $export.F * fails(function () { Base.of.call(TypedArray, 1); }), NAME, {
      from: $from,
      of: $of
    });

    if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);

    $export($export.P, NAME, proto);

    setSpecies(NAME);

    $export($export.P + $export.F * FORCED_SET, NAME, { set: $set });

    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);

    if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;

    $export($export.P + $export.F * fails(function () {
      new TypedArray(1).slice();
    }), NAME, { slice: $slice });

    $export($export.P + $export.F * (fails(function () {
      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();
    }) || !fails(function () {
      TypedArrayPrototype.toLocaleString.call([1, 2]);
    })), NAME, { toLocaleString: $toLocaleString });

    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
    if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);
  };
} else module.exports = function () { /* empty */ };


/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

var Map = __webpack_require__(180);
var $export = __webpack_require__(1);
var shared = __webpack_require__(66)('metadata');
var store = shared.store || (shared.store = new (__webpack_require__(183))());

var getOrCreateMetadataMap = function (target, targetKey, create) {
  var targetMetadata = store.get(target);
  if (!targetMetadata) {
    if (!create) return undefined;
    store.set(target, targetMetadata = new Map());
  }
  var keyMetadata = targetMetadata.get(targetKey);
  if (!keyMetadata) {
    if (!create) return undefined;
    targetMetadata.set(targetKey, keyMetadata = new Map());
  } return keyMetadata;
};
var ordinaryHasOwnMetadata = function (MetadataKey, O, P) {
  var metadataMap = getOrCreateMetadataMap(O, P, false);
  return metadataMap === undefined ? false : metadataMap.has(MetadataKey);
};
var ordinaryGetOwnMetadata = function (MetadataKey, O, P) {
  var metadataMap = getOrCreateMetadataMap(O, P, false);
  return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);
};
var ordinaryDefineOwnMetadata = function (MetadataKey, MetadataValue, O, P) {
  getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);
};
var ordinaryOwnMetadataKeys = function (target, targetKey) {
  var metadataMap = getOrCreateMetadataMap(target, targetKey, false);
  var keys = [];
  if (metadataMap) metadataMap.forEach(function (_, key) { keys.push(key); });
  return keys;
};
var toMetaKey = function (it) {
  return it === undefined || typeof it == 'symbol' ? it : String(it);
};
var exp = function (O) {
  $export($export.S, 'Reflect', O);
};

module.exports = {
  store: store,
  map: getOrCreateMetadataMap,
  has: ordinaryHasOwnMetadata,
  get: ordinaryGetOwnMetadata,
  set: ordinaryDefineOwnMetadata,
  keys: ordinaryOwnMetadataKeys,
  key: toMetaKey,
  exp: exp
};


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

(function (factory) {
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(13)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {
        factory(jQuery);
    }
})(function ($) {

    /**
     * 原代码，三板，modify by xp
     * 支持跨域请求函数调用
     * 支持请求结果回调
     */
    //初始化接收消息方法
    if (!window.postMessageListener) window.postMessageListener = function () {
        if (window.attachEvent) {
            window.attachEvent("onmessage", analysisPostMessage);
        } else {
            window.addEventListener("message", analysisPostMessage, true);
        }
    };

    //消息解析
    if (!window.analysisPostMessage) //放置多次声明，多次事件触发
        window.analysisPostMessage = function (e) {
            var obj = e.data; //消息字符串结构:消息头 分隔字符串 消息体
            //有消息分隔字符串的才解析,消息分隔字符串为:|cross-domain|
            if (typeof obj != "string" || obj.indexOf("|cross-domain|") == -1) {
                return;
            }
            var message = obj.split("|cross-domain|");
            var messageHead = message[0]; //消息头,暂无意义
            var messageBody = message[1]; //消息体,请求必须为json格式的字符串,反馈消息则为请求调用函数的结果的json格式字符串
            var callMessage = eval("(" + messageBody + ")");
            //如果是请求消息
            if (messageHead.indexOf("call") != -1) {
                try {
                    var callFun = eval(callMessage.callFun); //消息请求的函数
                    var arg = callMessage.arg || [];
                    if (typeof arg == "string") {
                        arg = arg.split(";");
                    }
                    if (!$.isArray(arg)) {
                        arg = [arg];
                    }
                    if (typeof callFun != "function") {
                        return;
                    } //请求的函数不存在
                    var resultArg = callFun.apply(callFun, arg); //请求执行
                    var callBack = callMessage.callBackFun; //是否反馈结果
                    if (callBack) {
                        sendPostMessage(e.source, callBack, resultArg);
                    }
                } catch (e) {}
            }
        };

    /**
     * 主动发送广播消息
     * target string（iframe控件的ID）/object（iframe window,eq:如果是想父页面发送消息,则传window.parent）
     * callFun string 要访问目标iframe的方法名
     * arg string 要访问目标iframe的方法的参数,用;隔开
     * callBackFun 消息反馈时调用的方法名
     */
    if (!window.sendPostMessage) window.sendPostMessage = function (target, callFun, arg, callBackFun) {
        try {
            var source;
            if (typeof target == "string") {
                source = document.getElementById(target).contentWindow;
            } else if ((typeof target === "undefined" ? "undefined" : _typeof(target)) == "object" && target != null) {
                source = target;
            } else {
                source = window.top;
            }
            var callMessage = {};
            callMessage["callFun"] = callFun;
            callMessage["arg"] = arg || "";
            callMessage["callBackFun"] = callBackFun;
            var msgStr = "call|cross-domain|" + Ta.util.obj2string(callMessage);
            source.postMessage(msgStr, "*");
        } catch (e) {}
    };
    //注册消息接收器
    postMessageListener();
});

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;__webpack_require__(92);
__webpack_require__(93);
(function(factory){
	if (true) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0),__webpack_require__(13),__webpack_require__(28)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {
		factory(jQuery);
	}
}(function($){

	__webpack_require__(94);
	$.extend(true, window, {
		TaPanel : TaPanel
	});

	function TaPanel($panelId){
		var defaults = {
			title: null,
			iconCls: null,
			width: 'auto',
			height: 'auto',
			left: null,
			top: null,
			cls: null,
			headerCls: null,
			bodyCls: null,
			style: {},
			cache: true,
			fit: false,
			border: true,
			doSize: true,	// true to set size and do layout
			noheader: false,
			content: null,	// the body content if specified

			collapsible: false,
			minimizable: false,
			maximizable: false,
			closable: false,
			collapsed: false,
			minimized: false,
			maximized: false,
			closed: false,

			// custom tools, every tool can contain two properties: iconCls and handler
			// iconCls is a icon CSS class
			// handler is a function, which will be run when tool button is clicked
			tools: [],

			href: null,
			loadingMessage: 'Loading...',
			onLoad: function(){},
			onBeforeOpen: function(){},
			onOpen: function(){},
			onBeforeClose: function(){},
			onClose: function(){},
			onBeforeDestroy: function(){},
			onDestroy: function(){},
			onResize: function(width,height){},
			onMove: function(left,top){},
			onMaximize: function(){},
			onRestore: function(){},
			onMinimize: function(){},
			onBeforeCollapse: function(){},
			onBeforeExpand: function(){},
			onCollapse: function(){},
			onExpand: function(){}
		};
		function ta3panel(options, param){
			if (typeof options == 'string'){
				switch(options){
					case 'options':
						return $.data($panelId[0], 'panel').options;
					case 'panel':
						return $.data($panelId[0], 'panel').panel;
					case 'header':
						return $.data($panelId[0], 'panel').panel.find('>div.panel-header');
					case 'body':
						return $.data($panelId[0], 'panel').panel.find('>div.panel-body');
					case 'setTitle':
						return $panelId.each(function(){
							setTitle(this, param);
						});
					case 'open':
						return $panelId.each(function(){
							openPanel(this, param);
						});
					case 'close':
						return $panelId.each(function(){
							closePanel(this, param);
						});
					case 'destroy':
						return $panelId.each(function(){
							destroyPanel(this, param);
						});
					case 'refresh':
						return $panelId.each(function(){
							$.data(this, 'panel').isLoaded = false;
							loadData(this);
						});
					case 'resize':
						return $panelId.each(function(){
							setSize(this, param);
						});
					case 'move':
						return $panelId.each(function(){
							movePanel(this, param);
						});
					case 'maximize':
						return this.each(function(){
							maximizePanel(this);
						});
					case 'minimize':
						return $panelId.each(function(){
							minimizePanel(this);
						});
					case 'restore':
						return $panelId.each(function(){
							restorePanel(this);
						});
					case 'collapse':
						return $panelId.each(function(){
							collapsePanel(this, param);	// param: boolean,indicate animate or not
						});
					case 'expand':
						return $panelId.each(function(){
							expandPanel(this, param);	// param: boolean,indicate animate or not
						});
				}
			}
			options = options || {};
			return $panelId.each(function(){
				var state = $.data(this, 'panel');
				var opts;
				if (state){
					opts = $.extend(state.options, options);
				} else {
					var t = $(this);
					opts = $.extend({}, defaults, {
						width: (parseInt(t.width()) || undefined),
						height: (parseInt(t.height()) || undefined),
						left: (parseInt(t.css('left')) || undefined),
						top: (parseInt(t.css('top')) || undefined),
						title: t.attr('title'),
						iconCls: t.attr('icon'),
						cls: t.attr('cls'),
						headerCls: t.attr('headerCls'),
						bodyCls: t.attr('bodyCls'),
						href: t.attr('href'),
						cache: (t.attr('cache') ? t.attr('cache') == 'true' : undefined),
						fit: (t.attr('fit') ? t.attr('fit') == 'true' : undefined),
						border: (t.attr('border') ? t.attr('border') == 'true' : undefined),
						noheader: (t.attr('noheader') ? t.attr('noheader') == 'true' : undefined),
						collapsible: (t.attr('collapsible') ? t.attr('collapsible') == 'true' : undefined),
						minimizable: (t.attr('minimizable') ? t.attr('minimizable') == 'true' : undefined),
						maximizable: (t.attr('maximizable') ? t.attr('maximizable') == 'true' : undefined),
						closable: (t.attr('closable') ? t.attr('closable') == 'true' : undefined),
						collapsed: (t.attr('collapsed') ? t.attr('collapsed') == 'true' : undefined),
						minimized: (t.attr('minimized') ? t.attr('minimized') == 'true' : undefined),
						maximized: (t.attr('maximized') ? t.attr('maximized') == 'true' : undefined),
						closed: (t.attr('closed') ? t.attr('closed') == 'true' : undefined)
					}, options);
					t.attr('title', '');
					state = $.data(this, 'panel', {
						options: opts,
						panel: wrapPanel(this),
						isLoaded: false
					});
				}

				if (opts.content){
					$(this).html(opts.content);
					if ($.parser){
						$.parser.parse(this);
					}
				}

				addHeader(this);
				setBorder(this);
//				loadData(this);

				if (opts.doSize == true){
					state.panel.css('display','block');
					setSize(this);
				}
				if (opts.closed == true){
					state.panel.hide();
				} else {
					openPanel(this);
				}
			});
		}
		function removeNode(node){
			node.each(function(){
				$(this).find("iframe").attr("src","").remove();//modify by xp 在删除元素前先清理重要元素，解决IE下弹出iframe导致焦点丢失的问题
				$(this).remove();
				if ($.browser.msie){
					this.outerHTML = '';
				}
			});
		}

		function setSize(target, param){
			var opts = $.data(target, 'panel').options;
			var panel = $.data(target, 'panel').panel;
			var pheader = panel.find('>div.panel-header');
			var pbody = panel.find('>div.panel-body');

			if (param){
				if (param.width) opts.width = param.width;
				if (param.height) opts.height = param.height;
				if (param.left != null) opts.left = param.left;
				if (param.top != null) opts.top = param.top;
			}

			if (opts.fit == true){
				var p = panel.parent();
				opts.width = p.width();
				panel.hasClass("window") && (opts.width = p.outerWidth());//add by cy 在window的情况下父元素body有padding导致宽度计算不正确
				opts.height = p.height();
				opts.border && (opts.width=opts.width-2,opts.height=opts.height-2);//add by cy
			}

			panel.css({
				left: opts.left,
				top: opts.top
			});
			panel.css(opts.style);
			panel.addClass(opts.cls);
			pheader.addClass(opts.headerCls);
			pbody.addClass(opts.bodyCls);

			if (!isNaN(opts.width)){
				if ($.boxModel == true){
					panel.width(opts.width - (panel.outerWidth(true) - panel.width()));
					pheader.width(panel.width() - (pheader.outerWidth(true) - pheader.width()));
					pbody.width(panel.width() - (pbody.outerWidth(true) - pbody.width()));
				} else {
					panel.width(opts.width);
					pheader.width(panel.width());
					pbody.width(panel.width());
				}
			} else {
				panel.width('auto');
				pbody.width('auto');
			}
			if (!isNaN(opts.height)){
//				var height = opts.height - (panel.outerHeight()-panel.height()) - pheader.outerHeight();
//				if ($.boxModel == true){
//					height -= pbody.outerHeight() - pbody.height();
//				}
//				pbody.height(height);

				if ($.boxModel == true){
					panel.height(opts.height - (panel.outerHeight(true) - panel.height()));
					pbody.height(panel.height() - pheader.outerHeight(true) - (pbody.outerHeight(true) - pbody.height()));
				} else {
					panel.height(opts.height);
					pbody.height(panel.height() - pheader.outerHeight(true));
				}
			} else {
				pbody.height('auto');
			}
			panel.css('height', null);

			opts.onResize.apply(target, [opts.width, opts.height]);

			panel.find('>div.panel-body>div').triggerHandler('_resize');
		}

		function movePanel(target, param){
			var opts = $.data(target, 'panel').options;
			var panel = $.data(target, 'panel').panel;
			if (param){
				if (param.left != null) opts.left = param.left;
				if (param.top != null) opts.top = param.top;
			}
			panel.css({
				left: opts.left,
				top: opts.top
			});
			opts.onMove.apply(target, [opts.left, opts.top]);
		}

		function wrapPanel(target){
			var panel = $(target).addClass('panel-body').wrap('<div class="panel panelnomargin"></div>').parent();
			panel.bind('_resize', function(){
				var opts = $.data(target, 'panel').options;
				if (opts.fit == true){
					setSize(target);
				}
				return false;
			});

			return panel;
		}

		function addHeader(target){
			var opts = $.data(target, 'panel').options;
			var panel = $.data(target, 'panel').panel;
			removeNode(panel.find('>div.panel-header'));
			if (opts.title && !opts.noheader){
				var header = $('<div class="panel-header"><div class="panel-title">'+opts.title+'</div></div>').prependTo(panel);
				if (opts.iconCls){
					header.find('.panel-title').addClass('panel-with-icon');
					$('<div class="panel-icon"></div>').addClass(opts.iconCls).appendTo(header);
				}
				var tool = $('<div class="panel-tool"></div>').appendTo(header);
				if (opts.maximizable){
					$('<div class="panel-tool-max faceIcon icon-maximization" title="放大或缩小"></div>').appendTo(tool).bind('click', onMax);
				}
				if (opts.minimizable){
					$('<div class="panel-tool-min faceIcon icon-minimize" title="最小化"></div>').appendTo(tool).bind('click', onMin);
				}
				if (opts.closable){
					$('<div class="panel-tool-close faceIcon icon-close" title="关闭"></div>').appendTo(tool).bind('click', onClose);
				}
				if (opts.collapsible){
					$('<div class="panel-tool-collapse faceIcon icon-dbArrow_down" title="'+Base.I18n.getLangText("taface.module.panel.collapsible.title")+'"></div>').appendTo(tool).bind('click', onToggle);//国际化修改，原内容："收縮"
				}
				if (opts.tools){
					for(var i=opts.tools.length-1; i>=0; i--){
						var t = $('<div></div>').addClass(opts.tools[i].iconCls).appendTo(tool);
						if (opts.tools[i].handler){
							t.bind('click', eval(opts.tools[i].handler));
						}
					}
				}
				tool.find('div').hover(
					function(){$(this).addClass('panel-tool-over');},
					function(){$(this).removeClass('panel-tool-over');}
				);
				panel.find('>div.panel-body').removeClass('panel-body-noheader');
			} else {
				panel.find('>div.panel-body').addClass('panel-body-noheader');
			}

			function onToggle(){
				if ($(this).hasClass('icon-dbArrow_up')){
					expandPanel(target, true);
				} else {
					collapsePanel(target, true);
				}
				return false;
			}

			function onMin(){
                if ($(this).siblings(".panel-tool-collapse").hasClass("icon-dbArrow_up")){
                    expandPanel(target, true);
                }
                if ($(this).hasClass('icon-restore')){
                    restorePanel(target,true);
                } else {
                    minimizePanel(target);
                }
				return false;
			}

			function onMax(){
                if ($(this).siblings(".panel-tool-collapse").hasClass("icon-dbArrow_up")){
                    expandPanel(target, true);
                }
				if ($(this).hasClass('icon-restore')){
					restorePanel(target);
				} else {
					maximizePanel(target);
				}
				return false;
			}

			function onClose(){
				closePanel(target);
				return false;
			}
		}

		/**
		 * load content from remote site if the href attribute is defined
		 */
		function loadData(target){
			var state = $.data(target, 'panel');
			if (state.options.href && (!state.isLoaded || !state.options.cache)){
				state.isLoaded = false;
				var pbody = state.panel.find('>div.panel-body');
				pbody.html($('<div class="panel-loading"></div>').html(state.options.loadingMessage));
				pbody.load(state.options.href, null, function(){
					//lly add
					// if (typeof require === 'function') {
					// 	require(['domReady'], function (domReady) {
					// 		domReady(function () {
					// 			require(["taLayout"], function(){
					// 				$(pbody).taLayout();
					// 			})
					// 		});
					// 	});
					// } else {//  删除 by  cy 没有使用requirejs 模式了
						$(pbody).taLayout();
					// }
					state.options.onLoad.apply(target, arguments);
					state.isLoaded = true;
				});
			}
		}

		function openPanel(target, forceOpen){
			var opts = $.data(target, 'panel').options;
			var panel = $.data(target, 'panel').panel;

			if (forceOpen != true){
				if (opts.onBeforeOpen.call(target) == false) return;
			}
			panel.show();
			opts.closed = false;
			opts.onOpen.call(target);

			if (opts.maximized == true) maximizePanel(target);
			if (opts.minimized == true) minimizePanel(target);
			if (opts.collapsed == true) collapsePanel(target);

			if (!opts.collapsed){
				loadData(target);
			}
		}

		function closePanel(target, forceClose){
			var opts = $.data(target, 'panel').options;
			var panel = $.data(target, 'panel').panel;

			if (forceClose != true){
				if (opts.onBeforeClose.call(target) == false) return;
			}
			panel.hide();
			opts.closed = true;
			opts.onClose.call(target);
		}

		function destroyPanel(target, forceDestroy){
			var opts = $.data(target, 'panel').options;
			var panel = $.data(target, 'panel').panel;

			if (forceDestroy != true){
				if (opts.onBeforeDestroy.call(target) == false) return;
			}
			removeNode(panel);
			opts.onDestroy.call(target);
		}

		function collapsePanel(target, animate){
			var opts = $.data(target, 'panel').options;
			var panel = $.data(target, 'panel').panel;
			var body = panel.find('>div.panel-body');
            var header = panel.find('>div.panel-header');
            var tool = header.find('.panel-tool-collapse');
			if (tool.hasClass('icon-dbArrow_up'))return;
			body.stop(true, true);	// stop animation
			if (opts.onBeforeCollapse.call(target) == false) return;

            if(header.find(".panel-tool-max").hasClass("icon-restore")){
                $.data(target, 'panel').originalMax = {
                    width: opts.width,
                    height: opts.height,
                    fit: opts.fit
                };
            }else {
                $.data(target, 'panel').original = {
                    width: opts.width,
                    height: opts.height,
                    left: opts.left,
                    top: opts.top,
                    fit: opts.fit
                };
			}

			setSize(target,{width:opts.width,height:40});
			tool.addClass('icon-dbArrow_up').removeClass('icon-dbArrow_down');
			if (animate == true){
				body.slideUp('normal', function(){
					opts.collapsed = true;
					opts.onCollapse.call(target);
				});
			} else {
				body.hide();
				opts.collapsed = true;
				opts.onCollapse.call(target);
			}
		}

		function expandPanel(target, animate){
			var opts = $.data(target, 'panel').options;
			var panel = $.data(target, 'panel').panel;
			var body = panel.find('>div.panel-body');
			var header = panel.find('>div.panel-header');
			var tool = header.find('.panel-tool-collapse');

			if (!tool.hasClass('icon-dbArrow_up')) return;
			body.stop(true, true);	// stop animation
			if (opts.onBeforeExpand.call(target) == false) return;
			tool.addClass('icon-dbArrow_down').removeClass('icon-dbArrow_up');

			if(header.find(".panel-tool-max").hasClass("icon-restore")){
                var original = $.data(target, 'panel').originalMax;
            }else {
                var original = $.data(target, 'panel').original;
            }

			opts.width = original.width;
			opts.height = original.height;
			opts.fit = original.fit;
			if (animate == true){
				body.slideDown('normal', function(){
					opts.collapsed = false;
					opts.onExpand.call(target);
					loadData(target);
					setSize(target);
				});
			} else {
				body.show();
				opts.collapsed = false;
				opts.onExpand.call(target);
				loadData(target);
				setSize(target);
			}
		}

		function maximizePanel(target){
			var opts = $.data(target, 'panel').options;
			var panel = $.data(target, 'panel').panel;
			var header = panel.find('>div.panel-header');
			var toolMax = header.find('.panel-tool-max'),toolMin = header.find('.panel-tool-min');

			if (toolMax.hasClass('icon-restore')) return;
            toolMax.addClass('icon-restore').removeClass('icon-maximization');
            header.removeClass('header-minimize');

            if (toolMin.hasClass('icon-restore')){
                toolMin.addClass('icon-minimize').removeClass('icon-restore');
            }else {
                $.data(target, 'panel').original = {
                    width: opts.width,
                    height: opts.height,
                    left: opts.left,
                    top: opts.top,
                    fit: opts.fit
                };
			}

			opts.left = 0;
			opts.top = 0;
			opts.fit = true;
            opts.style = {
                "marginTop": 0
            };
			setSize(target);
			opts.minimized = false;
			opts.maximized = true;
			$('>div[fit=true],>form[fit=true]',panel.find('>div.panel-body')).triggerHandler('_resize');
			//针对window第一个为panel作为borderlayout的容器的
			$('>div div.l-layout',panel.find('>div.panel-body')).each(function(){
				$(this).triggerHandler('_resize');
			});
			opts.onMaximize.call(target);
		}

		function minimizePanel(target){
			var opts = $.data(target, 'panel').options;
			var panel = $.data(target, 'panel').panel;
            var header = panel.find('>div.panel-header');
            var toolMax = header.find('.panel-tool-max'),toolMin = header.find('.panel-tool-min');

            if (toolMin.hasClass('icon-restore')) return;
            toolMin.addClass('icon-restore').removeClass('icon-minimize');
            header.addClass('header-minimize');


            if (toolMax.hasClass('icon-restore')){
                toolMax.addClass('icon-maximization').removeClass('icon-restore');
            }else {
                $.data(target, 'panel').original = {
                    width: opts.width,
                    height: opts.height,
                    left: opts.left,
                    top: opts.top,
                    fit: opts.fit
                };
            }
            opts.width = 110;
            opts.height = 40;
            opts.left = 0;
            opts.top = "100%";
            opts.fit = false;
            opts.style = {
                "marginTop": -opts.height
            };
            setSize(target);
			opts.minimized = true;
			opts.maximized = false;
			$('>div[fit=true],>form[fit=true]',panel.find('>div.panel-body')).triggerHandler('_resize');
			//针对window第一个为panel作为borderlayout的容器的
			$('>div div.l-layout',panel.find('>div.panel-body')).each(function(){
				$(this).triggerHandler('_resize');
			});
			opts.onMinimize.call(target);
		}

		function restorePanel(target,Mini){
			var opts = $.data(target, 'panel').options;
			var panel = $.data(target, 'panel').panel;
            var header = panel.find('>div.panel-header');
            if(Mini){
                var tool = header.find('.panel-tool-min');
                header.removeClass('header-minimize');
                tool.addClass('icon-minimize');
            }else {
                var tool = header.find('.panel-tool-max');
                tool.addClass('icon-maximization');
            }

			if (!tool.hasClass('icon-restore')) return;

			panel.show();
			tool.removeClass('icon-restore');
			var original = $.data(target, 'panel').original;
			opts.width = original.width;
			opts.height = original.height;
			opts.left = original.left;
			opts.top = original.top;
			opts.fit = original.fit;
			setSize(target);
			opts.minimized = false;
			opts.maximized = false;
			$('>div[fit=true],>form[fit=true]',panel.find('>div.panel-body')).triggerHandler('_resize');
			//针对window第一个为panel作为borderlayout的容器的
			$('>div div.l-layout',panel.find('>div.panel-body')).each(function(){
				$(this).triggerHandler('_resize');
			});

			opts.onRestore.call(target);
		}

		function setBorder(target){
			var opts = $.data(target, 'panel').options;
			var panel = $.data(target, 'panel').panel;
			if (opts.border == true){
				panel.find('>div.panel-header').removeClass('panel-header-noborder');
				panel.find('>div.panel-body').removeClass('panel-body-noborder');
			} else {
				panel.find('>div.panel-header').addClass('panel-header-noborder');
				panel.find('>div.panel-body').addClass('panel-body-noborder');
			}
		}

		function setTitle(target, title){
			$.data(target, 'panel').options.title = title;
			$(target).panel('header').find('div.panel-title').html(title);
		}

		$(window).unbind('.panel').bind('resize.panel', function(){
			var layout = $('body.layout');
			if (layout.length){
				layout.layout('resize');
			} else {
				$('body>div.panel').triggerHandler('_resize');
			}
		});
		//init(); 调初始化方法
		$.extend(this, { // 为this对象
			"cmptype" : 'panel',// 将方法注册为公共方法
			"version" : "3.13.0",
			"panel": ta3panel,
			"ta3panel" : ta3panel//兼容以前注册到$.fn.panel = $.fn.ta3panel;
		});
	}
	TaPanel.prototype=new TaContainer();
	TaPanel.prototype.constructor = TaPanel;
	return TaPanel;
}));


/***/ }),
/* 38 */
/***/ (function(module, exports) {

module.exports = false;


/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

var META = __webpack_require__(43)('meta');
var isObject = __webpack_require__(6);
var has = __webpack_require__(18);
var setDesc = __webpack_require__(10).f;
var id = 0;
var isExtensible = Object.isExtensible || function () {
  return true;
};
var FREEZE = !__webpack_require__(4)(function () {
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function (it) {
  setDesc(it, META, { value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  } });
};
var fastKey = function (it, create) {
  // return primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function (it, create) {
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function (it) {
  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY: META,
  NEED: false,
  fastKey: fastKey,
  getWeak: getWeak,
  onFreeze: onFreeze
};


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

// 22.1.3.31 Array.prototype[@@unscopables]
var UNSCOPABLES = __webpack_require__(7)('unscopables');
var ArrayProto = Array.prototype;
if (ArrayProto[UNSCOPABLES] == undefined) __webpack_require__(14)(ArrayProto, UNSCOPABLES, {});
module.exports = function (key) {
  ArrayProto[UNSCOPABLES][key] = true;
};


/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

(function (factory) {
	if (true) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {
		factory(jQuery);
	}
})(function ($) {

	$.extend(true, window, {
		TaDatetimeMask: TaDatetimeMask
	});

	function TaDatetimeMask($input) {
		function MaskXtIpt(a, o, opt, type, config) {
			o && (o = $(o)) || (o = this);
			opt || (opt = {});
			var n, i, j, k, b, s, x, lp;
			a || (a = []);
			config || (config = {});

			o.keydown(function (evt) {
				n = evt.keyCode;
				//如果日期框为只读,则不允许进行任何操作
				if (o.attr('readonly') == true || o.attr('readonly') == 'readonly') {
					var oldValue = $(o).val();
					setTimeout(function () {
						$(o).val(oldValue);
						return false;
					}, 0);
				}
				if (n == 13) {
					//回车
					// $dp.hide();此处事件早于日期组件本身，不能隐藏，不然键盘选择日期回车时，不能触发到日期组件的时间回显,放置该动作到Base._goNextFormField
					return true;
				}
			});
			o.keyup(function (evt) {
				var _self = this;
				n = evt.keyCode;
				//如果日期框为只读,则不允许进行任何操作
				if (o.attr('readonly') == true || o.attr('readonly') == 'readonly') {
					return;
				}
				//如果是小键盘输入,则把小键盘转换成大键盘
				if (96 <= n && n <= 105) {
					n = n - 48;
				}
				evt || (evt = window.event || { keyCode: 0 });
				if (evt.ctrlKey || evt.shiftKey || evt.altKey || evt.metaKey) {
					return true;
				}
				if (n == 13) {
					//回车
					return true;
				}

				//=================================以下逻辑重写于 2018-05-29  modify by xiepan
				//=====自动填充当前日期
				if (n == 78) {
					//n 键
					switch (type) {
						case 1:
							this.value = Ta.util.getCurDate();break;
						case 2:
							this.value = Ta.util.getCurDateTime();break;
						case 3:
							this.value = Ta.util.getCurIssue();break;
						case 4:
							this.value = String(Ta.util.getCurDateTime()).substring(11, 19);break;
						case 5:
							this.value = Ta.util.getCurDateMonth();break;
						case 6:
							this.value = Ta.util.getCurDateYear();break;
						case 7:
							this.value = Ta.util.getCurDateFullTime();break;
						case 8:
							this.value = String(Ta.util.getCurDateTime()).substring(11, 16);break;
						case 9:
							this.value = String(Ta.util.getCurDateTime()).substring(0, 16);break;
						case 10:
							this.value = Ta.util.getCurQuarter();break;
						case 0:
							this.value = Ta.util.Date.format(new Date(), config.format);break;
					}
					//范围选择处理
					if (config.range) {
						this.value += " " + config.range + " " + this.value;
					}
					var $this = $(this);
					setTimeout(function () {
						$this.focus();
					}, 10);
					return false;
				}

				//=====离开键位监听
				if (0 == a.length || 112 <= n && 123 >= n || 27 == n || 9 == n || 91 == n || 20 == n || 18 == n || 17 == n || 16 == n || 35 <= n && 46 >= n) return true;

				//是否启用输入时辅助功能 以下逻辑是 按date那边实现的，layDate 组件不一定适用(主要是range 模式)
				if (config.inputAuxiliary === false) {
					$input.triggerHandler("datecompletion");
					return true;
				}

				//=====类型特殊处理
				j = (s = String(this.value)).length;
				if (type == 0) {
					//自定义格式不处理下列逻辑
					$input.triggerHandler("datecompletion");
					return true;
				} else if (type == 7) {
					//TODO 改功能还是不行额
					//wdate 不支持毫秒，会在输入时处理掉录入的数据和 . 需要特殊处理补全回来
					if (48 <= n && n <= 57) {
						while (lp = opt[j]) {
							this.value += lp;
							j = (s = String(this.value)).length;
						}

						this.value += String.fromCharCode(n);
					}
				}

				s = String(this.value);

				//=====数据纠正
				/**
    * 月、日、时纠正
    * 期号纠正
    * 时间纠正
    * 年纠正
    * 季度纠正
     */
				switch (type) {
					case 1:
					case 2:
					case 5:
					case 7:
					case 9:
						if (s.length == 6) {
							this.value = correct(s, 1);
						} else if (s.length == 9) {
							this.value = correct(s, 3);
						} else if (s.length == 12) {
							this.value = correct(s, 2);
						} else if (s.length == 15) {
							this.value = correct(s, 5);
						} else if (s.length == 18) {
							this.value = correct(s, 5);
						}
						break;
					case 3:
						if (s.length == 5) {
							this.value = correct(s, 1);
						}
						break;
					case 4:
					case 8:
						if (s.length == 1) {
							this.value = correct(s, 2);
						} else if (s.length == 4) {
							this.value = correct(s, 5);
						} else if (s.length == 7) {
							this.value = correct(s, 5);
						}
						break;
					case 6:
						break;
					case 10:
						break;
				}

				//=====删除操作
				j = (s = String(this.value)).length;
				if (8 == n) {
					//赋值 lp 、 判断位置是否处于标识分割符位置，删除分隔符要删除分隔符前一位的有效数据
					while (lp = opt[j]) {
						this.value = String(this.value).substring(0, String(this.value).length - 1);
						j = (s = String(this.value)).length;
					}
					return true;
				}

				//=====录入数据格式校验，不成功回退一位输入

				if (0xBD == n) n = 45;

				for (i = 0; i < a.length; i++) {
					k = a[i];
					if (j > k.length) continue; //数字位数不对应规则时，不启用
					b = k[j - 1].test(s);

					if (!b) {
						var maxlength = o.attr('maxlength');
						if (j < maxlength) {
							j = String(o.val(s.substring(0, s.length - 1))).length;
						} else {
							j = String(o.val(s.substring(0, maxlength))).length;
						}
					}
				}

				//赋值 lp 、 判断下个位置是否属于标识分割符位置，自动补充分隔符（虽然 wdate 自己就有补全,但并不满足）
				while (lp = opt[j]) {
					this.value += lp;
					j = (s = String(this.value)).length;
				}

				// for(i = 0; i < a.length; i++)
				// {
				// 	k = a[i];
				//
				// 	if(j > k.length)return false;
				//
				// 	//判断是有尾
				// 	if((s.length == 5 && !o.hasClass("issuefield")) || s.length == 8 || s.length == 11 || s.length == 14 || s.length == 17){
				// 		s = s.substring(0,s.length-2);
				// 		s += String.fromCharCode(n);
				// 	}else {
				// 		var lastChar = s.substring(s.length-1,s.length);
				// 		if(isNaN(lastChar)){
				// 			s = s.substring(0,s.length-1);
				// 			s += String.fromCharCode(n);
				// 		}
				//
				// 	}
				// 	//s += String.fromCharCode(n);
				// 	if((s.length == 4 && !o.hasClass("issuefield"))|| s.length == 7 && !o.hasClass("dateMonthfield") || s.length == 10 && !o.hasClass("datefield")|| s.length == 13 || s.length == 16){
				// 		b = k[j-2].test(s);
				// 	}else{
				// 		b = k[j-1].test(s);
				// 	}
				// 	check(b,this);
				//
				// }
				$input.triggerHandler("datecompletion");
				return false; //}


				/**
    * 纠正
     * @param s 原值
     * @param c 校验值
     * @return {*}
     */
				function correct(s, c) {
					var lastChar = s.substring(s.length - 1, s.length);
					if (lastChar > c) {
						s = s.substring(0, s.length - 1) + "0" + lastChar;
					}
					return s;
				}

				// function check(b,obj){
				// 	if(b){
				// 		j = String(_self.value = s).length;
				// 		//当设置了dateMonth=true时,屏蔽掉月份后面自动生成的'-'符号
				// 		if(o.attr('maxlength') == 7 && j == 7){
				//            _self.value = s;
				// 			//return false;
				// 		}else{
				// 			if((lp = opt[j])){
				// 				//防止输入过快而导致错误
				// 				if(obj.value.substring(4,5) != "-" && obj.value.length > 4)
				// 					$(obj).val(obj.value.substring(0,4) + lp);
				// 				if(obj.value.substring(7,8) != "-" && obj.value.length > 7)
				// 					$(obj).val(obj.value.substring(0,7) + lp);
				// 			}
				// 		}
				// 	}else{//回退操作
				// 		if(j<o.attr('maxlength')){
				// 			j = String(o.val(s.substring(0,s.length-1))).length;
				// 			if(lp = opt[j])o.val(o.val()-lp);
				// 		}
				// 		else{
				// 			s = s.substring(0,s.length-1);
				// 			j = String(o.val()).length;
				// 			o.val(s);
				// 			if(lp = opt[j])o.val(o.val()-lp);
				// 			//check(k[j-1].test(o.val()));
				// 		}
				// 	}
				// }
			});
		}
		function datetimeMask(type, config) {
			switch (type) {
				case 1:
					//2001-01-01格式的时间
					MaskXtIpt([[/\d/, /\d{2}/, /\d{3}/, /\d{4}/, /\d{4}[\-\xBD]/, /\d{4}[\-\xBD][0-1]/, /\d{4}[\-\xBD]((0[1-9])|(1[0-2]))/, /\d{4}[\-\xBD]((0[1-9])|(1[0-2]))[\-\xBD]/, /\d{4}[\-\xBD]((0[1-9])|(1[0-2]))[\-\xBD][0-3]/, /\d{4}[\-\xBD]((0[1-9])|(1[0-2]))[\-\xBD]((0[1-9])|([1-2][0-9])|(3[0-1]))/]], $input, { 4: '-', 7: '-' }, 1, config);
					if ($input[0].value.length > 10) {
						$input[0].value = $input[0].value.substring(0, 10);
					}
					break;
				case 2:
					//2001-01-01 00:00:00 带有时间格式
					MaskXtIpt([[/\d/, /\d{2}/, /\d{3}/, /\d{4}/, /\d{4}[\-\xBD]/, /\d{4}[\-\xBD][0-1]/, /\d{4}[\-\xBD]((0[1-9])|(1[0-2]))/, /\d{4}[\-\xBD]((0[1-9])|(1[0-2]))[\-\xBD]/, /\d{4}[\-\xBD]((0[1-9])|(1[0-2]))[\-\xBD][0-3]/, /\d{4}[\-\xBD]((0[1-9])|(1[0-2]))[\-\xBD]((0[1-9])|([1-2][0-9])|(3[0-1]))/,
					/* 时分秒就加上后面的 */
					/\d{4}[\-\xBD]((0[1-9])|(1[0-2]))[\-\xBD]((0[1-9])|([1-2][0-9])|(3[0-1])) /, /* 空格 */
					/\d{4}[\-\xBD]((0[1-9])|(1[0-2]))[\-\xBD]((0[1-9])|([1-2][0-9])|(3[0-1])) [0-2]/, /* 小时 */
					/\d{4}[\-\xBD]((0[1-9])|(1[0-2]))[\-\xBD]((0[1-9])|([1-2][0-9])|(3[0-1])) (([0-1][0-9])|(2[0-3]))/, /\d{4}[\-\xBD]((0[1-9])|(1[0-2]))[\-\xBD]((0[1-9])|([1-2][0-9])|(3[0-1])) (([0-1][0-9])|(2[0-3])):/, /\d{4}[\-\xBD]((0[1-9])|(1[0-2]))[\-\xBD]((0[1-9])|([1-2][0-9])|(3[0-1])) (([0-1][0-9])|(2[0-3])):[0-5]/, /\d{4}[\-\xBD]((0[1-9])|(1[0-2]))[\-\xBD]((0[1-9])|([1-2][0-9])|(3[0-1])) (([0-1][0-9])|(2[0-3])):[0-5]\d/, /\d{4}[\-\xBD]((0[1-9])|(1[0-2]))[\-\xBD]((0[1-9])|([1-2][0-9])|(3[0-1])) (([0-1][0-9])|(2[0-3])):[0-5]\d:/, /\d{4}[\-\xBD]((0[1-9])|(1[0-2]))[\-\xBD]((0[1-9])|([1-2][0-9])|(3[0-1])) (([0-1][0-9])|(2[0-3])):[0-5]\d:[0-5]/, /\d{4}[\-\xBD]((0[1-9])|(1[0-2]))[\-\xBD]((0[1-9])|([1-2][0-9])|(3[0-1])) (([0-1][0-9])|(2[0-3])):[0-5]\d:[0-5]\d/]], $input, { 4: '-', 7: '-', 10: ' ', 13: ":", 16: ":" }, 2, config);
					if ($input[0].value.length > 19) {
						$input[0].value = $input[0].value.substring(0, 19);
					}
					break;
				case 3:
					//期号，如200101
					MaskXtIpt([[/\d/, /\d{2}/, /\d{3}/, /\d{4}/, /\d{4}[0-1]/, /\d{4}((0[1-9])|(1[0-2]))/]], $input, null, 3, config);
					if ($input[0].value.length > 6) {
						$input[0].value = $input[0].value.substring(0, 6);
					}
					break;
				case 4:
					//00:00:00 带有时间格式
					MaskXtIpt([[/[0-2]/, /(([0-1][0-9])|(2[0-3]))/, /(([0-1][0-9])|(2[0-3])):/, /(([0-1][0-9])|(2[0-3])):[0-5]/, /(([0-1][0-9])|(2[0-3])):[0-5]\d/, /(([0-1][0-9])|(2[0-3])):[0-5]\d:/, /(([0-1][0-9])|(2[0-3])):[0-5]\d:[0-5]/, /(([0-1][0-9])|(2[0-3])):[0-5]\d:[0-5]\d/]], $input, { 2: ':', 5: ':' }, 4, config);
					if ($input[0].value.length > 8) {
						$input[0].value = $input[0].value.substring(0, 8);
					}
					break;
				case 5:
					//2001-01格式的时间
					MaskXtIpt([[/\d/, /\d{2}/, /\d{3}/, /\d{4}/, /\d{4}[\-\xBD]/, /\d{4}[\-\xBD][0-1]/, /\d{4}[\-\xBD]((0[1-9])|(1[0-2]))/]], $input, { 4: '-' }, 5, config);
					if ($input[0].value.length > 7) {
						$input[0].value = $input[0].value.substring(0, 7);
					}
					break;
				case 6:
					//1999年份格式
					MaskXtIpt([[/\d/, /\d{2}/, /\d{3}/, /\d{4}/]], $input, null, 6, config);
					if ($input[0].value.length > 4) {
						$input[0].value = $input[0].value.substring(0, 4);
					}
					break;
				case 7:
					//2001-01-01 00:00:00.000 带有毫秒格式
					MaskXtIpt([[/\d/, /\d{2}/, /\d{3}/, /\d{4}/, /\d{4}[\-\xBD]/, /\d{4}[\-\xBD][0-1]/, /\d{4}[\-\xBD]((0[1-9])|(1[0-2]))/, /\d{4}[\-\xBD]((0[1-9])|(1[0-2]))[\-\xBD]/, /\d{4}[\-\xBD]((0[1-9])|(1[0-2]))[\-\xBD][0-3]/, /\d{4}[\-\xBD]((0[1-9])|(1[0-2]))[\-\xBD]((0[1-9])|([1-2][0-9])|(3[0-1]))/,
					/* 时分秒就加上后面的 */
					/\d{4}[\-\xBD]((0[1-9])|(1[0-2]))[\-\xBD]((0[1-9])|([1-2][0-9])|(3[0-1])) /, /* 空格 */
					/\d{4}[\-\xBD]((0[1-9])|(1[0-2]))[\-\xBD]((0[1-9])|([1-2][0-9])|(3[0-1])) [0-2]/, /* 小时 */
					/\d{4}[\-\xBD]((0[1-9])|(1[0-2]))[\-\xBD]((0[1-9])|([1-2][0-9])|(3[0-1])) (([0-1][0-9])|(2[0-3]))/, /\d{4}[\-\xBD]((0[1-9])|(1[0-2]))[\-\xBD]((0[1-9])|([1-2][0-9])|(3[0-1])) (([0-1][0-9])|(2[0-3])):/, /\d{4}[\-\xBD]((0[1-9])|(1[0-2]))[\-\xBD]((0[1-9])|([1-2][0-9])|(3[0-1])) (([0-1][0-9])|(2[0-3])):[0-5]/, /\d{4}[\-\xBD]((0[1-9])|(1[0-2]))[\-\xBD]((0[1-9])|([1-2][0-9])|(3[0-1])) (([0-1][0-9])|(2[0-3])):[0-5]\d/, /\d{4}[\-\xBD]((0[1-9])|(1[0-2]))[\-\xBD]((0[1-9])|([1-2][0-9])|(3[0-1])) (([0-1][0-9])|(2[0-3])):[0-5]\d:/, /\d{4}[\-\xBD]((0[1-9])|(1[0-2]))[\-\xBD]((0[1-9])|([1-2][0-9])|(3[0-1])) (([0-1][0-9])|(2[0-3])):[0-5]\d:[0-5]/, /\d{4}[\-\xBD]((0[1-9])|(1[0-2]))[\-\xBD]((0[1-9])|([1-2][0-9])|(3[0-1])) (([0-1][0-9])|(2[0-3])):[0-5]\d:[0-5]\d/, /\d{4}[\-\xBD]((0[1-9])|(1[0-2]))[\-\xBD]((0[1-9])|([1-2][0-9])|(3[0-1])) (([0-1][0-9])|(2[0-3])):[0-5]\d:[0-5]\d\./, /\d{4}[\-\xBD]((0[1-9])|(1[0-2]))[\-\xBD]((0[1-9])|([1-2][0-9])|(3[0-1])) (([0-1][0-9])|(2[0-3])):[0-5]\d:[0-5]\d\.\d/, /\d{4}[\-\xBD]((0[1-9])|(1[0-2]))[\-\xBD]((0[1-9])|([1-2][0-9])|(3[0-1])) (([0-1][0-9])|(2[0-3])):[0-5]\d:[0-5]\d\.\d\d/, /\d{4}[\-\xBD]((0[1-9])|(1[0-2]))[\-\xBD]((0[1-9])|([1-2][0-9])|(3[0-1])) (([0-1][0-9])|(2[0-3])):[0-5]\d:[0-5]\d\.\d\d\d/]], $input, { 4: '-', 7: '-', 10: ' ', 13: ":", 16: ":", 19: "." }, 7, config);
					if ($input[0].value.length > 23) {
						$input[0].value = $input[0].value.substring(0, 23);
					}
					break;
				case 8:
					//00:00 日常时间格式（无秒）
					MaskXtIpt([[/[0-2]/, /(([0-1][0-9])|(2[0-3]))/, /(([0-1][0-9])|(2[0-3])):/, /(([0-1][0-9])|(2[0-3])):[0-5]/, /(([0-1][0-9])|(2[0-3])):[0-5]\d/]], $input, { 2: ':' }, 8, config);
					if ($input[0].value.length > 5) {
						$input[0].value = $input[0].value.substring(0, 5);
					}
					break;
				case 9:
					//2001-01-01 00:00 带有无秒的时间格式
					MaskXtIpt([[/\d/, /\d{2}/, /\d{3}/, /\d{4}/, /\d{4}[\-\xBD]/, /\d{4}[\-\xBD][0-1]/, /\d{4}[\-\xBD]((0[1-9])|(1[0-2]))/, /\d{4}[\-\xBD]((0[1-9])|(1[0-2]))[\-\xBD]/, /\d{4}[\-\xBD]((0[1-9])|(1[0-2]))[\-\xBD][0-3]/, /\d{4}[\-\xBD]((0[1-9])|(1[0-2]))[\-\xBD]((0[1-9])|([1-2][0-9])|(3[0-1]))/,
					/* 时分秒就加上后面的 */
					/\d{4}[\-\xBD]((0[1-9])|(1[0-2]))[\-\xBD]((0[1-9])|([1-2][0-9])|(3[0-1])) /, /* 空格 */
					/\d{4}[\-\xBD]((0[1-9])|(1[0-2]))[\-\xBD]((0[1-9])|([1-2][0-9])|(3[0-1])) [0-2]/, /* 小时 */
					/\d{4}[\-\xBD]((0[1-9])|(1[0-2]))[\-\xBD]((0[1-9])|([1-2][0-9])|(3[0-1])) (([0-1][0-9])|(2[0-3]))/, /\d{4}[\-\xBD]((0[1-9])|(1[0-2]))[\-\xBD]((0[1-9])|([1-2][0-9])|(3[0-1])) (([0-1][0-9])|(2[0-3])):/, /\d{4}[\-\xBD]((0[1-9])|(1[0-2]))[\-\xBD]((0[1-9])|([1-2][0-9])|(3[0-1])) (([0-1][0-9])|(2[0-3])):[0-5]/, /\d{4}[\-\xBD]((0[1-9])|(1[0-2]))[\-\xBD]((0[1-9])|([1-2][0-9])|(3[0-1])) (([0-1][0-9])|(2[0-3])):[0-5]\d/]], $input, { 4: '-', 7: '-', 10: ' ', 13: ":" }, 9, config);
					if ($input[0].value.length > 16) {
						$input[0].value = $input[0].value.substring(0, 16);
					}
					break;
				case 10:
					//2001年01季度 季度格式
					MaskXtIpt([[/\d/, /\d{2}/, /\d{3}/, /\d{4}/, /\d{4}\u5e74/, /\d{4}\u5e74(0)/, /\d{4}\u5e74(0[1-4])/, /\d{4}\u5e74(0[1-4])\u5b63/, /\d{4}\u5e74(0[1-4])\u5b63\u5ea6/]], $input, { 4: '\u5E74', 7: '\u5B63', 8: '\u5EA6' }, 10, config);
					if ($input[0].value.length > 9) {
						$input[0].value = $input[0].value.substring(0, 9);
					}
					break;
				case 0:
					//自定义格式输入
					MaskXtIpt(null, $input, null, 0, config);
			}
		}

		$.extend(this, {
			"cmptype": 'datetimeMask', //组建类型
			"UIVersion": "2.0a1", //组建版本
			"datetimeMask": datetimeMask
		});
	}
	return TaDatetimeMask;
});

/***/ }),
/* 42 */
/***/ (function(module, exports) {

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};


/***/ }),
/* 43 */
/***/ (function(module, exports) {

var id = 0;
var px = Math.random();
module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};


/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = __webpack_require__(159);
var enumBugKeys = __webpack_require__(109);

module.exports = Object.keys || function keys(O) {
  return $keys(O, enumBugKeys);
};


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(26);
var max = Math.max;
var min = Math.min;
module.exports = function (index, length) {
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};


/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject = __webpack_require__(2);
var dPs = __webpack_require__(160);
var enumBugKeys = __webpack_require__(109);
var IE_PROTO = __webpack_require__(108)('IE_PROTO');
var Empty = function () { /* empty */ };
var PROTOTYPE = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = __webpack_require__(106)('iframe');
  var i = enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';
  __webpack_require__(110).appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys = __webpack_require__(159);
var hiddenKeys = __webpack_require__(109).concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return $keys(O, hiddenKeys);
};


/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(3);
var dP = __webpack_require__(10);
var DESCRIPTORS = __webpack_require__(9);
var SPECIES = __webpack_require__(7)('species');

module.exports = function (KEY) {
  var C = global[KEY];
  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
    configurable: true,
    get: function () { return this; }
  });
};


/***/ }),
/* 49 */
/***/ (function(module, exports) {

module.exports = function (it, Constructor, name, forbiddenField) {
  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};


/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

var ctx = __webpack_require__(24);
var call = __webpack_require__(172);
var isArrayIter = __webpack_require__(121);
var anObject = __webpack_require__(2);
var toLength = __webpack_require__(8);
var getIterFn = __webpack_require__(123);
var BREAK = {};
var RETURN = {};
var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);
  var f = ctx(fn, that, entries ? 2 : 1);
  var index = 0;
  var length, step, iterator, result;
  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if (result === BREAK || result === RETURN) return result;
  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
    result = call(iterator, f, step.value, entries);
    if (result === BREAK || result === RETURN) return result;
  }
};
exports.BREAK = BREAK;
exports.RETURN = RETURN;


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

var redefine = __webpack_require__(15);
module.exports = function (target, src, safe) {
  for (var key in src) redefine(target, key, src[key], safe);
  return target;
};


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(6);
module.exports = function (it, TYPE) {
  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
  return it;
};


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

(function (factory) {
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(64), __webpack_require__(63)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {
        factory(jQuery);
    }
})(function ($) {
    $.extend(true, window, {
        validateObj: validateObj
    });
    /**
     * 验证对象,实现验证组件和验证逻辑以及提示信息的链接
     * @method setRequired
     * @param {string} id 需要验证组件的id  [必须]
     * @param {obj} $targetObj 需要验证组件的对象 [必须]
     * @param {obj} options 初始化参数 [可选]
     * @param {function} callBackfn 校验一次完成之后的回调函数 会传回值 true/false  [可选]     *
     * @author cy
     */
    function validateObj(id, $targetObj, options, callBackfn) {
        var targetId = id,
            $target = $("#" + id),
            options = $.extend({}, validateObj.defaulty, options),
            validateUtil = new TaValidateUtil(options.validType || null);
        var _op = {
            width: options.bpopTipWidth || "300",
            height: options.bpopTipHeight || "500",
            position: options.bpopTipPosition || "top",
            info: options.bpopTipMsg || "这是提示信息喵"
        };
        function init() {
            $targetObj.on(options.triggerHandles, function () {
                executeValidate();
            }).on(options.removeBobbleHandles, function () {
                Bubble.hideInfo();
            });
        }

        //调用验证做处理
        function executeValidate() {
            Bubble.setTarget($targetObj, _op);

            var rs = validateUtil.doValidate.apply(validateUtil.doValidate, getParams());
            if (rs.result === true) {
                options.bpopTipMsg ? (Bubble.setInfoType("info"), Bubble.setInfo(options.bpopTipMsg), Bubble.showInfo()) : Bubble.hideInfo();
                callBackfn ? callBackfn(true) : setStateStyle(true);
                return true;
            } else if (rs.result === false) {
                Bubble.setInfo(rs.message);
                Bubble.setInfoType("fail-info");
                Bubble.showInfo();
                callBackfn ? callBackfn(false) : setStateStyle(false);
                return false;
            } else {
                //如果是空并且没有必须输入那么不做验证,成为最初状态
                options.bpopTipMsg ? (Bubble.setInfoType("info"), Bubble.setInfo(options.bpopTipMsg), Bubble.showInfo()) : Bubble.hideInfo();
                callBackfn ? callBackfn() : setStateStyle();
                return true;
            }
        }

        function getParams() {
            var values = getValue();
            var params = [];
            params.push(targetId);
            if (options.getValidateValues && $.isArray(values)) {
                params = params.concat(values);
            } else {
                params.push(values);
            }
            return params;
        }

        //获取验证对象的值
        function getValue() {
            if (options.getValidateValues) {
                return options.getValidateValues();
            } else if (id && Base.getObj(targetId) && Base.getObj(targetId).getValue) {
                return Base.getObj(targetId).getValue();
            } else {
                return $targetObj.val();
            }
        }

        //默认验证状态样式调整
        function setStateStyle(value) {
            if (value === false) {
                $targetObj.removeClass("successvalidate").addClass("failvalidate");
                return;
            } else if (value === true) {
                $targetObj.removeClass("failvalidate").addClass("successvalidate");
                return;
            } else {
                $targetObj.removeClass("failvalidate successvalidate");
                return;
            }
        }
        /**
         * 删除验证条件
         * @method removeOrder
         * @param {string} type 删除的验证条件 如 "number"
         */
        function removeOrder(type) {
            validateUtil.removeOrder(type);
        }

        /**
         * 添加验证条件
         * @method addOrder
         * @param {obj} order 添加的验证条件 如 {type:"number",msg:"必须输入number喵"}
         * @param {int} index  索引 添加在原始验证条件的第几个 默认为最开始
         */
        function addOrder(order, index) {
            validateUtil.applyOrder(order, index || 0);
        }

        init();

        $.extend(this, { // 为this对象
            "cmptype": 'validateObj', // 将方法注册为公共方法
            "version": "1.1.0",
            "executeValidate": executeValidate,
            "addOrder": addOrder,
            "removeOrder": removeOrder

        });
    }

    validateObj.defaulty = {
        triggerHandles: "input keydown mouseover focus blur datecompletion", //触发验证的事件
        removeBobbleHandles: "mouseout blur" //触发移除提示泡泡的事件
    };
    return validateObj;
});

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(jQuery) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * ajax前后台数据交互方法，调用方式为Base.xxx();
 * @module Base
 * @class taajax
 * @static
 */
(function (factory) {
	if (true) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(5), __webpack_require__(22), __webpack_require__(36)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {
		factory(jQuery);
	}
})(function ($) {
	$.extend(true, window, {
		Base: core()
	});

	__webpack_require__(96);

	function core() {

		return {
			_enableButtonLayout: _enableButtonLayout,
			showMask: showMask,
			hideMask: hideMask,
			getJson: getJson,
			submit: submit,
			submitForm: submitForm,
			loadValues: loadValues,
			_ajax: _ajax,
			_doSubmitIds: _doSubmitIds,
			_dealdata: _dealdata,
			compareOldData: compareOldData
			/**
    * 设置所有按钮所在面板是否可用
    * @method _enableButtonLayout
    * @private
    * @param {boolean} enable
    */
		};function _enableButtonLayout(enable) {
			if (enable) {
				$("div.panel-button,div.button-panel,div.panel-toolbar").each(function () {
					//$(this).attr('disabled','disabled');
					$("<div class='enableButtonLayout' style='top:" + $(this).offset().top + "px;left:" + $(this).offset().left + "px;height:" + $(this).outerHeight(true) + "px;width:" + $(this).outerWidth(true) + "px'></div>").appendTo($('body'));
				});
				Base.globvar.isSubmitNow = true;
			} else {
				Base.hideMask();
			}
		}
		/**
   * 让某一个面板出现半透明蒙层，提示：读取中
   * @method showMask
   * @param {String} id  面板的id，如果不传或null就是整个页面
   * @param {Boolean} showLoading  是否显示loading的图片和文字，默认为true，如果设置为false不显示图片和文字
   */
		function showMask(id, showLoading) {
			/*var height = $(window).height(),width = $(window).width(),top=0,left=0;*/
			var height = document.body.scrollHeight,
			    width = document.body.scrollWidth,
			    top = 0,
			    left = 0;
			var obj;
			if (id && (obj = document.getElementById(id))) {
				var $obj = $(obj);
				height = $obj.height();
				width = $obj.width();
				top = $obj.offset().top;
				left = $obj.offset().left;

				if ($obj.hasClass('panel') && $('>div.panel-header', $obj).length > 0) {
					top += $('>div.panel-header', $obj).outerHeight(true);
					height -= $('>div.panel-header', $obj).outerHeight(true);
				} else if (obj.tagName.toLowerCase() == 'fieldset') {
					top += 22;
					height -= 5;
					width += 18;
				}
			}
			var loadding = "";
			if (!(showLoading === false)) {
				//i18n:读取中...
				loadding = "<div style='left:" + ((width - left) / 2 - 20) + "px;top:" + ((height - top) / 2 + 10) + "px;width:60px;height:30px;opacity:1;position: absolute;font-size:12px'>" + Base.I18n.getLangText('taface.module.taajax.loading') + "</div>";
			}

			$("<div class='enableButtonLayout " + (showLoading === false ? "" : "loading") + "' style='top:" + top + "px;left:" + left + "px;height:" + height + "px;width:" + width + "px'>" + loadding + "</div>").appendTo($('body'));
		}
		/**
   * 隐藏蒙层
   * @method hideMask
   */
		function hideMask() {
			$("body >div.enableButtonLayout").remove();
			Base.globvar.isSubmitNow = false;
		}
		/**
   * 同步或异步到后台获取返回json格式的内容，默认同步执行
   * @method getJson
   * @param {String} url action地址
   * @param {Object} parameter 入参 json格式对象，例如:{"dto['aac001']":"1000001","dto['aac002']":"01"}
   * @param {Function} callback 返回成功后的回调，入参返回的为json对象和XMLHttpRequest对象，
   *							这里不需要success为true标志，只要后台成功返回json格式的数据都会回调,
   *							<br>例如：function(data){var dataArray = eval(data.fieldData.datalist);},
   *							<br>其中，data为后台返回的数据，datalist是你在action中绑定的id(setData('datalist',obj)),
   *							<br>dataArray是一个数组,访问方式为：dataArray[1].aac003.
   *							<br>注意:action中也可以setList('grid1',list),但不建议在此使用。
   *
   * @param {boolean} async 设置是否异步，默认为false同步
   * @return 返回的json对象
   <br>1.当action中以setData('','')返回时，此对象的调用方式和callback里的方式一样
   <br>2.当action中以writeJsonToClient(obj)返回时，此对象为一个数组。
   */
		function getJson(url, parameter, callback, async, isJsonp) {
			var ret;
			url = url.indexOf('?') == -1 ? url + "?_r=" + Math.random() : url + "&_r=" + Math.random();
			url += "&___businessId=" + Base.globvar.currentMenuId;
			Base._ajax({
				url: url,
				"type": 'POST',
				data: parameter,
				success: function success(data) {
					if ((typeof data === "undefined" ? "undefined" : _typeof(data)) == "object" && !$.isArray(data) && !$.isEmptyObject(data) && typeof data != "string") {
						var tempData = data.fieldData,
						    newData = {};
						for (var i in tempData) {
							if (i.indexOf("_sel_") == 0) {
								newData[i.substring(5)] = tempData[i];
							} else {
								newData[i] = tempData[i];
							}
						}
						data.fieldData = newData;
					}
					ret = data;
					if (typeof callback == "function") {
						callback(data);
					}
				},
				async: async === true ? true : false,
				//dataType:'json'
				dataType: isJsonp == "true" ? 'jsonp' : 'json' //aolei change 2016-12-16 跨域访问支持
			});
			return ret;
		}
		/**
   * 异步提交表单，action必须返回JSON或者null，此方法不能用于页面跳转，通常用于返回表格数据
   * <br>能够自动校验表单
   * <br>能够对后台返回的json进行自动处理。
   * <br> 处理如下：
   * <br>  1、有消息自动提示（根据不同类型提示不同类型的提示框）
   * <br>  2、如果有返回自由格式的内容自动给页面对应的输入对象赋值
   * <br>  3、如果有列表的值，自动给所有列表更新列表内容
   * <br>  4、如果有对表单输入对象或按钮的控制内容，自动根据数据进行控制
   * <br>  5、如果有校验不通过的自动设置不通过的输入对象为校验失败的样式，同时第一个元素获取焦点。
   * <br>  6、如果有设置焦点的数据，自动给数据对应的对象获取焦点。
   * @method submit
   * @param {String} submitIds  需要传递到后台的对象id或容器id,多个id可以用”,“隔开
   * @param {String} url 提交的地址
   * @param {Object/String} parameter 入参 json格式对象，例如:{"dto['aac001']":"1000001","dto['aac002']":"01"}
   * @param {Function} onSubmit 提交前手动检查，如果返回false将不再提交,必须返回true或false
   * @param {Boolean} autoValidate 默认true 是否自动调用Base.validateForm对ids对象进行校验，如果校验失败将不再提交
   * @param {Function} succCallback callback 返回业务成功后的回调，入参返回的为json对象和XMLHttpRequest对象
   <br>例如：function(data){alert(data.lists.grid2.list[0].aac003)}，
   <br>其中data为返回的json数据，grid2是在action中绑定的id(setList('grid2',list))，通常是jsp中datagrid的id.
   * @param {Function} failCallback  业务失败回调，入参返回的为json对象和XMLHttpRequest对象
   * @param {Boolean} isHiddenValid 隐藏框是否验证，默认false 不验证
   * @param {Boolean} isReadOnlyValid 只读框是否验证，默认true 要验证
   */
		function submit(submitIds, url, parameter, onSubmit, autoValidate, _succCallback, _failCallback, isIncludeNullFields, token, isJsonp, isHiddenValid, isReadOnlyValid) {
			if (token == null) token = true;
			autoValidate = autoValidate === false ? false : true;
			isHiddenValid = isHiddenValid === true ? true : false;
			isReadOnlyValid = isReadOnlyValid === false ? false : true;
			if (onSubmit && !onSubmit() || autoValidate && !Base.validateData(submitIds, true, isHiddenValid, isReadOnlyValid)) {
				Base.hideMask();
				return false;
			}
			//在300毫秒以内不显示蒙层
			Base._enableButtonLayout(false);
			var showMaskTime = setTimeout(function () {
				Base.showMask("body");
			}, 300);
			submitIds = submitIds ? submitIds : "";
			var aids = submitIds.split(',');

			var queryStr = _doSubmitIds(aids, parameter, isIncludeNullFields, token);
			//控制参数异常时取消请求
			if (queryStr === false) {
				clearTimeout(showMaskTime);
				Base.hideMask();
				return false;
			}
			//			if(false){//如果是文件上传
			//				var form = Base.getObj(submitIds);
			//				if(aids.length==1 && form && form.tagName=='FORM'){
			//					$(form).attr('action',url);
			//					$(form).attr("enctype","multipart/form-data");
			//					form.submit();
			//				}else{
			//					if(Base.globvar.developMode)alert('文件上传只能传入唯一的form元素id');
			//				}
			//			}else{

			//Base.getHandleStatus
			//根据ids拼接传递的条件字符串
			if (queryStr == "") {
				queryStr += "___businessId=" + Base.globvar.currentMenuId;
			} else {
				queryStr += "&___businessId=" + Base.globvar.currentMenuId;
			}
			Base._ajax({
				"url": url,
				"data": queryStr,
				"succCallback": function succCallback(data, dataType) {
					//data.replaceAll("%0D%0A","\r\n");
					clearTimeout(showMaskTime);
					Base._dealdata(data);
					Base.hideMask();
					if (_succCallback) _succCallback(data, dataType);
					Base._enableButtonLayout(false);
				},
				"failCallback": function failCallback(data, dataType) {
					//data.replaceAll("%0D%0A","\r\n");
					clearTimeout(showMaskTime);
					Base._dealdata(data);
					Base.hideMask();
					if (_failCallback) _failCallback(data, dataType);
					Base._enableButtonLayout(false);
				},
				"type": 'POST'
				//,
				//"async":(async===false?false:true)

				//,"dataType":"json"
				, "dataType": isJsonp == true ? "jsonp" : "json" //aolei change 2016-12-16 跨域访问支持
			});
			//			}
		}
		/**
   * 同步提交form。
   * 主要用途，表单提交后要刷新整个页面或跳转到其他页面的时候以及需要使用文件上传功能的时候使用
   * @method submitForm
   * @param {String} formId form表单的id ,<b>必传</b>
   * @param {Function} onSubmit 提交前执行的函数，如果返回false就不在继续提交表单
   * @param {Boolean} autoValidate 是否对表单进行自动校验，默认为true。
   * @param {String} url 提交的url,如果不传，请在form标签里面的aciton属性填写。
   * @param {String} parameter 参数json格式{"dto['aac001']":"1000001","dto['aac002']":"01"}。
   * @param {Boolean} isHiddenValid 隐藏框是否验证，默认false 不验证
   * @param {Boolean} isReadOnlyValid 只读框是否验证，默认true 要验证
   */
		function submitForm(formId, onSubmit, autoValidate, url, parameter, isHiddenValid, isReadOnlyValid) {
			Base.showMask();
			autoValidate = autoValidate === false ? false : true;
			isHiddenValid = isHiddenValid === true ? true : false;
			isReadOnlyValid = isReadOnlyValid === false ? false : true;
			//2017-3-16 lanyc修改  显式声明form
			var form = null;
			if (formId) {
				form = document.getElementById(formId);
			} else {
				alert(Base.I18n.getLangText('taface.module.taajax.checkInfo.formidisnull')); //i18n:传入formId为空
				return false;
			}
			if (!form) {
				alert(Base.I18n.getLangText('taface.module.taajax.checkInfo.formisnotexist')); //i18n:找不到需要提交的form元素
				return false;
			}
			if (onSubmit && !onSubmit() || autoValidate && !Base.validateData(formId, true, isHiddenValid, isReadOnlyValid)) {
				Base.hideMask();
				return false;
			}
			if (parameter) {
				url += "?" + jQuery.param(parameter);
			}
			if (url.indexOf('?') == -1) {
				url += "?___businessId=" + Base.globvar.currentMenuId;
			} else {
				url += "&___businessId=" + Base.globvar.currentMenuId;
			}
			//2017-3-16 lanyc修改  增加var修饰符
			var $form = $(form);
			if (url) {
				//ie8不识别form.action
				$form.attr("action", url);
			}
			$("div.datagrid").each(function () {
				var gridId = $(this).attr('id');
				if (!document.getElementById(gridId + '_selected')) {
					$form.append("<input type=\"hidden\" id=\"" + gridId + "_selected\" name=\"gridInfo['" + gridId + "_selected']\"/>");
					document.getElementById(gridId + '_selected').value = Ta.util.obj2string(Base.getGridSelectedRows(gridId));
				} else {
					document.getElementById(gridId + '_selected').value = Ta.util.obj2string(Base.getGridSelectedRows(gridId));
				}

				if (!document.getElementById(gridId + '_modified')) $form.append("<input type=\"hidden\" id=\"" + gridId + "_modified\" name=\"gridInfo['" + gridId + "_modified']\" value=\"" + Ta.util.obj2string(Base.getGridModifiedRows(gridId)) + "\"/>");else document.getElementById(gridId + '_modified').value = Ta.util.obj2string(Base.getGridModifiedRows(gridId));
				if (!document.getElementById(gridId + '_removed')) $form.append("<input type=\"hidden\" id=\"" + gridId + "_removed\" name=\"gridInfo['" + gridId + "_removed']\" value=\"" + Ta.util.obj2string(Base.getGridRemovedRows(gridId)) + "\"/>");else document.getElementById(gridId + '_removed').value = Ta.util.obj2string(Base.getGridRemovedRows(gridId));

				if (!document.getElementById(gridId + '_added')) $form.append("<input type=\"hidden\" id=\"" + gridId + "_added\" name=\"gridInfo['" + gridId + "_added']\" value=\"" + Ta.util.obj2string(Base.getGridAddedRows(gridId)) + "\"/>");else document.getElementById(gridId + '_added').value = Ta.util.obj2string(Base.getGridAddedRows(gridId));
			});
			//			var $tempSubmit = null;
			//			if ($("#__submitkey__").val() != undefined) {
			//				var $form = $(form);
			//				var value = $("#__submitkey__").val();
			//				$tempSubmit = $("<input type=\"hidden\" " + "value=\"" + value + "\"" + "name=\"__submitkey__\"/>");
			//				$form.append($tempSubmit);
			//			}
			form.submit();

			//			if ($tempSubmit != null) {
			//				$tempSubmit.remove();
			//			}
		}
		/**
   * 根据某些输入表单的值获取页面数据
   * 对返回数据的处理如submitform。
   * @method loadValues
   * @private
   * @param {String/Array} submitids 指定作为参数的输入对象的id或name，如果多个请传入输入,如:["aac001","aac002"]
   * 								   框架会自动获取这些输入对象的值作为参数传递过去。 可以为空。
   * @param {Object} parameter 手工传入参数 json格式对象，例如:{"dto['aac001']":"1000001","dto['aac002']":"01"}
   * @param {Function} succCallback 返回业务成功后的回调，入参返回的为json对象和XMLHttpRequest对象
   * @param {Function} failCallbackak  业务失败或系统异常失败回调，入参XMLHttpRequest对象
   * @param {boolean} async async 设置是否异步，默认为true
   * @deprecated
   */
		function loadValues(submitids, url, parameter, succCallback, failCallback, async) {}

		/**
   * 异步或同步交互
   * options["succCallback"] 返回的数据里面有success=true  被调用
   * options["failCallback"] 返回的数据里面有success=false  被调用
   * 其他配置选项与jQuery.ajax一样
   * @param {object} options jQuery.ajax的配置项
   */
		//var tempajax = $.ajax;
		function _ajax(options) {

			//			url,parameter,succCallback,failCallback,type,async
			var _options = options;
			if (!_options["url"]) {
				throw Base.I18n.getLangText('taface.module.taajax.checkInfo.urlisnull'); //i18n:必须传入URL参数.
			}
			//将url中的中文转换成utf-8
			_options["url"] = encodeURI(_options["url"]);
			var error = false; //http错误
			var _data = null,
			    dataType = ""; //返回的数据
			var succCallback = options["succCallback"],
			    failCallback = options["failCallback"];
			delete _options["succCallback"];
			delete _options["failCallback"];

			_options["complete"] = function (_XMLHTTPRequest, textStatus) {
				Base._enableButtonLayout(false);
				if (_XMLHTTPRequest && _XMLHTTPRequest.getResponseHeader) {
					if (_XMLHTTPRequest.getResponseHeader('__timeout')) {
						alert(Base.I18n.getLangText('taface.module.taajax.account.__timeout')); //i18n:操作提示：会话已经超时，请重新登录！
						sendPostMessage(window.top, "logout");
						return;
					}
					if (_XMLHTTPRequest.getResponseHeader('__forbidden')) {
						Base.alert(Base.I18n.getLangText('taface.module.taajax.account.__forbidden', this.url)); //i18n:帐号在其他地方登录，您已被迫下线！
						return;
					}
					if (_XMLHTTPRequest.getResponseHeader('__exception')) {
						Base._dealdata(eval("(" + _XMLHTTPRequest.responseText + ")"));
						return;
					}
					if (_XMLHTTPRequest.getResponseHeader('__samelogin')) {
						alert(Base.I18n.getLangText('taface.module.taajax.account.__samelogin')); //i18n:系统访问权限提示：你目前没有权限访问：xxx
						top.location.href = 'index.jsp?randId=' + parseInt(1000 * Math.random());
						return;
					}
				}
				if (error) {
					//异常
					/*if(textStatus==="parsererror"){//jquery解析错误
      alert(['返回的数据格式不满足json格式，解析错误:\n',_data].join(','));
      }else{
      alert(['执行发生异常,可能网络连接失败'].join(','))
      }*/
					var data = {};
					try {
						data = JSON.parse(_data);
					} catch (err) {}
					var msg = data.msg;
					var developMode = Base.globvar.developMode;
					if (developMode) {
						if (data.errorDetail) {
							//详细信息 查看详情
							var flag = Base.globvar.isOpenErrorDetail;
							if ("true" == flag) {
								msg += "&nbsp;&nbsp;&nbsp;<div><a onClick=\"new TaWindow ($('<div style=overflow:auto>'+$('#_expwinerrmsg').html()+'</div>').appendTo('body')).window({width:600,height:400,title:Base.I18n.getLangText('taface.module.taajax.errorInfo.detail')})\">[" + Base.I18n.getLangText('taface.module.taajax.errorInfo.viewdetail') + "]</a></div><div id='_expwinerrmsg' style='display:none'><hr>" + data.errorDetail + "</div>";
							} else {
								msg += "&nbsp;&nbsp;&nbsp;<div><a onClick=\"new TaWindow ($('<div style=overflow:auto>'+$('#_expwinerrmsg').html()+'</div>').appendTo('body')).window({width:600,height:400,title:Base.I18n.getLangText('taface.module.taajax.errorInfo.detail')})\"></div>";
							}
						}
					}
					if (msg) Base.alert(msg, 'error');
				} else {
					if (_data) {
						if (_data.success || typeof _data === 'string') {
							//业务成功success==true或返回的是字符串
							if (succCallback) succCallback.call(this, _data, dataType);
						} else if (_data.success != undefined && _data.success.toString().toLowerCase() == "false") {
							//业务失败
							if (failCallback) failCallback.call(this, _data, dataType);
						} else {//TODO 其他类型的返回

						}
					}
				}
			};
			var success = _options["success"];
			_options["success"] = success ? function (data, statusText) {
				_data = data;
				success(data, statusText);
			} : function (data, statusText) {
				_data = data;
			};
			_options["error"] = function (_XMLHTTPRequest, errmsg, exception) {
				//errmsg需要处理timeout/parseerror情况
				//其他异常不特殊告诉，直接显示
				_data = _XMLHTTPRequest.responseText;
				error = true;
			};
			_options["dataFilter"] = function (data, type) {
				dataType = type;
				return data;
			};
			_options["beforeSend"] = function (_XMLHTTPRequest) {
				//确保post的时候不会乱码
				_XMLHTTPRequest.setRequestHeader("Content-Type", "application/x-www-form-urlencoded; charset=utf-8");
				return true;
			};
			if (_options["dataType"] == "jsonp") {
				_options["jsonp"] = "callbackparam";
				_options["jsonpCallback"] = "jsonpCallback";
			}
			jQuery.ajax(_options);
			//tempajax(_options);
		}
		////////////提取方法
		function _doSubmitIds(aids, parameter, isIncludeNullFields, token) {
			var queryStr = "";
			for (var i = 0; i < aids.length - 1; i++) {
				if (aids[i] == null || aids[i] == '') continue;
				for (var j = i + 1; j < aids.length; j++) {
					//对ids进行校验，不能父子嵌套
					if (aids[j] == null || aids[j] == '') continue;
					if (i != j) {
						//找到其他对象
						if ($("#" + aids[i]).has($("#" + aids[j])).length > 0) {
							alert(Base.I18n.getLangText('taface.module.general.checkInfo.IdMutexCheck', aids[j], aids[i])); //i18n:aids[j]+"对象在"+aids[i]+"对象里面，指定提交的元素id不能有包含与被包含关系
							return false;
						}
						if ($("#" + aids[j]).has($("#" + aids[i])).length > 0) {
							alert(Base.I18n.getLangText('taface.module.general.checkInfo.IdMutexCheck', aids[i], aids[j])); //i18n:aids[i]+"对象在"+aids[j]+"对象里面，指定提交的元素id不能有包含与被包含关系
							return false;
						}
					}
				}
			}
			if (aids) {
				for (var i = 0; i < aids.length; i++) {
					if (aids[i] == null || aids[i] == '') continue;
					var obj = Base.getObj(aids[i]);
					if (obj == undefined) continue;
					if ("newSerialize" in obj) {
						if (queryStr == "") queryStr += obj.newSerialize(aids[i], isIncludeNullFields);else queryStr += "&" + obj.newSerialize(aids[i], isIncludeNullFields);
					} else {

						//modify by xp 处理表格分页信息重复提交的问题;需要处理自己；需要不处理type=hidden 输入框，该类型输入框由组件自己实现newSerialize 实现
						$("#" + aids[i]).find(":input").add("#" + aids[i] + ":input").not(".ComponentsSerialize").not(":button").not(".datagrid :input").not("").each(function () {
							if (this.id == "") return true; //跳到下一个循环
							var obj = null;
							if (this.getAttribute("realId")) {
								//change by cy 使用realid判定是否是有隐藏框等
								obj = Base.getObj(this.getAttribute("realId"));
							} else {
								obj = Base.getObj(this.id);
							}
							if (obj == null) obj = this;
							if ("newSerialize" in obj) {
								if (queryStr == "") queryStr += obj.newSerialize(this.id, isIncludeNullFields);else queryStr += "&" + obj.newSerialize(this.id, isIncludeNullFields);
							} else {
								if (queryStr == "") queryStr += $("#" + this.id).taserialize(isIncludeNullFields);else queryStr += "&" + $("#" + this.id).taserialize(isIncludeNullFields);
							}
						});

						//add by xp  处理panel、box等未注册容器...提交时，无表格变动信息的问题
						//datagrid add modify edit delete...
						$(obj).find("div.datagrid").each(function () {
							var _obj = Base.getObj(this.id);
							if (queryStr == "") queryStr += _obj.newSerialize(this.id, isIncludeNullFields);else queryStr += "&" + _obj.newSerialize(this.id, isIncludeNullFields);
						});
					}
				}
			}
			//传表格隐藏信息（主要是分页信息）
			$("div.datagrid").each(function () {
				var _flag = true;
				for (var i = 0; i < aids.length; i++) {
					if (aids[i] && aids[i] != '') {
						if ($("#" + aids[i]).is($(this)) || $("#" + aids[i]).has($(this)).length > 0) {
							_flag = false;
						}
					} else {
						continue;
					}
				}
				//不在adis包含的datagrid
				if (_flag) {
					if (queryStr == "") queryStr = $("input:hidden[name^=gridInfo]", $(this)).taserialize(isIncludeNullFields);else queryStr += "&" + $("input:hidden[name^=gridInfo]", $(this)).taserialize(isIncludeNullFields);
				}
			});
			if (document._dataSubmitStore && document._dataSubmitStore.length > 0) {
				parameter = $.extend(parameter, document._dataSubmitStore[0]);
			}
			//对queryStr处理
			var parameterOld = Base.compareOldData(aids);
			parameter = $.extend(parameter, parameterOld);
			if (parameter) {
				if (queryStr == "") {
					queryStr = jQuery.param(parameter);
				} else {
					queryStr += "&" + jQuery.param(parameter);
				}
			}
			return queryStr;
		}

		function _dealdata(data) {
			//只有json格式的时候才处理
			if ((typeof data === "undefined" ? "undefined" : _typeof(data)) != "object") return;

			//优先处理selectData,modify by zzb
			if (data.selectData) {
				var _lists = data.selectData;
				for (var list in _lists) {
					Base.setSelectInputData(list, _lists[list]);
				}
			}
			//有fieldData数据的时候
			if (data.fieldData) {
				//					var params = {},newData = data.fieldData;
				//					for(var i in newData){
				//						if(i.indexOf("_sel_") == 0){
				//							params[i.substring(5)] = newData[i];
				//						}else{
				//							params[i] = newData[i];
				//						}
				//					}
				Base.setValue(data.fieldData);
				//data.fieldData = params;
			}
			//有validateErrors数据
			if (data.validateErrors) {
				var focus = null,
				    _errors = data.validateErrors;
				for (var fieldId in _errors) {
					if (!focus) focus = fieldId;
					Base.setValidateStyle(fieldId, { message: _errors[fieldId] }, false);
				}
				//如果后台没有设置focus，并且有validateErrors数据的时候就把焦点置于第一个错误的地方
				if (focus && !data.focus) {
					data.focus = focus;
				}
			}
			//有lists数据
			if (data.lists) {
				var _lists = data.lists;
				for (var list in _lists) {
					if (list == "_dataSubmitStore") document._dataSubmitStore = _lists[list];
					if (list == "_oldValueObj") document._oldValueObj = _lists[list]['list'];
					Base._setGridData(list, _lists[list]);
				}
			}

			//有operation数据
			if (data.operation) {
				var _operation = data.operation;
				for (var key in _operation) {
					var types = _operation[key];
					for (var i = 0; i < types.length; i++) {
						var type = types[i];
						switch (type) {
							case 'readonly':
								Base.setReadOnly(key);
								break;
							case 'enable':
								Base.setEnable(key);
								break;
							case 'disabled':
								Base.setDisabled(key);
								break;
							case 'focus':
								Base.selectTab(key);
								break;
							case 'hide':
								Base.hideObj(key);
								break;
							case 'show':
								Base.showObj(key);
								break;
							case 'unvisible':
								Base.hideObj(key, true);
								break;
							case 'resetForm':
								Base.resetData(key);
								break;
							case 'required':
								Base.setRequired(key);
								break;
							case 'disrequired':
								Base.setDisRequired(key);
								break;
						}
					}
				}
				/*for(var i=0;i<_operation.length;i++){
     var op = _operation[i];
     switch(op.type){
     case 'readonly':
     Base.setReadOnly(op.ids);
     break;
     case 'enable':
     Base.setEnable(op.ids);
     break;
     case 'disabled':
     Base.setDisabled(op.ids);
     break;
     case 'select_tab':
     Base.selectTab(op.ids);
     break;
     case 'hide':
     Base.hideObj(op.ids);
     break;
     case 'show':
     Base.showObj(op.ids);
     break;
     case 'unvisible':
     Base.hideObj(op.ids,true);
     break;
     case 'resetForm':
     Base.resetForm(op.ids[0]);
     break;
     case 'required':
     Base.setRequired(op.ids);
     break;
     case 'disrequired':
     Base.setDisRequired(op.ids);
     break;
     }
     }*/
			}
			//有msg
			if (data.msg) {
				var focus = null;
				if (data.focus) {
					focus = function (_fieldId) {
						return function () {
							Base.focus(_fieldId, 100);
						};
					}(data.focus);
				}
				/*var msg = data.msg;
     var developMode = Base.globvar.developMode;
     if(developMode){
     if(data.errorDetail){
     //							msg += "&nbsp;&nbsp;&nbsp;<div><a onClick=\"$('<div style=overflow:auto>'+$('#_expwinerrmsg').html()+'</div>').appendTo('body').window({width:600,height:400,title:'详细信息'})\">[查看详细]</a></div><div id='_expwinerrmsg' style='display:none'><hr>"+data.errorDetail+"</div>";
     //aolei modify window 调用方式变了
     msg += "&nbsp;&nbsp;&nbsp;<div><a onClick=\"new TaWindow ($('<div style=overflow:auto>'+$('#_expwinerrmsg').html()+'</div>').appendTo('body')).window({width:600,height:400,title:'详细信息'})\">[查看详细]</a></div><div id='_expwinerrmsg' style='display:none'><hr>"+data.errorDetail+"</div>";
     }
     }
     Base.alert(msg,data.success?'success':'error',focus);*/
				// 将异步异常的处理逻辑全部放到_options["complete"] 中的error中去
			}
			//jsonp异常处理
			if (data.jsonperror) {
				var msg = data.msg;
				var developMode = Base.globvar.developMode;
				if (developMode) {
					if (data.errorDetail) {
						//详细信息 查看详情
						var flag = Base.globvar.isOpenErrorDetail;
						if ("true" == flag) {
							msg += "&nbsp;&nbsp;&nbsp;<div><a onClick=\"new TaWindow ($('<div style=overflow:auto>'+$('#_expwinerrmsg').html()+'</div>').appendTo('body')).window({width:600,height:400,title:Base.I18n.getLangText('taface.module.taajax.errorInfo.detail')})\">[" + Base.I18n.getLangText('taface.module.taajax.errorInfo.viewdetail') + "]</a></div><div id='_expwinerrmsg' style='display:none'><hr>" + data.errorDetail + "</div>";
						} else {
							msg += "&nbsp;&nbsp;&nbsp;<div><a onClick=\"new TaWindow ($('<div style=overflow:auto>'+$('#_expwinerrmsg').html()+'</div>').appendTo('body')).window({width:600,height:400,title:Base.I18n.getLangText('taface.module.taajax.errorInfo.detail')})\"></div>";
						}
					}
				}
				if (msg) Base.alert(msg, 'error');
			}
			if (data.resultMessage) {
				var focus = null;
				if (data.focus) {
					focus = function (_fieldId) {
						return function () {
							Base.focus(_fieldId, 100);
						};
					}(data.focus);
				}
				var msg = data.resultMessage.message;
				if (data.errorDetail) {
					//						msg += "&nbsp;&nbsp;&nbsp;<div><a onClick=\"$('<div style=overflow:auto>'+$('#_expwinerrmsg').html()+'</div>').appendTo('body').window({width:600,height:400,title:'详细信息'})\">[查看详细]</a></div><div id='_expwinerrmsg' style='display:none'><hr>"+data.errorDetail+"</div>";
					//aolei modify window 调用方式变了
					var flag = Base.globvar.isOpenErrorDetail;
					if ("true" == flag) {
						msg += "&nbsp;&nbsp;&nbsp;<div><a onClick=\"new TaWindow ($('<div style=overflow:auto>'+$('#_expwinerrmsg').html()+'</div>').appendTo('body')).window({width:600,height:400,title:Base.I18n.getLangText('taface.module.taajax.errorInfo.detail')})\">[" + Base.I18n.getLangText('taface.module.taajax.errorInfo.viewdetail') + "]</a></div><div id='_expwinerrmsg' style='display:none'><hr>" + data.errorDetail + "</div>";
					} else {
						msg += "&nbsp;&nbsp;&nbsp;<div><a onClick=\"new TaWindow ($('<div style=overflow:auto>'+$('#_expwinerrmsg').html()+'</div>').appendTo('body')).window({width:600,height:400,title:Base.I18n.getLangText('taface.module.taajax.errorInfo.detail')})\"></div>";
					}
					//i18n:详细信息 查看详情
				}
				Base.alert(msg, data.resultMessage.messageType, focus);
			}
			//没有msg，但是有focus
			if (!data.msg && data.focus) {
				Base.focus(data.focus, 50);
			}
			//有topMsg
			if (data.topTipMsg) {
				var topTip = data.topTipMsg;
				Base.msgTopTip(topTip.topMsg, topTip.time, topTip.width, topTip.height);
			} else if (data.topMsg && !data.topTipMsg) {
				Base.msgTopTip(data.topMsg);
			}
		}

		function compareOldData(ids) {
			var submitparam = {};

			if (document._oldValueObj && document._oldValueObj.length > 0) {
				var oldArray = document._oldValueObj;
				for (var i = 0; i < oldArray.length; i++) {
					for (var j = 0; j < ids.length; j++) {
						var $obj = $("#" + ids);
						if (ids[j] == oldArray[i].__id) {
							if ($obj.val() != oldArray[i]["ovDto['" + oldArray[i].__id + "']"]) {
								submitparam = $.extend(submitparam, oldArray[i]);
							}
						} else if ($obj.has(oldArray[i].__id)) {
							if ($("#" + oldArray[i].__id).val() != oldArray[i]["ovDto['" + oldArray[i].__id + "']"]) {
								submitparam = $.extend(submitparam, oldArray[i]);
							}
						}
					}
				}
			} else {
				return {};
			}
			delete submitparam.__id;
			return submitparam;
		}
	}
});
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

(function (factory) {
	if (true) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {
		factory(jQuery);
	}
})(function ($) {
	$.extend(true, window, {
		TaResizable: TaResizable
	});

	function TaResizable($resizableId) {
		var defaults = {
			disabled: false,
			handles: 'n, e, s, w, ne, se, sw, nw, all',
			minWidth: 10,
			minHeight: 10,
			maxWidth: 10000, //$(document).width(),
			maxHeight: 10000, //$(document).height(),
			edge: 5,
			onStartResize: function onStartResize(e) {},
			onResize: function onResize(e) {},
			onStopResize: function onStopResize(e) {}
		};

		function resizable(options) {
			function resize(e) {
				var resizeData = e.data;
				var options = $.data(resizeData.target, 'resizable').options;
				if (resizeData.dir.indexOf('e') != -1) {
					var width = resizeData.startWidth + e.pageX - resizeData.startX;
					width = Math.min(Math.max(width, options.minWidth), options.maxWidth);
					resizeData.width = width;
				}
				if (resizeData.dir.indexOf('s') != -1) {
					var height = resizeData.startHeight + e.pageY - resizeData.startY;
					height = Math.min(Math.max(height, options.minHeight), options.maxHeight);
					resizeData.height = height;
				}
				if (resizeData.dir.indexOf('w') != -1) {
					resizeData.width = resizeData.startWidth - e.pageX + resizeData.startX;
					if (resizeData.width >= options.minWidth && resizeData.width <= options.maxWidth) {
						resizeData.left = resizeData.startLeft + e.pageX - resizeData.startX;
					}
				}
				if (resizeData.dir.indexOf('n') != -1) {
					resizeData.height = resizeData.startHeight - e.pageY + resizeData.startY;
					if (resizeData.height >= options.minHeight && resizeData.height <= options.maxHeight) {
						resizeData.top = resizeData.startTop + e.pageY - resizeData.startY;
					}
				}
			}

			function applySize(e) {
				var resizeData = e.data;
				var target = resizeData.target;
				if (document.compatMode == 'CSS1Compat') {
					//$.boxModel == true
					$(target).css({
						width: resizeData.width - resizeData.deltaWidth,
						height: resizeData.height - resizeData.deltaHeight,
						left: resizeData.left,
						top: resizeData.top
					});
				} else {
					$(target).css({
						width: resizeData.width,
						height: resizeData.height,
						left: resizeData.left,
						top: resizeData.top
					});
				}
			}

			function doDown(e) {
				$.data(e.data.target, 'resizable').options.onStartResize.call(e.data.target, e);
				return false;
			}

			function doMove(e) {
				resize(e);
				if ($.data(e.data.target, 'resizable').options.onResize.call(e.data.target, e) != false) {
					applySize(e);
				}
				return false;
			}

			function doUp(e) {
				resize(e);
				applySize(e);
				$(document).unbind('.resizable');
				$.data(e.data.target, 'resizable').options.onStopResize.call(e.data.target, e);
				return false;
			}

			return $resizableId.each(function () {
				var opts = null;
				var state = $.data(this, 'resizable');
				if (state) {
					$(this).unbind('.resizable');
					opts = $.extend(state.options, options || {});
				} else {
					opts = $.extend({}, defaults, options || {});
				}

				if (opts.disabled == true) {
					return;
				}

				$.data(this, 'resizable', {
					options: opts
				});

				var target = this;

				// bind mouse event using namespace resizable
				$(this).bind('mousemove.resizable', onMouseMove).bind('mousedown.resizable', onMouseDown);

				function onMouseMove(e) {
					var dir = getDirection(e);
					if (dir == '') {
						$(target).css('cursor', 'default');
					} else {
						$(target).css('cursor', dir + '-resize');
					}
				}

				function onMouseDown(e) {
					var dir = getDirection(e);
					if (dir == '') return;

					var data = {
						target: this,
						dir: dir,
						startLeft: getCssValue('left'),
						startTop: getCssValue('top'),
						left: getCssValue('left'),
						top: getCssValue('top'),
						startX: e.pageX,
						startY: e.pageY,
						startWidth: $(target).outerWidth(true),
						startHeight: $(target).outerHeight(true),
						width: $(target).outerWidth(true),
						height: $(target).outerHeight(true),
						deltaWidth: $(target).outerWidth(true) - $(target).width(),
						deltaHeight: $(target).outerHeight(true) - $(target).height()
					};
					$(document).bind('mousedown.resizable', data, doDown);
					$(document).bind('mousemove.resizable', data, doMove);
					$(document).bind('mouseup.resizable', data, doUp);
				}

				// get the resize direction
				function getDirection(e) {
					var dir = '';
					var offset = $(target).offset();
					var width = $(target).outerWidth(true);
					var height = $(target).outerHeight(true);
					var edge = opts.edge;
					if (e.pageY > offset.top && e.pageY < offset.top + edge) {
						dir += 'n';
					} else if (e.pageY < offset.top + height && e.pageY > offset.top + height - edge) {
						dir += 's';
					}
					if (e.pageX > offset.left && e.pageX < offset.left + edge) {
						dir += 'w';
					} else if (e.pageX < offset.left + width && e.pageX > offset.left + width - edge) {
						dir += 'e';
					}

					var handles = opts.handles.split(',');
					for (var i = 0; i < handles.length; i++) {
						var handle = handles[i].replace(/(^\s*)|(\s*$)/g, '');
						if (handle == 'all' || handle == dir) {
							return dir;
						}
					}
					return '';
				}

				function getCssValue(css) {
					var val = parseInt($(target).css(css));
					if (isNaN(val)) {
						return 0;
					} else {
						return val;
					}
				}
			});
		}

		//init(); 调初始化方法
		$.extend(this, { // 为this对象
			"cmptype": 'resizable', // 将方法注册为公共方法
			"version": "3.13.0",
			"resizable": resizable
		});
	}
	return TaResizable;
});

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

var def = __webpack_require__(10).f;
var has = __webpack_require__(18);
var TAG = __webpack_require__(7)('toStringTag');

module.exports = function (it, tag, stat) {
  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
};


/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = __webpack_require__(25);
var TAG = __webpack_require__(7)('toStringTag');
// ES3 wrong here
var ARG = cof(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (e) { /* empty */ }
};

module.exports = function (it) {
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(1);
var defined = __webpack_require__(30);
var fails = __webpack_require__(4);
var spaces = __webpack_require__(112);
var space = '[' + spaces + ']';
var non = '\u200b\u0085';
var ltrim = RegExp('^' + space + space + '*');
var rtrim = RegExp(space + space + '*$');

var exporter = function (KEY, exec, ALIAS) {
  var exp = {};
  var FORCE = fails(function () {
    return !!spaces[KEY]() || non[KEY]() != non;
  });
  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
  if (ALIAS) exp[ALIAS] = fn;
  $export($export.P + $export.F * FORCE, 'String', exp);
};

// 1 -> String#trimLeft
// 2 -> String#trimRight
// 3 -> String#trim
var trim = exporter.trim = function (string, TYPE) {
  string = String(defined(string));
  if (TYPE & 1) string = string.replace(ltrim, '');
  if (TYPE & 2) string = string.replace(rtrim, '');
  return string;
};

module.exports = exporter;


/***/ }),
/* 59 */
/***/ (function(module, exports) {

module.exports = {};


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
(function(factory) {
	if (true) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(0) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {
		factory(jQuery);
	}
}(function($) {
	$.extend(true, window, {
		TaFit : TaFit
	});

	function TaFit($fitId){
		var defaults = {
			fit : false,
			heightDiff : 0
		};
		function tauifitheight(options, param){
			options = options || {};
			return $fitId.each(function() {
				var opts;
				opts = $.extend({}, defaults, {
					fit : ($(this).attr('fit') == 'true' ? true : false),
					heightDiff : ($(this).attr('heightDiff') || 0),
					minWidth : ($(this).attr('minWidth') || 'auto')
				}, options);
				$.data(this, 'fitheight', opts);
				if (opts.fit) {
					fitForm(this);
					var $form = $(this);
					$form.bind('_resize', function(e) {
						fitForm(this);
					});
					if (this.parentNode.tagName.toLowerCase() == 'body') {
						$(window).unbind('.tauifitheight').bind(
							'resize.tauifitheight', function() {
								$form.triggerHandler('_resize');
							});
					}
				}
			});
		}

        /**
		 * 获取布局参数 margin\padding\border\top\left
         * @param selector
         * @param type
         * @returns {Number}
         */
		function getComputedParam(selector,type){
			var h = $(selector).css(type);
			if(h == "auto" || h == "medium")h=0;//兼容处理 IE8 下 margin:auto 时  css 返回auto ;无border 时 css 返回 medium 的情况
            h = parseInt(h);//暂时parseInt 实际框架计算多有地方应该都是parseFloat
            return isNaN(h)?0:h;//NAN 判断处理其他未考虑到的情况（该处理方式不对，应该是将相应规则完善）
		}
		/**
		 * 撑满父容器
		 */
		function fitForm(target) {
			var $form = $(target);
			// XXX 判断容器类型
			var formType = "default";
			if ($form.hasClass('panel') && !$form.hasClass('window')) {
				formType = "panel";
			} else if ($form.hasClass('tabs-container')) {
				formType = "tabs";
			}else if($form.hasClass('verticalTabs')){
				formType = "v_tabs";
			}else if($form.hasClass("search-panel")){
                formType = "search-panel";
            }
			var $formparent = $form.parent();
			h = $formparent.height();
			if ($formparent[0].tagName.toLowerCase() == "body") {
				h = $(window).height();
				h -= getComputedParam('body','paddingBottom');
				h -= getComputedParam('body','marginBottom');
                h -= getComputedParam('body','borderBottomWidth');
				h -= $form.offset().top;
				$form.height(h)
				if (formType == "panel") {
					h -= getComputedParam($form,"marginBottom");
				}
			} else if ($formparent.hasClass('window-body')) {
				var windowTop = $form.offsetParent().offset().top;//change by cy 解决window弹出框内部高度错误
				if(formType == "tabs"){
					h -= ($form.offset().top - windowTop -28);
				}else{
					h -= ($form.offset().top - windowTop);//change by cy
				}
				if (formType == "panel") {
					h += getComputedParam($form,'marginTop');
				}
			} else {
				if (($formparent.css('position') == 'relative'&& formType != "panel")|| $formparent.css('position') == 'absolute') {
					h -= ( $form.offset().top - $formparent.offset().top ) - getComputedParam($formparent,'paddingTop');
					if ($formparent.parent()[0].tagName.toLowerCase() == "body") {
						if(formType == "tabs"){
							h-= getComputedParam('body','paddingTop');
						}
					}
				} else {
					var pall = $form.prevAll(':visible').not('#pageloading,.ez-fl.ez-negmx[fit=true]');//modify by cy 修复同级panel 第二个panel高度错误问题
					if (pall.length > 0) {
						pall.each(function() {
							h -= $(this).outerHeight(true);
						});
					}
					if(formType == "tabs"){
						h -= getComputedParam($formparent,'marginTop');
						h -= getComputedParam($formparent,'marginBottom');
					}

					if (formType == "panel") {
						h -= getComputedParam($form,'marginTop');
						h -= getComputedParam($form,'marginBottom');
					}
					//panel下tabs fit=true 时 多减了padding 暂时注释  change by zhouhy
					//if(formType == "tabs"){
					//	h -= getComputedParam($formparent,'paddingBottom');
					//	h -= getComputedParam($formparent,'paddingTop');
					//}
				}
				if(formType == "default"){
					h -= getComputedParam($formparent,'marginTop');
					h -= getComputedParam($formparent,'marginBottom');
				}
			}
			if (formType == "panel") {
				var $fitContent = $(">div.panel-body", $form);
				if ($fitContent.length == 0) {
					$fitContent = $form;
				} else {
					$fitContent = $($fitContent[0]);
				}
				h -= getComputedParam($fitContent,'paddingTop');
				h -= getComputedParam($fitContent,'paddingBottom');
				h -= getComputedParam($fitContent,'border-top-width');//add by cy 减去上下边框
				h -= getComputedParam($fitContent,'border-bottom-width');

				var hh_ = $(">div.panel-header", $form).outerHeight(true);
				var headerHeight = hh_ ? hh_ : 0;
				var bp_ = $(">div.panel-button", $form).outerHeight(true);
				var bpHeight = bp_ ? bp_  : 0;//change by cy
				var pt_ = $(">div.panel-toolbar", $form).outerHeight(true);
				var ptHeight = pt_ ? pt_ : 0;
				var opts = $.data(target, 'panel');
				h -= opts.heightDiff;
				h -= 1;// 去除边框
				var minHeight = Number($(target).attr('minHeight'));
				if (h - headerHeight - bpHeight - ptHeight < minHeight) {
					$fitContent.height(minHeight - headerHeight - bpHeight- ptHeight);
				} else{
					$fitContent.height(h - headerHeight - bpHeight - ptHeight);
				}
				$('>div:visible[fit=true],>div[fit=true] ,>form[fit=true],>div.grid[height],>div.ez-fl>div.grid[height]', $fitContent).each(function(){$(this).triggerHandler('_resize');});
				if ($fitContent.hasClass('l-layout'))
					$fitContent.triggerHandler('_resize');// panel直接作为border布局
			} else if(formType == "tabs"){
				h -= getComputedParam($form,'marginBottom');
				var header = $('>div.tabs-header', $form);
				var panels = $('>div.tabs-panels', $form);
				var opts = $.data(target, 'tabs').options;
				h -= header.outerHeight(true);
				h -= opts.heightDiff;
				//tabs里面下边框,所以-1
				panels.outerHeight(h);
				$('>div',panels).each(function(){
					var $this = $(this);
					$this.height(h - getComputedParam($this.parent(), 'paddingTop') - getComputedParam($this.parent(), 'paddingBottom')-1);
					if($this.is(':visible')){
						$.data(this, 'fitstatus', {fit:true});
					}else{
						$.data(this, 'fitstatus', {fit:false});
					}
				});
				//XXX 处理border布局
				$('>div.l-layout:visible',panels).each(function(){$(this).triggerHandler('_resize');});
				$('>div:visible[fit=true],>div:visible>div[fit=true],>div:visible>form[fit=true],>div:visible>div.grid[height],>div:visible>div.ez-fl>div.grid[height]', panels).each(function(){$(this).triggerHandler('_resize');});
				//add by  chenyao  解决初始化的时候嵌套tabs出现滚动条的问问题
				$form.tauitabs("setScrollers");

			}else if(formType=="v_tabs"){//add by chenyao  纵向tab布局
                h -= getComputedParam($form,'paddingTop');
                h -= getComputedParam($form,'paddingBottom');

                h -= getComputedParam($form,'marginBottom');
                h -= getComputedParam($form,'borderTopWidth');
                h -= getComputedParam($form,'borderBottomWidth');
                var opts = $.data(target, 'fitheight');
                h -= opts.heightDiff;
                $form.height(h);
				var v_tb=$form.find(">.v-con>div>div");
				$('>div:visible[fit=true],>div:visible>div[fit=true], >div:visible>form[fit=true],>div:visible>div.grid[height],>div:visible>div.ez-fl>div.grid[height],.tabs-container[fit=true]', v_tb).each(function(){$(this).triggerHandler('_resize');});
			}else if(formType=="search-panel"){
                h -= getComputedParam($form,'paddingTop');
                h -= getComputedParam($form,'paddingBottom');

                h -= getComputedParam($form,'marginBottom');
                h -= getComputedParam($form,'borderTopWidth');
                h -= getComputedParam($form,'borderBottomWidth');
                var opts = $.data(target, 'fitheight');
                h -= opts.heightDiff;
                $form.height(h);
                var header = $('>div.search-insert-con', $form);
                var panel  = $('>div.search-list-con', $form);
                panel.outerHeight(h-header.outerHeight(true));
                $('>div[fit=true],>form[fit=true],>div.grid[height],>div.ez-fl>div.grid[height]', panel).each(function(){$(this).triggerHandler('_resize');});

            }else {
				h -= getComputedParam($form,'paddingTop');
				h -= getComputedParam($form,'paddingBottom');

				h -= getComputedParam($form,'marginBottom');
				h -= getComputedParam($form,'borderTopWidth');
				h -= getComputedParam($form,'borderBottomWidth');
				var opts = $.data(target, 'fitheight');
				h -= opts.heightDiff;
				$form.height(h);
				if (opts.minWidth != 'auto') {
					if ($form.parent().width() < opts.minWidth) {
						$form.width(opts.minWidth);
					} else {
						$form.width('auto');
					}
				}
				$('>div[fit=true],>form[fit=true],>div.grid[height],>div.ez-fl>div.grid[height]', $form).each(function(){$(this).triggerHandler('_resize');});
			}
		}

		//init(); 调初始化方法
		$.extend(this, { // 为this对象
			"cmptype" : 'fit',// 将方法注册为公共方法
			"version" : "3.13.0",
			"tauifitheight": tauifitheight,
			"fitForm":fitForm
		});
	}
	return TaFit;
}));

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

(function (factory) {
	if (true) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {
		factory(jQuery);
	}
})(function ($) {
	$.extend(true, window, {
		TaDraggable: TaDraggable
	});

	function TaDraggable($draggableId) {
		var defaults = {
			proxy: null, // 'clone' or a function that will create the proxy object, 
			// the function has the source parameter that indicate the source object dragged.
			revert: false,
			cursor: 'move',
			deltaX: null,
			deltaY: null,
			handle: null,
			disabled: false,
			edge: 0,
			axis: null, // v or h
			onStartDrag: function onStartDrag(e) {},
			onDrag: function onDrag(e) {},
			onStopDrag: function onStopDrag(e) {}
		};

		function draggable(options) {
			if (typeof options == 'string') {
				switch (options) {
					case 'options':
						return $.data($draggableId[0], 'draggable').options;
					case 'proxy':
						return $.data($draggableId[0], 'draggable').proxy;
					case 'enable':
						return $draggableId.each(function () {
							$(this).draggable({ disabled: false });
						});
					case 'disable':
						return $draggableId.each(function () {
							$(this).draggable({ disabled: true });
						});
				}
			}

			return $draggableId.each(function () {
				//				$(this).css('position','absolute');

				var opts;
				var state = $.data(this, 'draggable');
				if (state) {
					state.handle.unbind('.draggable');
					opts = $.extend(state.options, options);
				} else {
					opts = $.extend({}, defaults, options || {});
				}

				if (opts.disabled == true) {
					$(this).css('cursor', 'default');
					return;
				}

				var handle = null;
				if (typeof opts.handle == 'undefined' || opts.handle == null) {
					handle = $(this);
				} else {
					handle = typeof opts.handle == 'string' ? $(opts.handle, this) : handle;
				}
				$.data(this, 'draggable', {
					options: opts,
					handle: handle
				});

				// bind mouse event using event namespace draggable
				if (handle) {
					handle.bind('mousedown.draggable', { target: this }, onMouseDown);
					handle.bind('mousemove.draggable', { target: this }, onMouseMove);
				}

				function onMouseDown(e) {
					if (checkArea(e) == false) return;

					var position = $(e.data.target).position();
					var data = {
						startPosition: $(e.data.target).css('position'),
						startLeft: position.left,
						startTop: position.top,
						left: position.left,
						top: position.top,
						startX: e.pageX,
						startY: e.pageY,
						target: e.data.target,
						parent: $(e.data.target).parent()[0]
					};

					$(document).bind('mousedown.draggable', data, doDown);
					$(document).bind('mousemove.draggable', data, doMove);
					$(document).bind('mouseup.draggable', data, doUp);
				}

				function onMouseMove(e) {
					if (checkArea(e)) {
						$(this).css('cursor', opts.cursor);
					} else {
						$(this).css('cursor', 'default');
					}
				}

				// check if the handle can be dragged
				function checkArea(e) {
					var offset = $(handle).offset();
					var width = $(handle).outerWidth(true);
					var height = $(handle).outerHeight(true);
					var t = e.pageY - offset.top;
					var r = offset.left + width - e.pageX;
					var b = offset.top + height - e.pageY;
					var l = e.pageX - offset.left;

					return Math.min(t, r, b, l) > opts.edge;
				}
			});
		}
		function drag(e) {
			var opts = $.data(e.data.target, 'draggable').options;

			var dragData = e.data;
			var left = dragData.startLeft + e.pageX - dragData.startX;
			var top = dragData.startTop + e.pageY - dragData.startY;

			if (opts.deltaX != null && opts.deltaX != undefined) {
				left = e.pageX + opts.deltaX;
			}
			if (opts.deltaY != null && opts.deltaY != undefined) {
				top = e.pageY + opts.deltaY;
			}

			if (e.data.parnet != document.body) {
				if ($.boxModel == true) {
					left += $(e.data.parent).scrollLeft();
					top += $(e.data.parent).scrollTop();
				}
			}

			if (opts.axis == 'h') {
				dragData.left = left;
			} else if (opts.axis == 'v') {
				dragData.top = top;
			} else {
				dragData.left = left;
				dragData.top = top;
			}
		}

		function applyDrag(e) {
			var opts = $.data(e.data.target, 'draggable').options;
			var proxy = $.data(e.data.target, 'draggable').proxy;
			if (proxy) {
				proxy.css('cursor', opts.cursor);
			} else {
				proxy = $(e.data.target);
				$.data(e.data.target, 'draggable').handle.css('cursor', opts.cursor);
			}
			proxy.css({
				left: e.data.left,
				top: e.data.top
			});
		}

		function doDown(e) {
			var opts = $.data(e.data.target, 'draggable').options;

			var droppables = $('.droppable').filter(function () {
				return e.data.target != this;
			}).filter(function () {
				var accept = $.data(this, 'droppable').options.accept;
				if (accept) {
					return $(accept).filter(function () {
						return this == e.data.target;
					}).length > 0;
				} else {
					return true;
				}
			});
			$.data(e.data.target, 'draggable').droppables = droppables;

			var proxy = $.data(e.data.target, 'draggable').proxy;
			if (!proxy) {
				if (opts.proxy) {
					if (opts.proxy == 'clone') {
						proxy = $(e.data.target).clone().insertAfter(e.data.target);
					} else {
						proxy = opts.proxy.call(e.data.target, e.data.target);
					}
					$.data(e.data.target, 'draggable').proxy = proxy;
				} else {
					proxy = $(e.data.target);
				}
			}

			proxy.css('position', 'absolute');
			drag(e);
			applyDrag(e);

			opts.onStartDrag.call(e.data.target, e);
			return false;
		}

		function doMove(e) {

			drag(e);
			if ($.data(e.data.target, 'draggable').options.onDrag.call(e.data.target, e) != false) {
				applyDrag(e);
			}

			var source = e.data.target;
			$.data(e.data.target, 'draggable').droppables.each(function () {
				var dropObj = $(this);
				var p2 = $(this).offset();
				if (e.pageX > p2.left && e.pageX < p2.left + dropObj.outerWidth(true) && e.pageY > p2.top && e.pageY < p2.top + dropObj.outerHeight(true)) {
					if (!this.entered) {
						$(this).trigger('_dragenter', [source]);
						this.entered = true;
					}
					$(this).trigger('_dragover', [source]);
				} else {
					if (this.entered) {
						$(this).trigger('_dragleave', [source]);
						this.entered = false;
					}
				}
			});

			return false;
		}

		function doUp(e) {
			drag(e);

			var proxy = $.data(e.data.target, 'draggable').proxy;
			var opts = $.data(e.data.target, 'draggable').options;
			if (opts.revert) {
				if (checkDrop() == true) {
					removeProxy();
					$(e.data.target).css({
						position: e.data.startPosition,
						left: e.data.startLeft,
						top: e.data.startTop
					});
				} else {
					if (proxy) {
						proxy.animate({
							left: e.data.startLeft,
							top: e.data.startTop
						}, function () {
							removeProxy();
						});
					} else {
						$(e.data.target).animate({
							left: e.data.startLeft,
							top: e.data.startTop
						}, function () {
							$(e.data.target).css('position', e.data.startPosition);
						});
					}
				}
			} else {
				$(e.data.target).css({
					position: 'absolute',
					left: e.data.left,
					top: e.data.top
				});
				removeProxy();
				checkDrop();
			}

			opts.onStopDrag.call(e.data.target, e);

			function removeProxy() {
				if (proxy) {
					proxy.remove();
				}
				$.data(e.data.target, 'draggable').proxy = null;
			}

			function checkDrop() {
				var dropped = false;
				$.data(e.data.target, 'draggable').droppables.each(function () {
					var dropObj = $(this);
					var p2 = $(this).offset();
					if (e.pageX > p2.left && e.pageX < p2.left + dropObj.outerWidth(true) && e.pageY > p2.top && e.pageY < p2.top + dropObj.outerHeight(true)) {
						if (opts.revert) {
							$(e.data.target).css({
								position: e.data.startPosition,
								left: e.data.startLeft,
								top: e.data.startTop
							});
						}
						$(this).trigger('_drop', [e.data.target]);
						dropped = true;
						this.entered = false;
					}
				});
				return dropped;
			}

			$(document).unbind('.draggable');
			return false;
		}

		$.extend(this, { // 为this对象
			"cmptype": 'draggable', // 将方法注册为公共方法
			"version": "3.13.0",
			"draggable": draggable
		});
	}

	return TaDraggable;
});

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

(function (factory) {
	if (true) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); //依赖
	} else {
		factory(jQuery);
	}
})(function ($) {
	$.extend(true, window, {
		TaComponent: TaComponent
	});
	function TaComponent(id, options) {//构造方法
	}
	return TaComponent;
});

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(jQuery) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

(function (factory) {
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {
        factory(jQuery);
    }
})(function ($) {

    $.extend(true, window, {
        TaValidateUtil: TaValidateUtil
    });

    function TaValidateUtil(orders, customRules) {
        var rules = {
            required: {
                validator: function validator(value) {
                    return !(value == '' || value && value.length && value.length == 0 || !value);
                },
                // message: '此项为必输项!'
                message: Base.I18n.getLangText('taface.module.validatebox.required')
            },
            email: {
                validator: function validator(value) {
                    return (/^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?$/i.test(value)
                    );
                },
                // message: '您输入的不符合email格式要求'
                message: Base.I18n.getLangText('taface.module.validatebox.emailvalidatealarm')
            },
            url: {
                validator: function validator(value) {
                    return (/^(https?|ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i.test(value)
                    );
                },
                // message: '您输入的不合URL格式要求'
                message: Base.I18n.getLangText('taface.module.validatebox.urlvalidatealarm')

            },
            maxLength: {
                validator: function validator(value, param) {
                    var len = (value + "").replace(/[^\x00-\xff]/gmi, 'pp').length;
                    if (!isNaN(param[0])) {
                        param[1] = param[0];
                        return len <= param[0];
                    }
                    return true;
                },
                // message: "输入的字符长度必须小于或等于{1}"
                message: Base.I18n.getLangText('taface.module.validatebox.lengthless1validatealarm')
            },
            minLength: {
                validator: function validator(value, param) {
                    var len = (value + "").replace(/[^\x00-\xff]/gmi, 'pp').length;
                    if (!isNaN(param[0])) {
                        return len >= param[0];
                    }
                    return true;
                },
                // message: "输入的字符长度必须大于或等于{1}"
                message: Base.I18n.getLangText('taface.module.validatebox.lengthgreater0validatealarm')
            },
            length: {
                validator: function validator(value, param) {
                    var len = (value + "").replace(/[^\x00-\xff]/gmi, 'pp').length;
                    if (isNaN(param[0]) && !isNaN(param[1])) {
                        // this.message = "输入的字符长度必须小于或等于{1}";
                        this.message = Base.I18n.getLangText('taface.module.validatebox.lengthless1validatealarm');
                        return len <= param[1];
                    } else if (!isNaN(param[0]) && isNaN(param[1])) {
                        // this.message = "输入的字符长度必须大于或等于{0}";
                        this.message = Base.I18n.getLangText('taface.module.validatebox.lengthgreater0validatealarm');
                        return len >= param[0];
                    } else if (!isNaN(param[0]) && !isNaN(param[1])) {
                        // this.message = "输入的字符长度必须在 {0} 到 {1}之间";
                        this.message = Base.I18n.getLangText('taface.module.validatebox.lengthvalidatealarm');
                        return len >= param[0] && len <= param[1];
                    }
                    return true;
                },
                // message: '输入的字符长度必须在 {0} 和 {1}之间'
                message: Base.I18n.getLangText('taface.module.validatebox.lengthvalidatealarm')
            },
            chinese: {
                validator: function validator(value) {
                    return (/^[\u4e00-\u9fa5]+$/.test(value)
                    );
                },
                // message: '只能输入中文'
                message: Base.I18n.getLangText('taface.module.validatebox.chineseonly')
            },
            date: {
                validator: function validator(value, param) {
                    var valArry = value;
                    if (!$.isArray(value)) valArry = [value];

                    var validateBool = true;
                    for (var i = 0; i < valArry.length; i++) {
                        value = valArry[i];

                        // this.message= '您输入的日期格式不正确';
                        this.message = Base.I18n.getLangText('taface.module.validatebox.dateformatvalidatealarm');
                        if (!Ta.util.isDate(value)) return false;

                        if (!jQuery.isArray(param)) continue;
                        if (param[0] == '' && param[1] != '') {
                            // this.message = "输入的日期必须小于或等于{1}";
                            this.message = Base.I18n.getLangText('taface.module.validatebox.dateless1validatealarm');
                            validateBool = value <= param[1];
                        } else if (param[0] != '' && param[1] == '') {
                            // this.message = "输入的日期必须大于或等于{0}";
                            this.message = Base.I18n.getLangText('taface.module.validatebox.dategreater0validatealarm');
                            validateBool = value >= param[0];
                        } else if (param[0] != '' && param[1] != '') {
                            // this.message = "输入的日期必须在 {0} 到 {1}之间";
                            this.message = Base.I18n.getLangText('taface.module.validatebox.datebetween0and1validatealarm');
                            validateBool = value >= param[0] && value <= param[1];
                        }

                        if (!validateBool) {
                            return false;
                        }
                    }

                    if (checkDateOrder(valArry) === false) {
                        // this.message = "起始日期 {0} 必须小于结束日期 {1}";
                        this.message = Base.I18n.getLangText('taface.module.validatebox.dateorderfail');
                        return false;
                    }

                    return true;
                },
                // message: '您输入的日期格式不正确'
                message: Base.I18n.getLangText('taface.module.validatebox.dateformatvalidatealarm')
            },
            datetime: {
                validator: function validator(value, param) {
                    var valArry = value;
                    if (!$.isArray(value)) valArry = [value];

                    var validateBool = true;
                    for (var i = 0; i < valArry.length; i++) {
                        value = valArry[i];

                        // this.message = "您输入的日期时间格式不正确";
                        this.message = Base.I18n.getLangText('taface.module.validatebox.dateformatvalidatealarm');
                        if (!Ta.util.isDateTime(value)) return false;

                        if (!jQuery.isArray(param)) continue;
                        if (param[0] == '' && param[1] != '') {
                            // this.message = "输入的日期时间必须小于或等于{1}";
                            this.message = Base.I18n.getLangText('taface.module.validatebox.dateless1validatealarm');
                            validateBool = value <= param[1];
                        } else if (param[0] != '' && param[1] == '') {
                            // this.message = "输入的日期时间必须大于或等于{0}";
                            this.message = Base.I18n.getLangText('taface.module.validatebox.dategreater0validatealarm');
                            validateBool = value >= param[0];
                        } else if (param[0] != '' && param[1] != '') {
                            // this.message = "输入的日期时间必须在{0}到{1}之间";
                            this.message = Base.I18n.getLangText('taface.module.validatebox.datebetween0and1validatealarm');
                            validateBool = value >= param[0] && value <= param[1];
                        }

                        if (!validateBool) {
                            return false;
                        }
                    }

                    if (checkDateOrder(valArry) === false) {
                        // this.message = "起始日期 {0} 必须小于结束日期 {1}";
                        this.message = Base.I18n.getLangText('taface.module.validatebox.dateorderfail');
                        return false;
                    }

                    return true;
                },
                // message: '您输入的日期时间格式不正确'
                message: Base.I18n.getLangText('taface.module.validatebox.dateformatvalidatealarm')

            },
            issue: {
                validator: function validator(value, param) {
                    var bformat = /^\d{4}((0[1-9])|(1[0-2]))$/.test(value);
                    if (!bformat) return false;
                    if (!jQuery.isArray(param)) return true;
                    if (param[0] == '' && param[1] != '') {
                        // this.message = "输入的期号必须小于或等于{1}";
                        this.message = Base.I18n.getLangText('taface.module.validatebox.issueless1validatealarm');
                        return value <= param[1];
                    } else if (param[0] != '' && param[1] == '') {
                        // this.message = "输入的期号必须大于或等于{0}";
                        this.message = Base.I18n.getLangText('taface.module.validatebox.issuegreater0validatealarm');
                        return value >= param[0];
                    } else if (param[0] != '' && param[1] != '') {
                        // this.message = "输入的期号必须在{0}到{1}之间";
                        this.message = Base.I18n.getLangText('taface.module.validatebox.issuebetween0and1validatealarm');
                        return value >= param[0] && value <= param[1];
                    }
                    return true;
                },
                // message: '您输入的期号不正确'
                message: Base.I18n.getLangText('taface.module.validatebox.issueformatvalidatealarm')
            },
            dateMonth: {
                validator: function validator(value, param) {
                    var valArry = value;
                    if (!$.isArray(value)) valArry = [value];

                    var validateBool = true;
                    for (var i = 0; i < valArry.length; i++) {
                        value = valArry[i];
                        var bformat = /^\d{4}-((0[1-9])|(1[0-2]))$/.test(value);
                        this.message = Base.I18n.getLangText("taface.module.validatebox.datemonth.message01"); //国际化修改，您输入的年月不正确
                        if (!bformat) return false;

                        if (!jQuery.isArray(param)) continue;
                        if (param[0] == '' && param[1] != '') {
                            this.message = Base.I18n.getLangText("taface.module.validatebox.datemonth.message03"); //输入的年月必须小于或等于{1}
                            validateBool = value <= param[1];
                        } else if (param[0] != '' && param[1] == '') {
                            this.message = Base.I18n.getLangText("taface.module.validatebox.datemonth.message04"); //输入的年月必须大于或等于{0}
                            validateBool = value >= param[0];
                        } else if (param[0] != '' && param[1] != '') {
                            this.message = Base.I18n.getLangText("taface.module.validatebox.datemonth.message02"); //输入的年月必须在 {0} 到 {1}之间
                            validateBool = value >= param[0] && value <= param[1];
                        }

                        if (!validateBool) {
                            return false;
                        }
                    }

                    if (checkDateOrder(valArry) === false) {
                        // this.message = "起始年月 {0} 必须小于起始年月 {1}";
                        this.message = Base.I18n.getLangText('taface.module.validatebox.datemonth.message05');
                        return false;
                    }

                    return true;
                },
                message: Base.I18n.getLangText("taface.module.validatebox.datemonth.message01") //您输入的年月不正确
            },
            dateYear: {
                validator: function validator(value, param) {
                    var valArry = value;
                    if (!$.isArray(value)) valArry = [value];

                    var validateBool = true;
                    for (var i = 0; i < valArry.length; i++) {
                        value = valArry[i];

                        var bformat = /^\d{4}$/.test(value);
                        this.message = Base.I18n.getLangText("taface.module.validatebox.dateyear.message01"); //您输入的年份不正确
                        if (!bformat) return false;

                        if (!jQuery.isArray(param)) continue;
                        if (param[0] == '' && param[1] != '') {
                            this.message = Base.I18n.getLangText("taface.module.validatebox.dateyear.message02"); //输入的年份必须小于或等于{1}
                            validateBool = value <= param[1];
                        } else if (param[0] != '' && param[1] == '') {
                            this.message = Base.I18n.getLangText("taface.module.validatebox.dateyear.message03"); //输入的年份必须大于或等于{0}
                            validateBool = value >= param[0];
                        } else if (param[0] != '' && param[1] != '') {
                            this.message = Base.I18n.getLangText("taface.module.validatebox.dateyear.message04"); //输入的年份必须在 {0} 到 {1}之间
                            validateBool = value >= param[0] && value <= param[1];
                        }
                        if (!validateBool) {
                            return false;
                        }
                    }

                    if (checkDateOrder(valArry) === false) {
                        // this.message = "起始年份 {0} 必须小于起始年份 {1}";
                        this.message = Base.I18n.getLangText('taface.module.validatebox.dateyear.message05');
                        return false;
                    }

                    return true;
                },
                message: Base.I18n.getLangText("taface.module.validatebox.dateyear.message01") //您输入的年份不正确
            },
            dateNoSecond: {
                validator: function validator(value, param) {
                    if (!Ta.util.isDateTime(value + ":00")) return false;
                    if (!jQuery.isArray(param)) return true;
                    if (param[0] == '' && param[1] != '') {
                        // this.message = "输入的日期时间必须小于或等于{1}";
                        this.message = Base.I18n.getLangText('taface.module.validatebox.dateless1validatealarm');
                        return value <= param[1];
                    } else if (param[0] != '' && param[1] == '') {
                        // this.message = "输入的日期时间必须大于或等于{0}";
                        this.message = Base.I18n.getLangText('taface.module.validatebox.dategreater0validatealarm');
                        return value >= param[0];
                    } else if (param[0] != '' && param[1] != '') {
                        // this.message = "输入的日期时间必须在{0}到{1}之间";
                        this.message = Base.I18n.getLangText('taface.module.validatebox.datebetween0and1validatealarm');
                        return value >= param[0] && value <= param[1];
                    }
                    return true;
                },
                // message: '您输入的日期时间格式不正确'
                message: Base.I18n.getLangText('taface.module.validatebox.dateformatvalidatealarm')
            },
            time: {
                validator: function validator(value, param) {
                    var valArry = value;
                    if (!$.isArray(value)) valArry = [value];

                    var validateBool = true;
                    for (var i = 0; i < valArry.length; i++) {
                        value = valArry[i];

                        // this.message = "您输入的时间格式不正确,按n键自动输入当前时间";
                        this.message = Base.I18n.getLangText('taface.module.validatebox.time.message01');
                        if (!Ta.util.isTime(value)) return false;

                        if (!jQuery.isArray(param)) continue;
                        if (param[0] == '' && param[1] != '') {
                            // this.message = "输入的时间必须小于或等于{1}";
                            this.message = Base.I18n.getLangText('taface.module.validatebox.time.message02');
                            validateBool = value <= param[1];
                        } else if (param[0] != '' && param[1] == '') {
                            // this.message = "输入的时间必须大于或等于{0}";
                            this.message = Base.I18n.getLangText('taface.module.validatebox.time.message03');
                            validateBool = value >= param[0];
                        } else if (param[0] != '' && param[1] != '') {
                            // this.message = "输入的时间必须在{0}到{1}之间";
                            this.message = Base.I18n.getLangText('taface.module.validatebox.time.message04');
                            validateBool = value >= param[0] && value <= param[1];
                        }
                        if (!validateBool) {
                            return false;
                        }
                    }

                    if (checkDateOrder(valArry) === false) {
                        // this.message = "起始时间 {0} 必须小于起始时间 {1}";
                        this.message = Base.I18n.getLangText('taface.module.validatebox.time.message05');
                        return false;
                    }

                    return true;
                },
                // message: '您输入的时间格式不正确,按n键自动输入当前时间'
                message: Base.I18n.getLangText('taface.module.validatebox.time.message01')
            },
            dailyTime: {
                validator: function validator(value, param) {
                    var valArry = value;
                    if (!$.isArray(value)) valArry = [value];

                    var validateBool = true;
                    for (var i = 0; i < valArry.length; i++) {
                        value = valArry[i];

                        // this.message = "您输入的时间格式不正确,按n键自动输入当前时间";
                        this.message = Base.I18n.getLangText('taface.module.validatebox.time.message01');
                        if (!Ta.util.isTime(value + ":00")) return false;

                        if (!jQuery.isArray(param)) continue;
                        if (param[0] == '' && param[1] != '') {
                            // this.message = "输入的时间必须小于或等于{1}";
                            this.message = Base.I18n.getLangText('taface.module.validatebox.time.message02');
                            validateBool = value <= param[1];
                        } else if (param[0] != '' && param[1] == '') {
                            // this.message = "输入的时间必须大于或等于{0}";
                            this.message = Base.I18n.getLangText('taface.module.validatebox.time.message03');
                            validateBool = value >= param[0];
                        } else if (param[0] != '' && param[1] != '') {
                            // this.message = "输入的时间必须在{0}到{1}之间";
                            this.message = Base.I18n.getLangText('taface.module.validatebox.time.message04');
                            validateBool = value >= param[0] && value <= param[1];
                        }
                        if (!validateBool) {
                            return false;
                        }
                    }

                    if (checkDateOrder(valArry) === false) {
                        // this.message = "起始时间 {0} 必须小于起始时间 {1}";
                        this.message = Base.I18n.getLangText('taface.module.validatebox.time.message05');
                        return false;
                    }

                    return true;
                },
                // message: '您输入的时间格式不正确,按n键自动输入当前时间'
                message: Base.I18n.getLangText('taface.module.validatebox.time.message01')
            },
            dateFulltime: {
                validator: function validator(value, param) {
                    var dateVals = value.split(".");
                    if (!Ta.util.isDateTime(dateVals[0])) return false;
                    if (dateVals[1]) {
                        if (!/^\d{1,3}/.test(dateVals[1])) return false;
                    };
                    if (!jQuery.isArray(param)) return true;
                    if (param[0] == '' && param[1] != '') {
                        // this.message = "输入的日期时间必须小于或等于{1}";
                        this.message = Base.I18n.getLangText('taface.module.validatebox.dateless1validatealarm');
                        return value <= param[1];
                    } else if (param[0] != '' && param[1] == '') {
                        // this.message = "输入的日期时间必须大于或等于{0}";
                        this.message = Base.I18n.getLangText('taface.module.validatebox.dategreater0validatealarm');
                        return value >= param[0];
                    } else if (param[0] != '' && param[1] != '') {
                        // this.message = "输入的日期时间必须在{0}到{1}之间";
                        this.message = Base.I18n.getLangText('taface.module.validatebox.datebetween0and1validatealarm');
                        return value >= param[0] && value <= param[1];
                    }
                    return true;
                },
                // message: '您输入的日期时间格式不正确'
                message: Base.I18n.getLangText('taface.module.validatebox.dateformatvalidatealarm')
            },
            season: {
                validator: function validator(value, param) {
                    var valArry = value;
                    if (!$.isArray(value)) valArry = [value];

                    var validateBool = true;
                    for (var i = 0; i < valArry.length; i++) {
                        value = valArry[i];

                        var bformat = /\d{4}\u5e74(0[1-4])\u5b63\u5ea6/.test(value);
                        this.message = Base.I18n.getLangText("taface.module.validatebox.season.message01"); //您输入的季度不正确
                        if (!bformat) return false;

                        if (!jQuery.isArray(param)) continue;
                        if (param[0] == '' && param[1] != '') {
                            this.message = Base.I18n.getLangText("taface.module.validatebox.season.message02"); //输入的季度必须小于或等于{1}
                            validateBool = value <= param[1];
                        } else if (param[0] != '' && param[1] == '') {
                            this.message = Base.I18n.getLangText("taface.module.validatebox.season.message03"); //输入的季度必须大于或等于{0}
                            validateBool = value >= param[0];
                        } else if (param[0] != '' && param[1] != '') {
                            this.message = Base.I18n.getLangText("taface.module.validatebox.season.message04"); //输入的季度必须在 {0} 到 {1}之间
                            validateBool = value >= param[0] && value <= param[1];
                        }
                        if (!validateBool) {
                            return false;
                        }
                    }
                    return true;
                },
                message: Base.I18n.getLangText("taface.module.validatebox.season.message01") //您输入的季度不正确
            },
            customDate: {
                validator: function validator(value, param) {
                    var valArry = value;
                    if (!$.isArray(value)) valArry = [value];
                    if (!jQuery.isArray(param)) return true;

                    function checkDateFormat(dateStr, dateFormat) {
                        if (dateStr.length != dateFormat.length) return false;
                        //构造正则表达式  处理可能存在的特殊字符 “.”  处理格式字母
                        var regStr = dateFormat.replace(new RegExp("[\.]", "gm"), "\\.").replace(new RegExp("[yYmMdHs]", "gm"), "\\d");
                        var reg = new RegExp(regStr);
                        reg.lastIndex = 0;
                        return reg.test(dateStr);
                    }

                    var bzFormat = "yyyy-MM-dd HH:mm:ss"; //指定大小比较的标准日期格式

                    if (param[0] != '') {
                        var minDate = Ta.util.Date.formatToDate(param[0]);
                        if (!isNaN(minDate.getDate())) {
                            param[0] = Ta.util.Date.format(minDate, bzFormat);
                        }
                    }

                    if (param[1] != '') {
                        var maxDate = Ta.util.Date.formatToDate(param[1]);
                        if (!isNaN(maxDate.getDate())) {
                            param[1] = Ta.util.Date.format(maxDate, bzFormat);
                        }
                    }

                    var validateBool = true;
                    for (var i = 0; i < valArry.length; i++) {
                        value = valArry[i];

                        if (!checkDateFormat(value, param[2])) return false;

                        //自定义格式大小校验，允许max\min 日期格式 与自定义格式不一致 补1 处理，防止首尾0的情况
                        var valueDate = Ta.util.StringToDateWithFormat(value, param[2]);
                        if (!isNaN(valueDate.getDate())) {
                            value = Ta.util.Date.format(valueDate, bzFormat);
                        }

                        if (param[0] == '' && param[1] != '') {
                            this.message = Base.I18n.getLangText("taface.module.validatebox.dateless1validatealarm"); //输入的日期时间必须小于或等于{1}
                            validateBool = value <= param[1];
                        } else if (param[0] != '' && param[1] == '') {
                            this.message = Base.I18n.getLangText("taface.module.validatebox.dategreater0validatealarm"); //输入的日期时间必须大于或等于{0}
                            validateBool = value >= param[0];
                        } else if (param[0] != '' && param[1] != '') {
                            this.message = Base.I18n.getLangText("taface.module.validatebox.datebetween0and1validatealarm"); //输入的日期时间必须在{0}到{1}之间
                            validateBool = value >= param[0] && value <= param[1];
                        }

                        if (!validateBool) {
                            return false;
                        }
                    }

                    if (checkDateOrder(valArry) === false) {
                        // this.message = "起始日期 {0} 必须小于结束日期 {1}";
                        this.message = Base.I18n.getLangText('taface.module.validatebox.dateorderfail');
                        return false;
                    }

                    return true;
                },
                message: Base.I18n.getLangText("taface.module.validatebox.dateformatvalidatealarm") //您输入的日期时间格式不正确
            },
            dateRef: {
                validator: function validator(value, param) {

                    //按类型校验时间格式
                    if (!jQuery.isArray(param)) return true;

                    var paramMin = Base.getValue(param[0]) || "";
                    var paramMax = Base.getValue(param[1]) || "";
                    var paramAry = [paramMin, paramMax];
                    var rule = rules[param[2]];
                    if (!rule['validator'](value, paramAry)) {
                        this.message = convertMessageInner(rule['message'], paramAry);
                        return false;
                    }

                    return true;
                },
                message: ""
            },
            zipcode: {
                validator: function validator(value) {
                    //return /[0-9]\d{5}(?!\d)/.test(value); //修改/[1-9]\d{5}(?!\d)/.test(value);
                    return (/^[1-9][0-9]{5}$/.test(value)
                    ); // modify by cy 修改之前邮编验证可以输入超过7位的情况
                },
                message: Base.I18n.getLangText("taface.module.validatebox.zipcode.message") //您输入的的邮编不正确
            },
            mobile: {
                validator: function validator(value) {
                    // return /^1[3|4|5|7|8][0-9]\d{8}$/.test(value);
                    if (Base.globvar.mobileRegex) {
                        return Base.globvar.mobileRegex.test(value); //modify by zhouhy 修改为从config.properties中读取电话号码正则
                    } else {
                        return (/^1[3|4|5|7|8|9][0-9]\d{8}$/.test(value)
                        );
                    }
                },
                message: Base.I18n.getLangText("taface.module.validatebox.mobile.message") //您输入的手机号码格式不正确
            },
            ip: {
                validator: function validator(value) {
                    return (/^((?:(?:25[0-5]|2[0-4]\d|((1\d{2})|([1-9]?\d)))\.){3}(?:25[0-5]|2[0-4]\d|((1\d{2})|([1-9]?\d))))$/.test(value)
                    );
                },
                message: Base.I18n.getLangText("taface.module.validatebox.ip.message") //您输入的IP地址格式不正确
            },
            integer: {
                validator: function validator(value) {
                    return (/^-?[0-9]\d*$/.test(value)
                    );
                },
                message: Base.I18n.getLangText("taface.module.validatebox.integer.message") //只能输入整数
            },
            maxNumber: {
                validator: function validator(value, param) {
                    if (isNaN(value)) {
                        return false;
                    }
                    if (!jQuery.isArray(param)) return true;
                    if (!isNaN(param[0])) {
                        param[1] = param[0];
                        this.message = Base.I18n.getLangText("taface.module.validatebox.number.message01"); //"输入的数值必须小于或等于{1}"
                        return Number(value) <= Number(param[0]);
                    }
                    return true;
                },
                message: Base.I18n.getLangText("taface.module.validatebox.number.message04") //'只能输入数字'
            },
            minNumber: {
                validator: function validator(value, param) {
                    if (isNaN(value)) {
                        return false;
                    }
                    if (!jQuery.isArray(param)) return true;
                    if (!isNaN(param[0])) {
                        this.message = Base.I18n.getLangText("taface.module.validatebox.number.message02"); //"输入的数值必须大于或等于{0}"
                        return Number(value) >= Number(param[0]);
                    }
                    return true;
                },
                message: Base.I18n.getLangText("taface.module.validatebox.number.message04") //'只能输入数字'
            },
            number: {
                validator: function validator(value, param) {
                    if (isNaN(value)) {
                        return false;
                    }
                    if (!jQuery.isArray(param)) return true;
                    if (isNaN(param[0]) && !isNaN(param[1])) {
                        this.message = Base.I18n.getLangText("taface.module.validatebox.number.message01"); //"输入的数值必须小于或等于{1}"
                        return Number(value) <= Number(param[1]);
                    } else if (!isNaN(param[0]) && isNaN(param[1])) {
                        this.message = Base.I18n.getLangText("taface.module.validatebox.number.message02"); //"输入的数值必须大于或等于{0}"
                        return Number(value) >= Number(param[0]);
                    } else if (!isNaN(param[0]) && !isNaN(param[1])) {
                        this.message = Base.I18n.getLangText("taface.module.validatebox.number.message03"); //"输入的数值必须在{0}到{1}之间"
                        return Number(value) >= Number(param[0]) && value <= Number(param[1]);
                    }
                    return true;
                },
                message: Base.I18n.getLangText("taface.module.validatebox.number.message04") //'只能输入数字'
            },
            checkboxgroup: {
                validator: function validator(value, param) {
                    var length = value.length;
                    if (isNaN(param[0]) && !isNaN(param[1])) {
                        this.message = "选的个数必须小于或者等于{1}";
                        return length <= param[1];
                    } else if (!isNaN(param[0]) && isNaN(param[1])) {
                        this.message = "选的个数必须大于或者等于{0}";
                        return length >= param[0];
                    } else if (!isNaN(param[0]) && !isNaN(param[1])) {
                        this.message = "选的个数必须在{0} 到 {1}之间";
                        return length <= param[1] && length >= param[0];
                    }
                },
                message: Base.I18n.getLangText("taface.module.validatebox.checkboxgroup.message") //'选的个数必须在{0} 到 {1}之间'
            },
            compare: {
                validator: function validator(value, param) {
                    var targetValue = Base.getValue(param[1]);
                    var targetLabel = Base.getFieldLabel(param[1]);
                    if (!isNaN(value) && !isNaN(targetValue)) {
                        //为数字时，转换成数字再比较
                        value = Number(value);
                        targetValue = Number(targetValue);
                    }
                    switch (param[0]) {
                        case '=':
                            this.message = Base.I18n.getLangText("taface.module.validatebox.compare.case01", targetLabel); //"您输入的值必须与["+targetLabel+"]相同";
                            return value == targetValue;
                        case '>':
                            this.message = Base.I18n.getLangText("taface.module.validatebox.compare.case02", targetLabel); //"您输入的值必须大于["+targetLabel+"]";
                            return value > targetValue;
                        case '<':
                            this.message = Base.I18n.getLangText("taface.module.validatebox.compare.case03", targetLabel); //"您输入的值必须小于["+targetLabel+"]";
                            return value < targetValue;
                        case '>=':
                            this.message = Base.I18n.getLangText("taface.module.validatebox.compare.case04", targetLabel); //"您输入的值必须大于或等于["+targetLabel+"]";
                            return value >= targetValue;
                        case '<=':
                            this.message = Base.I18n.getLangText("taface.module.validatebox.compare.case05", targetLabel); //"您输入的值必须小于或等于["+targetLabel+"]";
                            return value <= targetValue;
                        case '!=':
                            this.message = Base.I18n.getLangText("taface.module.validatebox.compare.case06", targetLabel); //"您输入的值不能等于["+targetLabel+"]";
                            return value != targetValue;
                    }
                    return true;
                },
                message: Base.I18n.getLangText("taface.module.validatebox.compare.message") //'与其他输入项不匹配'
            },
            idcard: {
                validator: function validator(value) {
                    var sId = value;

                    if (sId.length == 15) {
                        if (!/^\d{14}(\d|x)$/i.test(sId)) {
                            this.message = Base.I18n.getLangText("taface.module.validatebox.idcard.message01"); //"你输入的身份证长度或格式错误";
                            return false;
                        } else {
                            sId = sId.substr(0, 6) + '19' + sId.substr(6, 9);
                            sId += getVCode(sId);
                        }
                    }
                    function getVCode(CardNo17) {
                        var Wi = new Array(7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2, 1);
                        var Ai = new Array('1', '0', 'X', '9', '8', '7', '6', '5', '4', '3', '2');
                        var cardNoSum = 0;
                        for (var i = 0; i < CardNo17.length; i++) {
                            cardNoSum += CardNo17.charAt(i) * Wi[i];
                        }var seq = cardNoSum % 11;
                        return Ai[seq];
                    }
                    var aCity = { 11: Base.I18n.getLangText("taface.general.provinces.beijing"), //"北京",
                        12: Base.I18n.getLangText("taface.general.provinces.tianjin"), //"天津",
                        13: Base.I18n.getLangText("taface.general.provinces.heibei"), //"河北",
                        14: Base.I18n.getLangText("taface.general.provinces.shanxi"), //"山西",
                        15: Base.I18n.getLangText("taface.general.provinces.neimenggu"), //"内蒙古",
                        21: Base.I18n.getLangText("taface.general.provinces.liaoning"), //"辽宁",
                        22: Base.I18n.getLangText("taface.general.provinces.jilin"), //"吉林",
                        23: Base.I18n.getLangText("taface.general.provinces.heilongjiang"), //"黑龙江",
                        31: Base.I18n.getLangText("taface.general.provinces.shanghai"), //"上海",
                        32: Base.I18n.getLangText("taface.general.provinces.jiangsu"), //"江苏",
                        33: Base.I18n.getLangText("taface.general.provinces.zhejiang"), //"浙江",
                        34: Base.I18n.getLangText("taface.general.provinces.anhui"), //"安徽",
                        35: Base.I18n.getLangText("taface.general.provinces.fujian"), //"福建",
                        36: Base.I18n.getLangText("taface.general.provinces.jiangxi"), //"江西",
                        37: Base.I18n.getLangText("taface.general.provinces.shandong"), //"山东",
                        41: Base.I18n.getLangText("taface.general.provinces.henan"), //"河南",
                        42: Base.I18n.getLangText("taface.general.provinces.hubei"), //"湖北",
                        43: Base.I18n.getLangText("taface.general.provinces.hunan"), //"湖南",
                        44: Base.I18n.getLangText("taface.general.provinces.guangdong"), //"广东",
                        45: Base.I18n.getLangText("taface.general.provinces.guangxi"), //"广西",
                        46: Base.I18n.getLangText("taface.general.provinces.hainan"), //"海南",
                        50: Base.I18n.getLangText("taface.general.provinces.chongqing"), //"重庆",
                        51: Base.I18n.getLangText("taface.general.provinces.sichuan"), //"四川",
                        52: Base.I18n.getLangText("taface.general.provinces.guizhou"), //"贵州",
                        53: Base.I18n.getLangText("taface.general.provinces.yunnan"), //"云南",
                        54: Base.I18n.getLangText("taface.general.provinces.xizang"), //"西藏",
                        61: Base.I18n.getLangText("taface.general.provinces.shaanxi"), //"陕西",
                        62: Base.I18n.getLangText("taface.general.provinces.gansu"), //"甘肃",
                        63: Base.I18n.getLangText("taface.general.provinces.qinghai"), //"青海",
                        64: Base.I18n.getLangText("taface.general.provinces.ningxia"), //"宁夏",
                        65: Base.I18n.getLangText("taface.general.provinces.xinjiang"), //"新疆",
                        71: Base.I18n.getLangText("taface.general.provinces.taiwan"), //"台湾",
                        81: Base.I18n.getLangText("taface.general.provinces.xianggang"), //"香港",
                        82: Base.I18n.getLangText("taface.general.provinces.aomen"), //"澳门",
                        91: Base.I18n.getLangText("taface.general.provinces.guowai") }; //国外

                    var iSum = 0;
                    var info = "";
                    if (!/^\d{17}(\d|x)$/i.test(sId)) {
                        this.message = Base.I18n.getLangText("taface.module.validatebox.idcard.message01"); //"你输入的身份证长度或格式错误";
                        return false;
                    }
                    sId = sId.replace(/x$/i, "a");
                    if (aCity[parseInt(sId.substr(0, 2))] == null) {
                        this.message = Base.I18n.getLangText("taface.module.validatebox.idcard.message02"); //"你的身份证地区非法";
                        return false;
                    }
                    var sBirthday = sId.substr(6, 4) + "-" + Number(sId.substr(10, 2)) + "-" + Number(sId.substr(12, 2));
                    var d = new Date(sBirthday.replace(/-/g, "/"));
                    if (sBirthday != d.getFullYear() + "-" + (d.getMonth() + 1) + "-" + d.getDate()) {
                        this.message = Base.I18n.getLangText("taface.module.validatebox.idcard.message03"); //"身份证上的出生日期非法";
                        return false;
                    }
                    //aolei 兼容重庆的老身份证,说明:51开头的本应该四川身份证,部分老重庆身份证以51开头但是又是重庆的，需要加上特殊判断
                    if (value.substring(0, 4) == "5102") {
                        return true;
                    }
                    for (var i = 17; i >= 0; i--) {
                        iSum += Math.pow(2, i) % 11 * parseInt(sId.charAt(17 - i), 11);
                    }if (iSum % 11 != 1) {
                        this.message = Base.I18n.getLangText("taface.module.validatebox.idcard.message04"); //"你输入的身份证号非法";
                        return false;
                    }
                    return true;
                },
                message: Base.I18n.getLangText("taface.module.validatebox.idcard.message04") //'您输入的身份证号非法'
            }
        };
        rules = $.extend(rules, customRules || {}); //规则集，一般不变，支持自定义同名规则覆盖已有规则
        orders = orders || []; //命令集，用户传入

        /**
         * do validate action
         */
        function doValidate(componentId, value) {
            var validReturn = { result: true };
            var bool = false;
            var args = $.makeArray(arguments);
            $.each(orders, function (n, order) {
                if (order.type) {
                    if (order.type == "self") {
                        if (typeof order.validateFn == "function") {
                            bool = true;
                            validReturn = order.validateFn.apply(order.validateFn, args);
                            if (!validReturn.result) return false;
                        }
                    }
                    var rule = rules[order.type];
                    if ((value || "required" == order.type) && rule) {
                        bool = true;
                        var param = order.param;
                        if (!rule['validator'](value, param)) {
                            var message = convertMessageInner(rule['message'], param);
                            validReturn = { result: false, message: order.msg || message };
                            return false;
                        }
                    }
                }
            });

            //未执行有效校验
            if (!bool) {
                validReturn = { result: 'noValidate' };
            }

            return validReturn;
        }

        function convertMessageInner(message, param) {
            if (param) {
                for (var i = 0; i < param.length; i++) {
                    message = message.replace(new RegExp("\\{" + i + "\\}", "g"), param[i]); //TODO xp 发现意外的格式化方式代码
                }
            }
            return message;
        }

        /**
         * apply orders
         * @param _orders 命令集
         * @param isAppend 是否追加模式，默认否（覆盖）、true后置追加、false前置追加
         */
        function applyOrders(_orders, isAppend) {
            _orders = _orders || [];
            if (isAppend === true) {
                orders = orders.concat(_orders);
            } else if (isAppend === false) {
                orders = _orders.concat(orders);
            } else {
                orders = _orders;
            }
        }

        /**
         * apply order
         * @param _order 命令
         * @param index 扩展位置
         */
        function applyOrder(_order, index) {
            if (!$.isPlainObject(_order) || $.isEmptyObject(_order)) return;
            if (isNaN(index)) index = orders.length;
            orders.splice(index, 0, _order);
        }

        /**
         * remove order
         * @param type 校验类型
         */
        function removeOrder(type) {
            orders = orders.filter(function (o) {
                return o.type != type;
            });
        }

        /**
         * get orders
         * @return {*|Array}
         */
        function getOrders() {
            return orders;
        }

        function checkDateOrder(valAry) {
            if (!$.isArray(valAry)) return;
            for (var i = 0; i < valAry.length - 1; i++) {
                if (!(valAry[i] <= valAry[i + 1])) return false;
            }
            return true;
        }

        $.extend(this, { // 为this对象
            "cmptype": 'validateutil', // 将方法注册为公共方法
            "version": "1.1.0",
            "doValidate": doValidate,
            "applyOrders": applyOrders,
            "applyOrder": applyOrder,
            "getOrders": getOrders,
            "removeOrder": removeOrder
        });
    }
    return TaValidateUtil;
});
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * 提示信息框 Bubble
 * @author cy
 */

(function (factory) {
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {
        factory(jQuery);
    }
})(function ($) {
    $.extend(true, window, {
        Bubble: new Bubble()
    });
    __webpack_require__(217);
    function Bubble() {
        var self = this,
            $this = null,
            $target = null,
            _default = {
            position: "top",
            width: "300",
            height: "500",
            info: "请写入提示信息",
            display: false, //默认是否显示  默认不显示
            arrowHeight: 10, //尖角的高度
            arrowWidth: 10, //尖角的宽度
            infoType: "info" //信息类型 "info":一般提示信息,"fail-info":警告提示信息
        },
            options = $.extend({}, _default);

        function init() {
            initCon();
        } // end init
        function initCon() {
            $this = $("<div class='Bubble' id='Bubble1'>" + options.info + "</div>");
            setInfoConStyle();
            setInfoType();
            $(document).ready(function () {
                $this.appendTo($("body"));
            });
        }

        /**
         * 给目标元素设置一般提示信息的事件bind
         * @method setBubbleEvent
         * @param {obj} $el 目标元素jq对象
         * @author cy
         */
        function setBubbleEvent($el, _op) {
            $el.on("mouseover.bubble", function () {
                setTarget($el, _op);
                setInfoType(options.infoType);
                setInfo(options.info);
                showInfo();
            }).on("mouseout.bubble blur.bubble", function () {
                hideInfo();
            });
        }
        /**
         * 解绑目标元素设置一般提示信息的事件
         * @method freeBubbleEvent
         * @param {obj} $el 目标元素jq对象
         * @author cy
         */
        function freeBubbleEvent($el) {
            $el.off(".bubble");
        }

        /**
         * 设置提示信息的目标元素
         * @method setTarget
         * @param {obj} $el 目标元素jq对象
         * @author cy
         */
        function setTarget($el, _op) {
            $target = $el;
            options = $.extend({}, _default, _op);
        }

        /**
         * 设置容器的宽高,如果不设置那么最大宽度是300px,高度自动被撑开
         * @method setInfoConStyle
         * @author cy
         */
        function setInfoConStyle(w, h) {
            $this.css({
                "max-width": (w || options.width) + "px",
                "max-height": (h || options.height) + "px"
            });
        }

        /**
         * 设置提示信息内容。
         * @method setInfo
         * @param {string} msg
         * @author cy
         */
        function setInfo(msg) {
            $this.html(msg || options.info);
        }

        /**
         * 设置提示信息的类型。
         * @method setInfoType
         * @param {string} type{
         *  info:默认,一般提示信息
         *  fail-info:警告信息
         * }
         * @author cy
         */
        function setInfoType(type) {
            var ty = type || options.infoType;
            if (ty == "fail-info") {
                $this.removeClass("info").addClass("fail-info");
            } else {
                $this.removeClass("fail-info").addClass("info");
            }
        }

        /**
         * 设置提示信息隐藏。
         * @method hideInfo
         * @param {bool} delay 是否需要时延,如果有时延应该是传入毫秒数>0
         * @author cy
         */
        function hideInfo(delay) {
            if (delay) {
                $this.delay(delay).fadeOut("fast");
            } else {
                $this.stop().fadeOut("fast", function () {
                    $this.css({ "left": "auto", "top": "auto" });
                });
            }
        }

        /**
         * 设置提示信息展示。
         * @method showInfo
         * @param {string} position 传入位置参数 top,bottom,left,right 默认top
         * @param {number} isAutoHide 是否自动隐藏 如果是自动隐藏 那么设置多少ms之后隐藏
         * @author cy
         */
        function showInfo(position, isAutoHide) {
            $this.css({ "left": "auto", "top": "auto" });
            var p = position || options.position,
                target_p = getElPosition($target),
                size = getElSize($this);
            $this.removeClass("top bottom left right topLeft topRight bottomLeft bottomRight stepTop");
            switch (p) {
                case "right":
                    $this.addClass("right").css({
                        "top": target_p.Top + "px",
                        "left": target_p.Left + target_p.Width + options.arrowWidth + "px"
                    });
                    break;
                case "bottom":
                    $this.addClass("bottom").css({
                        "top": target_p.Top + target_p.Height + options.arrowHeight + "px",
                        "left": target_p.Left + "px"
                    });
                    break;
                case "left":
                    $this.addClass("left").css({
                        "top": target_p.Top + "px",
                        "left": target_p.Left - size.Width - options.arrowWidth + "px"
                    });
                    break;
                case "top":
                    $this.addClass("top").css({
                        "top": target_p.Top - size.Height - options.arrowHeight + "px",
                        "left": target_p.Left + "px"
                    });
                    break;
                case "topLeft":
                    $this.addClass("top topLeft").css({
                        "top": target_p.Top - size.Height - options.arrowHeight + "px",
                        "left": target_p.Left - size.Width + options.arrowWidth + "px"
                    });
                    break;
                case "topRight":
                    $this.addClass("top").css({
                        "left": target_p.Left + "px"
                    });
                    size = getElSize($this);
                    $this.css({ "top": target_p.Top - size.Height - options.arrowHeight + "px" });
                    break;
                case "bottomLeft":
                    $this.addClass("bottom bottomLeft").css({
                        "top": target_p.Top + target_p.Height + options.arrowHeight + "px",
                        "left": target_p.Left - size.Width + options.arrowWidth + "px"
                    });
                    break;
                case "bottomRight":
                    $this.addClass("bottom").css({
                        "top": target_p.Top + target_p.Height + options.arrowHeight + "px",
                        "left": target_p.Left + "px"
                    });
                    break;
                case "topCenter":
                    $this.addClass("topCenter").css({
                        "top": target_p.Top - size.Height - options.arrowHeight + "px",
                        "left": target_p.Left - size.Width / 2 + target_p.Width / 2 + "px"
                    });
                    break;
                default:
                    $this.addClass("top").css({
                        "top": target_p.Top - size.Height - options.arrowHeight + "px",
                        "left": target_p.Left + "px"
                    });
                    break;
            }

            if (isAutoHide) {
                $this.stop().fadeIn("fast", function () {
                    hideInfo(isAutoHide);
                });
            } else {
                $this.stop().fadeIn("fast");
            }
        }

        /**
         * 获取元素的长宽。
         * @method getElSize
         * @param {obj} jq对象
         * @author cy
         */
        function getElSize($el) {
            if ($el[0]) {
                return {
                    Width: $el.outerWidth(),
                    Height: $el.outerHeight()
                };
            } else {
                return false;
            }
        }

        /**
         * 获取元素相对显示偏移量。
         * @method getElPosition
         * @param {obj} jq对象
         * @author cy
         */
        function getElPosition($el) {
            if ($el[0]) {
                return {
                    Top: $el.offset().top,
                    Left: $el.offset().left,
                    Height: $el.outerHeight(),
                    Width: $el.outerWidth()
                };
            } else {
                return false;
            }
        }

        init(); // 调用初始化方法
        $.extend(this, { // 为this对象
            "cmptype": 'Bubble', // 将方法注册为公共方法
            "version": "1.1.0",
            "setBubbleEvent": setBubbleEvent,
            "freeBubbleEvent": freeBubbleEvent,
            "setTarget": setTarget,
            "showInfo": showInfo,
            "hideInfo": hideInfo,
            "setInfo": setInfo,
            "setInfoType": setInfoType,
            "setInfoConStyle": setInfoConStyle
        });
    }

    return Bubble;
});

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(245);

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

var core = __webpack_require__(23);
var global = __webpack_require__(3);
var SHARED = '__core-js_shared__';
var store = global[SHARED] || (global[SHARED] = {});

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: core.version,
  mode: __webpack_require__(38) ? 'pure' : 'global',
  copyright: '© 2019 Denis Pushkarev (zloirock.ru)'
});


/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = __webpack_require__(25);
// eslint-disable-next-line no-prototype-builtins
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return cof(it) == 'String' ? it.split('') : Object(it);
};


/***/ }),
/* 68 */
/***/ (function(module, exports) {

exports.f = {}.propertyIsEnumerable;


/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 21.2.5.3 get RegExp.prototype.flags
var anObject = __webpack_require__(2);
module.exports = function () {
  var that = anObject(this);
  var result = '';
  if (that.global) result += 'g';
  if (that.ignoreCase) result += 'i';
  if (that.multiline) result += 'm';
  if (that.unicode) result += 'u';
  if (that.sticky) result += 'y';
  return result;
};


/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject = __webpack_require__(2);
var aFunction = __webpack_require__(12);
var SPECIES = __webpack_require__(7)('species');
module.exports = function (O, D) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};


/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

(function (factory) {
	if (true) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(22), __webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {
		factory(jQuery);
	}
})(function ($) {

	$.extend(true, window, {
		TaDialog: TaDialog
	});
	__webpack_require__(97);
	function TaDialog($dialogId) {
		var defaults = {
			title: 'New Dialog',
			href: null,
			collapsible: false,
			minimizable: false,
			maximizable: false,
			resizable: false,
			toolbar: null,
			buttons: null,
			buttonsAlgin: null //设置按钮在left，right，center，默认right
		};
		//TODO
		function init() {}
		function dialog(options, param) {
			if (typeof options == 'string') {
				switch (options) {
					case 'options':
						//return $($dialogId[0]).window('options');
						new TaWindow($($dialogId[0])).window('options');
					case 'dialog':
						//return $($dialogId[0]).window('window');
						new TaWindow($($dialogId[0])).window('window');
					case 'setTitle':
						return $dialogId.each(function () {
							//$(this).window('setTitle', param);
							new TaWindow($(this)).window('setTitle', param);
						});
					case 'open':
						return $dialogId.each(function () {
							//$(this).window('open', param);
							new TaWindow($(this)).window('open', param);
						});
					case 'close':
						return $dialogId.each(function () {
							//$(this).window('close', param);
							new TaWindow($(this)).window('close', param);
						});
					case 'destroy':
						return $dialogId.each(function () {
							//$(this).window('destroy', param);
							new TaWindow($(this)).window('destroy', param);
						});
					case 'refresh':
						return $dialogId.each(function () {
							refresh(this);
						});
					case 'resize':
						return $dialogId.each(function () {
							//$(this).window('resize', param);
							new TaWindow($(this)).window('resize', param);
						});
					case 'move':
						return $dialogId.each(function () {
							//$(this).window('move', param);
							new TaWindow($(this)).window('move', param);
						});
					case 'maximize':
						return $dialogId.each(function () {
							//$(this).window('maximize');
							new TaWindow($(this)).window('maximize');
						});
					case 'minimize':
						return $dialogId.each(function () {
							//$(this).window('minimize');
							new TaWindow($(this)).window('minimize');
						});
					case 'restore':
						return $dialogId.each(function () {
							//$(this).window('restore');
							new TaWindow($(this)).window('restore');
						});
					case 'collapse':
						return $dialogId.each(function () {
							//$(this).window('collapse', param);
							new TaWindow($(this)).window('collapse', param);
						});
					case 'expand':
						return $dialogId.each(function () {
							//$(this).window('expand', param);
							new TaWindow($(this)).window('expand', param);
						});
				}
			}

			options = options || {};
			return $dialogId.each(function () {
				var state = $.data(this, 'dialog');
				if (state) {
					$.extend(state.options, options);
				} else {
					var t = $(this);
					var opts = $.extend({}, defaults, {
						title: t.attr('title') ? t.attr('title') : undefined,
						href: t.attr('href'),
						collapsible: t.attr('collapsible') ? t.attr('collapsible') == 'true' : undefined,
						minimizable: t.attr('minimizable') ? t.attr('minimizable') == 'true' : undefined,
						maximizable: t.attr('maximizable') ? t.attr('maximizable') == 'true' : undefined,
						resizable: t.attr('resizable') ? t.attr('resizable') == 'true' : undefined
					}, options);
					$.data(this, 'dialog', {
						options: opts,
						contentPanel: wrapDialog(this)
					});
				}
				buildDialog(this);
			});
		}
		/**
   * wrap dialog and return content panel.
   */
		function wrapDialog(target) {
			var t = $(target);
			t.wrapInner('<div class="dialog-content"></div>');
			var contentPanel = t.find('>div.dialog-content');

			contentPanel.css('padding', t.css('padding'));
			t.css('padding', 0);

			new TaPanel(contentPanel).ta3panel({
				border: false
			});

			return contentPanel;
		}

		/**
   * build the dialog
   */
		function buildDialog(target) {
			var opts = $.data(target, 'dialog').options;
			var contentPanel = $.data(target, 'dialog').contentPanel;

			$(target).find('div.dialog-toolbar').remove();
			$(target).find('div.dialog-button').remove();
			if (opts.toolbar) {
				var toolbar = $('<div class="dialog-toolbar"></div>').prependTo(target);
				for (var i = 0; i < opts.toolbar.length; i++) {
					var p = opts.toolbar[i];
					if (p == '-') {
						toolbar.append('<div class="dialog-tool-separator"></div>');
					} else {
						var tool = $('<a href="javascript:void(0)"></a>').appendTo(toolbar);
						tool.css('float', 'left').text(p.text);
						if (p.iconCls) tool.attr('icon', p.iconCls);
						if (p.handler) tool[0].onclick = p.handler;
						tool.linkbutton({
							plain: true,
							disabled: p.disabled || false
						});
					}
				}
				toolbar.append('<div style="clear:both"></div>');
			}

			if (opts.buttons) {
				var buttonsAlgin = "";
				if (opts.buttonsAlgin) buttonsAlgin = " style=\"text-align:" + opts.buttonsAlgin + "\"";
				var buttons = $('<div class="dialog-button" ' + buttonsAlgin + '></div>').appendTo(target);
				for (var i = 0; i < opts.buttons.length; i++) {
					var p = opts.buttons[i];
					//修改成sexybutton
					var icon = "",
					    text = "",
					    id = "";
					if (p.iconCls) icon = "<span  class='" + p.iconCls + "'>";
					if (p.text) text = p.text;
					if (p.id) id = " id='" + id + "'";
					//var h = '<button'+id+' type="button" class="sexybutton"><span><span>'+icon+text+(icon==''?'':'</span>')+'</span></span></button>';
					var h = "";
					if (p.buttonHighHlight) {
						h = '<button' + id + ' type="button" class="dialog_new_button isok">' + text + '</button>';
					} else {
						h = '<button' + id + ' type="button" class="dialog_new_button">' + text + '</button>';
					}
					var button = $(h).appendTo(buttons);
					button.focus(function () {
						$("span.button_span", this).addClass("button_focus");
					}).blur(function () {
						$("span.button_span", this).removeClass("button_focus");
					});
					if (p.hotKey && hotKeyregister) hotKeyregister.add(p.hotKey, function () {
						button.focus();button.click();return false;
					});

					if (p.handler) button[0].onclick = p.handler;
				}
			}

			if (opts.href) {
				//				contentPanel.ta3panel({
				//					href: opts.href,
				//					onLoad: opts.onLoad
				//				});
				new TaPanel(contentPanel).ta3panel({
					href: opts.href,
					onLoad: opts.onLoad
				});
				opts.href = null;
			}

			new TaWindow($(target)).window($.extend({}, opts, {
				onResize: function onResize(width, height) {
					var wbody = new TaPanel($(target)).ta3panel('panel').find('>div.panel-body');

					new TaPanel(contentPanel).ta3panel('resize', {
						width: wbody.width(),
						height: height == 'auto' ? 'auto' : wbody.height() - wbody.find('>div.dialog-toolbar').outerHeight(true) - wbody.find('>div.dialog-button').outerHeight(true)
					});

					if (opts.onResize) opts.onResize.call(target, width, height);
				}
			}));
		}

		function refresh(target) {
			var contentPanel = $.data(target, 'dialog').contentPanel;
			//			contentPanel.ta3panel('refresh');
			new TaPanel(contentPanel).ta3panel('refresh');
		}

		init(); // 调初始化方法
		$.extend(this, { // 为this对象
			"cmptype": 'dialog', // 将方法注册为公共方法
			"version": "3.13.0",
			"dialog": dialog
		});
	}
	return TaDialog;
});

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(factory){
	if (true) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0),__webpack_require__(100)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {
		factory(jQuery);
	}
}(function($){
	$.extend(true, window, {
		TaHelpTip : TaHelpTip
	});

	__webpack_require__(101);
	function TaHelpTip($helpTipId){
		var defaults = {
			replay:false,// 是否自动播放
			delayTime:3000,
			show:true,
			cookname:null,
			func: null,
			reID:"xxx",// "hint_tip",
			data:[]
		};

        $.clearCookieHintArray = function(currentBid){
            var data = {};
            var cookieArray = document.cookie.split(";");
            var hintCookies = new Array();

            for (var i = 0; i < cookieArray.length; i++) {
                var cookie = cookieArray[i].split("=");// 将名和值分开
                var name = $.trim(cookie[0]);
                var c_start = name.indexOf("hint_")
                if (c_start != -1) {
                    if(!currentBid)
                        $.cookie(name,null,{path:'/'});
                    if(("hint_"+currentBid) == name)
                        $.cookie(name,null,{path:'/'});
                }
            }

        }

		function helpTip(options){
			var opts = $.extend(defaults,options);
			var replay   = opts.replay;
			var delayTime= opts.delayTime;
			var show     = opts.show;
			var cookname = opts.cookname;
			var func     = opts.func;
			var data     = opts.data;
			var reID     = opts.reID;

			var screenHeight = $(window).height();
			var bodyHeight   = $(document).height();
			//var s_b = screenHeight/bodyHeight;
			var bodyWidth  = $("body").width();
			var nowbody    = $("body"),url = window.location.href;
			var time1;
			var time2;
			var hintName   = encodeURI("hint_"+cookname); // encodeURI("hint_"+url);    //"hint_"+url.replace(/\//g, "").replace(/:/g, "");
			var hintValue  = encodeURI("hint_"+cookname); // encodeURI("hint_"+url);    //"hint_"+url.replace(/\//g, "").replace(/:/g, "");
			//初始化
			init();
			//初始化
			function init(){
               // $.clearCookieHintArray(cookname);//change by zzb
				if(show){
					if(!checkHintCookie()){
						nowbody.append("<div class='hint-mask'"
							+"style='width:"+bodyWidth+"px;height:"+bodyHeight+"px;'></div>");
						//遍历提示步骤
						stepTip();
					}
				}

				$(".hint-tips .hint-contents .hc-message .hm-opts .ho-next").bind("click",function(){

					var nowhint = $(this).parent().parent().parent().parent();
					var step = parseInt(nowhint.attr("step"));
					//当前div如果是最后一个，则不在执行任何下一步操作（隐藏当前窗口 和 寻找下一窗口并且打开）
					if(step == data.length-1){
						return;
					}
//						nowhint.remove();
					nowhint.hide();

					var nexthint = $(".hint-tips[step='"+(step+1)+"']");
					nexthint.show();
					var scrollTop = nexthint.offset().top;
					$("body,html").animate({
						scrollTop:scrollTop-200
					});
				});

				//注册点击上一步事件
				$(".hint-tips .hint-contents .hc-message .hm-opts .ho-pre").bind("click",function(){
					var nowhint = $(this).parent().parent().parent().parent();
					var step = parseInt(nowhint.attr("step"));
//				     nowhint.remove();
					nowhint.hide();

					var prehint = $(".hint-tips[step='"+(step-1)+"']");
					prehint.show();
					var scrollTop = prehint.offset().top;
					$("body,html").animate({
						scrollTop:scrollTop-200
					});

				});

				//注册点击关闭向导事件
				$(".hint-tips .hint-contents .hc-close").bind("click",function(){

					$(".hint-tips").remove();
					$(".hint-mask").remove();
					if(!checkHintCookie()){
						writeCookie(hintName,hintValue);// 暂时关闭
					}
					clearTimeout(time1);
					clearTimeout(time2);
//					 self = null;
				});

				//最后一步关闭向导
				$(".hint-tips .hint-contents .hc-message .hm-opts .ho-last").bind("click",function(){
					$(".hint-tips").remove();
					$(".hint-mask").remove();
					if(!checkHintCookie()){
						writeCookie(hintName,hintValue);
					}
					clearTimeout(time1);
					clearTimeout(time2);
				});

				//自动播放
				if(replay){
					time1 = setTimeout(autoPlay,delayTime) ;
				}

				/**
				 * 重新引导
				 */
				$("#"+reID).bind("click",function(){

					var hintCookieArray = new Array();
					var data = {};
					hintCookieArray = _getHintCookies("hint_");
					for(var i = 0;i<hintCookieArray.length;i++){
						var name = hintCookieArray[i];
						$.cookie(name,null,{path:'/'});
					}
				});

			};
			//遍历data
			function stepTip(){
				var len = data.length;
				var isOne = false;
				var i,
					obj,
					id;

				if(len==0){
					return false;
				}
				for(i=0;i<len;i++){
					var ditem = data[i];
					id = ditem.id;
					var message = ditem.message;
					var child = ditem.child;
					if(typeof id == "string") {
						obj = $("#"+id);
					}
					if(typeof id == "object") {
						obj = id;
					}
					if(!obj || !obj[0]){
						continue;
					}else{
						isOne = true;
					}
					createHint(obj,message,i,len,child);
				}
				if(!isOne){
					$(".hint-tips").remove();
					$(".hint-mask").remove();
				}
			};

			/**
			 * 创建提示的div
			 */
			function createHint(obj,message,i,len,child){
				var message,
					o_height,
					o_width,
					ditem,
					o_x,
					o_y,
					borderHeight,
					borderWidth,
					arrowHeight,
					arrowWidth;
				o_height = obj.outerHeight();
				o_width  = obj.outerWidth();

				o_x = obj.offset().left;
				o_y = obj.offset().top;
				if(child == true) {
					o_x = o_x + 140;
					o_y = o_y + 101;
				}
				arrowHeight = 65;
				var ht_style = "width:"+(350)+	"px;left:"+o_x+"px;top:"+o_y+	"px;min-width:250px;";
				var hc_style = "margin-top:"+(arrowHeight+o_height)+"px;";
				var hb_style = "width:"+o_width   +"px;height:"+o_height   +"px;top:"+-(arrowHeight+o_height)	+"px;left:-1px;";

				var div =$("<div class=\"hint-tips\" style="+ht_style+"  step="+i+">"
					+"<div class=\"hint-contents\" style="+hc_style+">"
					+"<div class=\"hc-border\" style="+hb_style+"></div>"
					+"<div class=\"hc-arrow toTop\"></div>"
					+"<div class=\"hc-close faceIcon icon-close \"></div>"
					+"<div class=\"hc-message\">"
					+"<div class=\"hm-content\">"+message+"</div>"
					+"<div class=\"hm-opts\">"
					+"<span class=\"ho-next\">"+ Base.I18n.getLangText('taface.module.helptip.nextstep')+"</span>"//下一步
					+"<span class=\"ho-last\">"+ Base.I18n.getLangText('taface.module.helptip.navigationendenterwebsite')+"</span>"//导航结束进入网站
					+"<span class=\"ho-pre\">"+ Base.I18n.getLangText('taface.module.helptip.previousstep')+"</span>"//上一步
					+"</div>"
					+"</div>"
					+"</div>"
					+"</div>");
				nowbody.append(div);

				//箭头 提示内容的位置
				var offset = 30;
				var div_width = div.outerWidth()+offset;
				var div_height = div.outerHeight();
				var content_height =div_height - parseInt(div.children(".hint-contents").css("margin-top"));

				var flag_w = div_width + o_x;
				var flag_h = div_height + o_y;

				// 2.
				if(flag_w>=bodyWidth&&flag_h<bodyHeight){
					div.css("left",(o_x+o_width-div_width)+"px");
					div.find(".hc-border").css("left",(div_width-o_width)+"px");
					div.find(".hc-arrow").css({"left":(div_width-70)+"px"}).removeClass("toBottom").addClass("toTop");
				}
				// 3.
				if(flag_w>=bodyWidth&&flag_h>=bodyHeight){
					div.css({"left":(o_x+o_width-div_width)+"px","top":(o_y-div_height-arrowHeight)+ "px"});
					div.find(".hc-border").css({"left":(div_width-o_width)+"px","top":(content_height+arrowHeight)});
					div.find(".hc-arrow" ).css({
						"left":(div_width-70)+"px","top":content_height+"px"}).removeClass("toTop").addClass("toBottom");
					//add by cy 调整目标元素为全屏的时候的情况
					if(parseInt(div.css("top"))+o_height+arrowHeight<0){//如果向上超出//改为向下显示
						div.css({"top":(o_y-div_height-arrowHeight+content_height+arrowHeight+arrowHeight)+"px"});
						div.find(".hc-border").css({"top":(content_height+arrowHeight-content_height-arrowHeight-arrowHeight)});
						div.find(".hc-arrow").css({"top":-arrowHeight+4+"px"}).removeClass("toBottom").addClass("toTop");
					}
				}
				//4.
				if(flag_w<bodyWidth&&flag_h>=bodyHeight){
					div.css({"top":(o_y-div_height-arrowHeight)+"px"});
					div.find(".hc-border").css({"top":(content_height+arrowHeight)});
					div.find(".hc-arrow").css({"top":content_height+"px"}).removeClass("toTop").addClass("toBottom");//原设置
					//add by cy 调整目标元素为全屏的时候的情况
					if(parseInt(div.css("top"))+o_height+arrowHeight<0){//如果向上超出//改为向下显示
					 div.css({"top":(o_y-div_height-arrowHeight+content_height+arrowHeight+arrowHeight)+"px"});
					 div.find(".hc-border").css({"top":(content_height+arrowHeight-content_height-arrowHeight-arrowHeight)});
					 div.find(".hc-arrow").css({"top":-arrowHeight+4+"px"}).removeClass("toBottom").addClass("toTop");
					}


				}
				if(i==0){
					div.show();
					$("body,html").animate({
						scrollTop:o_y-200 //*s_b + 100
					});
				}else{
					div.find(".hm-opts").children(".ho-pre").show();// 只要不是第一次，就显示“上一步”按钮
				}

				if(i==(len-1)){
					div.find(".hm-opts").children(".ho-next").hide();
					div.find(".hm-opts").children(".ho-last").show();
				}

			};

			//注册点击下一步事件
			function autoPlay(){
				var nowhint = $(".hint-tips:visible");//获取当前可见的那个div，首次执行时可见的就是第一个div
				var step = parseInt(nowhint.attr("step"));
				$(".hint-tips[step='"+(step)+"'] .hint-contents .hc-message .hm-opts .ho-next").click();
				if(step==data.length-1){
					clearTimeout(time1);
					return;
				}
				time2 = setTimeout(autoPlay,delayTime) ;
			}

			//向cookie写入数据
			function writeCookie(hintName,hintValue){
				var data= {};
				data["dto['hintName']"]  = hintName;
				data["dto['hintValue']"] = hintValue;
				$.cookie(hintName, hintValue, { expires: 365, path: '/' });

			};

			//检查hintcookie是否存在
			function checkHintCookie(){
				var cookieValue = getHintCookie(hintName);
				if(cookieValue==hintValue){
					return true;
				}
				return false;
			};

			/**
			 * 获得所有名称包括c_name的cookie
			 */
			function _getHintCookies(c_name){
				var cookieArray = document.cookie.split(";");
				var hintCookies = new Array();
				for (var i = 0;i<cookieArray.length;i++){
					var cookie = cookieArray[i].split("=");//将名和值分开
					var name   = $.trim(cookie[0]);
					var c_start = name.indexOf(c_name)
					if(c_start != -1){
						hintCookies.push(name);
					}
				}

				return hintCookies;
			}

			function getHintCookie(name){
				var cookieArray = document.cookie.split(";"); //得到分割的cookie名值对
				var cookie = new Object();
				for (var i=0;i<cookieArray.length;i++){
					var arr=cookieArray[i].split("=");       //将名和值分开

					if($.trim(arr[0])==$.trim(name))
						return unescape(arr[1]); //如果是指定的cookie，则返回它的值
				}
				return "";
			};
		}

		// init(); 调初始化方法
		$.extend(this, { // 为this对象
			"cmptype" : 'helptip',// 将方法注册为公共方法
			"version" : "3.13.0",
			"helpTip": helpTip,
			"clearCookieHintArray" : $.clearCookieHintArray
		});
	}
	return TaHelpTip;
}));



/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * 下拉框
 * @module flexbox
 */
__webpack_require__(225);
(function (factory) {
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(13), __webpack_require__(17), __webpack_require__(55), __webpack_require__(33)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {
        factory(jQuery);
    }
}(function ($) {
    __webpack_require__(226);
    $.extend(true, window, {
        TaSelectInput: TaSelectInput
    });

    function TaSelectInput(selectInputId, options) {
        //设置默认值(把tag中内容搬到js中来)
        options = $.extend({
            bpopTipMsg: null,
            bpopTipWidth: 500,
            bpopTipHeight: 300,
            bpopTipPosition: "top",
            textHelp: false,
            textHelpWidth: 200,
            textHelpPosition: "bottomLeft",
            toolTip: null,
            showDetailed: false,
            key: null,
            value: null,
            labelStyle: "",
            required: false,
            disabled: false,
            readOnly: false,

            realId: selectInputId

        }, options || {});

        var selectInput = null;

        function init() {

            if (options.data == null || options.data == "null") {
                options.data = eval("[]");
            }
            if (options.setSortFn) {//add by cy 添加自定义排序函数
                options.data = setSort(options.data, options.setSortFn);
            }
            selectInput = $("#" + selectInputId + "_div").flexbox(options.data, options);

            if (options.showDetailed) {
                var $obj = $("#" + selectInputId + "_desc");
                $obj.mouseenter(function (e) {
                    if ($obj.val() != "") {
                        if ($("#" + selectInputId + "_tips").length == 0) {
                            $("<div id='" + selectInputId + "_tips'  class='slick-showdetail'/>").html("<span style='word-break:break-all'>" + $obj.val() + "</span>").appendTo($obj.parent());
                        } else {
                            $("#" + selectInputId + "_tips").find("span").html($obj.val());
                        }
                        $("#" + selectInputId + "_tips").css({
                            "left": e.clientX + 4,
                            "top": e.clientY + 4,
                            "position": "fixed"
                        });
                        $("#" + selectInputId + "_tips").show();
                    }
                });
                $obj.mouseleave(function () {
                    $("#" + selectInputId + "_tips").hide();
                });
            }
            //提示文字信息
            var $textHelp = $("#textHelp_" + selectInputId);
            if (options.textHelp) {
                var _op = {
                    width: options.textHelpWidth,
                    position: options.textHelpPosition,
                    info: options.textHelp,
                    arrowWidth: 16
                };
                Bubble.setBubbleEvent($textHelp, _op);
            }
            //bpopTipMsg 提示泡泡
            if (options.bpopTipMsg) {
                var _op = {
                    width: options.bpopTipWidth,
                    height: options.bpopTipHeight,
                    position: options.bpopTipPosition,
                    info: options.bpopTipMsg
                }
                Bubble.setBubbleEvent($("#" + selectInputId + "_div"), _op);

            }
        }// end init


        //设置默认排序方式//add by cy
        function setSort(d, sortfn) {
            var data = d.sort(function (a, b) {
                return sortfn(a.name, b.name);
            });
            return data;
        }

        init();// 调用初始化方法
        $.extend(this, { // 为this对象
            "cmptype": 'TaSelectInput',// 将方法注册为公共方法
            "version": "1.1.0",
            setValue: selectInput[0].setValue,
            getValue: selectInput[0].getValue,
            setData: selectInput[0].setData,
            setFocus: selectInput[0].setFocus,
            setReadOnly: selectInput[0].setReadOnly,
            setEnable: selectInput[0].setEnable,
            setVisible: selectInput[0].setVisible,
            setDisableSelect: selectInput[0].setDisableSelect,
            setfilterStartChar: selectInput[0].setfilterStartChar,
            fiterValueLengthMax: selectInput[0].fiterValueLengthMax,
            fiterValueLengthMin: selectInput[0].fiterValueLengthMin,
            getId: selectInput[0].getId,
            getInput: selectInput[0].getInput,
            getInputLabel: selectInput[0].getInputLabel,
            clearSelect: selectInput[0].clearSelectValue,
            clear:selectInput[0].clearSelectValue,
            clearSelectData: selectInput[0].clearSelectData,
            doValidate: selectInput[0].doValidate,
            setValidateStyle: selectInput[0].setStateStyle,
            setRequired: selectInput[0].setRequired,
            reset: selectInput[0].reset,
            newSerialize: selectInput[0].newSerialize
        });
    }

    // 在flexbox中，通过o.source来保持数据$input显示框,$hdn为隐框
    $.fn.flexbox = function (source, options) {
        /**
         * @author lins
         */
        var flexboxes = [];
        try {
            var defaults = $.fn.flexbox.defaults;
            var o = $.extend({}, defaults, options);
            if (!source) return;
            if (source.length > 0 && o.clearData != "") {
                var appendString = {};
                appendString.id = "";
                appendString.name = o.clearData;
                source.unshift(appendString);
            }
            o.source = {};
            o.source.results = source;

            if (!o.source.total) {
                o.source.total = source.length;
            }
            if (options) {
                o.paging = (options.paging || options.paging == null) ? $
                    .extend({}, defaults.paging, options.paging) : false;

                for (var prop in o.paging) {
                    if (defaults.paging[prop] === undefined)
                        throw ('Invalid option specified: ' + prop + '\nPlease check your spelling and try again.');
                }

                if (options.displayValue && !options.hiddenValue) {
                    o.hiddenValue = options.displayValue;
                }
            }
            this.each(function () {
                var obj = new $.flexbox(this, o);
                flexboxes.push(obj);
            });
            return flexboxes;
        } catch (ex) {
            if (typeof ex === 'object')
                alert(ex.message);
            else
                alert(ex);
        }
    };

    // plugin defaults - added as a property on our plugin function so they can
    // be set independently
    $.fn.flexbox.defaults = {
        method: 'GET', // One of 'GET' or 'POST'
        queryDelay: 0, // num of milliseconds before query is run.
        allowInput: true, // set to false to disallow the user from typing in
        inputContainerCss: "selectinput-input-container",
        containerClass: 'selectinput-dropdown-container',
        contentClass: 'content',
        selectClass: 'selectinput-selected',
        inputClass: 'selectinput-input',
        arrowClass: 'selectinput-arrow',
        matchClass: 'selectinput-match',
        noResultsText: Base.I18n.getLangText('taface.module.selectinput.noresultstext'), // text to show when no results match the query
        noResultsClass: 'selectinput-results', // class to apply to noResultsText
        showResults: true, // whether to show results at all, or just typeahead
        selectFirstMatch: true, // whether to highlight the first matching
        // value
        autoCompleteFirstMatch: false, // whether to complete the first
                                       // matching value in the input box
        highlightMatches: true, // whether all matches within the string
        // should be highlighted with matchClass
        highlightMatchesRegExModifier: 'i', // 'i' for case-insensitive, 'g'
        // for global (all occurrences),
        // or combine
        matchAny: true, // for client-side filtering ONLY, match any
        // occurrence of the search term in the result (e.g.
        // "ar" would find "area" and "cart")
        minInputChars: 1, // the minimum number of characters the user must
        // enter before a search is executed
        showArrow: true, // set to false to simulate google suggest

        arrowQuery: '', // the query to run when the arrow is clicked
        onSelect: false, // function to run when a result is selected
        onChange: false,// onchange
        maxCacheBytes: 32768, // in bytes, 0 means caching is disabled
        displayValue: 'name', // json element whose value is displayed on
        // select
        resultTemplate: '{name}', // html template for each row (put json
        // properties in curly braces)
        hiddenValue: 'id', // json element whose value is submitted when form
                           // is submitted
        initialValue: '', // what should the value of the input field be when
        // the form is loaded?
        watermark: '', // text that appears when flexbox is loaded, if no
                       // initialValue is specified. style with css class
                       // '.ffb-input.watermark'
        width: 200, // total width of flexbox. auto-adjusts based on
        // showArrow value
        resultsProperty: 'results', // json property in response that
        // references array of results
        totalProperty: 'total', // json property in response that references
        // the total results (for paging)
        maxVisibleRows: 20, // default is 0, which means it is ignored. use
        // either this, or paging.pageSize
        pyFilter: 'py',// @author lins 拼音过滤
        reverseFilter: false,// @author lins 是否过滤
        allowInputOtherText: false,// @author lins 是否支持输入
        showAllArrow: true,// @author lins 是否显示全部数据
        isAutoExtend: true,// 李从波添加，是否自动计算下拉选项扩展方向
        isFocusShowPanel: true,// lh添加，是否聚焦时展示下拉框
        showKey: false,
        showValue: 'value',//显示的默认值,key只显示key,all显示所有,默认是value;
        placeholder: "",//提示框的信息;
        clearData: "",//首选项的信息;
        disabled: false,
        readOnly: false,
        name: "",
        divId: "",
        required: false,
        submitDesc: true,
        showRefresh: false,
        showClear: true,
        itemHeight: 30,
        paging: {
            style:'input', // or 'links'
            cssClass: 'selectinput-paging', // prefix with containerClass (e.g. .ffb
            // .paging)
            pageSize:40, // acts as a threshold. if <= pageSize results,
            // paging doesn't appear
            maxPageLinks: 5, // used only if style is 'links'
            showSummary: false, // whether to show 'displaying 1-10 of 200
            // results' text
            summaryClass: 'summary', // class for 'displaying 1-10 of 200
            // results', prefix with containerClass
            //  summaryTemplate : '{start}-{end} 共 {total} 条' // can use {page} and {pages} as well
            summaryTemplate: Base.I18n.getLangText('taface.module.selectinput.pageandpagecounts', '{start}-{end} ', ' {total} ') // can use {page} and {pages} as well

        }
    };

    $.flexbox = function (div, o) {
        var self = this;
        this.cmptype = "flexbox";
        var first = true;
        var timeout = false, // hold timeout ID for suggestion results to
            // appear
            cache = [], // simple array with cacheData key values, MRU is the first
                        // element
            cacheData = [], // associative array holding actual cached data
            cacheSize = 0, // size of cache in bytes (cache up to o.maxCacheBytes bytes)
            delim = '\u25CA', // use an obscure unicode character (lozenge) as th cache key delimiter
            scrolling = false, pageSize = o.paging && o.paging.pageSize ? o.paging.pageSize
            : 0, retrievingRemoteData = false, defaultVisibleRows = o.maxVisibleRows > 0 ? o.maxVisibleRows
            : 1, // 李从波修改，预定义的显示的行数，如果用户未指定可视行数，则为默认值
            $div = $(div).addClass(o.inputContainerCss),
            $divCon = $div.parent();
        cancelBlur = false, cancelFocus = false;//modify by xp 添加失效事件触发标致，解决IE下拖动滚动条丢失焦点的问题;
        var arrowClick, clearClick, validObj;
        var $arrow, $refreshCode, $clear;
        var disables = [];// @author lins
        var $hdn = $('<input type="hidden" class="ComponentsSerialize"/>').val(o.initialValue).appendTo($div);// TODO 林森修改name，id
        var $input = $('<input autocomplete="off" disableautocomplete realId="' + o.realId + '"/>');
        var inputChgEvtTimeout;
        $input.addClass(o.inputClass).appendTo($div);
        $input.click(inputClick).change(inputChange).focus(inputFocus).blur(inputBlur).keydown(processKeyDown);

        function inputClick() {
            if (o.watermark !== '' && this.value === o.watermark) {
                this.value = '';
            } else {
                arrowClick();
                return false; //liding modified in 2015-8-10
            }
        }

        function inputChange() {
            if (typeof o.onChange == "function") {
                //利用定时器后置任务，以便在blur 同步隐藏值之后执行事件
                inputChgEvtTimeout = setTimeout(function () {
                    o.onChange($input.val(), $hdn.val())
                }, 0);
            }
        }

        function inputFocus() {
            setFocusStyle();
            if (cancelFocus) {
                cancelFocus = false;
                return;
            }
            if (typeof o.onFocus == "function") {
                o.onFocus($input.val(), $hdn.val());
            } else {
                this.select();
                return false;
            }
        }

        function inputBlur() {
            setBlurStyle();
            if (this.value === '')
                $hdn.val('');
            if (!o.allowInputOtherText)
                clearInput(this.value, $hdn.val()); // @author lins//change by cy

            else {
                //add by xp 处理无可选项时，允许输入其他值
                if(o.source.results.length > 0){
                    // 将值赋值给隐藏框,以便后台获取.liys 20130806
                    for (var i = 0; i < o.source.results.length; i++) {
                        if (this.value == o.source.results[i].name) {
                            break;
                        }
                        if (i == o.source.results.length - 1) {// 没有在collection中的将值赋值给隐藏框
                            $hdn.val(this.value);
                        }
                    }
                }else{
                    $hdn.val(this.value);
                }
            }
            //change by cy 修复选中后再写入不是选项中的数据之后不做验证
            if (cancelBlur) {
                cancelBlur = false;
                return;
            }
            timeout = setTimeout(function () {
                if (!$input.data('active'))
                    hideResults();
            }, 200);
        }

        function processKeyDown(e) {

            // handle modifiers
            var mod = 0;
            if (typeof (e.ctrlKey) !== 'undefined') {
                if (e.ctrlKey)
                    mod |= 1;
                if (e.shiftKey)
                    mod |= 2;
            } else {
                if (e.modifiers & Event.CONTROL_MASK)
                    mod |= 1;
                if (e.modifiers & Event.SHIFT_MASK)
                    mod |= 2;
            }
            // if the keyCode is one of the modifiers, bail out (we'll catch it
            // on the next keypress)
            if (/16$|17$/.test(e.keyCode))
                return; // 16 = Shift, 17 = Ctrl

            var tab = e.keyCode === 9, esc = e.keyCode === 27;
            var tabWithModifiers = e.keyCode === 9 && mod > 0;
            var backspace = e.keyCode === 8; // we will end up extending the
            // delay time for backspaces...

            /*			统一交互行为，取消tab选中 xp
             if (tab)
             if (getCurr())
             selectCurr();//选择事件已包括跳转实现，如果放开需要阻止tab冒泡事件，不然会发生两次跳转
             else
             Base._goNextFormField(o.divId);*/

            // handling up/down/escape/right arrow/left arrow requires results
            // to be visible
            // handling enter requires that AND a result to be selected
            if ((/27$|38$|33$|34$/.test(e.keyCode) && $ctr.is(':visible'))
                || (/13$|40$/.test(e.keyCode)) || !o.allowInput) {

                if (e.preventDefault)
                    e.preventDefault();
                if (e.stopPropagation)
                    e.stopPropagation();
                e.cancelBubble = true;
                e.returnValue = false;

                switch (e.keyCode) {
                    case 38: // up arrow
                        prevResult();
                        break;
                    case 40: // down arrow
                        if ($ctr.is(':visible'))
                            nextResult();
                        else
                            flexboxDelay(true);
                        break;

                    case 13: // TODO 林森屏蔽enter
                        if (getCurr()) {
                            selectCurr();
                        }
                        if ($ctr.is(':visible')) hideResults();
                        Base._goNextFormField(o.divId);
                        // else flexboxDelay(true);
                        break;
                    case 27: // escape
                        hideResults();
                        break;
                    case 34: // page down
                        if (!retrievingRemoteData) {
                            if (o.paging)
                                $('#' + $div.attr('id') + 'n').click();
                            else
                                nextPage();
                        }
                        break;
                    case 33: // page up
                        if (!retrievingRemoteData) {
                            if (o.paging)
                                $('#' + $div.attr('id') + 'p').click();
                            else
                                prevPage();
                        }
                        break;
                    default:
                        if (!o.allowInput) {
                            return;
                        }
                }
            } else if (!esc && !tab && !tabWithModifiers) { // skip esc and tab
                // key and any
                // modifiers
                flexboxDelay(false, backspace);
            }
        }

        // TODO lins 添加属性
        if (o.submitDesc && o.name !== "") {
            //modify by cy
            var desc = "";
            if(o.name.substring(0,4)=="dto["){
                desc=o.name.replace("']", "");
                desc += "_desc']";
            }else {
                desc=o.name+"_desc";
            }
            $input.attr('name', desc);
        }
        if (o.name !== "") {
            $hdn.attr('name', o.name); // "dto['" + $div.attr('id') + "']"
        }
        if (o.divId !== "") {
            $hdn.attr('id', o.divId);
            $input.attr('id', o.divId + '_desc');
            if (o.placeholder != null && o.placeholder != "") {
                $input.attr('placeholder', o.placeholder);
                Base.funPlaceholder(document.getElementById(o.divId + '_desc'));
            }
        }

        //add by cy 设置输入选择框只能选择不能输入
        if (o.selectonly == "true" || o.selectonly == true) {
            $input.attr("readonly", "readonly")
        }
        // ******************************
        if (o.initialValue !== '') {
            $input.val(o.initialValue).removeClass('watermark');
        } else {
            if (o.selectFirstValue && o.source.results[0]) {
                $input.val(o.source.results[0][o.displayValue]);
                $hdn.val(o.source.results[0][o.hiddenValue]);
            } else {
                $input.val(o.watermark).addClass('watermark');
            }
        }
        if (o.showArrow && o.showResults) {
            arrowClick = function () {
                if ($ctr.is(':visible')) {
                    hideResults();
                } else {

                    if (o.watermark !== '' && $input.val() === o.watermark) {
                        $input.val('');
                    } else {
                        $input.select();
                    }
                    if (timeout) {
                        clearTimeout(timeout);
                    }
                    timeout = setTimeout(function () {
                        flexbox(1, true, o.arrowQuery);
                    }, o.queryDelay);
                }
                first = false;
            };
            $arrow = $('<span class="faceIcon icon-arrow_down"></span>').attr('id', $div.attr('id') + '_arrow');
            $arrow.addClass(o.arrowClass).click(arrowClick).appendTo($div);
            $input.css('width', '100%');
            //刷新按钮
            if (o.showRefresh) {
                $refreshCode = $('<span class="faceIcon icon-refresh"></span>').attr('id', $div.attr('id') + '_refreshCode')
                    .addClass("selectinput-refreshcode")
                    .click(arrowClick).appendTo($div);
            }
            //change by xp 添加showClear属性;添加onClear表格下拉删除控制优化
            if (o.showClear == "true" || o.showClear == true) {
                clearClick = function () {
                    var oldHdnVal = $hdn.val();
                    var oldInpVal = $input.val();
                    $input.val("");
                    $hdn.val("");
                    //add by cy 添加clear之后触发onchange事件
                    if (oldHdnVal !== "") {
                        if (typeof o.onChange == "function") {
                            o.onChange($input.val(), $hdn.val());
                        }
                    }
                    hideResults();
                    if (o.onClear) {
                        o.onClear(oldInpVal, oldHdnVal);
                    }
                }
                var $clear = $('<span id="' + $div.attr('id') + '_clear' + '" class="faceIcon icon-close selectinput-clear"></span>').click(clearClick).appendTo($div);
            }
        }
        if (!o.isFocusShowPanel) {
            $input.unbind("focus");
        }
        if (!o.allowInput) {
            o.selectFirstMatch = false;
            $input.click(arrowClick);
        }
        var inputPad = $input.outerHeight(true) - $input.height() - 2;
        var inputWidth = $input.outerWidth(true) - 2;

        var $ctr = $('<div ></div>').attr('id', $div.attr('id') + '_ctr').addClass(o.containerClass);
        var _p = getBoxPosition();
        $ctr.css({left: _p.left, top: _p.top + $input.height() + 5 + "px"}).appendTo($("body")).hide();

        //add by cy selectinput 自己控制失去焦点和获得焦点的样式
        function setFocusStyle() {
            //先暂时这样,之后组件整改之后换成自身的属性
            $divCon.addClass("inputFocus");
            $arrow.removeClass("icon-arrow_down").addClass("icon-arrow_up").addClass("active");
            if ($clear) $clear.addClass("active");

        }

        function setBlurStyle() {
            $divCon.removeClass("inputFocus");
            $arrow.removeClass("icon-arrow_up").addClass("icon-arrow_down").removeClass("active");
            if ($clear) $clear.removeClass("active");

        }

        $ctr.bind("mousedown",function (e) {
            //modify by xp 解决弹出框结构位置变动后，引起的选择时boxComponent直接隐藏的问题
            e.cancelBubble = true;
            e.returnValue = false;
            if (e.stopPropagation) {
                e.stopPropagation();
                e.preventDefault();
            }

            //modify by xp 点击选着面板时，取消触发blur事件(添加失效事件触发标致，解决IE下拖动滚动条丢失焦点的问题)
            cancelBlur = true;

        }).bind("mouseup",function (e) {
            //modify by xp 解决IE下拖动滚动条丢失焦点的问题
            cancelBlur = false;
            cancelFocus = true;
            $input.focus();
        });

        // 下拉框添加自定义长度
        if (o.widthPercentage) {
            $ctr.css('width', o.widthPercentage);
        }
        if (o.selectPanelWidth) {
            $ctr.css('width', o.selectPanelWidth);
        }
        var $content = $(
            '<div style="overflow-x:hidden;overflow-y:auto;"></div>')
            .addClass(o.contentClass).appendTo(
                $ctr).scroll(function () {
                scrolling = true;
            });

        var $paging = $('<div></div>').appendTo($ctr);
        // $div.css('height', $input.outerHeight());//lly delete
        //if ($.fn.resizable)
        if (TaResizable)
            new TaResizable($ctr).resizable({
                handles: 'e',
                maxWidth: 900,
                minWidth: 50,
                onStartResize: function () {// 李从波修改 ，拖动的过程中隐藏选择项，避免误操作，拖动结束后显示
                    $content.hide();
                },
                onStopResize: function () {
                    $content.width($ctr.width());
                    $content.show();
                }
            });// lly add

        function flexboxDelay(simulateArrowClick, increaseDelay) {
            if (timeout)
                clearTimeout(timeout);
            var delay = increaseDelay ? o.queryDelay * 5 : o.queryDelay;
            timeout = setTimeout(function () {
                flexbox(1, simulateArrowClick, '');
            }, delay);
        }

        function flexbox(p, arrowOrPagingClicked, prevQuery, pageClick) {
            // 林森添加PageClick
            $("body").bind("click.selectinput",
                function (e) {
                    var srcobj;
                    if ($.browser.msie) {
                        srcobj = e.srcElement;
                    } else {
                        srcobj = e.target;
                    }
                    if (srcobj
                        && (srcobj.id == $input.attr('id') || srcobj.id == $ctr.attr('id'))) {// 李从波修改，添加鼠标点击的是下拉框的判断
                        return false;
                    }
                    hideResults();
                    $("body").unbind(".selectinput");
                });

            if (arrowOrPagingClicked)
                prevQuery = '';
            var filterBool = true;
            //update by sun ,将trim去掉了..
            var q = prevQuery && prevQuery.length > 0 ? prevQuery : $input.val();
            // 如果q的长度大于最小弹出输入框数值-
            // TODO 林森添加用于判断显示及过滤方式
            if (q !== "" && !pageClick) {
                if (o.paging) {
                    var j, page = o.source.total / pageSize;
                    for (var i = 0; i < o.source.total; i++) {
                        //显示的为那种情况,默认为value,add by sun
                        if (o.showValue == "key") {
                            if (o.source[o.resultsProperty][i][o.hiddenValue] == q) {
                                filterBool = !arrowOrPagingClicked;
                                j = i;
                                break;
                            }
                        } else if (o.showValue == "all") {
                            if ((o.source[o.resultsProperty][i][o.hiddenValue] + ":" + o.source[o.resultsProperty][i][o.displayValue]) == q) {
                                filterBool = !arrowOrPagingClicked;
                                j = i;
                                break;
                            }
                        } else {
                            if (o.source[o.resultsProperty][i][o.displayValue] == q) {
                                filterBool = !arrowOrPagingClicked;
                                j = i;
                                break;
                            }
                        }
                        if (o.source.results[i][o.displayValue] == q) {

                        }
                    }
                    if (j) {
                        p = parseInt(j / pageSize);
                        p += 1;
                    }
                }
            } else if (pageClick) {
                q = "";
            }
            /** *********************** */
            if (q.length >= o.minInputChars || arrowOrPagingClicked) {
                if ($content.outerHeight(true) > 0)
                    $content.css('height', $content.outerHeight(true));

                var pWidth = $div.parent("div").outerWidth(false);

                //liys,修改新皮肤后，下拉框的宽度和位置调整
                var widthPercent = 1;
                if (o.widthPercentage) {
                    widthPercent = parseInt(o.widthPercentage, 10) / 100;
                }
                if (o.selectPanelWidth) {
                    widthPercent = 1;
                    pWidth = o.selectPanelWidth;
                }

                if (pWidth) {
                    $content.parent("div").css('width', pWidth * widthPercent);
                }

                $content.html('')
                // TODO 林森
                var cached = checkCache(q, p);
                if (o.showAllArrow && cached) {
                    $content.css('height', 'auto');
                    displayItems(o.source, q);
                    showPaging(p, cached.t);
                } else {
                    // TODO 林森修改params添加filter属性
                    var params = {
                        q: q,
                        p: p,
                        s: pageSize,
                        filter: filterBool,
                        contentType: 'application/json; charset=utf-8'
                    };
                    var callback = function (data, overrideQuery, params) {

                        if (typeof data == "string") {
                            try {
                                eval('var data = ' + data);
                                // dataAll = data;
                            } catch (ex) {
                                //  throw "后台反回json错误";
                                throw Base.I18n.getLangText('taface.module.selectinput.responsejsonerror');

                            }
                        }
                        if (overrideQuery === true)
                            q = overrideQuery; // must compare to boolean
                        // because by default, the
                        // string value "success" is
                        // passed when the jQuery
                        // $.getJSON method's callback
                        // is called
                        var totalResults = parseInt(data[o.totalProperty]);
                        var totalSize = displayItems(data, q, params);
                        showPaging(p, totalResults);
                        $content.css('height', 'auto');
                        var $selectDiv = $content.find("." + o.selectClass);
                        if ($selectDiv.length > 0) {
                            $content.scrollTop($selectDiv[0].offsetTop - 7);
                        }
                        retrievingRemoteData = false;
                    };

                    if (typeof (o.source) === 'object') {
                        if (o.allowInput)
                            callback(o.source, null, params);
                        else
                            callback(o.source);
                    } else {
                        retrievingRemoteData = true;
                        if (o.method.toUpperCase() == 'POST')
                            $.post(o.source, params, callback, 'json');
                        // else $.getJSON(o.source, params, callback);
                        else
                            $.ajax({
                                url: o.source,
                                success: callback,
                                data: params
                            });
                    }
                }
            } else
                hideResults();
        }

        function filter(data, params) {
            if (!params.filter && !$ctr.is(':visible')) {
                params.q = "";
            } // TODO 林森添加过滤判断
            var filtered = {};
            filtered[o.resultsProperty] = [];
            filtered[o.totalProperty] = 0;
            var index = 0;
            // 过滤数据放入filtered+
            for (var i = 0; i < data[o.resultsProperty].length; i++) {
                var indexOfMatch = data[o.resultsProperty][i][o.displayValue].toString()
                    .toLowerCase().indexOf(params.q.toLowerCase());
                var id_indexOfMatch = data[o.resultsProperty][i][o.hiddenValue].toString()
                    .toLowerCase().indexOf(params.q.toLowerCase());
                if (data[o.resultsProperty][i][o.pyFilter] != undefined) {
                    var pyMatch = data[o.resultsProperty][i][o.pyFilter]
                        .toLowerCase().indexOf(params.q.toLowerCase());
                    if ((o.matchAny && pyMatch !== -1)
                        || (!o.matchAny && pyMatch === 0)) {
                        filtered[o.resultsProperty][index++] = data[o.resultsProperty][i];
                        filtered[o.totalProperty] += 1;
                        continue;
                    }
                } // @author Lins
                if ((o.matchAny && indexOfMatch !== -1) || (o.matchAny && id_indexOfMatch !== -1)
                    || (!o.matchAny && indexOfMatch === 0)) {
                    filtered[o.resultsProperty][index++] = data[o.resultsProperty][i];
                    filtered[o.totalProperty] += 1;
                }
            }
            // p第几页，s每页几条
            if (o.paging) {
                var start = (params.p - 1) * params.s; // (2-1)*5 = 5
                // 5+5 > 3 ? 11 - 5 : 5
                // 6
                var howMany = (start + params.s) > filtered[o.totalProperty] ? filtered[o.totalProperty]
                    - start
                    : params.s;
                filtered[o.resultsProperty] = filtered[o.resultsProperty]
                    .splice(start, howMany);
            }
            return filtered;
        }

        function showPaging(p, totalResults) {
            $paging.html('').removeClass(o.paging.cssClass); // clear out for
            // threshold
            // scenarios
            if (o.showResults && o.paging && totalResults > pageSize) {
                var pages = totalResults / pageSize;
                if (totalResults % pageSize > 0)
                    pages = parseInt(++pages);
                outputPagingLinks(pages, p, totalResults);
            }
        }

        function handleKeyPress(e, page, totalPages) {
            if (/^13$|^39$|^37$/.test(e.keyCode)) {

                if (e.preventDefault)
                    e.preventDefault();
                if (e.stopPropagation)
                    e.stopPropagation();

                e.cancelBubble = true;
                e.returnValue = false;

                switch (e.keyCode) {
                    case 13: // Enter
                        if (/^\d+$/.test(page) && page > 0 && page <= totalPages)
                            flexbox(page, true);
                        else
                            alert('Please enter a page number between 1 and '
                                + totalPages);
                        // TODO: make this alert a function call, and a customizable
                        // parameter
                        break;
                    case 39: // right arrow
                        $('#' + $div.attr('id') + 'n').click();
                        break;
                    case 37: // left arrow
                        $('#' + $div.attr('id') + 'p').click();
                        break;
                }
            }
        }

        function handlePagingClick(e) {
            // TODO 林森添加page额外属性
            flexbox(parseInt($(this).attr('page')), true, $input.attr('pq'),
                true); // pq == previous query
            return false;
        }

        function outputPagingLinks(totalPages, currentPage, totalResults) {
            // TODO: make these configurable images
            var first = '&#xe7b2;', prev = '&#xe7af;', next = '&#xe7b0;', last = '&#xe7b3;', more = '...';

            $paging.addClass(o.paging.cssClass);

            // set up our base page link element
            var $link = $('<a/>').attr('href', '#').addClass('page').click(handlePagingClick);
            var $span = $('<span></span>').addClass('page');
            var divId = $div.attr('id');

            // show first page
            if (currentPage > 1) {
                $link.clone(true).attr('id', divId + 'f').attr('page', 1).html(first).appendTo($paging);
                $link.clone(true).attr('id', divId + 'p').attr('page', currentPage - 1).html(prev).appendTo($paging);
            } else {
                $span.clone(true).html(first).appendTo($paging);
                $span.clone(true).html(prev).appendTo($paging);
            }

            if (o.paging.style === 'links') {
                var maxPageLinks = o.paging.maxPageLinks;
                // show page numbers
                if (totalPages <= maxPageLinks) {
                    for (var i = 1; i <= totalPages; i++) {
                        if (i === currentPage) {
                            $span.clone(true).html(currentPage).appendTo(
                                $paging);
                        } else {
                            $link.clone(true).attr('page', i).html(i).appendTo(
                                $paging);
                        }
                    }
                } else {
                    if ((currentPage + parseInt(maxPageLinks / 2)) > totalPages) {
                        startPage = totalPages - maxPageLinks + 1;
                    } else {
                        startPage = currentPage - parseInt(maxPageLinks / 2);
                    }

                    if (startPage > 1) {
                        $link.clone(true).attr('page', startPage - 1)
                            .html(more).appendTo($paging);
                    } else {
                        startPage = 1;
                    }

                    for (var i = startPage; i < startPage + maxPageLinks; i++) {
                        if (i === currentPage) {
                            $span.clone(true).html(i).appendTo($paging);
                        } else {
                            $link.clone(true).attr('page', i).html(i).appendTo(
                                $paging);
                        }
                    }

                    if (totalPages > (startPage + maxPageLinks)) {
                        $link.clone(true).attr('page', i).html(more).appendTo(
                            $paging);
                    }
                }
            } else if (o.paging.style === 'input') {
                var $pagingBox = $('<input/>').addClass('box').click(
                    function (e) {
                        this.select();
                    }).keypress(function (e) {
                    return handleKeyPress(e, this.value, totalPages);
                }).val("第"+currentPage+"页").appendTo($paging);
            }

            if (currentPage < totalPages) {
                $link.clone(true).attr('id', divId + 'n').attr('page',
                    +currentPage + 1).html(next).appendTo($paging);
                $link.clone(true).attr('id', divId + 'l').attr('page',
                    totalPages).html(last).appendTo($paging);
            } else {
                $span.clone(true).html(next).appendTo($paging);
                $span.clone(true).html(last).appendTo($paging);
            }
            var startingResult = (currentPage - 1) * pageSize + 1;
            var endingResult = (startingResult > (totalResults - pageSize)) ? totalResults
                : startingResult + pageSize - 1;

            if (o.paging.showSummary) {
                var summaryData = {
                    "start": startingResult,
                    "end": endingResult,
                    "total": totalResults,
                    "page": currentPage,
                    "pages": totalPages
                };
                var html = o.paging.summaryTemplate.applyTemplate(summaryData);
                $('<br/>').appendTo($paging);
                $('<span></span>').addClass(o.paging.summaryClass).html(html)
                    .appendTo($paging);
            }
        }

        function checkCache(q, p) {
            var key = q + delim + p; // use null character as delimiter
            if (cacheData[key]) {
                for (var i = 0; i < cache.length; i++) { // TODO: is it
                    // possible to not
                    // loop here?
                    if (cache[i] === key) {
                        // pull out the matching element (splice), and add it to
                        // the beginning of the array (unshift)
                        cache.unshift(cache.splice(i, 1)[0]);
                        return cacheData[key];
                    }
                }
            }
            return false;
        }

        function updateCache(q, p, s, t, data, size) {
            if (o.maxCacheBytes > 0) {
                while (cache.length && (cacheSize + size > o.maxCacheBytes)) {
                    var cached = cache.pop();
                    cacheSize -= cached.size;
                }
                var key = q + delim + p; // use null character as delimiter
                cacheData[key] = {
                    q: q,
                    p: p,
                    s: s,
                    t: t,
                    size: size,
                    data: data
                }; // add the data to the cache at the hash key location
                cache.push(key); // add the key to the MRU list
                cacheSize += size;
            }
        }


        /**
         * 构造下拉框 d 的数据
         */
        function createItems(d, q, params) {

            var totalSize = 0, itemCount = 0;
            var selectClassRow = [];// TODO 林森添加用于保存可能被选择的列
            // 李从波添加 计算输入框有效上下边界偏移量和上下可容纳行数
            var selectTop, selectBottom;
            // 向上查找，看有无tabs，如果有则只计算离tab的上下偏移量 liys modify
            if ($input.parents('.tabs-panels').size() >= 1) {
                var $tab = $input.parents('.tabs-panels').first();
                selectTop = $input.offset().top - $tab.offset().top;
                selectBottom = $tab.offset().top + $tab.height()
                    - $input.offset().top - o.itemHeight;
            } else {
                selectTop = $input.offset().top - $(window).scrollTop();// 得到输入框相对于window的上边界偏移量
                selectBottom = $(window).height() - selectTop - o.itemHeight; // 得到输入框现相对于window下边界的偏移量,输入框的高度为27
            }
            var $topContainer = $divCon.parent().parent().parent();// selectInput的外部容器

            if ($topContainer && $topContainer.hasClass("slick-viewport")) {// 处理selectInput作为datagridEditor时的情况
                var gridViewportTop = $topContainer.offset().top
                    - $(window).scrollTop();// 得到dataGrid可视区域相对于window的上边界偏移量
                var gridViewportBottom = $(window).height() - gridViewportTop
                    - $topContainer.height();// 得到dataGrid可视区域相对于window的下边界偏移量
                selectTop = gridViewportTop > 0 ? (selectTop - gridViewportTop)
                    : selectTop;// 得到有效的上边界偏移量
                selectBottom = gridViewportBottom > 0 ? (selectBottom - gridViewportBottom)
                    : selectBottom;// 得到有效的下边界偏移量
            }
            var topMaxVisibleRows = parseInt(selectTop / o.itemHeight);// 计算上面可以容纳的行数
            var bottomMaxVisibleRows = parseInt(selectBottom / o.itemHeight);// 计算下面可以容纳的行数


            var dataAfterFilter = [];

            // $hdn.val($input.val());//带查
            if (parseInt(d[o.totalProperty]) === 0 && o.noResultsText
                && o.noResultsText.length > 0) {
                $content.addClass(o.noResultsClass).html(o.noResultsText);
                var _p = getBoxPosition();
                $ctr.css('z-index', _p.zIndex);
                $ctr.css({
                    "top": _p.top + $input.height() + 5,
                    "left": _p.left
                });// 恢复初始扩展方向
                if (o.isAutoExtend) {// 判断是否自动计算下拉选项扩展方向
                    if (selectTop > selectBottom) {
                        if (bottomMaxVisibleRows == 0) {
                            $ctr.css({
                                "top": _p.top - $input.height() - 5,
                                "left": _p.left
                            }); // 向上弹出
                        }
                    }
                }
                $ctr.show();
                return;
            } else
                $content.removeClass(o.noResultsClass);// 没有数据显示的时候
            for (var i = 0; i < d[o.resultsProperty].length; i++) {
                // TODO 林森，过滤显示
                var flag = true; // @author lins
                var data = d[o.resultsProperty][i];
                for (var j = 0; j < disables.length; j++) {
                    if (!o.reverseFilter && disables[j] == data[o.hiddenValue]) {
                        flag = false;
                        break;
                    } else if (o.reverseFilter
                        && disables[j] == data[o.hiddenValue]) {
                        dataAfterFilter.push(data);
                        // TODO 林森修改添加
                        flag = false;
                        break;
                    } else if (o.reverseFilter) {
                        flag = false;
                    }
                }
                ;
                if (!flag)
                    continue;
                dataAfterFilter.push(data);
            }

            var dataAfterFilterPage = {};
            dataAfterFilterPage[o.resultsProperty] = dataAfterFilter;
            var dataAfterFilterPageData = filter(dataAfterFilterPage, params);

            //change by zzb	控制显示顺序根据advance属性提前
            var arr = null;//用于存放需要提前的数据    的数组
            if (o.advance != null) arr = o.advance.split(",");
            if (arr != null && (arr instanceof Array) && arr.length > 0) {
                var pagedata = dataAfterFilterPageData.results.slice(0);//中间对象,用于暂存数据
                for (var j = arr.length - 1; j >= 0; j--) {
                    for (var i = 0; i < dataAfterFilterPageData.results.length; i++) {
                        if (arr[j] == pagedata[i].id) {
                            var obj = pagedata.splice(i, 1);
                            pagedata.unshift(obj[0]);
                        }
                    }
                }
                dataAfterFilterPageData.results = pagedata;
            }

            for (var i = 0; i < dataAfterFilterPageData[o.resultsProperty].length; i++) {
                var data2 = dataAfterFilterPageData[o.resultsProperty][i], // 去得数据
                    result = o.resultTemplate.applyTemplate(data2), // 如果有末班包装模板
                    exactMatch = (q === result && $hdn.val() == data2.id), // 判断传入的值是否和当前数据匹配  aolei
                    selectedMatch = false, hasHtmlTags = false, match = data2[o.displayValue];
                // 对result的高亮样式
                if (!exactMatch && o.highlightMatches && q !== '') {
                    var pattern = q, highlightStart = match.toLowerCase()
                        .indexOf(q.toLowerCase()), replaceString = '<span class="'
                        + o.matchClass
                        + '">'
                        + match.substr(highlightStart, q.length)
                        + '</span>';
                    if (result.match('<(.|\n)*?>')) { // see if the content
                        // contains html tags
                        hasHtmlTags = true;
                        pattern = '(>)([^<]*?)(' + q + ')((.|\n)*?)(<)'; // TODO:
                        // look
                        // for
                        // a
                        // better
                        // way
                        replaceString = '$1$2<span class="' + o.matchClass
                            + '">$3</span>$4$6';
                    }
                    result = result.replace(new RegExp(pattern,
                        o.highlightMatchesRegExModifier), replaceString);
                }

                // write the value of the first match to the input box, and
                // select the remainder,
                // but only if autoCompleteFirstMatch is set, and there are no
                // html tags in the response
                if (o.autoCompleteFirstMatch && !hasHtmlTags && i === 0) {
                    if (q.length > 0
                        && match.toLowerCase().indexOf(q.toLowerCase()) === 0) {
                        $input.attr('pq', q); // pq == previous query
                        $hdn.val(data[o.hiddenValue]);
                        $input.val(data[o.displayValue]);
                        selectedMatch = selectRange(q.length,
                            $input.val().length);
                    }
                }
                if (!o.showResults)
                    return;
                // ****************************************
                $row = $('<div></div>').attr('id', data2[o.hiddenValue]).attr('val', data2[o.displayValue])
                    .appendTo($content);
                if (o.islevel == "true") {
                    if (data2.level && data2.level != null) {
                        $row.css("paddingLeft", 13 * (data2.level - 1) + 4).attr(
                            'level', data2.level);
                    }
                    if (data2.leaf) {
                        $row.attr('leaf', data2.leaf);
                    }
                    if (o.isMustLeaf == "true" && data2.leaf == "N") {//add by cy 如果只能选择子节点父节点的样式变成不可选的样子
                        $row.addClass("forbidden-selected")
                    }
                }
                if (typeof o.infomouseover == "function") {
                    $row.bind("mouseover", o.infomouseover);
                }
                if (typeof o.infomouseout == "function") {
                    $row.bind("mouseout", o.infomouseout);
                }
                if (o.showKey) {
                    $row.html(data2[o.hiddenValue] + ": " + result);
                } else {
                    $row.html(result);
                }
                if (exactMatch) {
                    // $row.addClass(o.selectClass);
                    var isNew = true;
                    for (var k = 0; k < selectClassRow.length; k++) {
                        if (selectClassRow[k] == $row)
                            isNew = false;
                    }
                    if (isNew) {
                        selectClassRow.push($row);
                        itemCount++;
                    }
                } else if (!exactMatch
                    && (++itemCount == 1 && o.selectFirstMatch)
                    || selectedMatch) {
                    // $row.addClass(o.selectClass);
                    var isNew = true;
                    for (var k = 0; k < selectClassRow.length; k++) {
                        if (selectClassRow[k] == $row)
                            isNew = false;
                    }
                    if (isNew)
                        selectClassRow.push($row);
                }
                totalSize += result.length;
            }
            //  林森添加只选取一行被选中
            if (o.selectFirstMatch && selectClassRow.length > 0) {
                selectClassRow.pop().addClass(o.selectClass);
            }
            if (totalSize === 0) {
                hideResults();
                return;
            }
            var _p = getBoxPosition();
            $ctr.css('z-index', _p.zIndex);
            // 李从波添加，自动计算maxVisibleRows
            if (selectBottom >= selectTop) {
                var result = ([bottomMaxVisibleRows, defaultVisibleRows, 20,
                    dataAfterFilterPageData[o.resultsProperty].length]).sort(function (a, b) {
                    return a - b;
                })[0]; // 计算最终显示的行数,取最小值
                o.maxVisibleRows = (result == 0) ? 1 : result;
                $ctr.show();
                $ctr.css({
                    "top": _p.top + $input.height() + 5,
                    "left": _p.left
                });
            } else {
                // 当存在filter属性和reverseFilter=true,需要判断过滤后的行数和默认行数
                var needVisibleRows;
                if (o.filter) {
                    if (o.reverseFilter && disables.length > 0) {
                        needVisibleRows = ([disables.length,
                            defaultVisibleRows, 20]).sort(function (a, b) {
                            return a - b;
                        })[0];
                    } else {
                        //change by zzb   删除了 -disables.length
                        needVisibleRows = ([defaultVisibleRows, 20,
                            dataAfterFilterPageData[o.resultsProperty].length])
                            .sort(function (a, b) {
                                return a - b;
                            })[0];
                    }
                } else {
                    needVisibleRows = ([defaultVisibleRows, 20, dataAfterFilterPageData[o.resultsProperty].length])
                        .sort(function (a, b) {
                            return a - b;
                        })[0]; // 取得最少需要的行数
                }
                if (bottomMaxVisibleRows >= needVisibleRows) {// 判断下面是否可以容纳最小行数

                    o.maxVisibleRows = needVisibleRows;
                    $ctr.show();
                    $ctr.css({
                        "top": _p.top + $input.height() + 5,
                        "left": _p.left
                    });
                } else {
                    var reslult = (topMaxVisibleRows >= needVisibleRows) ? needVisibleRows
                        : topMaxVisibleRows;// 使用上面区域，取最小值
                    o.maxVisibleRows = (reslult == 0) ? 1 : reslult;
                    $ctr.show();
                    if (o.maxVisibleRows > 0) {
                        var maxHeight = $row.outerHeight(true)
                            * o.maxVisibleRows;
                        //update by sun;
                        if (o.paging) {
                            var pageSize = o.paging && o.paging.pageSize ? o.paging.pageSize : 0;
                            var page = o.source.total / pageSize;
                            if (page && page >= 1) {
                                maxHeight = maxHeight + 25;//分页条的高度
                            }
                        }
                        $content.css('max-height', maxHeight + 2);// 李从波修改，添加2像素的高度（选中项的边框）

                        if (o.isAutoExtend) {// 判断是否自动计算下拉选项扩展方向
                            $ctr.css({
                                "top": _p.top - (maxHeight + 2 + $input.height()),
                                "left": _p.left
                            }); // 向上弹出
                        } else {
                            $ctr.css({
                                "top": _p.top + $input.height() + 5,
                                "left": _p.left
                            });
                        }

                    }
                }
            }
            if (o.maxVisibleRows > 0) {
                var maxHeight = $row.outerHeight(true) * o.maxVisibleRows;
                $content.css('max-height', maxHeight + 2);// 李从波修改，添加2像素的高度（选中项的边框）
            }
            $content.children('div').mouseover(function () {
                /*     $content.children('div').removeClass(o.selectClass);
                 $(this).addClass(o.selectClass);*/
            }).mouseup(function (e) {
                $content.children('div').removeClass(o.selectClass);
                $(this).addClass(o.selectClass);
                e.cancelBubble = true;
                e.returnValue = false;
                if (e.stopPropagation) {
                    e.stopPropagation();
                    e.preventDefault();
                }
                selectCurr();
            });
            return totalSize;
        }

        /**
         * 显示下拉框 d 数据
         */
        function displayItems(d, q, params) {

            // add by sun 在最前面加一个空白选择框
            // if(objResults[0]){
            // }else{
            // var objFirst = {};
            // objFirst.id = "";
            // objFirst.name = "--请选择--";
            // var objresults = d.results;
            // d.results.unshift(objFirst);
            // d.total = d.total + 1;
            //
            // }
            //update by sun 如果没有值,存在collection属性.从服务器缓存读取内容
            if ((d.total == 0 || !d.total) && o.collection) {

                // 李从波添加 计算输入框有效上下边界偏移量和上下可容纳行数
                var selectTop, selectBottom;
                // 向上查找，看有无tabs，如果有则只计算离tab的上下偏移量 liys modify
                if ($input.parents('.tabs-panels').size() >= 1) {
                    var $tab = $input.parents('.tabs-panels').first();
                    selectTop = $input.offset().top - $tab.offset().top;
                    selectBottom = $tab.offset().top + $tab.height()
                        - $input.offset().top - o.itemHeight;
                } else {
                    selectTop = $input.offset().top - $(window).scrollTop();// 得到输入框相对于window的上边界偏移量
                    selectBottom = $(window).height() - selectTop - o.itemHeight; // 得到输入框现相对于window下边界的偏移量,输入框的高度为27
                }
                var $topContainer = $divCon.parent().parent().parent();// selectInput的外部容器
                if ($topContainer && $topContainer.hasClass("slick-viewport")) {// 处理selectInput作为datagridEditor时的情况
                    var gridViewportTop = $topContainer.offset().top
                        - $(window).scrollTop();// 得到dataGrid可视区域相对于window的上边界偏移量
                    var gridViewportBottom = $(window).height() - gridViewportTop
                        - $topContainer.height();// 得到dataGrid可视区域相对于window的下边界偏移量
                    selectTop = gridViewportTop > 0 ? (selectTop - gridViewportTop)
                        : selectTop;// 得到有效的上边界偏移量
                    selectBottom = gridViewportBottom > 0 ? (selectBottom - gridViewportBottom)
                        : selectBottom;// 得到有效的下边界偏移量
                }
                var topMaxVisibleRows = parseInt(selectTop / o.itemHeight);// 计算上面可以容纳的行数
                var bottomMaxVisibleRows = parseInt(selectBottom / o.itemHeight);// 计算下面可以容纳的行数

                //  $content.addClass(o.noResultsClass).html("努力加载中...");
                $content.addClass(o.noResultsClass).html(Base.I18n.getLangText('taface.module.selectinput.loading'));
                var _p = getBoxPosition();
                $ctr.css('z-index', _p.zIndex);// TODO 林森添加
                $ctr.css({
                    "top": _p.top + 21,
                    "left": _p.left
                });// 恢复初始扩展方向
                if (o.isAutoExtend) {// 判断是否自动计算下拉选项扩展方向
                    if (selectTop > selectBottom) {
                        if (bottomMaxVisibleRows == 0) {
                            $ctr.css({
                                "top": _p.top - 28,
                                "left": _p.left
                            }); // 向上弹出
                        }
                    }
                }
                $ctr.show();
                /***/
                //第一次加载本地缓存码表
                $.ajax({
                    cache: true,
                    type: "POST",
                    url: Base.globvar.basePath + "/indexAction!getCacheByCollection.do",
                    dataType: "json",
                    data: "collection=" + o.collection,
                    async: true,
                    error: function (request) {
                        alert("Connection error");
                    },
                    success: function (data) {
                        $content.addClass(o.noResultsClass).html("");
                        $content.removeClass(o.noResultsClass);//没有数据显示的时候
                        $ctr.hide();
                        var data = eval(data.fieldData.codeListJson);
                        d[o.totalProperty] = data.length;
                        var arrays = [];
                        for (var i in data) {
                            arrays.push(data[i]);
                        }
                        d[o.resultsProperty] = arrays;
                        if (!d) { // 判断有无数据
                            return;
                        }
                        // add by sun
                        createItems(d, q, params);
                    }
                });

            } else {
                if (!d) { // 判断有无数据
                    return;
                }
                createItems(d, q, params);
            }
        }

        function selectRange(s, l) {
            var tb = $input[0];
            if (tb.createTextRange) {
                var r = tb.createTextRange();
                r.moveStart('character', s);
                r.moveEnd('character', l - tb.value.length);
                r.select();
            } else if (tb.setSelectionRange) {
                tb.setSelectionRange(s, l);
            }
            tb.focus();
            return true;
        }

        String.prototype.applyTemplate = function (d) {
            try {
                if (d === '')
                    return this;
                return this.replace(/{([^{}]*)}/g, function (a, b) {
                    var r;
                    if (b.indexOf('.') !== -1) { // handle dot notation in
                        // {}, such as
                        // {Thumbnail.Url}
                        var ary = b.split('.');
                        var obj = d;
                        for (var i = 0; i < ary.length; i++)
                            obj = obj[ary[i]];
                        r = obj;
                    } else
                        r = d[b];
                    if (typeof r === 'string' || typeof r === 'number')
                        return r;
                    else
                        throw (a);
                });
            } catch (ex) {
                alert('Invalid JSON property '
                    + ex
                    + ' found when trying to apply resultTemplate or paging.summaryTemplate.\nPlease check your spelling and try again.');
            }
        };

        function hideResults() {
            $input.data('active', false); // for input blur aolei modify 解决下拉框在IE下面下拉选项比较多的情况下点击下拉滚动条面板就消失的问题  2016-11-07
            $ctr.hide();
        }

        function getCurr() {
            if (!$ctr.is(':visible'))
                return false;
            var $curr = $content.children('div.' + o.selectClass);
            if (!$curr.length)
                $curr = false;

            return $curr;
        }

        function selectCurr() {

            $curr = getCurr();
            if (o.isMustLeaf == "true") {
                var leaf = $curr.attr('leaf');
                if (leaf == "N") {
                    // alert("必须选择子节点");
                    alert(Base.I18n.getLangText('taface.module.selectinput.mustchoosechildrennode'));
                    $hdn.val("");
                    $input.val("").focus();
                    return;
                }
            }
            if (!isNaN(o.minLevel)) {
                var level = $curr.attr('level');
                if (level < o.minLevel) {
                    //    alert("必须选择大于第" + o.minLevel + "级的节点");
                    alert(Base.I18n.getLangText('taface.module.selectinput.mustchoosechildrennodgreater', o.minLevel));
                    $hdn.val("");
                    $input.val("").focus();
                    return;
                }
            }
            if (!isNaN(o.maxLevel)) {
                var level = $curr.attr('level');
                if (level > o.maxLevel) {
                    //  alert("必须选择小于第" + o.maxLevel + "级的节点");
                    alert(Base.I18n.getLangText('taface.module.selectinput.mustchoosechildrennodless', o.maxLevel));

                    $hdn.val("");
                    $input.val("").focus();
                    return;
                }
            }
            if ($curr) {
                if (inputChgEvtTimeout) clearTimeout(inputChgEvtTimeout);//防止onchange事件重复触发

                var oldHdnVal = $hdn.val();
                $hdn.val($curr.attr('id'));
                //显示的为那种情况,默认为value,add by sun
                if (o.showValue == "key") {
                    $input.val($curr.attr('id')).focus();
                } else if (o.showValue == "all") {
                    $input.val($curr.attr('id') + ":" + $curr.attr('val')).focus();
                } else {
                    $input.val($curr.attr('val')).focus();
                }
                hideResults();

                if (o.onSelect) {
                    o.onSelect($input.val(), $hdn.val());// @author lins
                }

                //add by xp
                if (o.onChange && (oldHdnVal != $hdn.val())) {
                    o.onChange($input.val(), $hdn.val());
                }

                //Base._goNextFormField(o.divId);//实现选中后跳转到下一个输入域 xp
            }
        }

        function supportsGetBoxObjectFor() {
            try {
                document.getBoxObjectFor(document.body);
                return true;
            } catch (e) {
                return false;
            }
        }

        function supportsGetBoundingClientRect() {
            try {
                document.body.getBoundingClientRect();
                return true;
            } catch (e) {
                return false;
            }
        }

        function nextPage() {
            $curr = getCurr();

            if ($curr && $curr.next().length > 0) {
                $curr.removeClass(o.selectClass);

                for (var i = 0; i < o.maxVisibleRows; i++) {
                    if ($curr.next().length > 0) {
                        $curr = $curr.next();
                    }
                }

                $curr.addClass(o.selectClass);
                var scrollPos = $content.scrollTop();
                $content.scrollTop(scrollPos + $content.height());
            } else if (!$curr)
                $content.children('div:first-child').addClass(o.selectClass);
        }

        function prevPage() {
            $curr = getCurr();

            if ($curr && $curr.prev().length > 0) {
                $curr.removeClass(o.selectClass);

                for (var i = 0; i < o.maxVisibleRows; i++) {
                    if ($curr.prev().length > 0) {
                        $curr = $curr.prev();
                    }
                }

                $curr.addClass(o.selectClass);
                var scrollPos = $content.scrollTop();
                $content.scrollTop(scrollPos - $content.height());
            } else if (!$curr)
                $content.children('div:last-child').addClass(o.selectClass);
        }

        function nextResult() {
            $curr = getCurr();

            if ($curr && $curr.next().length > 0) {
                $curr.removeClass(o.selectClass).next().addClass(o.selectClass);
                var scrollPos = $content.scrollTop(), curr = $curr[0], parentBottom, bottom, height;
                if (supportsGetBoxObjectFor()) {
                    parentBottom = document.getBoxObjectFor($content[0]).y
                        + $content.attr('offsetHeight');
                    bottom = document.getBoxObjectFor(curr).y
                        + $curr.attr('offsetHeight');
                    height = document.getBoxObjectFor(curr).height;
                } else if (supportsGetBoundingClientRect()) {
                    parentBottom = $content[0].getBoundingClientRect().bottom;
                    var rect = curr.getBoundingClientRect();
                    bottom = rect.bottom;
                    height = bottom - rect.top;
                }
                if (bottom >= parentBottom - 20)
                    $content.scrollTop(scrollPos + height);
            } else if (!$curr)
                $content.children('div:first-child').addClass(o.selectClass);
        }

        function clearInput(val, id) {
            var has, hdnValue;

            for (var i = 0; i < o.source[o.totalProperty]; i++) {
                //显示的为那种情况,默认为value,add by sun
                if (o.showValue == "key") {
                    if (o.source[o.resultsProperty][i][o.hiddenValue] == val) {
                        has = true;
                        hdnValue = o.source[o.resultsProperty][i][o.hiddenValue];
                        break;
                    }
                } else if (o.showValue == "all") {
                    if ((o.source[o.resultsProperty][i][o.hiddenValue] + ":" + o.source[o.resultsProperty][i][o.displayValue]) == val) {
                        has = true;
                        hdnValue = o.source[o.resultsProperty][i][o.hiddenValue];
                        break;
                    }
                } else {
                    if (o.source[o.resultsProperty][i][o.displayValue] == val && o.source[o.resultsProperty][i][o.hiddenValue] == id) {
                        has = true;
                        hdnValue = o.source[o.resultsProperty][i][o.hiddenValue];
                        break;
                    }
                }
            }
            if (has) {
                $hdn.val(hdnValue);//modify by xp 去调隐藏输入空判断，原因：该判断影响直接输入设值时的key数据同步到隐藏输入框
                return;
            } else {
                $input.val('');
                $hdn.val('');
            }

        }
        ;

        function disableSelect(id) {
            var dis = $(id, $div);
        }
        ;

        function prevResult() {
            $curr = getCurr();

            if ($curr && $curr.prev().length > 0) {
                $curr.removeClass(o.selectClass).prev().addClass(o.selectClass);
                var scrollPos = $content.scrollTop(), curr = $curr[0], parent = $curr
                    .parent()[0], parentTop, top, height;
                if (supportsGetBoxObjectFor()) {
                    height = document.getBoxObjectFor(curr).height;
                    parentTop = document.getBoxObjectFor($content[0]).y
                        - (height * 2); // TODO: this is not working when i
                                        // add another control...
                    top = document.getBoxObjectFor(curr).y
                        - document.getBoxObjectFor($content[0]).y;
                } else if (supportsGetBoundingClientRect()) {
                    parentTop = parent.getBoundingClientRect().top;
                    var rect = curr.getBoundingClientRect();
                    top = rect.top;
                    height = rect.bottom - top;
                }
                if (top <= parentTop + 20)
                    $content.scrollTop(scrollPos - height);
            } else if (!$curr)
                $content.children('div:last-child').addClass(o.selectClass);
        }

        this.setFocus = function () {
            $input.focus();
            flexboxDelay(true);
        };
        this.getInput = function () {
            return $input;
        };
        this.getInputLabel = function () {
            return $("label.selectinput-label", "");
        };
        this.newSerialize = function (id, isIncludeNullFields) {
            var str = "";
            if ($hdn) {
                str += $hdn.taserialize(isIncludeNullFields)+"&";
            }
            str += $input.taserialize(isIncludeNullFields);

            return str;
        }

        /**
         * 设置值
         *
         * @method setValue
         * @param {String}
         * value 设置值
         */
        this.setValue = function (value) {

            if (value != "undefined") {
                // if ($.isArray(value)) {setData(value); break;}
                if (typeof value != "string")
                    value += "";
                if (typeof o.source == "string") {
                    return;
                }
                // if ($.isArray(value)) o.sourse
                var length = o.source[o.resultsProperty].length;
                for (var i = 0; i < length; i++) {
                    if (value == o.source[o.resultsProperty][i][o.hiddenValue]) {
                        //add by cy 初始化的时候显示设置的模式
                        if (o.showValue == "all") {
                            $input.val(value + ":" + o.source[o.resultsProperty][i][o.displayValue]);
                        } else if (o.showValue == "key") {
                            $input.val(value);
                        } else {
                            $input.val(o.source[o.resultsProperty][i][o.displayValue]);
                        }
                        $hdn.val(value);
                        //验证触发 add by zhouhy ,修复setValue方法验证状态不改变
                        if(validObj){
                            validObj.executeValidate();
                        }
                        return;
                    }
                    // 李从波添加直接通过属性设值的方式
                    if (value == o.source[o.resultsProperty][i][o.displayValue]) {
                        $input.val(value);
                        $hdn.val(o.source[o.resultsProperty][i][o.hiddenValue]);
                        return;
                    }
                }
                //clearInput(value);
                if (!o.allowInputOtherText) {
                    clearInput(value);
                }//change by zzb
                else {
                    $input.val(value);
                    $hdn.val(value);
                }
            }
        };
        /**
         * 取得值
         *
         * @method getValue
         * @param caseValue {
		 *            0 : input数据 1 : hdn数据 3: 所有数据 ,默认隐藏值}
         * @return {String} value 取得返回值
         */
        this.getValue = function (caseValue) {
            var res;
            switch (caseValue) {
                case 0:
                    res = $input.val();
                    break;
                case 1:
                    res = $hdn.val();
                    break;
                case 3:
                    res = obj2JSON(o.source[o.resultsProperty]);
                    break;
                default:
                    res = $hdn.val();
                    break;

            }
            return res;
        };

        /**
         * json对象转换成json字符串;
         *
         * @method obj2JSON
         * @param {ARRAY}
         *            value 数组对象
         * @return {string} str 返回json
         * @author 林森
         */
        function obj2JSON(value) {
            if (value && typeof value == "object" && value.length > 0) {
                var str = "";
                str += "[";
                for (var i = 0; i < value.length; i++) {
                    str += "{ ";
                    var obj = value[i];
                    for (j in obj) {
                        str += j + ":\"" + obj[j] + "\",";
                    }
                    str = str.slice(0, -1);
                    str += "}";
                    if (i != value.length - 1) {
                        str += ",";
                    }
                }
                str += "]";
                return str;
            }
            return "无数据";
        }


        this.setStateStyle = function (bool) {
            if (bool === false) {
                $divCon.removeClass("successvalidate").addClass("failvalidate")
            } else if (bool === true) {
                $divCon.removeClass("failvalidate").addClass("successvalidate")
            } else {
                Bubble.hideInfo();
                $divCon.removeClass("failvalidate").removeClass("successvalidate");
            }
        }
        this.setRequired = function (bool) {
            if (bool === false) {
                $divCon.parent().removeClass("required");
                validObj && validObj.removeOrder("required");
            } else {//必输
                $divCon.parent().addClass("required");
                if (validObj) {
                    validObj.addOrder({type: "required", msg: o.toolTip})
                } else {
                    validObj = new validateObj(null, $input, o, self.setStateStyle);
                    $input.addClass("validate");
                    validObj.addOrder({type: "required", msg: o.toolTip})
                }
            }
        }

        /**
         * 设置是否可用
         * @method setEnable
         * @param {boolean} true/false
         *  default  true
         */
        this.setEnable = function (bool) {
            if (bool === false) {
                $input.attr('disabled', "true");
                $hdn.attr('disabled', "true");
                $divCon.addClass("disabled");
                unbindSelectinputEvent();
            } else {
                $input.removeAttr('disabled');
                $hdn.removeAttr('disabled');
                $divCon.removeClass("disabled");
                bindSelectinputEvent();
            }
        };
        /**
         * 设置是否可读
         * @method readOnly
         * @param {boolean} default :true
         */
        this.setReadOnly = function (bool) {
            //默认为true 输入为空或者或者true那么只读
            if (bool === false) {
                $input.removeAttr('readonly');
                $divCon.removeClass("readonly");
                bindSelectinputEvent();
            } else {
                $input.attr('readonly', 'readonly');
                $divCon.addClass("readonly");
                unbindSelectinputEvent();
            }
        };
        /**
         * 验证
         * @method doValidate
         */

        this.doValidate = function () {
            if (validObj) {
                return validObj.executeValidate();
            } else {
                return true;
            }
        }

        //解绑selectinput的事件
        function unbindSelectinputEvent() {
            $input.unbind("click");
            $input.unbind("keydown");
            $input.unbind("focus");
            $arrow.unbind("click");
            if ($refreshCode) $refreshCode.unbind("click");
            if ($clear) $clear.unbind("click");
            if ($ctr.is(':visible')) {
                hideResults();
            }
        }

        //绑定selectinput事件
        function bindSelectinputEvent() {
            $input.click(arrowClick);
            $input.keydown(processKeyDown);
            $input.focus(inputFocus);
            $arrow.click(arrowClick);
            if ($refreshCode) $refreshCode.click(arrowClick);
            if ($clear) $clear.click(clearClick);
        }


        /**
         * 设置隐藏显示
         * @method setVisible
         * @param {bool,bool}
         * */
        this.setVisible = function (showOrHide, isHold) {
            if (showOrHide) {
                $divCon.parent().show().css('visibility', 'visible');
            }
            else {
                if (isHold)
                    $divCon.parent().css('visibility', 'hidden');
                else
                    $divCon.parent().hide();
            }
        };

        this.setData = function (data) {
            if (data) {
                if (data.length > 0 && o.clearData != "") {
                    var appendString = {};
                    appendString.id = "";
                    appendString.name = o.clearData;
                    data.unshift(appendString);
                }

                o.source = {
                    results: data,
                    total: data.length
                };
                $input.val("");
                $hdn.val("");
            }
        };

        this.clearSelectData = function () {
            hideResults();
            o.source = {};
            o.source.results = [];
            o.source.total = 0;
            o.collection = null;
            $input.val("");
            $hdn.val("");
        }

        this.reset = function () {
            _declarationState();
        }

        /**
         * 设置数据不可选项
         *
         * @method setDisableSelect
         * @param {String}
         *            val 数据id
         * @param {bool}
         *            isReverseFilter 正向还是反向
         * @author 林森
         */
        this.setDisableSelect = function (val, isReverseFilter) {
            disables = [];//清空disables,从新进行过滤
            if (isReverseFilter != undefined) {
                o.reverseFilter = isReverseFilter;
            }
            var s = [];
            if (typeof val == 'string') {
                if (val.indexOf("[") != -1 && $.isArray(eval(val))) {
                    s = eval(val);
                } else {
                    s = val.split(',');
                }
            } else if ($.isArray(val)) {
                s = val;
            }
            for (var j = 0; j < s.length; j++) {
                if (checkFilterValue(s[j])) {
                    disables.push(s[j]);
                }
            }
        };
        /**
         * 设置过滤，以某些字符串开头的
         *
         * @method setfilterStartChar
         * @param {String}
         *            val 开始的字符串
         * @param {bool}
         *            isReverseFilter 正向还是反向
         * @author liys
         */
        this.setfilterStartChar = function (val, isReverseFilter) {
            // disables = [];
            if (isReverseFilter != undefined) {
                o.reverseFilter = isReverseFilter;
            }
            var s = [];
            if (typeof val == 'string') {
                if (val.indexOf("[") != -1 && $.isArray(eval(val))) {
                    s = eval(val);
                } else {
                    s = val.split(',');
                }
            } else if ($.isArray(val)) {
                s = val;
            }
            for (var i = 0; i < o.source.results.length; i++) {
                for (var j = 0; j < s.length; j++) {
                    if ((o.source.results[i][o.displayValue] + "").indexOf(s[j]) == 0) {
                        disables.push(o.source.results[i][o.hiddenValue]);
                        break;
                    }
                }
            }
        };

        /**
         * 设置过滤，最少几个字符开始
         *
         * @method fiterValueLengthMin
         * @param {Number}
         *            min最小字符串长度
         * @author liys
         */
        this.fiterValueLengthMin = function (min) {
            // disables = [];
            for (var i = 0; i < o.source.results.length; i++) {
                if ((o.source.results[i][o.displayValue] + "").length < min) {
                    disables.push(o.source.results[i][o.hiddenValue]);
                }
            }
        };

        /**
         * 设置过滤，最多几个字符
         *
         * @param {String}
         *            max最大字符串长度
         * @author liys
         */
        this.fiterValueLengthMax = function (max) {
            // disables = [];
            for (var i = 0; i < o.source.results.length; i++) {
                if ((o.source.results[i][o.displayValue] + "").length > max) {
                    disables.push(o.source.results[i][o.hiddenValue]);
                }
            }
        };

        /**
         * 检查filter的值是否在数据中有对应的id
         *
         * @method checkFilterValue
         * @param {String}
         *            id 数据id
         * @author 李从波
         */
        function checkFilterValue(id) {
            for (var i = 0; i < o.source.total; i++) {
                var key = o.source[o.resultsProperty][i][o.hiddenValue];
                if (key == id) {
                    return true;
                }
            }
            return false;
        };
        this.clearSelectValue = function () {
            $input.val('');
            $hdn.val('');
            //验证触发 add by zhouhy ,修复setValue方法验证状态不改变
            if(validObj){
                validObj.executeValidate();
            }
        };

        this.getId = function () {
            return o.divId;
        };

        /*
         * 定位弹出框位置
         */
        function getBoxPosition() {
            var position = {};
            position.zIndex = 11000;
            if ($input.parents('.window').length > 0) {
                position.zIndex += parseInt($($input.parents('.window')[0]).css("z-index")) || 0;
            }
            position.top = $input.offset().top;
            position.left = $input.offset().left - 5;
            return position;
        }

        /**
         * 声明组件状态
         * @param isInit 是否是组件初始化
         * @private
         */
        function _declarationState(isInit) {

            if (isInit) {
                if (o.value !== null) self.setValue(o.value);
                if (o.readOnly) self.setReadOnly();
                if (o.disabled) self.setEnable(false);
                if (o.required) self.setRequired();
                if (o.filter) self.setDisableSelect(o.filter);
                if (o.filterStartChar) self.setfilterStartChar(o.filterStartChar);
                if (o.fiterValueLengthMin) self.fiterValueLengthMin(o.fiterValueLengthMin);
                if (o.fiterValueLengthMax) self.fiterValueLengthMax(o.fiterValueLengthMax);
            } else {
                self.setValue(o.value);
                self.setReadOnly(o.readOnly);
                self.setEnable(!o.disabled);
                self.setRequired(o.required);
                self.setDisableSelect(o.filter);
                self.setfilterStartChar(o.filterStartChar);
                self.fiterValueLengthMin(o.fiterValueLengthMin);
                self.fiterValueLengthMax(o.fiterValueLengthMax);
            }
        }

        _declarationState(true);
    }
    TaSelectInput.prototype = new TaFieldComponent();
    TaSelectInput.prototype.constructor = TaSelectInput;
    return TaSelectInput;
}));

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

// false -> Array#indexOf
// true  -> Array#includes
var toIObject = __webpack_require__(19);
var toLength = __webpack_require__(8);
var toAbsoluteIndex = __webpack_require__(45);
module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
      if (O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};


/***/ }),
/* 75 */
/***/ (function(module, exports) {

exports.f = Object.getOwnPropertySymbols;


/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

// 7.2.2 IsArray(argument)
var cof = __webpack_require__(25);
module.exports = Array.isArray || function isArray(arg) {
  return cof(arg) == 'Array';
};


/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(26);
var defined = __webpack_require__(30);
// true  -> String#at
// false -> String#codePointAt
module.exports = function (TO_STRING) {
  return function (that, pos) {
    var s = String(defined(that));
    var i = toInteger(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};


/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

// 7.2.8 IsRegExp(argument)
var isObject = __webpack_require__(6);
var cof = __webpack_require__(25);
var MATCH = __webpack_require__(7)('match');
module.exports = function (it) {
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
};


/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

var ITERATOR = __webpack_require__(7)('iterator');
var SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function () { SAFE_CLOSING = true; };
  // eslint-disable-next-line no-throw-literal
  Array.from(riter, function () { throw 2; });
} catch (e) { /* empty */ }

module.exports = function (exec, skipClosing) {
  if (!skipClosing && !SAFE_CLOSING) return false;
  var safe = false;
  try {
    var arr = [7];
    var iter = arr[ITERATOR]();
    iter.next = function () { return { done: safe = true }; };
    arr[ITERATOR] = function () { return iter; };
    exec(arr);
  } catch (e) { /* empty */ }
  return safe;
};


/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var classof = __webpack_require__(57);
var builtinExec = RegExp.prototype.exec;

 // `RegExpExec` abstract operation
// https://tc39.github.io/ecma262/#sec-regexpexec
module.exports = function (R, S) {
  var exec = R.exec;
  if (typeof exec === 'function') {
    var result = exec.call(R, S);
    if (typeof result !== 'object') {
      throw new TypeError('RegExp exec method returned something other than an Object or null');
    }
    return result;
  }
  if (classof(R) !== 'RegExp') {
    throw new TypeError('RegExp#exec called on incompatible receiver');
  }
  return builtinExec.call(R, S);
};


/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

__webpack_require__(176);
var redefine = __webpack_require__(15);
var hide = __webpack_require__(14);
var fails = __webpack_require__(4);
var defined = __webpack_require__(30);
var wks = __webpack_require__(7);
var regexpExec = __webpack_require__(127);

var SPECIES = wks('species');

var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
  // #replace needs built-in support for named groups.
  // #match works fine because it just return the exec results, even if it has
  // a "grops" property.
  var re = /./;
  re.exec = function () {
    var result = [];
    result.groups = { a: '7' };
    return result;
  };
  return ''.replace(re, '$<a>') !== '7';
});

var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = (function () {
  // Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
  var re = /(?:)/;
  var originalExec = re.exec;
  re.exec = function () { return originalExec.apply(this, arguments); };
  var result = 'ab'.split(re);
  return result.length === 2 && result[0] === 'a' && result[1] === 'b';
})();

module.exports = function (KEY, length, exec) {
  var SYMBOL = wks(KEY);

  var DELEGATES_TO_SYMBOL = !fails(function () {
    // String methods call symbol-named RegEp methods
    var O = {};
    O[SYMBOL] = function () { return 7; };
    return ''[KEY](O) != 7;
  });

  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL ? !fails(function () {
    // Symbol-named RegExp methods call .exec
    var execCalled = false;
    var re = /a/;
    re.exec = function () { execCalled = true; return null; };
    if (KEY === 'split') {
      // RegExp[@@split] doesn't call the regex's exec method, but first creates
      // a new one. We need to return the patched regex when creating the new one.
      re.constructor = {};
      re.constructor[SPECIES] = function () { return re; };
    }
    re[SYMBOL]('');
    return !execCalled;
  }) : undefined;

  if (
    !DELEGATES_TO_SYMBOL ||
    !DELEGATES_TO_EXEC ||
    (KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS) ||
    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)
  ) {
    var nativeRegExpMethod = /./[SYMBOL];
    var fns = exec(
      defined,
      SYMBOL,
      ''[KEY],
      function maybeCallNative(nativeMethod, regexp, str, arg2, forceStringMethod) {
        if (regexp.exec === regexpExec) {
          if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
            // The native String method already delegates to @@method (this
            // polyfilled function), leasing to infinite recursion.
            // We avoid it by directly calling the native @@method method.
            return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };
          }
          return { done: true, value: nativeMethod.call(str, regexp, arg2) };
        }
        return { done: false };
      }
    );
    var strfn = fns[0];
    var rxfn = fns[1];

    redefine(String.prototype, KEY, strfn);
    hide(RegExp.prototype, SYMBOL, length == 2
      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
      ? function (string, arg) { return rxfn.call(string, this, arg); }
      // 21.2.5.6 RegExp.prototype[@@match](string)
      // 21.2.5.9 RegExp.prototype[@@search](string)
      : function (string) { return rxfn.call(string, this); }
    );
  }
};


/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(3);
var navigator = global.navigator;

module.exports = navigator && navigator.userAgent || '';


/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(3);
var $export = __webpack_require__(1);
var redefine = __webpack_require__(15);
var redefineAll = __webpack_require__(51);
var meta = __webpack_require__(39);
var forOf = __webpack_require__(50);
var anInstance = __webpack_require__(49);
var isObject = __webpack_require__(6);
var fails = __webpack_require__(4);
var $iterDetect = __webpack_require__(79);
var setToStringTag = __webpack_require__(56);
var inheritIfRequired = __webpack_require__(113);

module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
  var Base = global[NAME];
  var C = Base;
  var ADDER = IS_MAP ? 'set' : 'add';
  var proto = C && C.prototype;
  var O = {};
  var fixMethod = function (KEY) {
    var fn = proto[KEY];
    redefine(proto, KEY,
      KEY == 'delete' ? function (a) {
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'has' ? function has(a) {
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'get' ? function get(a) {
        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'add' ? function add(a) { fn.call(this, a === 0 ? 0 : a); return this; }
        : function set(a, b) { fn.call(this, a === 0 ? 0 : a, b); return this; }
    );
  };
  if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
    new C().entries().next();
  }))) {
    // create collection constructor
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
    redefineAll(C.prototype, methods);
    meta.NEED = true;
  } else {
    var instance = new C();
    // early implementations not supports chaining
    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
    // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
    var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });
    // most early implementations doesn't supports iterables, most modern - not close it correctly
    var ACCEPT_ITERABLES = $iterDetect(function (iter) { new C(iter); }); // eslint-disable-line no-new
    // for early implementations -0 and +0 not the same
    var BUGGY_ZERO = !IS_WEAK && fails(function () {
      // V8 ~ Chromium 42- fails only with 5+ elements
      var $instance = new C();
      var index = 5;
      while (index--) $instance[ADDER](index, index);
      return !$instance.has(-0);
    });
    if (!ACCEPT_ITERABLES) {
      C = wrapper(function (target, iterable) {
        anInstance(target, C, NAME);
        var that = inheritIfRequired(new Base(), target, C);
        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
        return that;
      });
      C.prototype = proto;
      proto.constructor = C;
    }
    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
      fixMethod('delete');
      fixMethod('has');
      IS_MAP && fixMethod('get');
    }
    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);
    // weak collections should not contains .clear method
    if (IS_WEAK && proto.clear) delete proto.clear;
  }

  setToStringTag(C, NAME);

  O[NAME] = C;
  $export($export.G + $export.W + $export.F * (C != Base), O);

  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);

  return C;
};


/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(3);
var hide = __webpack_require__(14);
var uid = __webpack_require__(43);
var TYPED = uid('typed_array');
var VIEW = uid('view');
var ABV = !!(global.ArrayBuffer && global.DataView);
var CONSTR = ABV;
var i = 0;
var l = 9;
var Typed;

var TypedArrayConstructors = (
  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'
).split(',');

while (i < l) {
  if (Typed = global[TypedArrayConstructors[i++]]) {
    hide(Typed.prototype, TYPED, true);
    hide(Typed.prototype, VIEW, true);
  } else CONSTR = false;
}

module.exports = {
  ABV: ABV,
  CONSTR: CONSTR,
  TYPED: TYPED,
  VIEW: VIEW
};


/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Forced replacement prototype accessors methods
module.exports = __webpack_require__(38) || !__webpack_require__(4)(function () {
  var K = Math.random();
  // In FF throws only define methods
  // eslint-disable-next-line no-undef, no-useless-call
  __defineSetter__.call(null, K, function () { /* empty */ });
  delete __webpack_require__(3)[K];
});


/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/proposal-setmap-offrom/
var $export = __webpack_require__(1);

module.exports = function (COLLECTION) {
  $export($export.S, COLLECTION, { of: function of() {
    var length = arguments.length;
    var A = new Array(length);
    while (length--) A[length] = arguments[length];
    return new this(A);
  } });
};


/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/proposal-setmap-offrom/
var $export = __webpack_require__(1);
var aFunction = __webpack_require__(12);
var ctx = __webpack_require__(24);
var forOf = __webpack_require__(50);

module.exports = function (COLLECTION) {
  $export($export.S, COLLECTION, { from: function from(source /* , mapFn, thisArg */) {
    var mapFn = arguments[1];
    var mapping, A, n, cb;
    aFunction(this);
    mapping = mapFn !== undefined;
    if (mapping) aFunction(mapFn);
    if (source == undefined) return new this();
    A = [];
    if (mapping) {
      n = 0;
      cb = ctx(mapFn, arguments[2], 2);
      forOf(source, false, function (nextItem) {
        A.push(cb(nextItem, n++));
      });
    } else {
      forOf(source, false, A.push, A);
    }
    return new this(A);
  } });
};


/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Created by Administrator on 2016/10/31.
 */
__webpack_require__(233);
__webpack_require__(234);
__webpack_require__(144);
__webpack_require__(145);
__webpack_require__(146);
__webpack_require__(147);
__webpack_require__(148);
__webpack_require__(150);
__webpack_require__(104);
__webpack_require__(151);
__webpack_require__(236);
__webpack_require__(238);
__webpack_require__(153);
__webpack_require__(239);
__webpack_require__(240);

/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * JS 基本方法扩展
 */
(function () {
    String.prototype.startsWith = function (str) {
        var reg = new RegExp("^" + str);
        return reg.test(this);
    };

    String.prototype.endsWith = function (str) {
        var reg = new RegExp(str + "$");
        return reg.test(this);
    };

    String.prototype.endsWithIn = function (ary) {
        for (var i = 0; i < ary.length; i++) {
            var reg = new RegExp(ary[i] + "$");
            if (reg.test(this)) {
                return true;
            } else {
                continue;
            }
        }
        return false;
    };
})();

/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function($) {

/**
 * autor: xuxiao , zubaoshan
 * modify by xiep
 */
(function () {
	//定义一些默认参数
	var _options = {
		ZH: {
			dayNames: ['星期日', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六'],
			shortDayNames: ['周日', '周一', '周二', '周三', '周四', '周五', '周六'],
			monthNames: ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月'],
			shortMonthNames: ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月']
		},
		US: {
			dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
			shortDayNames: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
			monthNames: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
			shortMonthNames: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
		}

		//定义一些api
	};var _date_format_api = {

		/**
   * 格式化时间
   * @param date
   * @param fmt
   * @returns {*}
   */
		format: function format(date, fmt) {
			var o = {
				'M+': date.getMonth() + 1, //月份
				'd+': date.getDate(), //日
				'H+': date.getHours(), //小时
				'm+': date.getMinutes(), //分
				's+': date.getSeconds(), //秒
				'q+': Math.floor((date.getMonth() + 3) / 3) //季度
			};
			if (!this.isNotEmpty(fmt)) {
				fmt = 'yyyy-MM-dd HH:mm:ss';
			}
			if (/(y+)/.test(fmt)) {
				fmt = fmt.replace(RegExp.$1, (date.getFullYear() + '').substr(4 - RegExp.$1.length));
			}
			if (/(S+)/.test(fmt)) {
				fmt = fmt.replace(RegExp.$1, ((Array(3).join(0) + date.getMilliseconds()).slice(-3) + '').substr(3 - RegExp.$1.length));
			}
			for (var k in o) {
				if (new RegExp('(' + k + ')').test(fmt)) {
					fmt = fmt.replace(RegExp.$1, RegExp.$1.length == 1 ? o[k] : ('00' + o[k]).substr(('' + o[k]).length));
				}
			}
			return fmt;
		},

		formatToDate: function formatToDate(dateStr) {
			if (this.isNotEmpty(dateStr)) {
				return new Date(Date.parse(dateStr.replace(/-/g, "/")));
			}
			return '';
		},

		/**
   * 得到一天的开始 date类型
   * @param date
   */
		getDateStart: function getDateStart(date) {
			var fmt = 'yyyy-MM-dd';
			var dateStartStr = this.getDateStartStr(date, fmt);
			var startTime = new Date(Date.parse(dateStartStr));
			return startTime;
		},

		/**
   * 得到一天的开始 str 类型
   * @param date
   */
		getDateStartStr: function getDateStartStr(date, fmt) {
			if (typeof fmt == 'undefined') {
				fmt = 'yyyy-MM-dd';
			}
			var dateStr = this.format(date, fmt);
			dateStr += ' 00:00:00';
			return dateStr;
		},

		/**
   * 得到一天的结束 date类型
   * @param date
   */
		getDateEnd: function getDateEnd(date) {
			var fmt = 'yyyy-MM-dd';
			var dateEndStr = this.getDateEndStr(date, fmt);
			var endTime = new Date(Date.parse(dateEndStr));
			return endTime;
		},

		/**
   * 得到一天的结束 str 类型
   * @param date
   */
		getDateEndStr: function getDateEndStr(date, fmt) {
			if (typeof fmt == 'undefined') {
				fmt = 'yyyy-MM-dd';
			}
			var endStr = this.format(date, fmt);
			endStr += ' 23:59:59';
			return endStr;
		},

		/**
   * 两个时间比较大小
   * @param d1
   * @param d2
   */
		compareDate: function compareDate(d1, d2) {
			if (d1 && d2) {
				if (d1.getTime() > d2.getTime()) {
					return 1;
				} else if (d1.getTime() == d2.getTime()) {
					return 0;
				} else if (d1.getTime() < d2.getTime()) {
					return -1;
				}
			}
		},

		/**
   * 得到星期几, 支持中英
   * @param date
   * @param type
   * @returns {string}
   */
		getWeek: function getWeek(date, type) {
			if (date) {
				if (!this.isNotEmpty(type)) {
					type = 0;
				}
				var index = date.getDay();
				var dateStr = '';
				switch (type) {
					case this.WEEKTYPE.ZH_DAYNAME:
						dateStr = _options.ZH.dayNames[index];
						break;
					case this.WEEKTYPE.ZH_SDAYNAME:
						dateStr = _options.ZH.shortDayNames[index];
						break;
					case this.WEEKTYPE.US_DAYNAME:
						dateStr = _options.US.dayNames[index];
						break;
					case this.WEEKTYPE.US_SDAYNAME:
						dateStr = _options.US.shortDayNames[index];
						break;
				}
				return dateStr;
			}
		},

		/**
   * 是否为闰年
   * @param date
   * @returns {boolean}
   */
		isLeapYear: function isLeapYear(date) {
			if (date instanceof Date) {
				return 0 == date.getYear() % 4 && (date.getYear() % 100 != 0 || date.getYear() % 400 == 0);
			}
			console.warn('argument format is wrong');
			return false;
		},

		/**
   * 字符串是否为正确的时间格式，支持 - /
   * @param dateStr
   * @returns {boolean}
   */
		isValidDate: function isValidDate(dateStr) {
			if (this.isNotEmpty(dateStr)) {
				var r = dateStr.match(/^(\d{1,4})(-|\/)(\d{1,2})\2(\d{1,2})$/);
				if (r == null) {
					return false;
				}
				var d = new Date(r[1], r[3] - 1, r[4]);
				var num = d.getFullYear() == r[1] && d.getMonth() + 1 == r[3] && d.getDate() == r[4];
				return num != 0;
			}
		},

		/**
   * 增加天数
   * @param date
   * @param dayNum
   */
		addDay: function addDay(date, dayNum) {
			if (this.isNotEmpty(date) && this.isNotEmpty(dayNum) && date instanceof Date && typeof dayNum == 'number') {
				date.setDate(date.getDate() + dayNum);
			} else {
				console.warn('date or dayNum format wrong');
			}
			return date;
		},

		addDayStr: function addDayStr(dateStr, dayNum) {
			var date = '';
			if (this.isNotEmpty(dateStr) && this.isNotEmpty(dayNum) && typeof dayNum == 'number') {
				date = this.formatToDate(dateStr);
				date.setDate(date.getDate() + dayNum);
			} else {
				console.warn('dateStr or dayNum format wrong');
			}
			return date;
		},

		/**
   * 增加月份
   * @param date
   * @param dayNum
   */
		addMonth: function addMonth(date, monthNum) {
			if (this.isNotEmpty(date) && this.isNotEmpty(monthNum) && date instanceof Date && typeof monthNum == 'number') {
				date.setMonth(date.getMonth() + monthNum);
			} else {
				console.warn('date or monthNum format wrong');
			}
			return date;
		},

		addMonthStr: function addMonthStr(dateStr, monthNum) {
			var date = '';
			if (this.isNotEmpty(dateStr) && this.isNotEmpty(monthNum) && typeof monthNum == 'number') {
				date = this.formatToDate(dateStr);
				date.setMonth(date.getMonth() + monthNum);
			} else {
				console.warn('date or monthNum format wrong');
			}
			return date;
		},

		/**
   * 增加年份
   * @param date
   * @param dayNum
   */
		addYear: function addYear(date, yearNum) {
			if (this.isNotEmpty(date) && this.isNotEmpty(yearNum) && date instanceof Date && typeof yearNum == 'number') {
				date.setYear(date.getFullYear() + yearNum);
			} else {
				console.warn('date or yearNum format wrong');
			}
			return date;
		},

		addYearStr: function addYearStr(dateStr, yearNum) {
			var date = '';
			if (this.isNotEmpty(dateStr) && this.isNotEmpty(yearNum) && typeof yearNum == 'number') {
				date = this.formatToDate(dateStr);
				date.setYear(date.getFullYear() + yearNum);
			} else {
				console.warn('date or yearNum format wrong');
			}
			return date;
		},

		/**
   * 是否为空
   * @param str
   * @returns {boolean}
   */
		isNotEmpty: function isNotEmpty(str) {
			if (str != '' && str != null && typeof str != 'undefined') {
				return true;
			}
			console.warn('argument format is wrong');
			return false;
		},

		//定义内部常量
		WEEKTYPE: {
			ZH_DAYNAME: 0,
			ZH_SDAYNAME: 1,
			US_DAYNAME: 2,
			US_SDAYNAME: 3
		}
		//这里确定了插件的名称
		// this.DateFormat = _date_format_api;
	};$.extend(true, window, {
		Ta: {
			util: {
				Date: _date_format_api
			}
		}
	});
})();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 91 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

(function (factory) {
	if (true) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(60)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {
		factory(jQuery);
	}
})(function ($) {

	function setTitle(target, title, asHtml) {
		if (asHtml == true) $(">div >div.panel-title", $(target)).html(title);else $(">div >div.panel-title", $(target)).text(title);
	}
	function collapsePanel(target) {
		var $panel = $(target);
		var tool = $('>div.panel-header .panel-tool-collapse', $panel);
		if (tool && !tool.hasClass('icon-dbArrow_up')) {
			$panel.find(">div.panel-toolbar,>div.panel-body,>div.panel-button").slideUp(200);
			tool.addClass('icon-dbArrow_up').removeClass('icon-dbArrow_down');
		}
	}

	function expandPanel(target) {
		var $panel = $(target);
		var tool = $('>div.panel-header .panel-tool-collapse', $panel);
		if (tool && tool.hasClass('icon-dbArrow_up')) {
			$panel.find(">div.panel-toolbar,>div.panel-body,>div.panel-button").slideDown(200);
			tool.addClass('icon-dbArrow_down').removeClass('icon-dbArrow_up');
		}
	}
	/**
  * 让panel的body部分自动随父亲容器的宽高伸展
  */
	function fitPanel(target) {
		//$(target).tauifitheight();
		new TaFit($(target)).tauifitheight();
	}
	function mask(target, param) {}
	$.fn.tauipanel = function (options, param, asHtml) {
		if (typeof options == 'string') {
			switch (options) {
				case 'setTitle':
					return this.each(function () {
						setTitle(this, param, asHtml);
					});
				case 'collapse':
					return this.each(function () {
						collapsePanel(this);
					});
				case 'expand':
					return this.each(function () {
						expandPanel(this);
					});
				case 'destroy':
					return this.each(function () {
						destroyPanel(this, param);
					});
				case 'resize':
					return this.each(function () {
						fitPanel(this);
					});

				case 'mask':
					return this.each(function () {
						mask(this, param);
					});
			}
		}

		options = options || {};
		return this.each(function () {
			var opts;
			var t = $(this);
			opts = $.extend({}, $.fn.tauipanel.defaults, {
				href: t.attr('href'),
				onLoad: t.attr('onLoad') ? t.attr('onLoad') : undefined,
				fit: t.attr('fit') == 'true' ? true : false,
				heightDiff: t.attr('heightDiff') || 0,
				minHeight: t.attr('minHeight')
			}, options);
			$.data(this, 'panel', opts);

			if (opts.fit) {
				fitPanel(this);
			}

			$("> div.panel-header > div.panel-tool-box > div.panel-tool > div.panel-tool-collapse", t).mouseover(function () {
				$(this).addClass('panel-tool-over');
			}).mouseout(function () {
				$(this).removeClass('panel-tool-over');
			}).click(function () {
				var flag = $(this).hasClass("icon-dbArrow_up");
				var $p;
				if (!flag) {
					$(this).addClass('icon-dbArrow_up').removeClass('icon-dbArrow_down');
					$p = $(this.parentNode.parentNode.parentNode.parentNode);
					$p.find(">div.panel-toolbar,>div.panel-body,>div.panel-button").slideUp(100);
					setTimeout(function () {
						$p.siblings('>div[fit=true],>form[fit=true],>div.grid[height],>div.ez-fl>div.grid[height]').each(function () {
							$(this).triggerHandler('_resize');
						});
					}, 100);
				} else {
					$(this).addClass('icon-dbArrow_down').removeClass('icon-dbArrow_up');
					$p = $(this.parentNode.parentNode.parentNode.parentNode);
					$p.find(">div.panel-toolbar,>div.panel-body,>div.panel-button").slideDown(100);
					setTimeout(function () {
						$p.siblings('>div[fit=true],>form[fit=true],>div.grid[height],>div.ez-fl>div.grid[height]').each(function () {
							$(this).triggerHandler('_resize');
						});
					}, 100);
				}
			});
			//李从波添加缩放控制代码2012.09.07
			var originWidth = 0; //初始高宽  z-index  top  left   margin  bodyHeight
			var originHeight = 0;
			var originZindex = 0;
			var originTop = 0;
			var originLeft = 0;
			var originMarginTop = 0;
			var originMarginBottom = 0;
			var originMarginLeft = 0;
			var originMarginRight = 0;
			var originBodyHeight = 0;
			var maxWidth = 0; //最大高宽
			var maxHeight = 0;
			var panelBodyBorder = 0; //左右边框宽度
			var panelToolbarHeight = 0; //工具条的高度
			var panelButtonbarHeight = 0; //按钮条的高度
			var isBorderLayout = false; //panel所在页面是否使用了border布局
			var isWidthAuto = false; //宽度是否根据父容器自动计算
			var isHeightAuto = false; //高度是否根据父容器自动计算
			var $handler = null; //border布局下的工具条
			var $borderContainer = $("body").find("div.l-layout-left,div.l-layout-right,div.l-layout-center,div.l-layout-top,div.l-layout-bottom"); //border布局下的区域
			$("> div.panel-header > div.panel-tool-box > div.panel-tool > div.panel-tool-max", t).mouseover(function () {
				$(this).addClass('panel-tool-over');
			}).mouseout(function () {
				$(this).removeClass('panel-tool-over');
			}).click(function () {
				var flag = $(this).hasClass("icon-restore");
				var $p, $panelBody;
				if (!flag) {
					$(this).addClass('icon-restore').removeClass('icon-maximization');
					$p = $(this.parentNode.parentNode.parentNode.parentNode);
					$panelBody = $p.find(">div.panel-body");
					if (originWidth == 0 && originHeight == 0) {
						//初始化 初始高宽  top  left margin z-index等
						var $panelToolbar = $p.find(">div.panel-toolbar");
						var $panelButtonbar = $p.find(">div.panel-button");
						originWidth = $p.width();
						originHeight = $p.height();
						originTop = $p.css("top");
						originLeft = $p.css("left");
						originZindex = $p.css("z-index");
						originMarginTop = $p.css("margin-top");
						originMarginBottom = $p.css("margin-bottom");
						originMarginLeft = $p.css("margin-left");
						originMarginRight = $p.css("margin-right");
						originBodyHeight = $panelBody.height();
						panelBodyBorder = parseInt($panelBody.css("border-left-width").replace("px", "")) + parseInt($panelBody.css("border-right-width").replace("px", ""));
						if ($p.width() + parseInt(originMarginLeft.replace("px", "")) + parseInt(originMarginRight.replace("px", "")) == $p.parent().width()) {
							isWidthAuto = true;
						}
						if ($p.attr("fit") == "true") {
							isHeightAuto = true;
						}
						if ($panelToolbar.length > 0) {
							panelToolbarHeight = 31;
						}
						if ($panelButtonbar.length > 0) {
							panelButtonbarHeight = 40;
						}
					}
					maxWidth = $(window).width() - 2; //获取当前最大高宽
					maxHeight = $(window).height() - 2;
					$handler = $("body").find("div.l-layout-drophandle-left,div.l-layout-drophandle-right,div.l-layout-drophandle-top,div.l-layout-drophandle-bottom,div.l-layout-collapse-left,div.l-layout-collapse-right").not(":hidden");
					if ($borderContainer.length > 0 || $handler.length > 0) {
						$handler.hide(); //隐藏border布局下的工具条
						$borderContainer.css({ position: "static" }); //设置所有的boder容器position 为static
						isBorderLayout = true;
					}
					if (panelToolbarHeight > 0 || panelButtonbarHeight > 0) $p.removeClass("panelnomargin"); //移除no-magin 样式
					var pIndex = originZindex == "auto" ? 0 : originZindex;
					$p.css({ position: "fixed", zIndex: 9002 > pIndex ? 9002 : pIndex, background: "#fcfdfd" }); //设置position为fixed 修改z-index显示在最前面  设置背景色盖住下方内容
					$p.animate({ //动画开始
						width: maxWidth,
						height: maxHeight,
						top: isBorderLayout == true ? -2 : isHeightAuto == true ? -1 : -2,
						left: 1,
						marginTop: 3,
						marginBottom: 3,
						marginLeft: 0,
						marginRight: 0
					}, { duration: 100, complete: function complete() {
							var panelBodyHeight = maxHeight - 25 - panelToolbarHeight - panelButtonbarHeight; //减去标题、 toolbar、 buttonbar的高度得到panelbody高度
							$panelBody.css({ height: panelBodyHeight, width: maxWidth - panelBodyBorder });
							$panelBody.find('>div[fit=true],>form[fit=true],>div.grid[height],>div.ez-fl>div.grid[height]').each(function () {
								$(this).triggerHandler('_resize');
							}); //处理子容器自适应高度
						} });
				} else {
					$(this).addClass('icon-maximization').removeClass('icon-restore');
					$p = $(this.parentNode.parentNode.parentNode.parentNode);
					$panelBody = $p.find(">div.panel-body");
					var pTop = originTop == "auto" ? 0 : originTop;
					var pLeft = originLeft == "auto" ? 0 : originLeft;
					$p.css({ zIndex: originZindex });
					$p.animate({ //动画开始
						width: originWidth,
						height: originHeight,
						top: pTop,
						left: pLeft,
						marginTop: originMarginTop,
						marginBottom: originMarginBottom,
						marginLeft: originMarginLeft,
						marginRight: originMarginRight
					}, { duration: 100, complete: function complete() {
							if ($borderContainer || $handler) {
								$borderContainer.css({ position: "absolute" }); //恢复原有的设置
								$handler.show(); //显示border布局下的工具条
							}
							if (panelToolbarHeight > 0 || panelButtonbarHeight > 0) $p.addClass("panelnomargin"); //恢复no-margin样式
							//$p.css({ position: "relative",background:"#fff",top:originTop,left:originLeft,width: isWidthAuto==true?"auto":originWidth,height:isHeightAuto==true?"auto":originHeight});//处理缩放后页面缩放panel失效的问题
							$p.css({ position: "relative", background: "#fff", top: originTop, left: originLeft, width: isWidthAuto == true ? "auto" : originWidth, height: "auto" }); //处理缩放后页面缩放panel失效的问题
							$panelBody.css({ height: originBodyHeight, width: isWidthAuto == true ? "auto" : originWidth }); //处理panelBody适应父容器高宽
							$panelBody.find('>div[fit=true],>form[fit=true],>div.grid[height],>div.ez-fl>div.grid[height]').each(function () {
								$(this).triggerHandler('_resize');
							}); //处理子容器自适应高度
						} });
				}
			});
		});
	};

	$.fn.tauipanel.defaults = {
		href: null,
		onLoad: function onLoad() {},
		fit: false,
		heightDiff: 0
	};
});

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * panel表单常用方法,调用方式为Base.xxx();
 * @module Base
 * @class panel
 * @static
 */
(function (factory) {
	if (true) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {
		factory(jQuery);
	}
})(function ($) {
	$.extend(true, window, {
		Base: core()
	});

	function core() {
		/**
   * 收起panel
   * @method slideUpPanel
   * @param {String} panelId panel的id
   */
		function slideUpPanel(panelId) {
			$("#" + panelId).tauipanel('collapse');
		}
		/**
   * 拉下panel
   * @method slideDownPanel
   * @param {String} panelId panel的id
   */
		function slideDownPanel(panelId) {
			$("#" + panelId).tauipanel('expand');
		}
		/**
   * 设置panel的标题
   * @method setPanelTitle
   * @param {String} panelId panel的id
   * @param {String} title panel的新标题，可以包含html标签
   * @param {Boolean} asHtml 当title中包含了html标签，必须将asHtml设置成true，否则新标题会将html标签直接显示出来
   */
		function setPanelTitle(panelId, title, asHtml) {
			$("#" + panelId).tauipanel('setTitle', title, asHtml);
		}

		return {
			slideUpPanel: slideUpPanel,
			slideDownPanel: slideDownPanel,
			setPanelTitle: setPanelTitle
		};
	}
});

/***/ }),
/* 94 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(jQuery) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * 模拟窗口组件常用方法,调用方式为Base.xxx();
 * @module Base
 * @class window
 * @static
 */
(function (factory) {
	if (true) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(5), __webpack_require__(54), __webpack_require__(22), __webpack_require__(71), __webpack_require__(36)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {
		factory(jQuery);
	}
})(function ($) {
	$.extend(true, window, {
		Base: core()
	});

	function core() {
		return {
			openWindow: openWindow,
			openWindowWithSubmitIds: openWindowWithSubmitIds,
			closeWindow: closeWindow,
			alert: alert,
			msgTip: msgTip,
			msgTopTip: msgTopTip,
			confirm: confirm,
			prompt: prompt,
			buttonsDialog: buttonsDialog,
			sendMsgToFrame: sendMsgToFrame,
			openTabMenu: openTabMenu,
			closeTabMenu: closeTabMenu,
			showBoxComponent: showBoxComponent,
			wizard: wizard,
			openProcess: openProcess,
			closeBoxComponent: closeBoxComponent
			/**
    *
    * @method
    * @param  {boolean} replay 是否自动播放
    * @param {boolean} flag panel的id
    * @param {String} name 在cookie中存放的名称，应保证唯一，最好采用当前页面的id
    * @param {Array} data 导航内容，包含1.所要提示的dom元素的jquery对象；2.提示内容
    * var data = [object1,object2,[..objectn]]
    * var object1 = {};
    * object1.id = "#id" || $("#id")
    * object1.message = "这是你的下一步提示信息";
    * data:[{id:$("ul.tabs li:eq(0)"),
           	message:"1-这是您的当前页"
            },
    {id:$("ul.tabs li:eq(1)"),
               message:"2-点击这里，您将进入一个查询页面"
          },
    {id:$("ul.tabs li:eq(2)"),
               message:"3-点击这里，您将进入一个查询页面"
          }]
    *
    */
		};function wizard(id, replay, flag, name, data) {
			/*	$("#"+id).hintTip({
    replay:replay,
    show:flag,
    cookname:name,
    data:data
    });
    */
			new TaHelpTip($("#" + id)).helpTip({
				replay: replay,
				show: flag,
				cookname: name,
				data: data
			});
		}

		/**
   * 打开窗口
   * @method openWindow
   * @param {String} id 窗口id
   * @param {String} title 窗口标题
   * @param {String} url aciton地址
   * @param {map} parameter 入参 json格式对象，例如:{"dto['aac001']":"1000001","dto['aac002']":"01"}
   * @param {Number} width 宽度 不要加 px；也可设置成百分比，例如"80%"
   * @param {Number} height 高度 不要加 px；也可设置成百分比，例如"80%"
   * @param {Function} onLoad 窗口加载完毕回调，如果useIframe=true的话 这参数不起作用
   * @param {Funciton} onClose 窗口关闭的时候回调
   * @param {Boolean} useIframe 是否使用iframe的方式加载，默认为false，iframe方式会存在seesion丢失，应当避免;为true的时候，打开页面为一个完整的jsp页面
   * @param {String} style 自定义打开窗口css样式
   * @param {Object} myoptions window的创建参数
   */
		function openWindow(id, title, url, parameter, width, height, onLoad, onClose, useIframe, style, myoptions) {
			var $w = $("<div id=\"" + id + "\" " + (style ? "style=\"" + style + "\"" : "") + "></div>");
			$w.appendTo($("body"));
			var tawindow = new TaWindow($w);
			var options = {};

			title ? options.title = title : null;
			width ? options.width = width : options.width = 200;
			height ? options.height = height : options.height = 200;
			onLoad ? options.onLoad = onLoad : null;

			options.modal = true;
			options.resizable = false;
			options.minimizable = false;
			options.collapsible = false;
			options.border = true;

			useIframe = useIframe === true ? true : false;

			if (parameter) {
				if (url.indexOf('?') != -1) {
					url += "&" + jQuery.param(parameter);
				} else {
					url += "?" + jQuery.param(parameter);
				}
			}
			if (url.indexOf('?') != -1) {
				url += "&_r=" + Math.random();
			} else {
				url += "?_r=" + Math.random();
			}
			url += "&___businessId=" + Base.globvar.currentMenuId;
			if (url && useIframe) {
				options.content = '<iframe type="window" src="' + url + '" frameborder="0" style="width:100%;height:100%"></iframe>';
			} else {
				url ? options.href = url : null;
			}
			options.onClose = function (_onClose) {
				return function () {
					if (_onClose) _onClose($w.attr("id"));
					//remove window里面TaUIManager对应的对象
					Ta.core.TaUIManager.removeObjInCantainer($w);
					Base.hideMask();
					//$w.window('destroy');
					tawindow.window('destroy');
					$w.remove();
				};
			}(onClose);
			if (myoptions) $.extend(options, myoptions);
			//$w.window(options);
			tawindow.window(options);
			if (!url) {
				onLoad();
			}
		}
		function openWindowWithSubmitIds(id, title, url, submitIds, parameter, width, height, onLoad, onClose, useIframe, style, myoptions, type) {
			var paramThis = {};
			if (parameter != undefined) paramThis = parameter;
			var submitId = submitIds.split(",");
			for (var i = 0; i < submitId.length; i++) {
				if (submitId[i] == "") continue;
				var value = Base.getValue(submitId[i]);
				if (value != undefined && value != "") {
					paramThis[submitId[i]] = value;
					paramThis["dto['" + submitId[i] + "']"] = value;
				}
			}
			switch (type) {
				case "top":
					top._child = window.self;
					top.Base.openWindow(id, title, url, paramThis, width, height, onLoad, onClose, useIframe, style, myoptions);
					break;
				case "parent":
					parent._child = window.self;
					parent.Base.openWindow(id, title, url, paramThis, width, height, onLoad, onClose, useIframe, style, myoptions);
					break;
				default:
					Base.openWindow(id, title, url, paramThis, width, height, onLoad, onClose, useIframe, style, myoptions);
					break;
			}
		}
		/**
   * 关闭窗口
   * @method closeWindow
   * @param {String} id 窗口id
   */
		function closeWindow(id) {
			//setTimeout(function(){	$("#"+id).window('close');}, 1);
			setTimeout(function () {
				new TaWindow($("#" + id)).window('close');
			}, 1);
		}
		/**
   * 弹出提示
   * @method alert
   * @param {String} msg 提示的信息，可以是html
   * @param {String} type 提示的图标，不传就无图标。type可以选择如下：success,error,warn,question
   * @param {Function} callback 回调函数
   * @param {Obj} options 指定参数,可设置宽高等例如{width:"200",height:"400"};//add by cy
   */
		function alert(msg, type, callback, options) {
			var title = Base.I18n.getLangText("taface.module.window.prompt"),
			    image = "",
			    html; //i18n:提示
			switch (type) {
				case 'success':
					title = Base.I18n.getLangText("taface.module.window.successtip"); //i18n:成功提示
					image = "icon-correct2";
					break;
				case 'error':
					title = Base.I18n.getLangText("taface.module.window.failtip"); //i18n:失败提示
					image = "icon-close2";
					break;
				case 'warn':
					title = Base.I18n.getLangText("taface.module.window.warn"); //i18n:警告
					image = "icon-warn";
					break;
				case 'question':
					title = Base.I18n.getLangText("taface.module.window.confirm"); //i18n:确认
					image = "icon-notice";
					break;
			}
			if (type) {
				html = "<div><div class='l-dialog-icon faceIcon " + image + "'></div><div class='l-dialog-txt' >" + msg + "</div></div>";
			} else {
				html = "<div><span>" + msg + "</span><div>";
			}
			var $w = $(html);
			$w.appendTo($("body"));
			var tadialog = new TaDialog($w);
			var _op = $.extend({}, {
				title: title,
				width: 300,
				height: 150,
				//top : '100px',
				modal: true,
				resizable: true,
				onClose: function onClose() {
					tadialog.dialog('destroy');
					$w.remove();
					if (callback) callback();
					Base.hideMask();
				},
				buttonsAlgin: 'center',
				buttons: [{
					text: Base.I18n.getLangText("taface.general.ensure"), //i18n:确定
					buttonHighHlight: true,
					handler: function handler() {
						tadialog.dialog('destroy');
						$w.remove();
						if (callback) callback();
						Base.hideMask();
					}
				}]
			}, options);
			tadialog.dialog(_op);
			$w.find("div.panel").css("margin", 0);
			$w.find('.dialog-button button:first').delay(100).focus();
		}
		/**
   * @method msgTip
   * @deprecated 弃用的方法
   */
		function msgTip(target, message) {
			//TODO
			var box = $(target);
			var msg = message; //= $.data(target, 'validatebox').message;
			var tip = $('<div class="validatebox-tip">' + '<div class="validatebox-tip-content  ui-corner-all">' + '</div>' + '<div class="validatebox-tip-pointer">' + '</div>' + '</div>').appendTo('body');
			//$.data(target, 'validatebox').tip = tip;
			var $c = tip.find('.validatebox-tip-content');
			$c.html(msg);
			var cheight = $c.height();
			if (cheight == 0) cheight = 17;
			tip.css({
				display: 'block',
				left: box.offset().left + 10,
				top: box.offset().top - cheight - 15
			});
			//$.data(target, 'validatebox').tip =tip;
		}

		/**
   * 信息展示框,在页面头顶出现一悬浮框,显示信息
   * @method msgTopTip
   * @param {String} message 提示的信息，可以是html
   * @param {Number} time 悬浮框持续时间,毫秒计时,如果不定义此参数或者不是数字,则默认为2s.
   * @param {Number} width 悬浮框宽度,默认250.
   * @param {Number} height 悬浮框高度,默认50.
   * @param {String} style 自定义样式，例如:background:red;font-size:14px;.
   * @param {type} String 风格：success，error，warn
   * @param {String} position 提示信息位置：top-left,top-right,bottom-left,bottom-right,left,top,right,bottom
   * @param {boolean} autoClose 显示后是否自动隐藏，默认为true（自动隐藏） ，false则为手动关闭
   * @param {Function} fnCallBack 关闭回调
   */
		function msgTopTip(message, time, width, height, style, type, position, autoClose, fnCallBack) {
			var tip,
			    left,
			    tempHeight = -63,
			    image = "",
			    html = "";

			if (time == null || isNaN(time)) {
				time = 2000;
			}

			if (autoClose === undefined || autoClose === null || autoClose === "") {
				autoClose = true;
			}

			switch (type) {
				case 'success':
					image = "icon-correct2";
					break;
				case 'error':
					image = "icon-close2";
					break;
				case 'warn':
					image = "icon-warn";
					break;
			}

			style = style == undefined ? "" : style;

			if (type) {
				html = '<div class="body" style="' + style + '"><div class="msgTopTip-icon faceIcon ' + image + '"></div><div class="l-dialog-txt">' + message + '</div></div>';
			} else {
				html = '<div class="body" style="margin-top:3px;' + style + '">' + message + '</div>';
			}

			tip = $('<div class="windowTopMsg"></div>').append('<div class="header" ><span class="closeTip faceIcon icon-close"></span></div>' + html).appendTo('body');

			if (width !== undefined && width !== null && width !== "" && !isNaN(width)) {
				left = ($("body").width() - width) / 2;
				tip.width(width);
			} else {
				left = ($("body").width() - 250) / 2;
			}

			if (height !== undefined && height !== null && height !== "" && !isNaN(height)) {
				tip.height(height);
				tempHeight = -(Number(height) + 13);
			}

			var animateShowJson = { top: "10px" };
			var animateHideJson = { top: tempHeight + "px" };

			switch (position) {
				case "top-left":
					left = 10;
					tip.css("left", left);
					tip.css("top", tempHeight);
					break;
				case "top-right":
					var right = 10;
					tip.css("right", right);
					tip.css("top", tempHeight);
					break;
				case "bottom-left":
					left = 10;
					tip.css("left", left);
					tip.css("bottom", tempHeight);
					animateShowJson = { bottom: "10px" };
					animateHideJson = { bottom: tempHeight + "px" };
					break;
				case "bottom-right":
					var right = 10;
					tip.css("right", right);
					tip.css("bottom", tempHeight);
					animateShowJson = { bottom: "10px" };
					animateHideJson = { bottom: tempHeight + "px" };
					break;
				case "left":
					var tempWidth = width !== undefined && width !== null && width !== "" && !isNaN(width) ? -(Number(width) + 13) : -263;
					tip.css("left", tempWidth);
					var top = height !== undefined && height !== null && height !== "" && !isNaN(height) ? ($("body").height() - height) / 2 : ($("body").height() - 70) / 2;
					tip.css("top", top);
					animateShowJson = { left: "10px" };
					animateHideJson = { left: tempWidth + "px" };
					break;
				case "right":
					var tempWidth = width !== undefined && width !== null && width !== "" && !isNaN(width) ? -(Number(width) + 13) : -263;
					tip.css("right", tempWidth);
					var top = height !== undefined && height !== null && height !== "" && !isNaN(height) ? ($("body").height() - height) / 2 : ($("body").height() - 70) / 2;
					tip.css("top", top);
					animateShowJson = { right: "10px" };
					animateHideJson = { right: tempWidth + "px" };
					break;
				case "bottom":
					tip.css("left", left);
					tip.css("bottom", tempHeight);
					animateShowJson = { bottom: "10px" };
					animateHideJson = { bottom: tempHeight + "px" };
					break;
				default:
					tip.css("left", left);
					tip.css("top", tempHeight);
			}

			tip.animate(animateShowJson, "slow");

			if (autoClose) {
				setTimeout(function () {
					tip.animate(animateHideJson, 500);
					setTimeout(function () {
						tip.remove();
					}, 500);
					if (fnCallBack && typeof fnCallBack == "function") {
						fnCallBack();
					}
				}, time);
			}

			$(".closeTip").click(function () {
				tip.animate(animateHideJson, 500);
				setTimeout(function () {
					tip.remove();
				}, 500);
				if (fnCallBack && typeof fnCallBack == "function") {
					fnCallBack();
				}
			});
		}

		/**
   * 确认框
   * @method confirm
   * @param {String} msg 提示的信息，可以是html
   * @param {Function} fn
   * <br/>示例：
   * <br/>function (yes) { if(yes) alert('11'); });
   * <br/>"yes"根据你的选择来取值，当你点击"确定"按钮时，yes为true；当你点击"取消"按钮时，yes为false
   * @param {Object} options json格式，配置文字显示title, buttonOk, buttonCancel
   * @param {String} hotKeys 字符串，两个按钮的热键,第一个为确认键,第二个为取消键,例如"o,c"表示确认键的快捷键为alt+o,取消为alt+c
   * @param focus true或flase，为true时焦点在确认按钮上，为flase时焦点在取消按钮上
   */
		function confirm(msg, fn, options, hotKeys, focus) {
			var $w = $("<div><div class='l-dialog-icon faceIcon icon-help'></div><div class='l-dialog-txt'>" + msg + "</div></div>");
			//var $w = $("<div style='word-break:break-all;overflow:hidden;'><span style='margin:10px 2px 2px 10px;'>"+msg+"</span></div>");
			$w.appendTo($("body"));
			var buttonHotKeys = [];
			if (typeof hotKeys == "string") {
				buttonHotKeys = hotKeys.split(",");
			}
			var tadialog = new TaDialog($w);
			tadialog.dialog({
				title: options && options.title ? options.title : Base.I18n.getLangText("taface.module.window.confirmtip"), //i18n:确认提示
				width: 350,
				height: 150,
				modal: true,
				closable: false,
				resizable: true,
				onClose: function onClose() {
					tadialog.dialog('destroy');
					$w.remove();
				},
				buttonsAlgin: 'center',
				buttons: [{
					text: options && options.buttonOk ? options.buttonOk : buttonHotKeys[0] ? Base.I18n.getLangText("taface.general.ensure") + '[' + buttonHotKeys[0].toUpperCase() + ']' : Base.I18n.getLangText("taface.general.ensure"), //i18n:确定
					buttonHighHlight: true,
					handler: function handler() {
						tadialog.dialog('destroy');
						$w.remove();
						if (fn) {
							fn(true);
						}
					}
				}, {
					text: options && options.buttonCancel ? options.buttonCancel : buttonHotKeys[1] ? Base.I18n.getLangText("taface.general.cancel") + '[' + buttonHotKeys[1].toUpperCase() + ']' : Base.I18n.getLangText("taface.general.cancel"), //i18n:取消
					handler: function handler() {
						tadialog.dialog('destroy');
						$w.remove();
						if (fn) fn(false);
					}
				}]
			});
			if (focus) {
				$w.find('.dialog-button button:first').focus();
			} else {
				$w.find('.dialog-button button:last').focus();
			}
			//添加热键
			if (buttonHotKeys) {
				var buttons = $w.find('.dialog-button button');
				if (buttonHotKeys[0]) {
					if (buttonHotKeys[0].length == 1) {
						hotKeyregister.add("alt+" + buttonHotKeys[0], function () {
							buttons.eq(0).focus();buttons.eq(0).click();return false;
						});
					} else if (buttonHotKeys[0].length > 1) {
						hotKeyregister.add(buttonHotKeys[0], function () {
							buttons.eq(0).focus();buttons.eq(0).click();return false;
						});
					}
				}
				if (buttonHotKeys[1]) {
					if (buttonHotKeys[1].length == 1) {
						hotKeyregister.add("alt+" + buttonHotKeys[1], function () {
							buttons.eq(1).focus();buttons.eq(1).click();return false;
						});
					} else if (buttonHotKeys[1].length > 1) {
						hotKeyregister.add(buttonHotKeys[1], function () {
							buttons.eq(1).focus();buttons.eq(1).click();return false;
						});
					}
				}
			}
			$w.keydown(function (e) {
				//让按钮支持左右键选择聚焦
				var o = e.target || e.srcElement;
				if (e.keyCode == 39) {
					//->
					var next = $(o).next()[0];
					if (next) next.focus();
				} else if (e.keyCode == 37) {
					//<-
					var prev = $(o).prev()[0];
					if (prev) prev.focus();
				}
			});
			$w.find("div.panel").css("margin", 0);
		}

		/**
   * 接收输入的提示框
   * @method prompt
   * @param {String} msg 提示的信息，可以是html
   * @param {Function} fn
   * <br/>示例：
   * <br/>function (yes,value) { if(yes) alert(value); });
   * <br/>"yes"根据你的选择来取值，当你点击"确定"按钮时，yes为true；当你点击"取消"按钮时，yes为false。value是你输入的值
   * @param {String} initValue 初始值
   */
		function prompt(msg, fn, initValue) {
			var $w = $("<div ><div class='prompt-label'>" + msg + "</div><input type=\"text\" class='prompt-input' id=\"___prompt\" value=\"" + (initValue ? initValue : "") + "\"/></div>");
			$w.appendTo($("body"));
			$('#___prompt').keydown(function (e) {
				if (e.keyCode == 13) {
					$w.find('.dialog-button button:first').delay(100).focus();
					//setTimeout(function(){$w.find('.dialog-button button:first').focus();},100);
				}
			});
			var tadialog = new TaDialog($w);
			tadialog.dialog({
				title: Base.I18n.getLangText('taface.module.window.defineprompttitle'), //i18n:请输入
				width: 350,
				height: 150,
				modal: true,
				closable: false,
				onClose: function onClose() {
					tadialog.dialog('destroy');
					$w.remove();
				},
				buttonsAlgin: 'center',
				buttons: [{
					text: Base.I18n.getLangText('taface.general.ensure'), //i18n:确定
					buttonHighHlight: true,
					handler: function handler() {
						var v = $('#___prompt').val();
						tadialog.dialog('destroy');
						$w.remove();
						if (fn) fn(true, v);
					}
				}, {
					text: Base.I18n.getLangText('taface.general.cancel'), //i18n:取消
					handler: function handler() {
						var v = $('#___prompt').val();
						tadialog.dialog('destroy');
						$w.remove();
						if (fn) fn(false, v);
					}
				}]
			});
			$w.keydown(function (e) {
				//让按钮支持左右键选择聚焦
				if (e.keyCode == 39) {
					//->
					var next = $(e.srcElement).next()[0];
					if (next) next.focus();
				} else if (e.keyCode == 37) {
					//<-
					var prev = $(e.srcElement).prev()[0];
					if (prev) prev.focus();
				}
			});
			$('#___prompt').delay(100).focus();
		}

		/**
   * 多个按钮的提示框,
   * @method buttonsDialog
   * @param {String} msg 提示的信息，可以是html
   * @param {Number} width 宽度，不要加px
   * @param {Number} height 高度，不要加px
   * @param {Object} buttons
   * 示例：
   * [
   * {text:'确定1',
   * handler:function(){}
   * url:'test/testAction!query1.do'},
   * {text:'确定2',
   * handler:function(){}
   * url:'test/testAction!query2.do'}
   * ]
   */
		//TODO 可以考虑，某些按钮直接传url的时候做一些事情
		function buttonsDialog(msg, width, height, buttons) {
			var $w = $("<div style='word-break:break-all;overflow:hidden;'><div style='margin:8px 20px;'>" + msg + "</div></div>");
			$w.appendTo($("body"));
			var tadialog = new TaDialog($w);
			var _buttons = buttons;
			if (_buttons) {
				for (var i = 0; i < _buttons.length; i++) {
					if (_buttons[i].handler) {
						_buttons[i].handler = function (_click) {
							return function () {
								tadialog.dialog('destroy');
								$w.remove();
								_click();
							};
						}(_buttons[i].handler);
					}
				}
			}

			tadialog.dialog({
				title: Base.I18n.getLangText('taface.module.window.definebuttonsdialogtitle'), //i18n:选择操作
				width: width ? width : 350,
				height: height ? height : 250,
				modal: true,
				closable: false,
				buttonsAlgin: 'center',
				onClose: function onClose() {
					//$w.dialog('destroy');
					tadialog.dialog('destroy');
					$w.remove();
				},
				buttons: buttons
			});
			$w.keydown(function (e) {
				//让按钮支持左右键选择聚焦
				if (e.keyCode == 39) {
					//->
					var next = $(e.srcElement).next()[0];
					if (next) next.focus();
				} else if (e.keyCode == 37) {
					//<-
					var prev = $(e.srcElement).prev()[0];
					if (prev) prev.focus();
				}
			});
			$w.find('.dialog-button button:first').delay(100).focus();
		}

		function sendMsgToFrame(target, msg, args) {
			window.sendPostMessage(target || window.top, msg, args);
		}

		/**
   * 打开一个首页tab窗口
   * @method openTabMenu
   * @param {String} tabid 不可重复，最好取菜单id，若没菜单可自定义
   * @param {String} title tab名称
   * @param {String} !url 要访问的地址
   */
		function openTabMenu(tabid, title, url, reLoad) {
			if (!url) return;
			var args = tabid + ";" + title + ";" + url;
			if (reLoad) {
				sendMsgToFrame(window.top, "indexTab.closeTab", args);
			}
			sendMsgToFrame(window.top, "indexTab.addTab", args);
		}
		/**
   * 关闭一个首页tab窗口
   * @method closeTabMenu
   * @param {String} tabid
   */
		function closeTabMenu(tabid) {
			sendMsgToFrame(window.top, "indexTab.closeTab", tabid);
		}

		/**
  * 关闭所有工作tab
  * @author xp
   */
		function closeAllTabMenu() {
			sendMsgToFrame(window.top, "indexTab.closeAllTab");
		}

		/**
   * 显示boxComponet组建，根据不同的目标对象显示在不同位置
   * @method showBoxComponent
   * @param {String} id boxComponet组建的id,必传
   * @param {String} target 目标对象，为一dom对象，必传
   */
		function showBoxComponent(id, target) {
			var $target = $(target);
			var bodyHeight = $(document.body).outerHeight(true);
			var bodyWidth = $(document.body).outerWidth(true);
			var $id = $("#" + id);
			var boxHeight = $id.outerHeight(true);
			var boxWidth = $id.outerWidth(true);
			if ($target && $target.length == 1) {
				var targetOffset = $target.offset();
				if (targetOffset) {
					var targetTop = targetOffset.top;
					var targetLeft = targetOffset.left;
					var targetHeight = $target.innerHeight();
					var targetWidth = $target.innerWidth();
					var heightDifference = bodyHeight - targetHeight - targetTop;
					var widthDifference = bodyWidth - targetWidth - targetLeft;

					var ap = $id.attr("_position");
					if (ap == "horizontal") {
						heightDifference = bodyHeight - targetTop;
						widthDifference = bodyWidth - targetWidth - targetLeft;
					} else if (ap == "vertical") {
						heightDifference = bodyHeight - targetHeight - targetTop;
						widthDifference = bodyWidth - targetLeft;
					}
					//					console.log("bodyWidth:" + bodyWidth +",boxWidth:" + boxWidth +",targetLeft:" + targetLeft + ",targetWidth:" + targetWidth + ",widthDifference:" +widthDifference);
					//					console.log("bodyHeight:" + bodyHeight +",boxHeight:" + boxHeight +",targetTop:" + targetTop + ",targetHeight:" + targetHeight + ",heightDifference:" +heightDifference);
					//
					var horizontalP, verticalP;
					if (heightDifference >= boxHeight) {
						if (ap == "horizontal") {
							$id.css("top", targetTop + targetHeight - 40 - targetHeight / 2);
						} else if (ap == "vertical") {
							$id.css("top", targetTop + targetHeight + 10);
						}
						verticalP = false;
					} else {
						if (ap == "horizontal") {
							$id.css("top", targetTop - boxHeight + 50);
						} else if (ap == "vertical") {
							$id.css("top", targetTop - boxHeight - 10);
						}
						verticalP = true;
					}
					if (widthDifference >= boxWidth) {
						if (ap == "horizontal") {
							$id.css("left", targetLeft + targetWidth);
						} else if (ap == "vertical") {
							$id.css("left", targetLeft - 20);
						}
						horizontalP = false;
					} else {
						if (ap == "horizontal") {
							$id.css("left", targetLeft - boxWidth - 10);
						} else if (ap == "vertical") {
							$id.css("left", targetLeft - boxWidth + 40);
						}
						horizontalP = true;
					}
					var $boxComponent_b = $("#" + id + " > b");
					if (ap == "horizontal") {
						if (verticalP && horizontalP) {
							removeClass_b($boxComponent_b);
							$boxComponent_b.addClass("boxComponent_b_rightBottom");
						} else if (verticalP && !horizontalP) {
							removeClass_b($boxComponent_b);
							$boxComponent_b.addClass("boxComponent_b_leftBottom");
						} else if (!verticalP && horizontalP) {
							removeClass_b($boxComponent_b);
							$boxComponent_b.addClass("boxComponent_b_rightTop");
						} else if (!verticalP && !horizontalP) {
							removeClass_b($boxComponent_b);
							$boxComponent_b.addClass("boxComponent_b_leftTop");
						}
					} else if (ap == "vertical") {
						if (verticalP && horizontalP) {
							removeClass_b($boxComponent_b);
							$boxComponent_b.addClass("boxComponent_b_bottomRight");
						} else if (verticalP && !horizontalP) {
							removeClass_b($boxComponent_b);
							$boxComponent_b.addClass("boxComponent_b_bottomLeft");
						} else if (!verticalP && horizontalP) {
							removeClass_b($boxComponent_b);
							$boxComponent_b.addClass("boxComponent_b_topRight");
						} else if (!verticalP && !horizontalP) {
							removeClass_b($boxComponent_b);
							$boxComponent_b.addClass("boxComponent_b_topLeft");
						}
					}
				}
			}
			$id.show();
		}
		/**
   *关闭boxComponet组建，根据不同的目标对象显示在不同位置
   * @method closeBoxComponent
   * @param {String} id boxComponet组建的id,必传
   * @author cy
   */
		function closeBoxComponent(id) {
			$("#" + id).hide();
		}
		function removeClass_b(o) {
			o.removeClass("boxComponent_b_topLeft boxComponent_b_topRight boxComponent_b_bottomLeft boxComponent_b_bottomRight boxComponent_b_leftTop boxComponent_b_rightTop boxComponent_b_leftBottom boxComponent_b_rightBottom");
		}

		//打开进度条
		function openProcess(url) {
			//			var height,width,top,left;
			//			var $obj = $("body");
			//			height = $obj.height();
			//			width = $obj.width();
			//			top = $obj.offset().top;
			//			left = $obj.offset().left;

			$("<div id='ta-progress-1' style='position:absolute;z-index:9990;width:100%;width:400px;height:20px;text-align:left;overflow: hidden;font-family: Verdana, Arial, sans-serif;font-size: 1.1em;border: 1px solid #aaaaaa;background: #ffffff 50% 50% repeat-x;top:45%;;left:35%;'>" + "<div id='ta-progress-2' style='position: absolute;left: 40%;top: 1px;font-weight: bold;text-align: left;'>Loading...</div>" + "<div id='ta-progress-3' style='background-image: none;background: #cccccc 50% 50% repeat-x;font-weight: bold;display: block; width: 0%;height:20px;'></div></div>").appendTo($('body'));

			//初始化
			$("#ta-progress-2").text("Loading..."); //进度条里面文字
			$("#ta-progress-3").css("width", '0%'); //初始化背景色

			if (url.indexOf("!") != -1) {
				session = url.split("!")[0];
			} else {
				session = url.substring(0, url.lastIndexOf("."));
			}
			//不断请求的action地址,该地址不断的从session中读取进度条完成的值
			function simulateProgress() {
				var loadBarValue = 0;
				var int = setInterval(function () {
					$.ajax({
						type: 'POST',
						url: session + '!getProcess.do',
						data: null,
						success: function success(data) {
							loadBarValue = data.percent; //返回的百分比
						},
						dataType: 'json'
					});

					$("#ta-progress-2").text(loadBarValue + '%');
					$("#ta-progress-3").css("width", loadBarValue + '%');
					//加载完成
					if (loadBarValue == 100) {
						$("#ta-progress-2").text(Base.I18n.getLangText("taface.module.window.loadcomplete")); //i18n:加载完成！
						clearInterval(int);
						$("#ta-progress-1").remove();
					}
				}, 300);
			}
			simulateProgress();
		}
	}
});
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 96 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 97 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 98 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

(function (factory) {
	if (true) {
		// AMD. Register as anonymous module.
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {
		// Browser globals.
		factory(jQuery);
	}
})(function ($) {

	var pluses = /\+/g;

	function encode(s) {
		return config.raw ? s : encodeURIComponent(s);
	}

	function decode(s) {
		return config.raw ? s : decodeURIComponent(s);
	}

	function stringifyCookieValue(value) {
		return encode(config.json ? JSON.stringify(value) : String(value));
	}

	function parseCookieValue(s) {
		if (s.indexOf('"') === 0) {
			// This is a quoted cookie as according to RFC2068, unescape...
			s = s.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, '\\');
		}

		try {
			// Replace server-side written pluses with spaces.
			// If we can't decode the cookie, ignore it, it's unusable.
			s = decodeURIComponent(s.replace(pluses, ' '));
		} catch (e) {
			return;
		}

		try {
			// If we can't parse the cookie, ignore it, it's unusable.
			return config.json ? JSON.parse(s) : s;
		} catch (e) {}
	}

	function read(s, converter) {
		var value = config.raw ? s : parseCookieValue(s);
		return $.isFunction(converter) ? converter(value) : value;
	}

	var config = $.cookie = function (key, value, options) {

		// Write
		if (value !== undefined && !$.isFunction(value)) {
			options = $.extend({}, config.defaults, options);

			if (typeof options.expires === 'number') {
				var days = options.expires,
				    t = options.expires = new Date();
				t.setDate(t.getDate() + days);
			}

			return document.cookie = [encode(key), '=', stringifyCookieValue(value), options.expires ? '; expires=' + options.expires.toUTCString() : '', // use expires attribute, max-age is not supported by IE
			options.path ? '; path=' + options.path : '', options.domain ? '; domain=' + options.domain : '', options.secure ? '; secure' : ''].join('');
		}

		// Read

		var result = key ? undefined : {};

		// To prevent the for loop in the first place assign an empty array
		// in case there are no cookies at all. Also prevents odd result when
		// calling $.cookie().
		var cookies = document.cookie ? document.cookie.split('; ') : [];

		for (var i = 0, l = cookies.length; i < l; i++) {
			var parts = cookies[i].split('=');
			var name = decode(parts.shift());
			var cookie = parts.join('=');

			if (key && key === name) {
				// If second argument (value) is a function it's a converter...
				result = read(cookie, value);
				break;
			}

			// Prevent storing a cookie that we couldn't decode.
			if (!key && (cookie = read(cookie)) !== undefined) {
				result[name] = cookie;
			}
		}

		return result;
	};

	config.defaults = {};

	$.removeCookie = function (key, options) {
		if ($.cookie(key) !== undefined) {
			// Must not alter options, thus extending a fresh object...
			$.cookie(key, '', $.extend({}, options, { expires: -1 }));
			return true;
		}
		return false;
	};
});

/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * cookie
 * Copyright(c) 2012-2014 Roman Shtylman
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * Module exports.
 * @public
 */

exports.parse = parse;
exports.serialize = serialize;

/**
 * Module variables.
 * @private
 */

var decode = decodeURIComponent;
var encode = encodeURIComponent;
var pairSplitRegExp = /; */;

/**
 * RegExp to match field-content in RFC 7230 sec 3.2
 *
 * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]
 * field-vchar   = VCHAR / obs-text
 * obs-text      = %x80-FF
 */

var fieldContentRegExp = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;

/**
 * Parse a cookie header.
 *
 * Parse the given cookie header string into an object
 * The object has the various cookies as keys(names) => values
 *
 * @param {string} str
 * @param {object} [options]
 * @return {object}
 * @public
 */

function parse(str, options) {
  if (typeof str !== 'string') {
    throw new TypeError('argument str must be a string');
  }

  var obj = {}
  var opt = options || {};
  var pairs = str.split(pairSplitRegExp);
  var dec = opt.decode || decode;

  for (var i = 0; i < pairs.length; i++) {
    var pair = pairs[i];
    var eq_idx = pair.indexOf('=');

    // skip things that don't look like key=value
    if (eq_idx < 0) {
      continue;
    }

    var key = pair.substr(0, eq_idx).trim()
    var val = pair.substr(++eq_idx, pair.length).trim();

    // quoted values
    if ('"' == val[0]) {
      val = val.slice(1, -1);
    }

    // only assign once
    if (undefined == obj[key]) {
      obj[key] = tryDecode(val, dec);
    }
  }

  return obj;
}

/**
 * Serialize data into a cookie header.
 *
 * Serialize the a name value pair into a cookie string suitable for
 * http headers. An optional options object specified cookie parameters.
 *
 * serialize('foo', 'bar', { httpOnly: true })
 *   => "foo=bar; httpOnly"
 *
 * @param {string} name
 * @param {string} val
 * @param {object} [options]
 * @return {string}
 * @public
 */

function serialize(name, val, options) {
  var opt = options || {};
  var enc = opt.encode || encode;

  if (typeof enc !== 'function') {
    throw new TypeError('option encode is invalid');
  }

  if (!fieldContentRegExp.test(name)) {
    throw new TypeError('argument name is invalid');
  }

  var value = enc(val);

  if (value && !fieldContentRegExp.test(value)) {
    throw new TypeError('argument val is invalid');
  }

  var str = name + '=' + value;

  if (null != opt.maxAge) {
    var maxAge = opt.maxAge - 0;
    if (isNaN(maxAge)) throw new Error('maxAge should be a Number');
    str += '; Max-Age=' + Math.floor(maxAge);
  }

  if (opt.domain) {
    if (!fieldContentRegExp.test(opt.domain)) {
      throw new TypeError('option domain is invalid');
    }

    str += '; Domain=' + opt.domain;
  }

  if (opt.path) {
    if (!fieldContentRegExp.test(opt.path)) {
      throw new TypeError('option path is invalid');
    }

    str += '; Path=' + opt.path;
  }

  if (opt.expires) {
    if (typeof opt.expires.toUTCString !== 'function') {
      throw new TypeError('option expires is invalid');
    }

    str += '; Expires=' + opt.expires.toUTCString();
  }

  if (opt.httpOnly) {
    str += '; HttpOnly';
  }

  if (opt.secure) {
    str += '; Secure';
  }

  if (opt.sameSite) {
    var sameSite = typeof opt.sameSite === 'string'
      ? opt.sameSite.toLowerCase() : opt.sameSite;

    switch (sameSite) {
      case true:
        str += '; SameSite=Strict';
        break;
      case 'lax':
        str += '; SameSite=Lax';
        break;
      case 'strict':
        str += '; SameSite=Strict';
        break;
      default:
        throw new TypeError('option sameSite is invalid');
    }
  }

  return str;
}

/**
 * Try decoding a string using a decoding function.
 *
 * @param {string} str
 * @param {function} decode
 * @private
 */

function tryDecode(str, decode) {
  try {
    return decode(str);
  } catch (e) {
    return str;
  }
}


/***/ }),
/* 101 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

(function (factory) {
	if (true) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(13), __webpack_require__(60), __webpack_require__(17)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {
		factory(jQuery);
	}
})(function ($) {

	// get the left position of the tab element
	function getTabLeftPosition(container, tab) {
		var w = 0;
		var b = true;
		$('>div.tabs-header ul.tabs li', container).each(function () {
			if (this == tab) {
				b = false;
			}
			if (b == true) {
				w += $(this).outerWidth(true);
			}
		});
		return w;
	}

	// get the max tabs scroll width(scope)
	function getMaxScrollWidth(container) {
		var header = $('>div.tabs-header', container);
		var tabsWidth = 0; // all tabs width
		$('ul.tabs li', header).each(function () {
			tabsWidth += $(this).outerWidth(true);
		});
		var wrapWidth = $('.tabs-wrap', header).width();
		var padding = parseInt($('.tabs', header).css('padding-left'));

		return tabsWidth - wrapWidth + padding + 40;
	}

	// set the tabs scrollers to show or not,
	// dependent on the tabs count and width
	function setScrollers(container) {
		var header = $('>div.tabs-header', container);

		var tabsWidth = 0;
		$('ul.tabs li', header).each(function () {
			tabsWidth += $(this).outerWidth(true);
		});
		if (tabsWidth > header.width()) {
			$('.tabs-scroller-left', header).css('display', 'block');
			$('.tabs-scroller-right', header).css('display', 'block');
			$('.tabs-wrap', header).addClass('tabs-scrolling');

			//			if ($.boxModel == true) {
			//				$('.tabs-wrap', header).css('left',2);
			//			} else {
			//				$('.tabs-wrap', header).css('left',0);
			//			}
			//			var width = header.width()
			//				- $('.tabs-scroller-left', header).outerWidth()
			//				- $('.tabs-scroller-right', header).outerWidth();
			//			$('.tabs-wrap', header).width(width);
			//
			//		} else {
			//			$('.tabs-scroller-left', header).css('display', 'none');
			//			$('.tabs-scroller-right', header).css('display', 'none');
			//			$('.tabs-wrap', header).removeClass('tabs-scrolling').scrollLeft(0);
			//			$('.tabs-wrap', header).width(header.width());
			//			$('.tabs-wrap', header).css('left',0);
			//
		} else {
			$('.tabs-scroller-left', header).css('display', 'none');
			$('.tabs-scroller-right', header).css('display', 'none');
			$('.tabs-wrap', header).removeClass('tabs-scrolling');
		}
	}

	// set size of the tabs container
	function setSize(container) {
		var opts = $.data(container, 'tabs').options;
		var $c = $(container);
		setScrollers(container);
		if (opts.fit) {
			//$c.tauifitheight();
			new TaFit($c).tauifitheight();
		} else {
			var panels = $('>div.tabs-panels', $c);
			var header = $('>div.tabs-header', $c);
			//tabs里面下边框,所以-1
			var height = opts.height;
			if (!isNaN(height)) {
				if ($.boxModel == true) {
					var delta = panels.outerHeight(true) - panels.height();
					height = height - header.outerHeight(true) - delta || 'auto';
				} else {
					height = height - header.outerHeight(true);
				}
				panels.css('height', height);
				$('>div', panels).each(function () {
					var $this = $(this);
					$(this).height(height - parseInt($this.parent().css('paddingTop')) - parseInt($this.parent().css('paddingBottom')) - 1);
				});
			} else {
				panels.height(height);
			}

			//$('>div.l-layout:visible',panels).each(function(){$(this).triggerHandler('_resize');});
			//$('>div:visible>div[fit=true], >div:visible>form[fit=true],>div:visible>div.grid[height],>div:visible>div.ez-fl>div.grid[height],.tabs-container[fit=true]', panels).each(function(){$(this).triggerHandler('_resize');});
			$('>div:visible[fit=true],>div:visible>div[fit=true], >div:visible>form[fit=true],>div:visible>div.grid[height],>div:visible>div.ez-fl>div.grid[height]', panels).each(function () {
				$(this).triggerHandler('_resize');
			});
		}
	}

	// wrap the tabs header and body
	function wrapTabs(container) {
		$(container).addClass('tabs-container');
		$(container).wrapInner('<div class="tabs-panels"/>');
		$('<div class="tabs-header">' + '<div class="tabs-scroller-left"><div class="faceIcon icon-arrow2_left left-arrow"></div></div>' + '<div class="tabs-scroller-right"><div class="faceIcon icon-arrow2_right right-arrow"></div></div>' + '<div class="tabs-wrap">' + '<ul class="tabs"></ul>' + '</div>' + '</div>').prependTo(container);

		var header = $('>div.tabs-header', container);

		$('>div.tabs-panels>div', container).each(function () {
			if (!$(this).attr('id')) {
				$(this).attr('id', 'gen-tabs-panel' + $.fn.tauitabs.defaults.idSeed++);
			}

			var options = {
				id: $(this).attr('id'),
				title: $(this).attr('title'),
				content: null,
				href: $(this).attr('href'),
				closable: $(this).attr('closable') == 'true',
				icon: $(this).attr('icon'),
				selected: $(this).attr('selected') !== undefined,
				cache: $(this).attr('cache') == 'false' ? false : true,
				enable: $(this).attr('enable') == 'false' ? false : true
			};
			$(this).attr('title', '');
			createTab(container, options);
		});

		$('.tabs-scroller-left, .tabs-scroller-right', header).hover(function () {
			$(this).addClass('tabs-scroller-over');
		}, function () {
			$(this).removeClass('tabs-scroller-over');
		}).mousedown(function () {
			$(this).addClass('tabs-scroller-mousedown');
		}).mouseup(function () {
			$(this).removeClass('tabs-scroller-mousedown');
		});
	}

	function setProperties(container) {
		var opts = $.data(container, 'tabs').options;
		var header = $('>div.tabs-header', container);
		var panels = $('>div.tabs-panels', container);
		var tabs = $('ul.tabs', header);

		if (opts.plain == true) {
			header.addClass('tabs-header-plain');
		} else {
			header.removeClass('tabs-header-plain');
		}
		if (opts.border == true) {
			header.removeClass('tabs-header-noborder');
			panels.removeClass('tabs-panels-noborder');
		} else {
			header.addClass('tabs-header-noborder');
			panels.addClass('tabs-panels-noborder');
		}
		$('li', tabs).unbind('.tabs').bind('click.tabs', function () {
			//如果是enable=flase，那么就不执行click
			var tabAttr = $.data(this, 'tabs.tab');
			if (!tabAttr.enable) return;

			$('.tabs-selected', tabs).removeClass('tabs-selected');
			$(this).addClass('tabs-selected');
			$(this).blur();
			$('>div.tabs-panels>div', container).css('display', 'none');

			var wrap = $('.tabs-wrap', header);
			var leftPos = getTabLeftPosition(container, this);
			var left = leftPos - wrap.scrollLeft();
			var right = left + $(this).outerWidth();
			if (left < 0 || right > wrap.innerWidth()) {
				var pos = Math.min(leftPos - (wrap.width() - $(this).width()) / 2, getMaxScrollWidth(container));
				wrap.animate({ scrollLeft: pos }, opts.scrollDuration);
			}

			var panel = $('#' + tabAttr.id);
			//切换时对隐藏tab中的热键进行注销
			var panelSiblings = panel.siblings("div");
			for (var j = 0; j < panelSiblings.length; j++) {
				var panelSibling = panelSiblings.eq(j);
				var buttons = panelSibling.find(":button");
				for (var x = 0; x < buttons.length; x++) {
					var button = buttons.eq(x);
					if (button.attr("hotKey") && hotKeyregister) {
						hotKeyregister.remove(buttons.eq(x).attr("hotKey"));
					}
				}
			}
			panel.css('display', 'block');
			//当选择tab页的时候进行热键注册,李永顺修改
			$(":button", panel).each(function () {
				var _this = this;
				var _$this = $(this);
				if (!_$this.is(':hidden') && !this.disabled) {
					var hotKey = $(this).attr('hotKey');
					if (hotKey && hotKeyregister) {
						hotKeyregister.add(hotKey, function () {
							_this.focus();_this.click();return false;
						});
					}
				}
			});
			//XXX 每个tab只需要一次resize
			var fitstatus = $.data(panel[0], 'fitstatus');
			if (!fitstatus || !fitstatus.fit) {
				if (panel.hasClass("l-layout")) {
					panel.triggerHandler('_resize');
				}

				$('>div.l-layout:visible', panel).each(function () {
					$(this).triggerHandler('_resize');
				});

				$('>div:visible[fit=true],>div:visible>div[fit=true],>div:visible>form[fit=true],>div:visible>div.grid[height],>div:visible>div.ez-fl>div.grid[height],>div.grid[fit=true],>.panel[fit=true],>.panel[fit=true]>div.ez-fl[fit=true],>.tabs-container[fit=true]', panel).each(function () {
					$(this).triggerHandler('_resize');
				});

				$.data(panel[0], 'fitstatus', { fit: true });
			}

			//add by chenyao 解决初始化tab嵌套tab高度没有初始化的问提
			//  setSize(container);
			if (tabAttr.href && (!tabAttr.loaded || !tabAttr.cache)) {
				panel.load(tabAttr.href, null, function () {
					//					if ($.parser){
					//						$.parser.parse(panel);
					//					}
					opts.onLoad.apply(this, arguments);
					tabAttr.loaded = true;
				});
			}
			if ("0" != $(container).attr("isInit")) {
				opts.onSelect.call(panel, tabAttr.id);
			}
			var $grid = $('.slick-grid-container', panel);
			if ($grid.size() > 0) {
				for (var i = 0; i < $grid.size(); i++) {
					if ($grid[i].style.display != "none" && typeof Base.getObj($grid[i].id).refreshGrid === 'function') Base.getObj($grid[i].id).refreshGrid();
				}
			}
			return true; //add by zzb 解决beforeunload事件兼容性
			//modify by xp 改为return true,解决事件不向外传递的问题(如selectinput body.bind)
		});

		$('a.tabs-close', tabs).unbind('.tabs').bind('click.tabs', function () {
			var elem = $(this).parent()[0];
			var tabAttr = $.data(elem, 'tabs.tab');
			if (!tabAttr.enable) return;

			closeTab(container, tabAttr.title, elem);
		});

		$('.tabs-scroller-left', header).unbind('.tabs').bind('click.tabs', function () {
			var wrap = $('.tabs-wrap', header);
			var pos = wrap.scrollLeft() - opts.scrollIncrement;
			wrap.animate({ scrollLeft: pos }, opts.scrollDuration);
		});

		$('.tabs-scroller-right', header).unbind('.tabs').bind('click.tabs', function () {
			var wrap = $('.tabs-wrap', header);
			var pos = Math.min(wrap.scrollLeft() + opts.scrollIncrement, getMaxScrollWidth(container));
			wrap.animate({ scrollLeft: pos }, opts.scrollDuration);
		});
	}

	function createTab(container, options) {
		var header = $('>div.tabs-header', container);
		var tabs = $('ul.tabs', header);

		var tab = $('<li></li>').attr("title", options.title);
		var tab_span = $('<span></span>').html(options.title);
		var tab_a = $('<a class="tabs-inner ' + (options.enable ? '' : 'disabled') + '"></a>').attr('href', 'javascript:void(0)').append(tab_span);
		tab_a.addClass("tabs-inner-a");
		tab.addClass("tabs-li");
		tab.append(tab_a).appendTo(tabs);

		if (options.closable) {
			tab_span.addClass('tabs-closable');
			tab_a.after('<a href="javascript:void(0)" class="tabs-close ' + (options.enable ? '' : 'disabled') + '"></a>');
		}
		if (options.icon) {
			tab_span.addClass('tabs-with-icon');
			tab_span.after($('<span/>').addClass('tabs-icon faceIcon').addClass(options.icon));
		}
		if (options.selected) {
			tab.addClass('tabs-selected');
		}
		if (options.content) {
			$('#' + options.id).html(options.content);
		}
		$('#' + options.id).removeAttr('title');
		$.data(tab[0], 'tabs.tab', {
			id: options.id,
			title: options.title,
			href: options.href,
			loaded: false,
			cache: options.cache,
			enable: options.enable
		});
	}

	function addTab(container, options) {
		options = $.extend({
			id: null,
			title: '',
			content: '',
			href: null,
			cache: true,
			icon: null,
			closable: false,
			selected: true,
			height: 'auto',
			width: 'auto',
			enable: true
		}, options || {});

		if (options.selected) {
			$('.tabs-header .tabs-wrap .tabs li', container).removeClass('tabs-selected');
		}
		options.id = options.id || 'gen-tabs-panel' + $.fn.tauitabs.defaults.idSeed++;

		$('<div></div>').attr('id', options.id).attr('title', options.title).css('overflow', 'auto').height(options.height).width(options.width).appendTo($('>div.tabs-panels', container));
		createTab(container, options);
		//		setScrollers(container);
	}

	// close a tab with specified title
	function closeTab(container, title, o) {
		var opts = $.data(container, 'tabs').options;
		var elem;
		if (typeof title == "string") {
			if (o) {
				elem = o;
			} else {
				elem = $('>div.tabs-header li:has(a span:contains("' + title + '"))', container)[0];
			}
		} else if ((typeof title === "undefined" ? "undefined" : _typeof(title)) == "object") {
			$('>div.tabs-header li', container).each(function () {
				var tabAttr = $.data(this, 'tabs.tab');
				if (tabAttr.id == title.id) {
					elem = this;
					return false;
				}
			});
		}
		if (!elem) return;
		var tabAttr = $.data(elem, 'tabs.tab');
		var panel = $('#' + tabAttr.id);

		if (opts.onClose.call(panel, tabAttr.id) == false) return;

		var selected = $(elem).hasClass('tabs-selected');
		$.removeData(elem, 'tabs.tab');
		var frame = $('iframe', panel);
		if (frame.length > 0) {
			frame[0].contentWindow.document.$ = null;
			frame[0].contentWindow.document.jQuery = null;
			frame[0].contentWindow.Ta = null;
			frame[0].contentWindow.document.write('');
			frame[0].contentWindow.close();
			frame[0] = null;
			frame.remove();
		}
		$(elem).remove();
		panel.remove();
		//setSize(container);
		if (selected) {
			selectTab(container);
		} else {
			var wrap = $('>div.tabs-header .tabs-wrap', container);
			var pos = Math.min(wrap.scrollLeft(), getMaxScrollWidth(container));
			wrap.animate({ scrollLeft: pos }, opts.scrollDuration);
		}
		if ($.browser.msie) {
			CollectGarbage();
		}
		setScrollers(container); //add by cy 关闭tab之后 tabs的头重置下
	}
	// hide a tab with tabid
	function hideTab(container, id) {
		//var opts = $.data(container, 'tabs').options;
		var elem;
		$('>div.tabs-header li', container).each(function () {
			var tabAttr = $.data(this, 'tabs.tab');
			if (tabAttr.id == id) {
				elem = this;
				return false;
			}
		});
		if (!elem) return;
		//if($(elem).is(':hidden'))return ;//如果非隐藏tab直接不处理
		if ($(elem).hidden) return;
		var tabAttr = $.data(elem, 'tabs.tab');
		var panel = $('#' + tabAttr.id);

		var selected = $(elem).hasClass('tabs-selected');
		$(elem).hide();
		//setSize(container);
		if (selected) {
			panel.hide();
			selectTab(container);
		} else {
			panel.hide();
			//			var wrap = $('>div.tabs-header .tabs-wrap', container);
			//			var pos = Math.min(
			//					wrap.scrollLeft(),
			//					getMaxScrollWidth(container)
			//			);
			//			wrap.animate({scrollLeft:pos}, opts.scrollDuration);
		}
		setScrollers(container); //add by cy 重置表头
	}
	// show a tab with tabid
	function showTab(container, id) {
		var opts = $.data(container, 'tabs').options;
		var elem;
		$('>div.tabs-header li', container).each(function () {
			var tabAttr = $.data(this, 'tabs.tab');
			if (tabAttr.id == id) {
				elem = this;
				return false;
			}
		});
		if (!elem) return;
		if (!$(elem).is(':hidden')) return; //如果非隐藏tab直接不处理

		var tabAttr = $.data(elem, 'tabs.tab');
		//var panel = $('#' + tabAttr.id);

		$(elem).show();
		//setSize(container);

		var wrap = $('>div.tabs-header .tabs-wrap', container);
		var pos = Math.min(wrap.scrollLeft(), getMaxScrollWidth(container));
		wrap.animate({ scrollLeft: pos }, opts.scrollDuration);
	}
	// active the selected tab item, if no selected item then active the first item
	function selectTab(container, title) {
		if (title) {
			if (typeof title == "string") {
				var elem = $('>div.tabs-header li:has(a span:contains("' + title + '"))', container)[0];
				if (elem) {
					$(elem).trigger('click');
				}
			} else {
				$('>div.tabs-header li', container).each(function () {
					var tabAttr = $.data(this, 'tabs.tab');
					if (tabAttr.id == title.id) {
						$(this).trigger('click');
						return false;
					}
				});
			}
		} else {
			var tabs = $('>div.tabs-header ul.tabs', container);
			if ($('.tabs-selected', tabs).length == 0) {
				//修改 by  chenyao  tab显示问题
				$('li a', tabs).eq(0).parent().trigger('click');
				//$('li a', tabs).not('.disabled').not(':hidden').eq(0).parent().trigger('click');
			} else {
				var t = $('.tabs-selected', tabs);
				if (!t.is(':hidden')) {
					t.trigger('click');
				} else {
					$('li a', tabs).not('.disabled').not(':hidden').eq(0).parent().trigger('click');
				}
			}
		}
	}

	function exists(container, title) {
		if (title && typeof title != 'string') {
			var exist = false;
			$('>div.tabs-header li', container).each(function () {
				var tabAttr = $.data(this, 'tabs.tab');
				if (tabAttr.id == title.id) {
					exist = true;
					return false;
				}
			});
			return exist;
		}
		return $('>div.tabs-header li:has(a span:contains("' + title + '"))', container).length > 0;
	}
	function setTitle(container, tabid, title) {
		if (tabid) {
			$('>div.tabs-header li', container).each(function () {
				var tabAttr = $.data(this, 'tabs.tab');
				if (tabAttr.id == tabid) {
					$('>a span', $(this)).html(title);
					return false;
				}
			});
		}
	}
	function enableTab(container, tabid, enable) {
		if (tabid) {
			$('>div.tabs-header li', container).each(function () {
				var tabAttr = $.data(this, 'tabs.tab');
				if (tabAttr.id == tabid) {
					tabAttr.enable = enable;
					$.data(this, 'tabs.tab', tabAttr);
					var $a = $('>a', $(this));
					if (enable) {
						if ($a.hasClass('disabled')) $a.removeClass('disabled');
					} else {
						if (!$a.hasClass('disabled')) {
							$a.addClass('disabled');
						}
					}
					return false;
				}
			});
		}
	}
	$.fn.tauitabs = function (options, param) {
		if (typeof options == 'string') {
			switch (options) {
				case 'resize':
					return this.each(function () {
						setSize(this);
					});
				case 'add':
					return this.each(function () {
						addTab(this, param);
						$(this).tauitabs();
					});
				case 'close':
					return this.each(function () {
						closeTab(this, param);
					});
				case 'select':
					return this.each(function () {
						selectTab(this, param);
					});
				case 'exists':
					return exists(this[0], param);
				case 'setTitle':
					return setTitle(this[0], param.tabid, param.title);
				case 'enableTab':
					return enableTab(this[0], param.tabid, param.enable);
				case 'hideTab':
					return hideTab(this[0], param);
				case 'showTab':
					return showTab(this[0], param);
				case 'setScrollers':
					return setScrollers(this);
			}
		}

		options = options || {};

		return this.each(function () {
			//yanglq 增加属性值 标记 用于初始化tabs时 不去调用onSelect
			$(this).attr("isInit", "0");
			var state = $.data(this, 'tabs');
			var opts;
			if (state) {
				opts = $.extend(state.options, options);
				state.options = opts;
			} else {
				var t = $(this);
				opts = $.extend({}, $.fn.tauitabs.defaults, {
					width: parseInt(t.css('width')) || undefined,
					height: parseInt(t.css('height')) || undefined,
					heightDiff: t.attr('heightDiff') || 0,
					fit: t.attr('fit') ? t.attr('fit') == 'true' : undefined,
					border: t.attr('border') ? t.attr('border') == 'true' : undefined,
					plain: t.attr('plain') ? t.attr('plain') == 'true' : undefined,
					onSelect: t.attr('onSelect') && eval(t.attr('onSelect')) || function () {},
					onClose: t.attr('onClose') && eval(t.attr('onClose')) || function () {},
					onLoad: t.attr('onLoad') && eval(t.attr('onLoad')) || function () {}
				}, options);
				wrapTabs(this);
				$.data(this, 'tabs', {
					options: opts
				});
			}

			setProperties(this);
			selectTab(this);
			setSize(this);
			$(this).attr("isInit", "1");
		});
	};

	$.fn.tauitabs.defaults = {
		width: 'auto',
		height: 'auto',
		heightDiff: 0,
		idSeed: 0,
		plain: false,
		fit: false,
		border: true,
		scrollIncrement: 100,
		scrollDuration: 300,
		onLoad: function onLoad() {},
		onSelect: function onSelect(title) {},
		onClose: function onClose(title) {}
	};
});

/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Created by Administrator on 2016/10/31.
 */
__webpack_require__(231);

(function (factory) {
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(17), __webpack_require__(241), __webpack_require__(242), __webpack_require__(243), __webpack_require__(143), __webpack_require__(88)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {
        factory(jQuery);
    }
})(function ($) {
    $.extend(true, window, {
        TaTree: TaTree
    });
    __webpack_require__(244);
    function TaTree(treeId, options) {
        function initOptions() {
            var defaults = {
                showSearch: false,
                searchColumn: options.setting.data.key.name
            };
            options = $.extend({}, defaults, options);

            //初始化搜索面板列信息配置
            if (options.showSearch) {
                /*var $search = $("<div class='fielddiv fielddiv_163'><div>").appendTo();
                 if(options.serachLabel && options.serachLabel.length > 0){
                 var $serachLabel = $("<label for='"+treeId+"_search' class='fieldLabel'></label>")
                 .attr("style",options.labelStyle||"")
                 .text(options.serachLabel)
                 .appendTo($search);
                 }
                 var $serachInput = $("<div class='fielddiv2'></div>")
                 .append($("<input id='"+treeId+"_search' class='textinput' type='text'>"))
                 .appendTo($search);
                 serachInput.css("margin-left",options.labelWidth||0+"px");*/

                if (typeof options.searchPanelGrid == 'undefined' || options.searchPanelGrid == null) {
                    options.searchPanelGrid = [];
                }
                var _searchPanelGrid = [];

                if (!isOptionsExist(options.searchPanelGrid, "tId")) {
                    _searchPanelGrid.push({ id: "tId", key: "tId", hiddenColumn: true });
                }

                if (options.setting.data.simpleData.enable) {
                    if (options.setting.data.simpleData.idKey && !isOptionsExist(options.searchPanelGrid, options.setting.data.simpleData.idKey)) {
                        _searchPanelGrid.push({ id: options.setting.data.simpleData.idKey, key: options.setting.data.simpleData.idKey, hiddenColumn: true });
                    }

                    if (options.setting.data.key.name && !isOptionsExist(options.searchPanelGrid, options.setting.data.key.name)) {
                        _searchPanelGrid.push({ id: options.setting.data.key.name, key: options.setting.data.key.name, hiddenColumn: false });
                    }
                }

                options.searchPanelGrid = _searchPanelGrid.concat(options.searchPanelGrid.slice());
            }

            //判断是否存在指定列信息配置
            function isOptionsExist(aryObj, id) {
                for (var _i = 0; _i < aryObj.length; _i++) {
                    if (aryObj[_i].id == id) {
                        return true;
                    }
                }
                return false;
            }
        }

        var treeObj, gridObj;
        var $search = $("#" + treeId + "_search"),
            $serachPanel,
            $rightMenu;
        var searchValue;
        var $searchIcon = $search.siblings(".icon-search");

        //var checkable = false;//关于搜索勾选后面有需要再实现，比较复杂

        function init() {
            //树节点搜索支持
            if (options.showSearch) {
                if (options.searchPanelGrid) {

                    //boxComponent 生成
                    var $boxComponent = $('<div></div>').attr("id", treeId + "_boxComponent").css("height", 200).css("width", 400).attr("_position", "vertical").addClass("boxComponent").append($("<b class='boxComponent_b'></b>"));
                    var $boxComponent_content = $('<div></div>').addClass("boxComponent_1").append($("<div style='clear:both'></div>")).appendTo($boxComponent);
                    // var $boxComponent_close = $('<div></div>').addClass("boxComponent_close").attr("title","关闭").appendTo($boxComponent);
                    var $boxComponent_close = $('<div></div>').addClass("boxComponent_close").attr("title", Base.I18n.getLangText('taface.general.close')).appendTo($boxComponent);
                    $boxComponent.appendTo($("body"));
                    new taboxcomponent(treeId, { txtId: $boxComponent.attr("id") });
                    $serachPanel = $boxComponent;
                    /*$serachPanel.appendTo($("body"))*/ //提前添加,避免事件不能bind上
                    $serachPanel.hide();
                    //dategrid 生成
                    var $datagrid = $("<div class='datagrid ta-datagrid slick-grid-container ui-widget'></div>").attr("id", treeId + "_datagrid").css("height", "100%").prependTo($boxComponent_content);

                    var c = []; //column
                    var o = {}; //option
                    var h = []; //hidden
                    o.forceFitColumns = true;
                    o.haveSn = true;

                    for (var _i = 0; _i < options.searchPanelGrid.length; _i++) {
                        var _column = {};
                        var _columnConfig = options.searchPanelGrid[_i];
                        _column.id = _columnConfig.id;
                        _column.field = _columnConfig.id;
                        _column.name = _columnConfig.key;
                        if (_columnConfig.hiddenColumn) {
                            h.push(_columnConfig.id);
                        }
                        _column.width = _columnConfig.width || 100;
                        _column.showDetailed = _columnConfig.showDetailed || true;
                        c.push(_column);
                    }
                    gridObj = new Slick.Grid("#" + treeId + "_datagrid", [], c, o);
                    gridObj.setColumnHidden(h);
                    gridObj.onClick.subscribe(function (e, data) {
                        //var node=treeObj.getNodeByParam(options.setting.data.simpleData.idKey,data[options.setting.data.simpleData.idKey],null);
                        var node = treeObj.getNodeByParam("tId", data["tId"], null);

                        treeObj.selectNode(node, false);
                        $boxComponent.hide();
                        taTreeNodeClick(e);
                    });
                }
                // $search.val("输入后回车检索");
                $search.val(Base.I18n.getLangText('taface.module.tree.entertosearch'));
                $search.css("color", "#CCC");
                $search.focus(function (e) {
                    // if(this.value.trim()=='输入后回车检索'){
                    if (this.value.trim() == Base.I18n.getLangText('taface.module.tree.entertosearch')) {
                        $(this).css('color', '#000000');
                        this.value = "";
                        e.stopPropagation();
                    }
                }).blur(function (e) {
                    if (this.value.trim() == '') {
                        $(this).css('color', '#CCC');
                        // this.value="输入后回车检索";
                        this.value = Base.I18n.getLangText('taface.module.tree.entertosearch');
                        e.stopPropagation();
                    }
                }).keydown(function (e) {
                    if (e.keyCode == 13) {
                        searchValue = $search.val().trim();
                        taQueryTree(e);
                        $(this).focus();

                        if (e.preventDefault) e.preventDefault();
                        if (e.stopPropagation) e.stopPropagation();
                    }
                });

                $searchIcon.on("click", function () {
                    var event = $.Event("keydown");
                    event.keyCode = 13;
                    $search.trigger(event);
                });
            }

            //展示右键菜单
            if (options.showRightMenu && options.setting.edit.enable) {
                var fnOnRightClick = function fnOnRightClick(event, treeId, treeNode) {
                    //beforeAdd
                    //onAdd
                    if ($rightAddMenu) {
                        $rightAddMenu.unbind("click").bind("click", function () {
                            if (!options.setting.callback.beforeAdd || options.setting.callback.beforeAdd(treeId, treeNode)) {
                                if (options.setting.callback.onAdd) options.setting.callback.onAdd(event, treeId, treeNode);
                            }
                        });
                    }
                    //beforeEditName
                    //beforeRename
                    //onRename
                    if ($rightEditMenu) {
                        $rightEditMenu.unbind("click").bind("click", function () {
                            if (!options.setting.callback.beforeEditName || options.setting.callback.beforeEditName(treeId, treeNode)) {
                                if (!options.setting.callback.beforeRename || options.setting.callback.beforeRename(treeId, treeNode)) {
                                    if (options.setting.callback.onRename) options.setting.callback.onRename(event, treeId, treeNode);
                                }
                            }
                        });
                    }
                    //beforeRemove
                    //onRemove
                    if ($rightRemoveMenu) {
                        $rightRemoveMenu.unbind("click").bind("click", function () {
                            if (!options.setting.callback.beforeRemove || options.setting.callback.beforeRemove(treeId, treeNode)) {
                                if (options.setting.callback.onRemove) options.setting.callback.onRemove(event, treeId, treeNode);
                            }
                        });
                    }

                    //beforeAccept
                    //onAccept
                    if ($rightAcceptMenu) {
                        $rightAcceptMenu.unbind("click").bind("click", function () {
                            if (!options.setting.callback.beforeAccept || options.setting.callback.beforeAccept(treeId, treeNode)) {
                                if (options.setting.callback.onAccept) options.setting.callback.onAccept(event, treeId, treeNode);
                            }
                        });
                    }

                    if (!treeNode && event.target.tagName.toLowerCase() != "button" && $(event.target).parents("a").length == 0) {
                        treeObj.cancelSelectedNode();
                    } else if (treeNode) {
                        treeObj.selectNode(treeNode);
                    }

                    //右击事件触发
                    if (_onRightClick) _onRightClick(event, treeId, treeNode);
                };

                $rightMenu = $("<div style='width:150px;font-size:12px;'></div>").attr("id", treeId + '_rightMenu').appendTo($("body"));
                var rightMenu_height = 0;
                if (options.setting.edit.showAddBtn) {
                    var $rightAddMenu = $("<div icon='faceIcon icon-addDoc'></div>").attr("id", treeId + "_rightMenuAdd").text(options.setting.edit.addTitle).appendTo($rightMenu);
                    rightMenu_height += 30;
                }

                if (options.setting.edit.showRenameBtn) {
                    var $rightEditMenu = $("<div icon='faceIcon icon-edit'></div>").attr("id", treeId + "_rightMenuEdit").text(options.setting.edit.renameTitle).appendTo($rightMenu);
                    rightMenu_height += 30;
                }

                if (options.setting.edit.showRemoveBtn) {
                    var $rightRemoveMenu = $("<div icon='faceIcon icon-delete'></div>").attr("id", treeId + "_rightMenuRemove").text(options.setting.edit.removeTitle).appendTo($rightMenu);
                    rightMenu_height += 30;
                }

                if (options.setting.edit.showAcceptBtn) {
                    var $rightAcceptMenu = $("<div icon='faceIcon icon-correct2'></div>").attr("id", treeId + "_rightMenuAccept").text(options.setting.edit.acceptTitle).appendTo($rightMenu);
                    rightMenu_height += 30;
                }
                $rightMenu.css("height", rightMenu_height);

                var _onRightClick = options.setting.callback.onRightClick;


                options.setting.callback.onRightClick = fnOnRightClick;

                $(document).ready(function () {
                    $rightMenu.menu(); // 构建右键菜单
                    // 在树上绑定右键事件
                    $("#" + treeId).bind('contextmenu', function (e) {
                        $rightMenu.menu('show', { left: e.pageX, top: e.pageY });
                        return false;
                    });
                });
            }
            //生成树
            treeObj = $.fn.zTree.init($("#" + treeId), options.setting, options.nodesData);
        }

        /*
         * 定位弹出框位置
         */
        /*        function getBoxPosition(){
         var position = {};
          position.top = $search.offset().top;
         position.left = $search.offset().left;
         return position;
         }*/

        var taFnFilter = function taFnFilter(_node) {
            if (_node["py"] && _node[py].indexOf(searchValue) > -1) return true;
            var searchColumns = options.searchColumn.split(",");
            for (var i = 0; i < searchColumns.length; i++) {
                if (_node[searchColumns[i]] && _node[searchColumns[i]].indexOf(searchValue) > -1) return true;
            }

            return false;
        };

        function taQueryTree(e) {
            treeObj.cancelSelectedNode();
            var nodes;
            if (searchValue != "") {
                nodes = treeObj.getNodesByFilter(taFnFilter, false, null); //记录
                if (nodes.length == 1) {
                    treeObj.selectNode(nodes[0]);
                    taTreeNodeClick(e);
                    taHideSerachPanel();
                } else if (nodes.length > 1) {
                    taShowSerachPanel();
                    if (options.searchPanelGrid) {
                        var data = [];
                        for (var i = 0; i < nodes.length; i++) {
                            var _row = {};
                            for (var _i = 0; _i < options.searchPanelGrid.length; _i++) {
                                var _column = options.searchPanelGrid[_i];
                                _row[_column.id] = nodes[i][_column.id];
                            }
                            data.push(_row);
                        }
                        gridObj.clearDirtyWidthOutPager();
                        gridObj.getDataView().setItems(data);
                        gridObj.getDataView().refresh();
                        gridObj.refreshGrid();
                    }
                }
            }
        }

        function taTreeNodeClick(e) {
            var sn = treeObj.getSelectedNodes();
            if ((sn != null || sn != undefined) && options.setting.callback.onClick) {
                options.setting.callback.onClick(e, treeId, sn[0]);
            }
        }

        function taHideSerachPanel() {
            $serachPanel.hide();
        };

        function taShowSerachPanel() {
            Base.showBoxComponent($serachPanel.attr("id"), $search[0]);
        };

        function taGetOptions() {
            return $.extend({}, options);
        }

        function taDestroy() {
            if ($search) {
                $search.unbind();
            }
            if ($serachPanel) {
                $serachPanel.remove();
                gridObj.destroy();
            }
            if ($rightMenu) {
                $rightMenu.remove();
            }
            treeObj.destroy();
        }

        initOptions();
        init();

        $.extend(this, {
            "cmptype": 'TaTree',
            "version": "3.13.0",
            taGetOptions: taGetOptions,
            taDestroy: taDestroy
        }, treeObj);
    }
    return TaTree;
});

/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

(function (factory) {
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {
        factory(jQuery);
    }
})(function ($) {
    // register namespace
    $.extend(true, window, {
        "Slick": {
            "RowSelectionModel": RowSelectionModel
        }
    });

    function RowSelectionModel(options) {
        var _grid;
        var _ranges = [];
        var _self = this;
        var _options;
        var _defaults = {
            selectActiveRow: true
        };

        function init(grid) {
            _options = $.extend(true, {}, _defaults, options);
            _grid = grid;
            _grid.onActiveCellChanged.subscribe(handleActiveCellChange);
            _grid.onKeyDown.subscribe(handleKeyDown);
            _grid.onClick.subscribe(handleClick);
        }

        function destroy() {
            _grid.onActiveCellChanged.unsubscribe(handleActiveCellChange);
            _grid.onKeyDown.unsubscribe(handleKeyDown);
            _grid.onClick.unsubscribe(handleClick);
        }

        function rangesToRows(ranges) {
            var rows = [];
            for (var i = 0; i < ranges.length; i++) {
                for (var j = ranges[i].fromRow; j <= ranges[i].toRow; j++) {
                    rows.push(j);
                }
            }
            return rows;
        }

        function rowsToRanges(rows) {
            var ranges = [];
            var lastCell = _grid.getColumns().length - 1;
            for (var i = 0; i < rows.length; i++) {
                ranges.push(new Slick.Range(rows[i], 0, rows[i], lastCell));
            }
            return ranges;
        }

        function getRowsRange(from, to) {
            var i,
                rows = [];
            for (i = from; i <= to; i++) {
                rows.push(i);
            }
            for (i = to; i < from; i++) {
                rows.push(i);
            }
            return rows;
        }

        function getSelectedRows() {
            return rangesToRows(_ranges);
        }

        function setSelectedRows(rows) {
            setSelectedRanges(rowsToRanges(rows));
        }

        function setSelectedRanges(ranges) {
            _ranges = ranges;
            _self.onSelectedRangesChanged.notify(_ranges);
        }

        function getSelectedRanges() {
            return _ranges;
        }

        function handleActiveCellChange(e, data) {
            if (_options.selectActiveRow && data.grid.getOptions().selectType === "checkbox" == false) {
                setSelectedRanges([new Slick.Range(data.row, 0, data.row, _grid.getColumns().length - 1)]);
            }
        }

        function handleKeyDown(e) {
            var activeRow = _grid.getActiveCell();
            if (activeRow && e.shiftKey && !e.ctrlKey && !e.altKey && !e.metaKey && (e.which == 38 || e.which == 40)) {
                var selectedRows = getSelectedRows();
                selectedRows.sort(function (x, y) {
                    return x - y;
                });

                if (!selectedRows.length) {
                    selectedRows = [activeRow.row];
                }

                var top = selectedRows[0];
                var bottom = selectedRows[selectedRows.length - 1];
                var active;

                if (e.which == 40) {
                    active = activeRow.row < bottom || top == bottom ? ++bottom : ++top;
                } else {
                    active = activeRow.row < bottom ? --bottom : --top;
                }

                if (active >= 0 && active < _grid.getDataLength()) {
                    _grid.scrollRowIntoView(active);
                    _ranges = rowsToRanges(getRowsRange(top, bottom));
                    setSelectedRanges(_ranges);
                }

                e.preventDefault();
                e.stopPropagation();
            }
        }

        function handleClick(e) {
            var cell = _grid.getCellFromEvent(e);
            if (!cell || !_grid.canCellBeActive(cell.row, cell.cell)) {
                return false;
            }

            var selection = rangesToRows(_ranges);
            var idx = $.inArray(cell.row, selection);

            if (!e.ctrlKey && !e.shiftKey && !e.metaKey) {
                return true;
            } else if (_grid.getOptions().selectType === "radio" == true) {
                return true;
            } else if (_grid.getOptions().multiSelect) {
                if (idx === -1 && (e.ctrlKey || e.metaKey)) {
                    selection.push(cell.row);
                    _grid.setActiveCell(cell.row, cell.cell);
                } else if (idx !== -1 && (e.ctrlKey || e.metaKey)) {
                    selection = $.grep(selection, function (o, i) {
                        return o !== cell.row;
                    });
                    _grid.setActiveCell(cell.row, cell.cell);
                } else if (selection.length && e.shiftKey) {
                    var last = selection.pop();
                    var from = Math.min(cell.row, last);
                    var to = Math.max(cell.row, last);
                    selection = [];
                    for (var i = from; i <= to; i++) {
                        if (i !== last) {
                            selection.push(i);
                        }
                    }
                    selection.push(last);
                    _grid.setActiveCell(cell.row, cell.cell);
                }
            }

            _ranges = rowsToRanges(selection);
            setSelectedRanges(_ranges);
            e.stopImmediatePropagation();

            return true;
        }

        $.extend(this, {
            "getSelectedRows": getSelectedRows,
            "setSelectedRows": setSelectedRows,

            "getSelectedRanges": getSelectedRanges,
            "setSelectedRanges": setSelectedRanges,

            "init": init,
            "destroy": destroy,

            "onSelectedRangesChanged": new Slick.Event()
        });
    }
});

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(factory){if(true){!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0),__webpack_require__(5)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))}else{factory(jQuery)}}(function(k){var F,G,H,I,J,K,s={},L={},t={},M={treeId:"",treeObj:null,view:{addDiyDom:null,autoCancelSelected:!0,dblClickExpand:!0,expandSpeed:"fast",fontCss:{},nameIsHTML:!1,selectedMulti:!0,showIcon:!0,showLine:!0,showTitle:!0},data:{key:{children:"children",name:"name",title:"",url:"url"},simpleData:{enable:!1,idKey:"id",pIdKey:"pId",rootPId:null},keep:{parent:!1,leaf:!1}},async:{enable:!1,contentType:"application/x-www-form-urlencoded",type:"post",dataType:"text",url:"",autoParam:[],otherParam:[],dataFilter:null},callback:{beforeAsync:null,beforeClick:null,beforeRightClick:null,beforeMouseDown:null,beforeMouseUp:null,beforeExpand:null,beforeCollapse:null,beforeRemove:null,onAsyncError:null,onAsyncSuccess:null,onNodeCreated:null,onClick:null,onRightClick:null,onMouseDown:null,onMouseUp:null,onExpand:null,onCollapse:null,onRemove:null}},u=[function(b){var a=b.treeObj,c=e.event;a.bind(c.NODECREATED,function(a,c,h){j.apply(b.callback.onNodeCreated,[a,c,h])});a.bind(c.CLICK,function(a,c,h,l,g){j.apply(b.callback.onClick,[c,h,l,g])});a.bind(c.EXPAND,function(a,c,h){j.apply(b.callback.onExpand,[a,c,h])});a.bind(c.COLLAPSE,function(a,c,h){j.apply(b.callback.onCollapse,[a,c,h])});a.bind(c.ASYNC_SUCCESS,function(a,c,h,l){j.apply(b.callback.onAsyncSuccess,[a,c,h,l])});a.bind(c.ASYNC_ERROR,function(a,c,h,l,g,e){j.apply(b.callback.onAsyncError,[a,c,h,l,g,e])})}],v=[function(b){var a=e.event;b.treeObj.unbind(a.NODECREATED).unbind(a.CLICK).unbind(a.EXPAND).unbind(a.COLLAPSE).unbind(a.ASYNC_SUCCESS).unbind(a.ASYNC_ERROR)}],w=[function(b){var a=g.getCache(b);a||(a={},g.setCache(b,a));a.nodes=[];a.doms=[]}],x=[function(b,a,c,d,f,h){if(c){var l=g.getRoot(b),e=b.data.key.children;c.level=a;c.tId=b.treeId+"_"+ ++l.zId;c.parentTId=d?d.tId:null;if(c[e]&&c[e].length>0){if(typeof c.open=="string"){c.open=j.eqs(c.open,"true")}c.open=!!c.open;c.isParent=!0;c.zAsync=!0}else{c.open=!1;if(typeof c.isParent=="string"){c.isParent=j.eqs(c.isParent,"true")}c.isParent=!!c.isParent;c.zAsync=!c.isParent}c.isFirstNode=f;c.isLastNode=h;c.getParentNode=function(){return g.getNodeCache(b,c.parentTId)};c.getPreNode=function(){return g.getPreNode(b,c)};c.getNextNode=function(){return g.getNextNode(b,c)};c.getPath=function(){return g.getNodePath(b,c)};c.isAjaxing=!1;g.fixPIdKeyValue(b,c)}}],y=[function(b){var a=b.target,c=g.getSetting(b.data.treeId),d="",f=null,h="",l="",i=null,n=null,r=null;if(j.eqs(b.type,"mousedown")){l="mousedown"}else{if(j.eqs(b.type,"mouseup")){l="mouseup"}else{if(j.eqs(b.type,"contextmenu")){l="contextmenu"}else{if(j.eqs(b.type,"click")){if(j.eqs(a.tagName,"span")&&a.getAttribute("treeNode"+e.id.SWITCH)!==null){d=(k(a).parent("li").get(0)||k(a).parentsUntil("li").parent().get(0)).id,h="switchNode"}else{if(r=j.getMDom(c,a,[{tagName:"a",attrName:"treeNode"+e.id.A}])){d=(k(r).parent("li").get(0)||k(r).parentsUntil("li").parent().get(0)).id,h="clickNode"}}}else{if(j.eqs(b.type,"dblclick")&&(l="dblclick",r=j.getMDom(c,a,[{tagName:"a",attrName:"treeNode"+e.id.A}]))){d=(k(r).parent("li").get(0)||k(r).parentsUntil("li").parent().get(0)).id,h="switchNode"}}}}}if(l.length>0&&d.length==0&&(r=j.getMDom(c,a,[{tagName:"a",attrName:"treeNode"+e.id.A}]))){d=(k(r).parent("li").get(0)||k(r).parentsUntil("li").parent().get(0)).id}if(d.length>0){switch(f=g.getNodeCache(c,d),h){case"switchNode":f.isParent?j.eqs(b.type,"click")||j.eqs(b.type,"dblclick")&&j.apply(c.view.dblClickExpand,[c.treeId,f],c.view.dblClickExpand)?i=F:h="":h="";break;case"clickNode":i=G}}switch(l){case"mousedown":n=H;break;case"mouseup":n=I;break;case"dblclick":n=J;break;case"contextmenu":n=K}return{stop:!1,node:f,nodeEventType:h,nodeEventCallback:i,treeEventType:l,treeEventCallback:n}}],z=[function(b){var a=g.getRoot(b);a||(a={},g.setRoot(b,a));a[b.data.key.children]=[];a.expandTriggerFlag=!1;a.curSelectedList=[];a.noSelection=!0;a.createdNodes=[];a.zId=0}],A=[],B=[],C=[],D=[],E=[],g={addNodeCache:function(b,a){g.getCache(b).nodes[g.getNodeCacheId(a.tId)]=a},getNodeCacheId:function(b){return b.substring(b.lastIndexOf("_")+1)},addAfterA:function(b){B.push(b)},addBeforeA:function(b){A.push(b)},addInnerAfterA:function(b){D.push(b)},addInnerBeforeA:function(b){C.push(b)},addInitBind:function(b){u.push(b)},addInitUnBind:function(b){v.push(b)},addInitCache:function(b){w.push(b)},addInitNode:function(b){x.push(b)},addInitProxy:function(b){y.push(b)},addInitRoot:function(b){z.push(b)},addNodesData:function(b,a,c){var d=b.data.key.children;a[d]||(a[d]=[]);if(a[d].length>0){a[d][a[d].length-1].isLastNode=!1,i.setNodeLineIcos(b,a[d][a[d].length-1])}a.isParent=!0;a[d]=a[d].concat(c)},addSelectedNode:function(b,a){var c=g.getRoot(b);g.isSelectedNode(b,a)||c.curSelectedList.push(a)},addCreatedNode:function(b,a){(b.callback.onNodeCreated||b.view.addDiyDom)&&g.getRoot(b).createdNodes.push(a)},addZTreeTools:function(b){E.push(b)},exSetting:function(b){k.extend(!0,M,b)},fixPIdKeyValue:function(b,a){b.data.simpleData.enable&&(a[b.data.simpleData.pIdKey]=a.parentTId?a.getParentNode()[b.data.simpleData.idKey]:b.data.simpleData.rootPId)
},getAfterA:function(b,a,c){for(var d=0,f=B.length;d<f;d++){B[d].apply(this,arguments)}},getBeforeA:function(b,a,c){for(var d=0,f=A.length;d<f;d++){A[d].apply(this,arguments)}},getInnerAfterA:function(b,a,c){for(var d=0,f=D.length;d<f;d++){D[d].apply(this,arguments)}},getInnerBeforeA:function(b,a,c){for(var d=0,f=C.length;d<f;d++){C[d].apply(this,arguments)}},getCache:function(b){return t[b.treeId]},getNextNode:function(b,a){if(!a){return null}for(var c=b.data.key.children,d=a.parentTId?a.getParentNode():g.getRoot(b),f=0,h=d[c].length-1;f<=h;f++){if(d[c][f]===a){return f==h?null:d[c][f+1]}}return null},getNodeByParam:function(b,a,c,d){if(!a||!c){return null}for(var f=b.data.key.children,h=0,l=a.length;h<l;h++){if(a[h][c]==d){return a[h]}var e=g.getNodeByParam(b,a[h][f],c,d);if(e){return e}}return null},getNodeCache:function(b,a){if(!a){return null}var c=t[b.treeId].nodes[g.getNodeCacheId(a)];return c?c:null},getNodeName:function(b,a){return""+a[b.data.key.name]},getNodePath:function(b,a){if(!a){return null}var path;if(a.parentTId){path=a.getParentNode().getPath()}else{path=[]}if(path){path.push(a)}return path},getNodeTitle:function(b,a){return""+a[b.data.key.title===""?b.data.key.name:b.data.key.title]},getNodes:function(b){return g.getRoot(b)[b.data.key.children]},getNodesByParam:function(b,a,c,d){if(!a||!c){return[]}for(var f=b.data.key.children,h=[],l=0,e=a.length;l<e;l++){a[l][c]==d&&h.push(a[l]),h=h.concat(g.getNodesByParam(b,a[l][f],c,d))}return h},getNodesByParamFuzzy:function(b,a,c,d){if(!a||!c){return[]}for(var f=b.data.key.children,h=[],l=0,e=a.length;l<e;l++){typeof a[l][c]=="string"&&a[l][c].indexOf(d)>-1&&h.push(a[l]),h=h.concat(g.getNodesByParamFuzzy(b,a[l][f],c,d))}return h},getNodesByFilter:function(b,a,c,d,f){if(!a){return d?null:[]}for(var h=b.data.key.children,l=d?null:[],e=0,i=a.length;e<i;e++){if(j.apply(c,[a[e],f],!1)){if(d){return a[e]}l.push(a[e])}var k=g.getNodesByFilter(b,a[e][h],c,d,f);if(d&&k){return k}l=d?k:l.concat(k)}return l},getPreNode:function(b,a){if(!a){return null}for(var c=b.data.key.children,d=a.parentTId?a.getParentNode():g.getRoot(b),f=0,h=d[c].length;f<h;f++){if(d[c][f]===a){return f==0?null:d[c][f-1]}}return null},getRoot:function(b){return b?L[b.treeId]:null},getSetting:function(b){return s[b]},getSettings:function(){return s},getZTreeTools:function(b){return(b=this.getRoot(this.getSetting(b)))?b.treeTools:null},initCache:function(b){for(var a=0,c=w.length;a<c;a++){w[a].apply(this,arguments)}},initNode:function(b,a,c,d,f,h){for(var l=0,e=x.length;l<e;l++){x[l].apply(this,arguments)}},initRoot:function(b){for(var a=0,c=z.length;a<c;a++){z[a].apply(this,arguments)}},isSelectedNode:function(b,a){for(var c=g.getRoot(b),d=0,f=c.curSelectedList.length;d<f;d++){if(a===c.curSelectedList[d]){return !0}}return !1},removeNodeCache:function(b,a){var c=b.data.key.children;if(a[c]){for(var d=0,f=a[c].length;d<f;d++){arguments.callee(b,a[c][d])}}g.getCache(b).nodes[g.getNodeCacheId(a.tId)]=null},removeSelectedNode:function(b,a){for(var c=g.getRoot(b),d=0,f=c.curSelectedList.length;d<f;d++){if(a===c.curSelectedList[d]||!g.getNodeCache(b,c.curSelectedList[d].tId)){c.curSelectedList.splice(d,1),d--,f--}}},setCache:function(b,a){t[b.treeId]=a},setRoot:function(b,a){L[b.treeId]=a},setZTreeTools:function(b,a){for(var c=0,d=E.length;c<d;c++){E[c].apply(this,arguments)}},transformToArrayFormat:function(b,a){if(!a){return[]}var c=b.data.key.children,d=[];if(j.isArray(a)){for(var f=0,h=a.length;f<h;f++){d.push(a[f]),a[f][c]&&(d=d.concat(g.transformToArrayFormat(b,a[f][c])))}}else{d.push(a),a[c]&&(d=d.concat(g.transformToArrayFormat(b,a[c])))}return d},transformTozTreeFormat:function(b,a){var c,d,f=b.data.simpleData.idKey,h=b.data.simpleData.pIdKey,l=b.data.key.children;if(!f||f==""||!a){return[]}if(j.isArray(a)){var e=[],g=[];for(c=0,d=a.length;c<d;c++){g[a[c][f]]=a[c]}for(c=0,d=a.length;c<d;c++){g[a[c][h]]&&a[c][f]!=a[c][h]?(g[a[c][h]][l]||(g[a[c][h]][l]=[]),g[a[c][h]][l].push(a[c])):e.push(a[c])}return e}else{return[a]}}},m={bindEvent:function(b){for(var a=0,c=u.length;a<c;a++){u[a].apply(this,arguments)}},unbindEvent:function(b){for(var a=0,c=v.length;a<c;a++){v[a].apply(this,arguments)}},bindTree:function(b){var a={treeId:b.treeId},b=b.treeObj;b.bind("click",a,m.proxy);b.bind("dblclick",a,m.proxy);b.bind("mouseover",a,m.proxy);b.bind("mouseout",a,m.proxy);b.bind("mousedown",a,m.proxy);b.bind("mouseup",a,m.proxy);b.bind("contextmenu",a,m.proxy)},unbindTree:function(b){b.treeObj.unbind("click",m.proxy).unbind("dblclick",m.proxy).unbind("mouseover",m.proxy).unbind("mouseout",m.proxy).unbind("mousedown",m.proxy).unbind("mouseup",m.proxy).unbind("contextmenu",m.proxy)},doProxy:function(b){for(var a=[],c=0,d=y.length;c<d;c++){var f=y[c].apply(this,arguments);a.push(f);if(f.stop){break}}return a},proxy:function(b){var a=g.getSetting(b.data.treeId);if(!j.uCanDo(a,b)){return !0}for(var c=m.doProxy(b),d=!0,f=!1,h=0,e=c.length;h<e;h++){var i=c[h];i.nodeEventCallback&&(f=!0,d=i.nodeEventCallback.apply(i,[b,i.node])&&d);
    i.treeEventCallback&&(f=!0,d=i.treeEventCallback.apply(i,[b,i.node])&&d)}try{f&&k("input:focus").length==0&&j.noSel(a)}catch(n){}return d}};F=function(b,a){var c=g.getSetting(b.data.treeId);if(a.open){if(j.apply(c.callback.beforeCollapse,[c.treeId,a],!0)==!1){return !0}}else{if(j.apply(c.callback.beforeExpand,[c.treeId,a],!0)==!1){return !0}}g.getRoot(c).expandTriggerFlag=!0;i.switchNode(c,a);return !0};G=function(b,a){var c=g.getSetting(b.data.treeId),d=c.view.autoCancelSelected&&b.ctrlKey&&g.isSelectedNode(c,a)?0:c.view.autoCancelSelected&&b.ctrlKey&&c.view.selectedMulti?2:1;if(j.apply(c.callback.beforeClick,[c.treeId,a,d],!0)==!1){return !0}d===0?i.cancelPreSelectedNode(c,a):i.selectNode(c,a,d===2);c.treeObj.trigger(e.event.CLICK,[b,c.treeId,a,d]);return !0};H=function(b,a){var c=g.getSetting(b.data.treeId);j.apply(c.callback.beforeMouseDown,[c.treeId,a],!0)&&j.apply(c.callback.onMouseDown,[b,c.treeId,a]);return !0};I=function(b,a){var c=g.getSetting(b.data.treeId);j.apply(c.callback.beforeMouseUp,[c.treeId,a],!0)&&j.apply(c.callback.onMouseUp,[b,c.treeId,a]);return !0};J=function(b,a){var c=g.getSetting(b.data.treeId);j.apply(c.callback.beforeDblClick,[c.treeId,a],!0)&&j.apply(c.callback.onDblClick,[b,c.treeId,a]);return !0};K=function(b,a){var c=g.getSetting(b.data.treeId);j.apply(c.callback.beforeRightClick,[c.treeId,a],!0)&&j.apply(c.callback.onRightClick,[b,c.treeId,a]);return typeof c.callback.onRightClick!="function"};var j={apply:function(b,a,c){return typeof b=="function"?b.apply(N,a?a:[]):c},canAsync:function(b,a){var c=b.data.key.children;return b.async.enable&&a&&a.isParent&&!(a.zAsync||a[c]&&a[c].length>0)},clone:function(b){var a;if(b instanceof Array){a=[];for(var c=b.length;c--;){a[c]=arguments.callee(b[c])}return a}else{if(typeof b=="function"){return b}else{if(b instanceof Object){a={};for(c in b){a[c]=arguments.callee(b[c])}return a}else{return b}}}},eqs:function(b,a){return b.toLowerCase()===a.toLowerCase()},isArray:function(b){return Object.prototype.toString.apply(b)==="[object Array]"},getMDom:function(b,a,c){if(!a){return null}for(;a&&a.id!==b.treeId;){for(var d=0,f=c.length;a.tagName&&d<f;d++){if(j.eqs(a.tagName,c[d].tagName)&&a.getAttribute(c[d].attrName)!==null){return a}}a=a.parentNode}return null},noSel:function(b){if(g.getRoot(b).noSelection){try{window.getSelection?window.getSelection().removeAllRanges():document.selection.empty()}catch(a){}}},uCanDo:function(){return !0}},i={addNodes:function(b,a,c,d){if(!b.data.keep.leaf||!a||a.isParent){if(j.isArray(c)||(c=[c]),b.data.simpleData.enable&&(c=g.transformTozTreeFormat(b,c)),a){var f=k("#"+a.tId+e.id.SWITCH),h=k("#"+a.tId+e.id.ICON),l=k("#"+a.tId+e.id.UL);if(!a.open){i.replaceSwitchClass(a,f,e.folder.CLOSE),i.replaceIcoClass(a,h,e.folder.CLOSE),a.open=!1,l.css({display:"none"})}g.addNodesData(b,a,c);i.createNodes(b,a.level+1,c,a);d||i.expandCollapseParentNode(b,a,!0)}else{g.addNodesData(b,g.getRoot(b),c),i.createNodes(b,0,c,null)}}},appendNodes:function(b,a,c,d,f,h){if(!c){return[]}for(var e=[],j=b.data.key.children,k=0,m=c.length;k<m;k++){var o=c[k];if(f){var q=(d?d:g.getRoot(b))[j].length==c.length&&k==0;g.initNode(b,a,o,d,q,k==c.length-1,h);g.addNodeCache(b,o)}q=[];o[j]&&o[j].length>0&&(q=i.appendNodes(b,a+1,o[j],o,f,h&&o.open));h&&(i.makeDOMNodeMainBefore(e,b,o),i.makeDOMNodeLine(e,b,o),g.getBeforeA(b,o,e),i.makeDOMNodeNameBefore(e,b,o),g.getInnerBeforeA(b,o,e),i.makeDOMNodeIcon(e,b,o),g.getInnerAfterA(b,o,e),i.makeDOMNodeNameAfter(e,b,o),g.getAfterA(b,o,e),o.isParent&&o.open&&i.makeUlHtml(b,o,e,q.join("")),i.makeDOMNodeMainAfter(e,b,o),g.addCreatedNode(b,o))}return e},appendParentULDom:function(b,a){var c=[],d=k("#"+a.tId),f=k("#"+a.tId+e.id.UL),h=i.appendNodes(b,a.level+1,a[b.data.key.children],a,!1,!0);i.makeUlHtml(b,a,c,h.join(""));!d.get(0)&&a.parentTId&&(i.appendParentULDom(b,a.getParentNode()),d=k("#"+a.tId));f.get(0)&&f.remove();d.append(c.join(""))},asyncNode:function(b,a,c,d){var f,h;if(a&&!a.isParent){return j.apply(d),!1}else{if(a&&a.isAjaxing){return !1}else{if(j.apply(b.callback.beforeAsync,[b.treeId,a],!0)==!1){return j.apply(d),!1}}}if(a){a.isAjaxing=!0,k("#"+a.tId+e.id.ICON).attr({style:"","class":"button ico_loading"})}var g=b.async.contentType=="application/json",p=g?"{":"",n="";for(f=0,h=b.async.autoParam.length;a&&f<h;f++){var m=b.async.autoParam[f].split("="),o=m;m.length>1&&(o=m[1],m=m[0]);g?(n=typeof a[m]=="string"?'"':"",p+='"'+o+('":'+n+a[m]).replace(/'/g,"\\'")+n+","):p+=o+("="+a[m]).replace(/&/g,"%26")+"&"}if(j.isArray(b.async.otherParam)){for(f=0,h=b.async.otherParam.length;f<h;f+=2){g?(n=typeof b.async.otherParam[f+1]=="string"?'"':"",p+='"'+b.async.otherParam[f]+('":'+n+b.async.otherParam[f+1]).replace(/'/g,"\\'")+n+","):p+=b.async.otherParam[f]+("="+b.async.otherParam[f+1]).replace(/&/g,"%26")+"&"}}else{for(var q in b.async.otherParam){g?(n=typeof b.async.otherParam[q]=="string"?'"':"",p+='"'+q+('":'+n+b.async.otherParam[q]).replace(/'/g,"\\'")+n+","):p+=q+("="+b.async.otherParam[q]).replace(/&/g,"%26")+"&"
}}p.length>1&&(p=p.substring(0,p.length-1));g&&(p+="}");k.ajax({contentType:b.async.contentType,type:b.async.type,url:j.apply(b.async.url,[b.treeId,a],b.async.url),data:p,dataType:b.async.dataType,success:function(f){var h=[];try{h=!f||f.length==0?[]:typeof f=="string"?eval("("+f+")"):f}catch(g){h=f}if(a){a.isAjaxing=null,a.zAsync=!0}i.setNodeLineIcos(b,a);h&&h!==""?(h=j.apply(b.async.dataFilter,[b.treeId,a,h],h),i.addNodes(b,a,h?j.clone(h):[],!!c)):i.addNodes(b,a,[],!!c);b.treeObj.trigger(e.event.ASYNC_SUCCESS,[b.treeId,a,f]);j.apply(d)},error:function(c,d,f){if(a){a.isAjaxing=null}i.setNodeLineIcos(b,a);b.treeObj.trigger(e.event.ASYNC_ERROR,[b.treeId,a,c,d,f])}});return !0},cancelPreSelectedNode:function(b,a){for(var c=g.getRoot(b).curSelectedList,d=c.length-1;d>=0;d--){if(!a||a===c[d]){if(k("#"+c[d].tId+e.id.A).removeClass(e.node.CURSELECTED),i.setNodeName(b,c[d]),a){g.removeSelectedNode(b,a);break}}}if(!a){g.getRoot(b).curSelectedList=[]}},createNodeCallback:function(b){if(b.callback.onNodeCreated||b.view.addDiyDom){for(var a=g.getRoot(b);a.createdNodes.length>0;){var c=a.createdNodes.shift();j.apply(b.view.addDiyDom,[b.treeId,c]);b.callback.onNodeCreated&&b.treeObj.trigger(e.event.NODECREATED,[b.treeId,c])}}},createNodes:function(b,a,c,d){if(c&&c.length!=0){var f=g.getRoot(b),h=b.data.key.children,h=!d||d.open||!!k("#"+d[h][0].tId).get(0);f.createdNodes=[];a=i.appendNodes(b,a,c,d,!0,h);d?(d=k("#"+d.tId+e.id.UL),d.get(0)&&d.append(a.join(""))):b.treeObj.append(a.join(""));i.createNodeCallback(b)}},destroy:function(b){b&&(g.initCache(b),g.initRoot(b),m.unbindTree(b),m.unbindEvent(b),b.treeObj.empty())},expandCollapseNode:function(b,a,c,d,f){var h=g.getRoot(b),l=b.data.key.children;if(a){if(h.expandTriggerFlag){var p=f,f=function(){p&&p();a.open?b.treeObj.trigger(e.event.EXPAND,[b.treeId,a]):b.treeObj.trigger(e.event.COLLAPSE,[b.treeId,a])};h.expandTriggerFlag=!1}if(a.open==c){j.apply(f,[])}else{if(!a.open&&a.isParent&&(!k("#"+a.tId+e.id.UL).get(0)||a[l]&&a[l].length>0&&!k("#"+a[l][0].tId).get(0))){i.appendParentULDom(b,a),i.createNodeCallback(b)}var c=k("#"+a.tId+e.id.UL),h=k("#"+a.tId+e.id.SWITCH),n=k("#"+a.tId+e.id.ICON);a.isParent?(a.open=!a.open,a.iconOpen&&a.iconClose&&n.attr("style",i.makeNodeIcoStyle(b,a)),a.open?(i.replaceSwitchClass(a,h,e.folder.OPEN),i.replaceIcoClass(a,n,e.folder.OPEN),d==!1||b.view.expandSpeed==""?(c.show(),j.apply(f,[])):a[l]&&a[l].length>0?c.slideDown(b.view.expandSpeed,f):(c.show(),j.apply(f,[]))):(i.replaceSwitchClass(a,h,e.folder.CLOSE),i.replaceIcoClass(a,n,e.folder.CLOSE),d==!1||b.view.expandSpeed==""||!(a[l]&&a[l].length>0)?(c.hide(),j.apply(f,[])):c.slideUp(b.view.expandSpeed,f))):j.apply(f,[])}}else{j.apply(f,[])}},expandCollapseParentNode:function(b,a,c,d,f){a&&(a.parentTId?(i.expandCollapseNode(b,a,c,d),a.parentTId&&i.expandCollapseParentNode(b,a.getParentNode(),c,d,f)):i.expandCollapseNode(b,a,c,d,f))},expandCollapseSonNode:function(b,a,c,d,f){var h=g.getRoot(b),e=b.data.key.children,h=a?a[e]:h[e],e=a?!1:d,j=g.getRoot(b).expandTriggerFlag;g.getRoot(b).expandTriggerFlag=!1;if(h){for(var k=0,m=h.length;k<m;k++){h[k]&&i.expandCollapseSonNode(b,h[k],c,e)}}g.getRoot(b).expandTriggerFlag=j;i.expandCollapseNode(b,a,c,d,f)},makeDOMNodeIcon:function(b,a,c){var d=g.getNodeName(a,c),d=a.view.nameIsHTML?d:d.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;");b.push("<span id='",c.tId,e.id.ICON,"' title='' treeNode",e.id.ICON," class='",i.makeNodeIcoClass(a,c),"' style='",i.makeNodeIcoStyle(a,c),"'></span><span id='",c.tId,e.id.SPAN,"'>",d,"</span>")},makeDOMNodeLine:function(b,a,c){b.push("<span id='",c.tId,e.id.SWITCH,"' title='' class='",i.makeNodeLineClass(a,c),"' treeNode",e.id.SWITCH,"></span>")},makeDOMNodeMainAfter:function(b){b.push("</li>")},makeDOMNodeMainBefore:function(b,a,c){b.push("<li id='",c.tId,"' class='level",c.level,"' tabindex='0' hidefocus='true' treenode>")},makeDOMNodeNameAfter:function(b){b.push("</a>")},makeDOMNodeNameBefore:function(b,a,c){var d=g.getNodeTitle(a,c),f=i.makeNodeUrl(a,c),h=i.makeNodeFontCss(a,c),l=[],k;for(k in h){l.push(k,":",h[k],";")}b.push("<a id='",c.tId,e.id.A,"' class='level",c.level,"' treeNode",e.id.A,' onclick="',c.click||"",'" ',f!=null&&f.length>0?"href='"+f+"'":""," target='",i.makeNodeTarget(c),"' style='",l.join(""),"'");j.apply(a.view.showTitle,[a.treeId,c],a.view.showTitle)&&d&&b.push("title='",d.replace(/'/g,"&#39;").replace(/</g,"&lt;").replace(/>/g,"&gt;"),"'");b.push(">")},makeNodeFontCss:function(b,a){var c=j.apply(b.view.fontCss,[b.treeId,a],b.view.fontCss);return c&&typeof c!="function"?c:{}},makeNodeIcoClass:function(b,a){var c=["ico"];a.isAjaxing||(c[0]=(a.iconSkin?a.iconSkin.split("?")[0]:"")+" "+c[0],a.isParent?c.push(a.open?e.folder.OPEN:e.folder.CLOSE):c.push(e.folder.DOCU));return"button "+c.join("_")},makeNodeIcoStyle:function(b,a){var c=[];if(!a.isAjaxing){var d=a.isParent&&a.iconOpen&&a.iconClose?a.open?a.iconOpen:a.iconClose:a.icon;d&&c.push("background:url(",d,") 0 0 no-repeat;");(b.view.showIcon==!1||!j.apply(b.view.showIcon,[b.treeId,a],!0))&&c.push("width:0px;height:0px;")
}c.push(a.iconSkin?"color:"+a.iconSkin.split("?")[1]+";":"");return c.join("")},makeNodeLineClass:function(b,a){var c=[];b.view.showLine?a.level==0&&a.isFirstNode&&a.isLastNode?c.push(e.line.ROOT):a.level==0&&a.isFirstNode?c.push(e.line.ROOTS):a.isLastNode?c.push(e.line.BOTTOM):c.push(e.line.CENTER):c.push(e.line.NOLINE);a.isParent?c.push(a.open?e.folder.OPEN:e.folder.CLOSE):c.push(e.folder.DOCU);return i.makeNodeLineClassEx(a)+c.join("_")},makeNodeLineClassEx:function(b){return"button level"+b.level+" switch "},makeNodeTarget:function(b){return b.target||"_blank"},makeNodeUrl:function(b,a){var c=b.data.key.url;return a[c]?a[c]:null},makeUlHtml:function(b,a,c,d){c.push("<ul id='",a.tId,e.id.UL,"' class='level",a.level," ",i.makeUlLineClass(b,a),"' style='display:",a.open?"block":"none","'>");c.push(d);c.push("</ul>")},makeUlLineClass:function(b,a){return b.view.showLine&&!a.isLastNode?e.line.LINE:""},removeChildNodes:function(b,a){if(a){var c=b.data.key.children,d=a[c];if(d){for(var f=0,h=d.length;f<h;f++){g.removeNodeCache(b,d[f])}g.removeSelectedNode(b);delete a[c];b.data.keep.parent?k("#"+a.tId+e.id.UL).empty():(a.isParent=!1,a.open=!1,c=k("#"+a.tId+e.id.SWITCH),d=k("#"+a.tId+e.id.ICON),i.replaceSwitchClass(a,c,e.folder.DOCU),i.replaceIcoClass(a,d,e.folder.DOCU),k("#"+a.tId+e.id.UL).remove())}}},setFirstNode:function(b,a){var c=b.data.key.children;if(a[c].length>0){a[c][0].isFirstNode=!0}},setLastNode:function(b,a){var c=b.data.key.children,d=a[c].length;if(d>0){a[c][d-1].isLastNode=!0}},removeNode:function(b,a){var c=g.getRoot(b),d=b.data.key.children,f=a.parentTId?a.getParentNode():c;a.isFirstNode=!1;a.isLastNode=!1;a.getPreNode=function(){return null};a.getNextNode=function(){return null};if(g.getNodeCache(b,a.tId)){k("#"+a.tId).remove();g.removeNodeCache(b,a);g.removeSelectedNode(b,a);for(var h=0,l=f[d].length;h<l;h++){if(f[d][h].tId==a.tId){f[d].splice(h,1);break}}i.setFirstNode(b,f);i.setLastNode(b,f);var j,h=f[d].length;if(!b.data.keep.parent&&h==0){f.isParent=!1,f.open=!1,h=k("#"+f.tId+e.id.UL),l=k("#"+f.tId+e.id.SWITCH),j=k("#"+f.tId+e.id.ICON),i.replaceSwitchClass(f,l,e.folder.DOCU),i.replaceIcoClass(f,j,e.folder.DOCU),h.css("display","none")}else{if(b.view.showLine&&h>0){var n=f[d][h-1],h=k("#"+n.tId+e.id.UL),l=k("#"+n.tId+e.id.SWITCH);j=k("#"+n.tId+e.id.ICON);f==c?f[d].length==1?i.replaceSwitchClass(n,l,e.line.ROOT):(c=k("#"+f[d][0].tId+e.id.SWITCH),i.replaceSwitchClass(f[d][0],c,e.line.ROOTS),i.replaceSwitchClass(n,l,e.line.BOTTOM)):i.replaceSwitchClass(n,l,e.line.BOTTOM);h.removeClass(e.line.LINE)}}}},replaceIcoClass:function(b,a,c){if(a&&!b.isAjaxing&&(b=a.attr("class"),b!=void 0)){b=b.split("_");switch(c){case e.folder.OPEN:case e.folder.CLOSE:case e.folder.DOCU:b[b.length-1]=c}a.attr("class",b.join("_"))}},replaceSwitchClass:function(b,a,c){if(a){var d=a.attr("class");if(d!=void 0){d=d.split("_");switch(c){case e.line.ROOT:case e.line.ROOTS:case e.line.CENTER:case e.line.BOTTOM:case e.line.NOLINE:d[0]=i.makeNodeLineClassEx(b)+c;break;case e.folder.OPEN:case e.folder.CLOSE:case e.folder.DOCU:d[1]=c}a.attr("class",d.join("_"));c!==e.folder.DOCU?a.removeAttr("disabled"):a.attr("disabled","disabled")}}},selectNode:function(b,a,c){c||i.cancelPreSelectedNode(b);k("#"+a.tId+e.id.A).addClass(e.node.CURSELECTED);g.addSelectedNode(b,a)},setNodeFontCss:function(b,a){var c=k("#"+a.tId+e.id.A),d=i.makeNodeFontCss(b,a);d&&c.css(d)},setNodeLineIcos:function(b,a){if(a){var c=k("#"+a.tId+e.id.SWITCH),d=k("#"+a.tId+e.id.UL),f=k("#"+a.tId+e.id.ICON),h=i.makeUlLineClass(b,a);h.length==0?d.removeClass(e.line.LINE):d.addClass(h);c.attr("class",i.makeNodeLineClass(b,a));a.isParent?c.removeAttr("disabled"):c.attr("disabled","disabled");f.removeAttr("style");f.attr("style",i.makeNodeIcoStyle(b,a));f.attr("class",i.makeNodeIcoClass(b,a))}},setNodeName:function(b,a){var c=g.getNodeTitle(b,a),d=k("#"+a.tId+e.id.SPAN);d.empty();b.view.nameIsHTML?d.html(g.getNodeName(b,a)):d.text(g.getNodeName(b,a));j.apply(b.view.showTitle,[b.treeId,a],b.view.showTitle)&&k("#"+a.tId+e.id.A).attr("title",!c?"":c)},setNodeTarget:function(b){k("#"+b.tId+e.id.A).attr("target",i.makeNodeTarget(b))},setNodeUrl:function(b,a){var c=k("#"+a.tId+e.id.A),d=i.makeNodeUrl(b,a);d==null||d.length==0?c.removeAttr("href"):c.attr("href",d)},switchNode:function(b,a){a.open||!j.canAsync(b,a)?i.expandCollapseNode(b,a,!a.open):b.async.enable?i.asyncNode(b,a)||i.expandCollapseNode(b,a,!a.open):a&&i.expandCollapseNode(b,a,!a.open)}};k.fn.zTree={consts:{event:{NODECREATED:"ztree_nodeCreated",CLICK:"ztree_click",EXPAND:"ztree_expand",COLLAPSE:"ztree_collapse",ASYNC_SUCCESS:"ztree_async_success",ASYNC_ERROR:"ztree_async_error"},id:{A:"_a",ICON:"_ico",SPAN:"_span",SWITCH:"_switch",UL:"_ul"},line:{ROOT:"root",ROOTS:"roots",CENTER:"center",BOTTOM:"bottom",NOLINE:"noline",LINE:"line"},folder:{OPEN:"open",CLOSE:"close",DOCU:"docu"},node:{CURSELECTED:"curSelectedNode"}},_z:{tools:j,view:i,event:m,data:g},getZTreeObj:function(b){return(b=g.getZTreeTools(b))?b:null},destroy:function(b){if(b&&b.length>0){i.destroy(g.getSetting(b))
}else{for(var a in s){i.destroy(s[a])}}},init:function(b,a,c){var d=j.clone(M);k.extend(!0,d,a);d.treeId=b.attr("id");d.treeObj=b;d.treeObj.empty();s[d.treeId]=d;if(k.browser.msie&&parseInt(k.browser.version)<7){d.view.expandSpeed=""}g.initRoot(d);b=g.getRoot(d);a=d.data.key.children;c=c?j.clone(j.isArray(c)?c:[c]):[];b[a]=d.data.simpleData.enable?g.transformTozTreeFormat(d,c):c;g.initCache(d);m.unbindTree(d);m.bindTree(d);m.unbindEvent(d);m.bindEvent(d);c={setting:d,addNodes:function(a,b,c){function e(){i.addNodes(d,a,g,c==!0)}if(!b){return null}a||(a=null);if(a&&!a.isParent&&d.data.keep.leaf){return null}var g=j.clone(j.isArray(b)?b:[b]);j.canAsync(d,a)?i.asyncNode(d,a,c,e):e();return g},cancelSelectedNode:function(a){i.cancelPreSelectedNode(this.setting,a)},destroy:function(){i.destroy(this.setting)},expandAll:function(a){a=!!a;i.expandCollapseSonNode(this.setting,null,a,!0);return a},expandNode:function(a,b,c,e,m){if(!a||!a.isParent){return null}b!==!0&&b!==!1&&(b=!a.open);if((m=!!m)&&b&&j.apply(d.callback.beforeExpand,[d.treeId,a],!0)==!1){return null}else{if(m&&!b&&j.apply(d.callback.beforeCollapse,[d.treeId,a],!0)==!1){return null}}b&&a.parentTId&&i.expandCollapseParentNode(this.setting,a.getParentNode(),b,!1);if(b===a.open&&!c){return null}g.getRoot(d).expandTriggerFlag=m;c?i.expandCollapseSonNode(this.setting,a,b,!0,function(){e!==!1&&k("#"+a.tId).focus().blur()}):(a.open=!b,i.switchNode(this.setting,a),e!==!1&&k("#"+a.tId).focus().blur());return b},getNodes:function(){return g.getNodes(this.setting)},getNodeByParam:function(a,b,c){return !a?null:g.getNodeByParam(this.setting,c?c[this.setting.data.key.children]:g.getNodes(this.setting),a,b)},getNodeByTId:function(a){return g.getNodeCache(this.setting,a)},getNodesByParam:function(a,b,c){return !a?null:g.getNodesByParam(this.setting,c?c[this.setting.data.key.children]:g.getNodes(this.setting),a,b)},getNodesByParamFuzzy:function(a,b,c){return !a?null:g.getNodesByParamFuzzy(this.setting,c?c[this.setting.data.key.children]:g.getNodes(this.setting),a,b)},getNodesByFilter:function(a,b,c,d){b=!!b;return !a||typeof a!="function"?b?null:[]:g.getNodesByFilter(this.setting,c?c[this.setting.data.key.children]:g.getNodes(this.setting),a,b,d)},getNodeIndex:function(a){if(!a){return null}for(var b=d.data.key.children,c=a.parentTId?a.getParentNode():g.getRoot(this.setting),e=0,i=c[b].length;e<i;e++){if(c[b][e]==a){return e}}return -1},getSelectedNodes:function(){for(var a=[],b=g.getRoot(this.setting).curSelectedList,c=0,d=b.length;c<d;c++){a.push(b[c])}return a},isSelectedNode:function(a){return g.isSelectedNode(this.setting,a)},reAsyncChildNodes:function(a,b,c){if(this.setting.async.enable){var d=!a;d&&(a=g.getRoot(this.setting));b=="refresh"&&(a[this.setting.data.key.children]=[],d?this.setting.treeObj.empty():k("#"+a.tId+e.id.UL).empty());i.asyncNode(this.setting,d?null:a,!!c)}},refresh:function(){this.setting.treeObj.empty();var a=g.getRoot(this.setting),b=a[this.setting.data.key.children];g.initRoot(this.setting);a[this.setting.data.key.children]=b;g.initCache(this.setting);i.createNodes(this.setting,0,a[this.setting.data.key.children])},removeChildNodes:function(a){if(!a){return null}var b=a[d.data.key.children];i.removeChildNodes(d,a);return b?b:null},removeNode:function(a,b){a&&(b=!!b,b&&j.apply(d.callback.beforeRemove,[d.treeId,a],!0)==!1||(i.removeNode(d,a),b&&this.setting.treeObj.trigger(e.event.REMOVE,[d.treeId,a])))},selectNode:function(a,b){a&&j.uCanDo(this.setting)&&(b=d.view.selectedMulti&&b,a.parentTId?i.expandCollapseParentNode(this.setting,a.getParentNode(),!0,!1,function(){k("#"+a.tId).focus().blur()}):k("#"+a.tId).focus().blur(),i.selectNode(this.setting,a,b))},transformTozTreeNodes:function(a){return g.transformTozTreeFormat(this.setting,a)},transformToArray:function(a){return g.transformToArrayFormat(this.setting,a)},updateNode:function(a){a&&k("#"+a.tId).get(0)&&j.uCanDo(this.setting)&&(i.setNodeName(this.setting,a),i.setNodeTarget(a),i.setNodeUrl(this.setting,a),i.setNodeLineIcos(this.setting,a),i.setNodeFontCss(this.setting,a))}};b.treeTools=c;g.setZTreeTools(d,c);b[a]&&b[a].length>0?i.createNodes(d,0,b[a]):d.async.enable&&d.async.url&&d.async.url!==""&&i.asyncNode(d);return c}};var N=k.fn.zTree,e=N.consts}));

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(6);
var document = __webpack_require__(3).document;
// typeof document.createElement is 'object' in old IE
var is = isObject(document) && isObject(document.createElement);
module.exports = function (it) {
  return is ? document.createElement(it) : {};
};


/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(3);
var core = __webpack_require__(23);
var LIBRARY = __webpack_require__(38);
var wksExt = __webpack_require__(158);
var defineProperty = __webpack_require__(10).f;
module.exports = function (name) {
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
};


/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

var shared = __webpack_require__(66)('keys');
var uid = __webpack_require__(43);
module.exports = function (key) {
  return shared[key] || (shared[key] = uid(key));
};


/***/ }),
/* 109 */
/***/ (function(module, exports) {

// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');


/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

var document = __webpack_require__(3).document;
module.exports = document && document.documentElement;


/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var isObject = __webpack_require__(6);
var anObject = __webpack_require__(2);
var check = function (O, proto) {
  anObject(O);
  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function (test, buggy, set) {
      try {
        set = __webpack_require__(24)(Function.call, __webpack_require__(20).f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch (e) { buggy = true; }
      return function setPrototypeOf(O, proto) {
        check(O, proto);
        if (buggy) O.__proto__ = proto;
        else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
  check: check
};


/***/ }),
/* 112 */
/***/ (function(module, exports) {

module.exports = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
  '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';


/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(6);
var setPrototypeOf = __webpack_require__(111).set;
module.exports = function (that, target, C) {
  var S = target.constructor;
  var P;
  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {
    setPrototypeOf(that, P);
  } return that;
};


/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var toInteger = __webpack_require__(26);
var defined = __webpack_require__(30);

module.exports = function repeat(count) {
  var str = String(defined(this));
  var res = '';
  var n = toInteger(count);
  if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");
  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;
  return res;
};


/***/ }),
/* 115 */
/***/ (function(module, exports) {

// 20.2.2.28 Math.sign(x)
module.exports = Math.sign || function sign(x) {
  // eslint-disable-next-line no-self-compare
  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
};


/***/ }),
/* 116 */
/***/ (function(module, exports) {

// 20.2.2.14 Math.expm1(x)
var $expm1 = Math.expm1;
module.exports = (!$expm1
  // Old FF bug
  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
  // Tor Browser bug
  || $expm1(-2e-17) != -2e-17
) ? function expm1(x) {
  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
} : $expm1;


/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY = __webpack_require__(38);
var $export = __webpack_require__(1);
var redefine = __webpack_require__(15);
var hide = __webpack_require__(14);
var Iterators = __webpack_require__(59);
var $iterCreate = __webpack_require__(118);
var setToStringTag = __webpack_require__(56);
var getPrototypeOf = __webpack_require__(21);
var ITERATOR = __webpack_require__(7)('iterator');
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function () { return this; };

module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME, next);
  var getMethod = function (kind) {
    if (!BUGGY && kind in proto) return proto[kind];
    switch (kind) {
      case KEYS: return function keys() { return new Constructor(this, kind); };
      case VALUES: return function values() { return new Constructor(this, kind); };
    } return function entries() { return new Constructor(this, kind); };
  };
  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype;
  // Fix native
  if ($anyNative) {
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;
    $default = function values() { return $native.call(this); };
  }
  // Define iterator
  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG] = returnThis;
  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) for (key in methods) {
      if (!(key in proto)) redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};


/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var create = __webpack_require__(46);
var descriptor = __webpack_require__(42);
var setToStringTag = __webpack_require__(56);
var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
__webpack_require__(14)(IteratorPrototype, __webpack_require__(7)('iterator'), function () { return this; });

module.exports = function (Constructor, NAME, next) {
  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
  setToStringTag(Constructor, NAME + ' Iterator');
};


/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

// helper for String#{startsWith, endsWith, includes}
var isRegExp = __webpack_require__(78);
var defined = __webpack_require__(30);

module.exports = function (that, searchString, NAME) {
  if (isRegExp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");
  return String(defined(that));
};


/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

var MATCH = __webpack_require__(7)('match');
module.exports = function (KEY) {
  var re = /./;
  try {
    '/./'[KEY](re);
  } catch (e) {
    try {
      re[MATCH] = false;
      return !'/./'[KEY](re);
    } catch (f) { /* empty */ }
  } return true;
};


/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

// check on default Array iterator
var Iterators = __webpack_require__(59);
var ITERATOR = __webpack_require__(7)('iterator');
var ArrayProto = Array.prototype;

module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};


/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $defineProperty = __webpack_require__(10);
var createDesc = __webpack_require__(42);

module.exports = function (object, index, value) {
  if (index in object) $defineProperty.f(object, index, createDesc(0, value));
  else object[index] = value;
};


/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

var classof = __webpack_require__(57);
var ITERATOR = __webpack_require__(7)('iterator');
var Iterators = __webpack_require__(59);
module.exports = __webpack_require__(23).getIteratorMethod = function (it) {
  if (it != undefined) return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};


/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var speciesConstructor = __webpack_require__(376);

module.exports = function (original, length) {
  return new (speciesConstructor(original))(length);
};


/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)

var toObject = __webpack_require__(11);
var toAbsoluteIndex = __webpack_require__(45);
var toLength = __webpack_require__(8);
module.exports = function fill(value /* , start = 0, end = @length */) {
  var O = toObject(this);
  var length = toLength(O.length);
  var aLen = arguments.length;
  var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);
  var end = aLen > 2 ? arguments[2] : undefined;
  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
  while (endPos > index) O[index++] = value;
  return O;
};


/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var addToUnscopables = __webpack_require__(40);
var step = __webpack_require__(175);
var Iterators = __webpack_require__(59);
var toIObject = __webpack_require__(19);

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = __webpack_require__(117)(Array, 'Array', function (iterated, kind) {
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var kind = this._k;
  var index = this._i++;
  if (!O || index >= O.length) {
    this._t = undefined;
    return step(1);
  }
  if (kind == 'keys') return step(0, index);
  if (kind == 'values') return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');


/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var regexpFlags = __webpack_require__(69);

var nativeExec = RegExp.prototype.exec;
// This always refers to the native implementation, because the
// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
// which loads this file before patching the method.
var nativeReplace = String.prototype.replace;

var patchedExec = nativeExec;

var LAST_INDEX = 'lastIndex';

var UPDATES_LAST_INDEX_WRONG = (function () {
  var re1 = /a/,
      re2 = /b*/g;
  nativeExec.call(re1, 'a');
  nativeExec.call(re2, 'a');
  return re1[LAST_INDEX] !== 0 || re2[LAST_INDEX] !== 0;
})();

// nonparticipating capturing group, copied from es5-shim's String#split patch.
var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;

var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;

if (PATCH) {
  patchedExec = function exec(str) {
    var re = this;
    var lastIndex, reCopy, match, i;

    if (NPCG_INCLUDED) {
      reCopy = new RegExp('^' + re.source + '$(?!\\s)', regexpFlags.call(re));
    }
    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re[LAST_INDEX];

    match = nativeExec.call(re, str);

    if (UPDATES_LAST_INDEX_WRONG && match) {
      re[LAST_INDEX] = re.global ? match.index + match[0].length : lastIndex;
    }
    if (NPCG_INCLUDED && match && match.length > 1) {
      // Fix browsers whose `exec` methods don't consistently return `undefined`
      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
      // eslint-disable-next-line no-loop-func
      nativeReplace.call(match[0], reCopy, function () {
        for (i = 1; i < arguments.length - 2; i++) {
          if (arguments[i] === undefined) match[i] = undefined;
        }
      });
    }

    return match;
  };
}

module.exports = patchedExec;


/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var at = __webpack_require__(77)(true);

 // `AdvanceStringIndex` abstract operation
// https://tc39.github.io/ecma262/#sec-advancestringindex
module.exports = function (S, index, unicode) {
  return index + (unicode ? at(S, index).length : 1);
};


/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

var ctx = __webpack_require__(24);
var invoke = __webpack_require__(165);
var html = __webpack_require__(110);
var cel = __webpack_require__(106);
var global = __webpack_require__(3);
var process = global.process;
var setTask = global.setImmediate;
var clearTask = global.clearImmediate;
var MessageChannel = global.MessageChannel;
var Dispatch = global.Dispatch;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer, channel, port;
var run = function () {
  var id = +this;
  // eslint-disable-next-line no-prototype-builtins
  if (queue.hasOwnProperty(id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function (event) {
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!setTask || !clearTask) {
  setTask = function setImmediate(fn) {
    var args = [];
    var i = 1;
    while (arguments.length > i) args.push(arguments[i++]);
    queue[++counter] = function () {
      // eslint-disable-next-line no-new-func
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (__webpack_require__(25)(process) == 'process') {
    defer = function (id) {
      process.nextTick(ctx(run, id, 1));
    };
  // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if (MessageChannel) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
    defer = function (id) {
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listener, false);
  // IE8-
  } else if (ONREADYSTATECHANGE in cel('script')) {
    defer = function (id) {
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set: setTask,
  clear: clearTask
};


/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(3);
var macrotask = __webpack_require__(129).set;
var Observer = global.MutationObserver || global.WebKitMutationObserver;
var process = global.process;
var Promise = global.Promise;
var isNode = __webpack_require__(25)(process) == 'process';

module.exports = function () {
  var head, last, notify;

  var flush = function () {
    var parent, fn;
    if (isNode && (parent = process.domain)) parent.exit();
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (e) {
        if (head) notify();
        else last = undefined;
        throw e;
      }
    } last = undefined;
    if (parent) parent.enter();
  };

  // Node.js
  if (isNode) {
    notify = function () {
      process.nextTick(flush);
    };
  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
  } else if (Observer && !(global.navigator && global.navigator.standalone)) {
    var toggle = true;
    var node = document.createTextNode('');
    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
    notify = function () {
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if (Promise && Promise.resolve) {
    // Promise.resolve without an argument throws an error in LG WebOS 2
    var promise = Promise.resolve(undefined);
    notify = function () {
      promise.then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function () {
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function (fn) {
    var task = { fn: fn, next: undefined };
    if (last) last.next = task;
    if (!head) {
      head = task;
      notify();
    } last = task;
  };
};


/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 25.4.1.5 NewPromiseCapability(C)
var aFunction = __webpack_require__(12);

function PromiseCapability(C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject = aFunction(reject);
}

module.exports.f = function (C) {
  return new PromiseCapability(C);
};


/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(3);
var DESCRIPTORS = __webpack_require__(9);
var LIBRARY = __webpack_require__(38);
var $typed = __webpack_require__(84);
var hide = __webpack_require__(14);
var redefineAll = __webpack_require__(51);
var fails = __webpack_require__(4);
var anInstance = __webpack_require__(49);
var toInteger = __webpack_require__(26);
var toLength = __webpack_require__(8);
var toIndex = __webpack_require__(185);
var gOPN = __webpack_require__(47).f;
var dP = __webpack_require__(10).f;
var arrayFill = __webpack_require__(125);
var setToStringTag = __webpack_require__(56);
var ARRAY_BUFFER = 'ArrayBuffer';
var DATA_VIEW = 'DataView';
var PROTOTYPE = 'prototype';
var WRONG_LENGTH = 'Wrong length!';
var WRONG_INDEX = 'Wrong index!';
var $ArrayBuffer = global[ARRAY_BUFFER];
var $DataView = global[DATA_VIEW];
var Math = global.Math;
var RangeError = global.RangeError;
// eslint-disable-next-line no-shadow-restricted-names
var Infinity = global.Infinity;
var BaseBuffer = $ArrayBuffer;
var abs = Math.abs;
var pow = Math.pow;
var floor = Math.floor;
var log = Math.log;
var LN2 = Math.LN2;
var BUFFER = 'buffer';
var BYTE_LENGTH = 'byteLength';
var BYTE_OFFSET = 'byteOffset';
var $BUFFER = DESCRIPTORS ? '_b' : BUFFER;
var $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH;
var $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET;

// IEEE754 conversions based on https://github.com/feross/ieee754
function packIEEE754(value, mLen, nBytes) {
  var buffer = new Array(nBytes);
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;
  var i = 0;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
  var e, m, c;
  value = abs(value);
  // eslint-disable-next-line no-self-compare
  if (value != value || value === Infinity) {
    // eslint-disable-next-line no-self-compare
    m = value != value ? 1 : 0;
    e = eMax;
  } else {
    e = floor(log(value) / LN2);
    if (value * (c = pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }
    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * pow(2, eBias - 1) * pow(2, mLen);
      e = 0;
    }
  }
  for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);
  e = e << mLen | m;
  eLen += mLen;
  for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);
  buffer[--i] |= s * 128;
  return buffer;
}
function unpackIEEE754(buffer, mLen, nBytes) {
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = eLen - 7;
  var i = nBytes - 1;
  var s = buffer[i--];
  var e = s & 127;
  var m;
  s >>= 7;
  for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);
  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);
  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : s ? -Infinity : Infinity;
  } else {
    m = m + pow(2, mLen);
    e = e - eBias;
  } return (s ? -1 : 1) * m * pow(2, e - mLen);
}

function unpackI32(bytes) {
  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
}
function packI8(it) {
  return [it & 0xff];
}
function packI16(it) {
  return [it & 0xff, it >> 8 & 0xff];
}
function packI32(it) {
  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
}
function packF64(it) {
  return packIEEE754(it, 52, 8);
}
function packF32(it) {
  return packIEEE754(it, 23, 4);
}

function addGetter(C, key, internal) {
  dP(C[PROTOTYPE], key, { get: function () { return this[internal]; } });
}

function get(view, bytes, index, isLittleEndian) {
  var numIndex = +index;
  var intIndex = toIndex(numIndex);
  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b;
  var start = intIndex + view[$OFFSET];
  var pack = store.slice(start, start + bytes);
  return isLittleEndian ? pack : pack.reverse();
}
function set(view, bytes, index, conversion, value, isLittleEndian) {
  var numIndex = +index;
  var intIndex = toIndex(numIndex);
  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b;
  var start = intIndex + view[$OFFSET];
  var pack = conversion(+value);
  for (var i = 0; i < bytes; i++) store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
}

if (!$typed.ABV) {
  $ArrayBuffer = function ArrayBuffer(length) {
    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
    var byteLength = toIndex(length);
    this._b = arrayFill.call(new Array(byteLength), 0);
    this[$LENGTH] = byteLength;
  };

  $DataView = function DataView(buffer, byteOffset, byteLength) {
    anInstance(this, $DataView, DATA_VIEW);
    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
    var bufferLength = buffer[$LENGTH];
    var offset = toInteger(byteOffset);
    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');
    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
    this[$BUFFER] = buffer;
    this[$OFFSET] = offset;
    this[$LENGTH] = byteLength;
  };

  if (DESCRIPTORS) {
    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
    addGetter($DataView, BUFFER, '_b');
    addGetter($DataView, BYTE_LENGTH, '_l');
    addGetter($DataView, BYTE_OFFSET, '_o');
  }

  redefineAll($DataView[PROTOTYPE], {
    getInt8: function getInt8(byteOffset) {
      return get(this, 1, byteOffset)[0] << 24 >> 24;
    },
    getUint8: function getUint8(byteOffset) {
      return get(this, 1, byteOffset)[0];
    },
    getInt16: function getInt16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
    },
    getUint16: function getUint16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return bytes[1] << 8 | bytes[0];
    },
    getInt32: function getInt32(byteOffset /* , littleEndian */) {
      return unpackI32(get(this, 4, byteOffset, arguments[1]));
    },
    getUint32: function getUint32(byteOffset /* , littleEndian */) {
      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
    },
    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
    },
    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
    },
    setInt8: function setInt8(byteOffset, value) {
      set(this, 1, byteOffset, packI8, value);
    },
    setUint8: function setUint8(byteOffset, value) {
      set(this, 1, byteOffset, packI8, value);
    },
    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packF32, value, arguments[2]);
    },
    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {
      set(this, 8, byteOffset, packF64, value, arguments[2]);
    }
  });
} else {
  if (!fails(function () {
    $ArrayBuffer(1);
  }) || !fails(function () {
    new $ArrayBuffer(-1); // eslint-disable-line no-new
  }) || fails(function () {
    new $ArrayBuffer(); // eslint-disable-line no-new
    new $ArrayBuffer(1.5); // eslint-disable-line no-new
    new $ArrayBuffer(NaN); // eslint-disable-line no-new
    return $ArrayBuffer.name != ARRAY_BUFFER;
  })) {
    $ArrayBuffer = function ArrayBuffer(length) {
      anInstance(this, $ArrayBuffer);
      return new BaseBuffer(toIndex(length));
    };
    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
    for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {
      if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key]);
    }
    if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer;
  }
  // iOS Safari 7.x bug
  var view = new $DataView(new $ArrayBuffer(2));
  var $setInt8 = $DataView[PROTOTYPE].setInt8;
  view.setInt8(0, 2147483648);
  view.setInt8(1, 2147483649);
  if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], {
    setInt8: function setInt8(byteOffset, value) {
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    },
    setUint8: function setUint8(byteOffset, value) {
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    }
  }, true);
}
setToStringTag($ArrayBuffer, ARRAY_BUFFER);
setToStringTag($DataView, DATA_VIEW);
hide($DataView[PROTOTYPE], $typed.VIEW, true);
exports[ARRAY_BUFFER] = $ArrayBuffer;
exports[DATA_VIEW] = $DataView;


/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(factory){
	if (true) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {
		factory(jQuery);
	}
}(function($){
// add the jquery instance method
	$.fn.drag = function( str, arg, opts ){
		// figure out the event type
		var type = typeof str == "string" ? str : "",
		// figure out the event handler...
			fn = $.isFunction( str ) ? str : $.isFunction( arg ) ? arg : null;
		// fix the event type
		if ( type.indexOf("drag") !== 0 )
			type = "drag"+ type;
		// were options passed
		opts = ( str == fn ? arg : opts ) || {};
		// trigger or bind event handler
		return fn ? this.bind( type, opts, fn ) : this.trigger( type );
	};

// local refs (increase compression)
	var $event = $.event,
		$special = $event.special,
// configure the drag special event
		drag = $special.drag = {

			// these are the default settings
			defaults: {
				which: 1, // mouse button pressed to start drag sequence
				distance: 0, // distance dragged before dragstart
				not: ':input', // selector to suppress dragging on target elements
				handle: null, // selector to match handle target elements
				relative: false, // true to use "position", false to use "offset"
				drop: true, // false to suppress drop events, true or selector to allow
				click: false // false to suppress click events after dragend (no proxy)
			},

			// the key name for stored drag data
			datakey: "dragdata",

			// prevent bubbling for better performance
			noBubble: true,

			// count bound related events
			add: function( obj ){
				// read the interaction data
				var data = $.data( this, drag.datakey ),
				// read any passed options
					opts = obj.data || {};
				// count another realted event
				data.related += 1;
				// extend data options bound with this event
				// don't iterate "opts" in case it is a node
				$.each( drag.defaults, function( key, def ){
					if ( opts[ key ] !== undefined )
						data[ key ] = opts[ key ];
				});
			},

			// forget unbound related events
			remove: function(){
				$.data( this, drag.datakey ).related -= 1;
			},

			// configure interaction, capture settings
			setup: function(){
				// check for related events
				if ( $.data( this, drag.datakey ) )
					return;
				// initialize the drag data with copied defaults
				var data = $.extend({ related:0 }, drag.defaults );
				// store the interaction data
				$.data( this, drag.datakey, data );
				// bind the mousedown event, which starts drag interactions
				$event.add( this, "touchstart mousedown", drag.init, data );
				// prevent image dragging in IE...
				if ( this.attachEvent )
					this.attachEvent("ondragstart", drag.dontstart );
			},

			// destroy configured interaction
			teardown: function(){
				var data = $.data( this, drag.datakey ) || {};
				// check for related events
				if ( data.related )
					return;
				// remove the stored data
				$.removeData( this, drag.datakey );
				// remove the mousedown event
				$event.remove( this, "touchstart mousedown", drag.init );
				// enable text selection
				drag.textselect( true );
				// un-prevent image dragging in IE...
				if ( this.detachEvent )
					this.detachEvent("ondragstart", drag.dontstart );
			},

			// initialize the interaction
			init: function( event ){
				// sorry, only one touch at a time
				if ( drag.touched )
					return;
				// the drag/drop interaction data
				var dd = event.data, results;
				// check the which directive
				if ( event.which != 0 && dd.which > 0 && event.which != dd.which )
					return;
				// check for suppressed selector
				if ( $( event.target ).is( dd.not ) )
					return;
				// check for handle selector
				if ( dd.handle && !$( event.target ).closest( dd.handle, event.currentTarget ).length )
					return;

				drag.touched = event.type == 'touchstart' ? this : null;
				dd.propagates = 1;
				dd.mousedown = this;
				dd.interactions = [ drag.interaction( this, dd ) ];
				dd.target = event.target;
				dd.pageX = event.pageX;
				dd.pageY = event.pageY;
				dd.dragging = null;
				// handle draginit event...
				results = drag.hijack( event, "draginit", dd );
				// early cancel
				if ( !dd.propagates )
					return;
				// flatten the result set
				results = drag.flatten( results );
				// insert new interaction elements
				if ( results && results.length ){
					dd.interactions = [];
					$.each( results, function(){
						dd.interactions.push( drag.interaction( this, dd ) );
					});
				}
				// remember how many interactions are propagating
				dd.propagates = dd.interactions.length;
				// locate and init the drop targets
				if ( dd.drop !== false && $special.drop )
					$special.drop.handler( event, dd );
				// disable text selection
				drag.textselect( false );
				// bind additional events...
				if ( drag.touched )
					$event.add( drag.touched, "touchmove touchend", drag.handler, dd );
				else
					$event.add( document, "mousemove mouseup", drag.handler, dd );
				// helps prevent text selection or scrolling
				if ( !drag.touched || dd.live )
					return false;
			},

			// returns an interaction object
			interaction: function( elem, dd ){
				var offset = $( elem )[ dd.relative ? "position" : "offset" ]() || { top:0, left:0 };
				return {
					drag: elem,
					callback: new drag.callback(),
					droppable: [],
					offset: offset
				};
			},

			// handle drag-releatd DOM events
			handler: function( event ){
				// read the data before hijacking anything
				var dd = event.data;
				// handle various events
				switch ( event.type ){
					// mousemove, check distance, start dragging
					case !dd.dragging && 'touchmove':
						event.preventDefault();
					case !dd.dragging && 'mousemove':
						//  drag tolerance, x≤ + y≤ = distance≤
						if ( Math.pow(  event.pageX-dd.pageX, 2 ) + Math.pow(  event.pageY-dd.pageY, 2 ) < Math.pow( dd.distance, 2 ) )
							break; // distance tolerance not reached
						event.target = dd.target; // force target from "mousedown" event (fix distance issue)
						drag.hijack( event, "dragstart", dd ); // trigger "dragstart"
						if ( dd.propagates ) // "dragstart" not rejected
							dd.dragging = true; // activate interaction
					// mousemove, dragging
					case 'touchmove':
						event.preventDefault();
					case 'mousemove':
						if ( dd.dragging ){
							// trigger "drag"
							drag.hijack( event, "drag", dd );
							if ( dd.propagates ){
								// manage drop events
								if ( dd.drop !== false && $special.drop )
									$special.drop.handler( event, dd ); // "dropstart", "dropend"
								break; // "drag" not rejected, stop
							}
							event.type = "mouseup"; // helps "drop" handler behave
						}
					// mouseup, stop dragging
					case 'touchend':
					case 'mouseup':
					default:
						if ( drag.touched )
							$event.remove( drag.touched, "touchmove touchend", drag.handler ); // remove touch events
						else
							$event.remove( document, "mousemove mouseup", drag.handler ); // remove page events
						if ( dd.dragging ){
							if ( dd.drop !== false && $special.drop )
								$special.drop.handler( event, dd ); // "drop"
							drag.hijack( event, "dragend", dd ); // trigger "dragend"
						}
						drag.textselect( true ); // enable text selection
						// if suppressing click events...
						if ( dd.click === false && dd.dragging )
							$.data( dd.mousedown, "suppress.click", new Date().getTime() + 5 );
						dd.dragging = drag.touched = false; // deactivate element
						break;
				}
			},

			// re-use event object for custom events
			hijack: function( event, type, dd, x, elem ){
				// not configured
				if ( !dd )
					return;
				// remember the original event and type
				var orig = { event:event.originalEvent, type:event.type },
				// is the event drag related or drog related?
					mode = type.indexOf("drop") ? "drag" : "drop",
				// iteration vars
					result, i = x || 0, ia, $elems, callback,
					len = !isNaN( x ) ? x : dd.interactions.length;
				// modify the event type
				event.type = type;
				// remove the original event
				event.originalEvent = null;
				// initialize the results
				dd.results = [];
				// handle each interacted element
				do if ( ia = dd.interactions[ i ] ){
					// validate the interaction
					if ( type !== "dragend" && ia.cancelled )
						continue;
					// set the dragdrop properties on the event object
					callback = drag.properties( event, dd, ia );
					// prepare for more results
					ia.results = [];
					// handle each element
					$( elem || ia[ mode ] || dd.droppable ).each(function( p, subject ){
						// identify drag or drop targets individually
						callback.target = subject;
						// force propagtion of the custom event
						event.isPropagationStopped = function(){ return false; };
						// handle the event
						result = subject ? $event.dispatch.call( subject, event, callback ) : null;
						// stop the drag interaction for this element
						if ( result === false ){
							if ( mode == "drag" ){
								ia.cancelled = true;
								dd.propagates -= 1;
							}
							if ( type == "drop" ){
								ia[ mode ][p] = null;
							}
						}
						// assign any dropinit elements
						else if ( type == "dropinit" )
							ia.droppable.push( drag.element( result ) || subject );
						// accept a returned proxy element
						if ( type == "dragstart" )
							ia.proxy = $( drag.element( result ) || ia.drag )[0];
						// remember this result
						ia.results.push( result );
						// forget the event result, for recycling
						delete event.result;
						// break on cancelled handler
						if ( type !== "dropinit" )
							return result;
					});
					// flatten the results
					dd.results[ i ] = drag.flatten( ia.results );
					// accept a set of valid drop targets
					if ( type == "dropinit" )
						ia.droppable = drag.flatten( ia.droppable );
					// locate drop targets
					if ( type == "dragstart" && !ia.cancelled )
						callback.update();
				}
				while ( ++i < len )
				// restore the original event & type
				event.type = orig.type;
				event.originalEvent = orig.event;
				// return all handler results
				return drag.flatten( dd.results );
			},

			// extend the callback object with drag/drop properties...
			properties: function( event, dd, ia ){
				var obj = ia.callback;
				// elements
				obj.drag = ia.drag;
				obj.proxy = ia.proxy || ia.drag;
				// starting mouse position
				obj.startX = dd.pageX;
				obj.startY = dd.pageY;
				// current distance dragged
				obj.deltaX = event.pageX - dd.pageX;
				obj.deltaY = event.pageY - dd.pageY;
				// original element position
				obj.originalX = ia.offset.left;
				obj.originalY = ia.offset.top;
				// adjusted element position
				obj.offsetX = obj.originalX + obj.deltaX;
				obj.offsetY = obj.originalY + obj.deltaY;
				// assign the drop targets information
				obj.drop = drag.flatten( ( ia.drop || [] ).slice() );
				obj.available = drag.flatten( ( ia.droppable || [] ).slice() );
				return obj;
			},

			// determine is the argument is an element or jquery instance
			element: function( arg ){
				if ( arg && ( arg.jquery || arg.nodeType == 1 ) )
					return arg;
			},

			// flatten nested jquery objects and arrays into a single dimension array
			flatten: function( arr ){
				return $.map( arr, function( member ){
					return member && member.jquery ? $.makeArray( member ) :
						member && member.length ? drag.flatten( member ) : member;
				});
			},

			// toggles text selection attributes ON (true) or OFF (false)
			textselect: function( bool ){
				$( document )[ bool ? "unbind" : "bind" ]("selectstart", drag.dontstart )
					.css("MozUserSelect", bool ? "" : "none" );
				// .attr("unselectable", bool ? "off" : "on" )
				document.unselectable = bool ? "off" : "on";
			},

			// suppress "selectstart" and "ondragstart" events
			dontstart: function(){
				return false;
			},

			// a callback instance contructor
			callback: function(){}

		};

// callback methods
	drag.callback.prototype = {
		update: function(){
			if ( $special.drop && this.available.length )
				$.each( this.available, function( i ){
					$special.drop.locate( this, i );
				});
		}
	};

// patch $.event.$dispatch to allow suppressing clicks
	var $dispatch = $event.dispatch;
	$event.dispatch = function( event ){
		if ( $.data( this, "suppress."+ event.type ) - new Date().getTime() > 0 ){
			$.removeData( this, "suppress."+ event.type );
			return;
		}
		return $dispatch.apply( this, arguments );
	};

// event fix hooks for touch events...
	var touchHooks =
		$event.fixHooks.touchstart =
			$event.fixHooks.touchmove =
				$event.fixHooks.touchend =
					$event.fixHooks.touchcancel = {
						props: "clientX clientY pageX pageY screenX screenY".split( " " ),
						filter: function( event, orig ) {
							if ( orig ){
								var touched = ( orig.touches && orig.touches[0] )
									|| ( orig.changedTouches && orig.changedTouches[0] )
									|| null;
								// iOS webkit: touchstart, touchmove, touchend
								if ( touched )
									$.each( touchHooks.props, function( i, prop ){
										event[ prop ] = touched[ prop ];
									});
							}
							return event;
						}
					};

// share the same special event configuration with related events...
	$special.draginit = $special.dragstart = $special.dragend = drag;

}));

/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(jQuery) {

/*! 
 * jquery.event.drop - v 2.2
 * Copyright (c) 2010 Three Dub Media - http://threedubmedia.com
 * Open Source MIT License - http://threedubmedia.com/code/license
 */
// Created: 2008-06-04 
// Updated: 2012-05-21
// REQUIRES: jquery 1.7.x, event.drag 2.2

;(function ($) {
	// secure $ jQuery alias

	// Events: drop, dropstart, dropend

	// add the jquery instance method
	$.fn.drop = function (str, arg, opts) {
		// figure out the event type
		var type = typeof str == "string" ? str : "",

		// figure out the event handler...
		fn = $.isFunction(str) ? str : $.isFunction(arg) ? arg : null;
		// fix the event type
		if (type.indexOf("drop") !== 0) type = "drop" + type;
		// were options passed
		opts = (str == fn ? arg : opts) || {};
		// trigger or bind event handler
		return fn ? this.bind(type, opts, fn) : this.trigger(type);
	};

	// DROP MANAGEMENT UTILITY
	// returns filtered drop target elements, caches their positions
	$.drop = function (opts) {
		opts = opts || {};
		// safely set new options...
		drop.multi = opts.multi === true ? Infinity : opts.multi === false ? 1 : !isNaN(opts.multi) ? opts.multi : drop.multi;
		drop.delay = opts.delay || drop.delay;
		drop.tolerance = $.isFunction(opts.tolerance) ? opts.tolerance : opts.tolerance === null ? null : drop.tolerance;
		drop.mode = opts.mode || drop.mode || 'intersect';
	};

	// local refs (increase compression)
	var $event = $.event,
	    $special = $event.special,

	// configure the drop special event
	drop = $.event.special.drop = {

		// these are the default settings
		multi: 1, // allow multiple drop winners per dragged element
		delay: 20, // async timeout delay
		mode: 'overlap', // drop tolerance mode

		// internal cache
		targets: [],

		// the key name for stored drop data
		datakey: "dropdata",

		// prevent bubbling for better performance
		noBubble: true,

		// count bound related events
		add: function add(obj) {
			// read the interaction data
			var data = $.data(this, drop.datakey);
			// count another realted event
			data.related += 1;
		},

		// forget unbound related events
		remove: function remove() {
			$.data(this, drop.datakey).related -= 1;
		},

		// configure the interactions
		setup: function setup() {
			// check for related events
			if ($.data(this, drop.datakey)) return;
			// initialize the drop element data
			var data = {
				related: 0,
				active: [],
				anyactive: 0,
				winner: 0,
				location: {}
			};
			// store the drop data on the element
			$.data(this, drop.datakey, data);
			// store the drop target in internal cache
			drop.targets.push(this);
		},

		// destroy the configure interaction
		teardown: function teardown() {
			var data = $.data(this, drop.datakey) || {};
			// check for related events
			if (data.related) return;
			// remove the stored data
			$.removeData(this, drop.datakey);
			// reference the targeted element
			var element = this;
			// remove from the internal cache
			drop.targets = $.grep(drop.targets, function (target) {
				return target !== element;
			});
		},

		// shared event handler
		handler: function handler(event, dd) {
			// local vars
			var results, $targets;
			// make sure the right data is available
			if (!dd) return;
			// handle various events
			switch (event.type) {
				// draginit, from $.event.special.drag
				case 'mousedown': // DROPINIT >>
				case 'touchstart':
					// DROPINIT >>
					// collect and assign the drop targets
					$targets = $(drop.targets);
					if (typeof dd.drop == "string") $targets = $targets.filter(dd.drop);
					// reset drop data winner properties
					$targets.each(function () {
						var data = $.data(this, drop.datakey);
						data.active = [];
						data.anyactive = 0;
						data.winner = 0;
					});
					// set available target elements
					dd.droppable = $targets;
					// activate drop targets for the initial element being dragged
					$special.drag.hijack(event, "dropinit", dd);
					break;
				// drag, from $.event.special.drag
				case 'mousemove': // TOLERATE >>
				case 'touchmove':
					// TOLERATE >>
					drop.event = event; // store the mousemove event
					if (!drop.timer)
						// monitor drop targets
						drop.tolerate(dd);
					break;
				// dragend, from $.event.special.drag
				case 'mouseup': // DROP >> DROPEND >>
				case 'touchend':
					// DROP >> DROPEND >>
					drop.timer = clearTimeout(drop.timer); // delete timer
					if (dd.propagates) {
						$special.drag.hijack(event, "drop", dd);
						$special.drag.hijack(event, "dropend", dd);
					}
					break;

			}
		},

		// returns the location positions of an element
		locate: function locate(elem, index) {
			var data = $.data(elem, drop.datakey),
			    $elem = $(elem),
			    posi = $elem.offset() || {},
			    height = $elem.outerHeight(),
			    width = $elem.outerWidth(),
			    location = {
				elem: elem,
				width: width,
				height: height,
				top: posi.top,
				left: posi.left,
				right: posi.left + width,
				bottom: posi.top + height
			};
			// drag elements might not have dropdata
			if (data) {
				data.location = location;
				data.index = index;
				data.elem = elem;
			}
			return location;
		},

		// test the location positions of an element against another OR an X,Y coord
		contains: function contains(target, test) {
			// target { location } contains test [x,y] or { location }
			return (test[0] || test.left) >= target.left && (test[0] || test.right) <= target.right && (test[1] || test.top) >= target.top && (test[1] || test.bottom) <= target.bottom;
		},

		// stored tolerance modes
		modes: { // fn scope: "$.event.special.drop" object
			// target with mouse wins, else target with most overlap wins
			'intersect': function intersect(event, proxy, target) {
				return this.contains(target, [event.pageX, event.pageY]) ? // check cursor
				1e9 : this.modes.overlap.apply(this, arguments); // check overlap
			},
			// target with most overlap wins
			'overlap': function overlap(event, proxy, target) {
				// calculate the area of overlap...
				return Math.max(0, Math.min(target.bottom, proxy.bottom) - Math.max(target.top, proxy.top)) * Math.max(0, Math.min(target.right, proxy.right) - Math.max(target.left, proxy.left));
			},
			// proxy is completely contained within target bounds
			'fit': function fit(event, proxy, target) {
				return this.contains(target, proxy) ? 1 : 0;
			},
			// center of the proxy is contained within target bounds
			'middle': function middle(event, proxy, target) {
				return this.contains(target, [proxy.left + proxy.width * .5, proxy.top + proxy.height * .5]) ? 1 : 0;
			}
		},

		// sort drop target cache by by winner (dsc), then index (asc)
		sort: function sort(a, b) {
			return b.winner - a.winner || a.index - b.index;
		},

		// async, recursive tolerance execution
		tolerate: function tolerate(dd) {
			// declare local refs
			var i,
			    drp,
			    drg,
			    data,
			    arr,
			    len,
			    elem,

			// interaction iteration variables
			x = 0,
			    ia,
			    end = dd.interactions.length,

			// determine the mouse coords
			xy = [drop.event.pageX, drop.event.pageY],

			// custom or stored tolerance fn
			tolerance = drop.tolerance || drop.modes[drop.mode];
			// go through each passed interaction...
			do {
				if (ia = dd.interactions[x]) {
					// check valid interaction
					if (!ia) return;
					// initialize or clear the drop data
					ia.drop = [];
					// holds the drop elements
					arr = [];
					len = ia.droppable.length;
					// determine the proxy location, if needed
					if (tolerance) drg = drop.locate(ia.proxy);
					// reset the loop
					i = 0;
					// loop each stored drop target
					do {
						if (elem = ia.droppable[i]) {
							data = $.data(elem, drop.datakey);
							drp = data.location;
							if (!drp) continue;
							// find a winner: tolerance function is defined, call it
							data.winner = tolerance ? tolerance.call(drop, drop.event, drg, drp)
							// mouse position is always the fallback
							: drop.contains(drp, xy) ? 1 : 0;
							arr.push(data);
						}
					} while (++i < len); // loop
					// sort the drop targets
					arr.sort(drop.sort);
					// reset the loop
					i = 0;
					// loop through all of the targets again
					do {
						if (data = arr[i]) {
							// winners...
							if (data.winner && ia.drop.length < drop.multi) {
								// new winner... dropstart
								if (!data.active[x] && !data.anyactive) {
									// check to make sure that this is not prevented
									if ($special.drag.hijack(drop.event, "dropstart", dd, x, data.elem)[0] !== false) {
										data.active[x] = 1;
										data.anyactive += 1;
									}
									// if false, it is not a winner
									else data.winner = 0;
								}
								// if it is still a winner
								if (data.winner) ia.drop.push(data.elem);
							}
							// losers...
							else if (data.active[x] && data.anyactive == 1) {
									// former winner... dropend
									$special.drag.hijack(drop.event, "dropend", dd, x, data.elem);
									data.active[x] = 0;
									data.anyactive -= 1;
								}
						}
					} while (++i < len); // loop
				}
			} while (++x < end); // loop
			// check if the mouse is still moving or is idle
			if (drop.last && xy[0] == drop.last.pageX && xy[1] == drop.last.pageY) delete drop.timer; // idle, don't recurse
			else // recurse
				drop.timer = setTimeout(function () {
					drop.tolerate(dd);
				}, drop.delay);
			// remember event, to compare idleness
			drop.last = drop.event;
		}

	};

	// share the same special event configuration with related events...
	$special.dropinit = $special.dropstart = $special.dropend = drop;
})(jQuery); // confine scope
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

(function (factory) {
	if (true) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {
		factory(jQuery);
	}
})(function ($) {
	$.extend(true, window, {
		"TaGB2312": TaGB2312
	});
	function TaGB2312() {
		var strGB = "啊阿埃挨哎唉哀皑癌蔼矮艾碍爱隘鞍氨安俺按暗岸胺案肮昂盎凹敖熬翱袄傲奥懊澳芭捌扒叭吧笆八疤巴拔跋靶把耙坝霸罢爸白柏百摆佰败拜稗斑班搬扳般颁板版扮拌伴瓣半办绊邦帮梆榜膀绑棒磅蚌镑傍谤苞胞包褒剥薄雹保堡饱宝抱报暴豹鲍爆杯碑悲卑北辈背贝钡倍狈备惫焙被奔苯本笨崩绷甭泵蹦迸逼鼻比鄙笔彼碧蓖蔽毕毙毖币庇痹闭敝弊必辟壁臂避陛鞭边编贬扁便变卞辨辩辫遍标彪膘表鳖憋别瘪彬斌濒滨宾摈兵冰柄丙秉饼炳病并玻菠播拨钵波博勃搏铂箔伯帛舶脖膊渤泊驳捕卜哺补埠不布步簿部怖擦猜裁材才财睬踩采彩菜蔡餐参蚕残惭惨灿苍舱仓沧藏操糙槽曹草厕策侧册测层蹭插叉茬茶查碴搽察岔差诧拆柴豺搀掺蝉馋谗缠铲产阐颤昌猖场尝常长偿肠厂敞畅唱倡超抄钞朝嘲潮巢吵炒车扯撤掣彻澈郴臣辰尘晨忱沉陈趁衬撑称城橙成呈乘程惩澄诚承逞骋秤吃痴持匙池迟弛驰耻齿侈尺赤翅斥炽充冲虫崇宠抽酬畴踌稠愁筹仇绸瞅丑臭初出橱厨躇锄雏滁除楚础储矗搐触处揣川穿椽传船喘串疮窗幢床闯创吹炊捶锤垂春椿醇唇淳纯蠢戳绰疵茨磁雌辞慈瓷词此刺赐次聪葱囱匆从丛凑粗醋簇促蹿篡窜摧崔催脆瘁粹淬翠村存寸磋撮搓措挫错搭达答瘩打大呆歹傣戴带殆代贷袋待逮怠耽担丹单郸掸胆旦氮但惮淡诞弹蛋当挡党荡档刀捣蹈倒岛祷导到稻悼道盗德得的蹬灯登等瞪凳邓堤低滴迪敌笛狄涤翟嫡抵底地蒂第帝弟递缔颠掂滇碘点典靛垫电佃甸店惦奠淀殿碉叼雕凋刁掉吊钓调跌爹碟蝶迭谍叠丁盯叮钉顶鼎锭定订丢东冬董懂动栋侗恫冻洞兜抖斗陡豆逗痘都督毒犊独读堵睹赌杜镀肚度渡妒端短锻段断缎堆兑队对墩吨蹲敦顿囤钝盾遁掇哆多夺垛躲朵跺舵剁惰堕蛾峨鹅俄额讹娥恶厄扼遏鄂饿恩而儿耳尔饵洱二贰发罚筏伐乏阀法珐藩帆番翻樊矾钒繁凡烦反返范贩犯饭泛坊芳方肪房防妨仿访纺放菲非啡飞肥匪诽吠肺废沸费芬酚吩氛分纷坟焚汾粉奋份忿愤粪丰封枫蜂峰锋风疯烽逢冯缝讽奉凤佛否夫敷肤孵扶拂辐幅氟符伏俘服浮涪福袱弗甫抚辅俯釜斧脯腑府腐赴副覆赋复傅付阜父腹负富讣附妇缚咐噶嘎该改概钙盖溉干甘杆柑竿肝赶感秆敢赣冈刚钢缸肛纲岗港杠篙皋高膏羔糕搞镐稿告哥歌搁戈鸽胳疙割革葛格蛤阁隔铬个各给根跟耕更庚羹埂耿梗工攻功恭龚供躬公宫弓巩汞拱贡共钩勾沟苟狗垢构购够辜菇咕箍估沽孤姑鼓古蛊骨谷股故顾固雇刮瓜剐寡挂褂乖拐怪棺关官冠观管馆罐惯灌贯光广逛瑰规圭硅归龟闺轨鬼诡癸桂柜跪贵刽辊滚棍锅郭国果裹过哈骸孩海氦亥害骇酣憨邯韩含涵寒函喊罕翰撼捍旱憾悍焊汗汉夯杭航壕嚎豪毫郝好耗号浩呵喝荷菏核禾和何合盒貉阂河涸赫褐鹤贺嘿黑痕很狠恨哼亨横衡恒轰哄烘虹鸿洪宏弘红喉侯猴吼厚候后呼乎忽瑚壶葫胡蝴狐糊湖弧虎唬护互沪户花哗华猾滑画划化话槐徊怀淮坏欢环桓还缓换患唤痪豢焕涣宦幻荒慌黄磺蝗簧皇凰惶煌晃幌恍谎灰挥辉徽恢蛔回毁悔慧卉惠晦贿秽会烩汇讳诲绘荤昏婚魂浑混豁活伙火获或惑霍货祸击圾基机畸稽积箕肌饥迹激讥鸡姬绩缉吉极棘辑籍集及急疾汲即嫉级挤几脊己蓟技冀季伎祭剂悸济寄寂计记既忌际妓继纪嘉枷夹佳家加荚颊贾甲钾假稼价架驾嫁歼监坚尖笺间煎兼肩艰奸缄茧检柬碱硷拣捡简俭剪减荐槛鉴践贱见键箭件健舰剑饯渐溅涧建僵姜将浆江疆蒋桨奖讲匠酱降蕉椒礁焦胶交郊浇骄娇嚼搅铰矫侥脚狡角饺缴绞剿教酵轿较叫窖揭接皆秸街阶截劫节桔杰捷睫竭洁结解姐戒藉芥界借介疥诫届巾筋斤金今津襟紧锦仅谨进靳晋禁近烬浸尽劲荆兢茎睛晶鲸京惊精粳经井警景颈静境敬镜径痉靖竟竞净炯窘揪究纠玖韭久灸九酒厩救旧臼舅咎就疚鞠拘狙疽居驹菊局咀矩举沮聚拒据巨具距踞锯俱句惧炬剧捐鹃娟倦眷卷绢撅攫抉掘倔爵觉决诀绝均菌钧军君峻俊竣浚郡骏喀咖卡咯开揩楷凯慨刊堪勘坎砍看康慷糠扛抗亢炕考拷烤靠坷苛柯棵磕颗科壳咳可渴克刻客课肯啃垦恳坑吭空恐孔控抠口扣寇枯哭窟苦酷库裤夸垮挎跨胯块筷侩快宽款匡筐狂框矿眶旷况亏盔岿窥葵奎魁傀馈愧溃坤昆捆困括扩廓阔垃拉喇蜡腊辣啦莱来赖蓝婪栏拦篮阑兰澜谰揽览懒缆烂滥琅榔狼廊郎朗浪捞劳牢老佬姥酪烙涝勒乐雷镭蕾磊累儡垒擂肋类泪棱楞冷厘梨犁黎篱狸离漓理李里鲤礼莉荔吏栗丽厉励砾历利傈例俐痢立粒沥隶力璃哩俩联莲连镰廉怜涟帘敛脸链恋炼练粮凉梁粱良两辆量晾亮谅撩聊僚疗燎寥辽潦了撂镣廖料列裂烈劣猎琳林磷霖临邻鳞淋凛赁吝拎玲菱零龄铃伶羚凌灵陵岭领另令溜琉榴硫馏留刘瘤流柳六龙聋咙笼窿隆垄拢陇楼娄搂篓漏陋芦卢颅庐炉掳卤虏鲁麓碌露路赂鹿潞禄录陆戮驴吕铝侣旅履屡缕虑氯律率滤绿峦挛孪滦卵乱掠略抡轮伦仑沦纶论萝螺罗逻锣箩骡裸落洛骆络妈麻玛码蚂马骂嘛吗埋买麦卖迈脉瞒馒蛮满蔓曼慢漫谩芒茫盲氓忙莽猫茅锚毛矛铆卯茂冒帽貌贸么玫枚梅酶霉煤没眉媒镁每美昧寐妹媚门闷们萌蒙檬盟锰猛梦孟眯醚靡糜迷谜弥米秘觅泌蜜密幂棉眠绵冕免勉娩缅面苗描瞄藐秒渺庙妙蔑灭民抿皿敏悯闽明螟鸣铭名命谬摸摹蘑模膜磨摩魔抹末莫墨默沫漠寞陌谋牟某拇牡亩姆母墓暮幕募慕木目睦牧穆拿哪呐钠那娜纳氖乃奶耐奈南男难囊挠脑恼闹淖呢馁内嫩能妮霓倪泥尼拟你匿腻逆溺蔫拈年碾撵捻念娘酿鸟尿捏聂孽啮镊镍涅您柠狞凝宁拧泞牛扭钮纽脓浓农弄奴努怒女暖虐疟挪懦糯诺哦欧鸥殴藕呕偶沤啪趴爬帕怕琶拍排牌徘湃派攀潘盘磐盼畔判叛乓庞旁耪胖抛咆刨炮袍跑泡呸胚培裴赔陪配佩沛喷盆砰抨烹澎彭蓬棚硼篷膨朋鹏捧碰坯砒霹批披劈琵毗啤脾疲皮匹痞僻屁譬篇偏片骗飘漂瓢票撇瞥拼频贫品聘乒坪苹萍平凭瓶评屏坡泼颇婆破魄迫粕剖扑铺仆莆葡菩蒲埔朴圃普浦谱曝瀑期欺栖戚妻七凄漆柒沏其棋奇歧畦崎脐齐旗祈祁骑起岂乞企启契砌器气迄弃汽泣讫掐恰洽牵扦钎铅千迁签仟谦乾黔钱钳前潜遣浅谴堑嵌欠歉枪呛腔羌墙蔷强抢橇锹敲悄桥瞧乔侨巧鞘撬翘峭俏窍切茄且怯窃钦侵亲秦琴勤芹擒禽寝沁青轻氢倾卿清擎晴氰情顷请庆琼穷秋丘邱球求囚酋泅趋区蛆曲躯屈驱渠取娶龋趣去圈颧权醛泉全痊拳犬券劝缺炔瘸却鹊榷确雀裙群然燃冉染瓤壤攘嚷让饶扰绕惹热壬仁人忍韧任认刃妊纫扔仍日戎茸蓉荣融熔溶容绒冗揉柔肉茹蠕儒孺如辱乳汝入褥软阮蕊瑞锐闰润若弱撒洒萨腮鳃塞赛三叁伞散桑嗓丧搔骚扫嫂瑟色涩森僧莎砂杀刹沙纱傻啥煞筛晒珊苫杉山删煽衫闪陕擅赡膳善汕扇缮墒伤商赏晌上尚裳梢捎稍烧芍勺韶少哨邵绍奢赊蛇舌舍赦摄射慑涉社设砷申呻伸身深娠绅神沈审婶甚肾慎渗声生甥牲升绳省盛剩胜圣师失狮施湿诗尸虱十石拾时什食蚀实识史矢使屎驶始式示士世柿事拭誓逝势是嗜噬适仕侍释饰氏市恃室视试收手首守寿授售受瘦兽蔬枢梳殊抒输叔舒淑疏书赎孰熟薯暑曙署蜀黍鼠属术述树束戍竖墅庶数漱恕刷耍摔衰甩帅栓拴霜双爽谁水睡税吮瞬顺舜说硕朔烁斯撕嘶思私司丝死肆寺嗣四伺似饲巳松耸怂颂送宋讼诵搜艘擞嗽苏酥俗素速粟僳塑溯宿诉肃酸蒜算虽隋随绥髓碎岁穗遂隧祟孙损笋蓑梭唆缩琐索锁所塌他它她塔獭挞蹋踏胎苔抬台泰酞太态汰坍摊贪瘫滩坛檀痰潭谭谈坦毯袒碳探叹炭汤塘搪堂棠膛唐糖倘躺淌趟烫掏涛滔绦萄桃逃淘陶讨套特藤腾疼誊梯剔踢锑提题蹄啼体替嚏惕涕剃屉天添填田甜恬舔腆挑条迢眺跳贴铁帖厅听烃汀廷停亭庭挺艇通桐酮瞳同铜彤童桶捅筒统痛偷投头透凸秃突图徒途涂屠土吐兔湍团推颓腿蜕褪退吞屯臀拖托脱鸵陀驮驼椭妥拓唾挖哇蛙洼娃瓦袜歪外豌弯湾玩顽丸烷完碗挽晚皖惋宛婉万腕汪王亡枉网往旺望忘妄威巍微危韦违桅围唯惟为潍维苇萎委伟伪尾纬未蔚味畏胃喂魏位渭谓尉慰卫瘟温蚊文闻纹吻稳紊问嗡翁瓮挝蜗涡窝我斡卧握沃巫呜钨乌污诬屋无芜梧吾吴毋武五捂午舞伍侮坞戊雾晤物勿务悟误昔熙析西硒矽晰嘻吸锡牺稀息希悉膝夕惜熄烯溪汐犀檄袭席习媳喜铣洗系隙戏细瞎虾匣霞辖暇峡侠狭下厦夏吓掀锨先仙鲜纤咸贤衔舷闲涎弦嫌显险现献县腺馅羡宪陷限线相厢镶香箱襄湘乡翔祥详想响享项巷橡像向象萧硝霄削哮嚣销消宵淆晓小孝校肖啸笑效楔些歇蝎鞋协挟携邪斜胁谐写械卸蟹懈泄泻谢屑薪芯锌欣辛新忻心信衅星腥猩惺兴刑型形邢行醒幸杏性姓兄凶胸匈汹雄熊休修羞朽嗅锈秀袖绣墟戌需虚嘘须徐许蓄酗叙旭序畜恤絮婿绪续轩喧宣悬旋玄选癣眩绚靴薛学穴雪血勋熏循旬询寻驯巡殉汛训讯逊迅压押鸦鸭呀丫芽牙蚜崖衙涯雅哑亚讶焉咽阉烟淹盐严研蜒岩延言颜阎炎沿奄掩眼衍演艳堰燕厌砚雁唁彦焰宴谚验殃央鸯秧杨扬佯疡羊洋阳氧仰痒养样漾邀腰妖瑶摇尧遥窑谣姚咬舀药要耀椰噎耶爷野冶也页掖业叶曳腋夜液一壹医揖铱依伊衣颐夷遗移仪胰疑沂宜姨彝椅蚁倚已乙矣以艺抑易邑屹亿役臆逸肄疫亦裔意毅忆义益溢诣议谊译异翼翌绎茵荫因殷音阴姻吟银淫寅饮尹引隐印英樱婴鹰应缨莹萤营荧蝇迎赢盈影颖硬映哟拥佣臃痈庸雍踊蛹咏泳涌永恿勇用幽优悠忧尤由邮铀犹油游酉有友右佑釉诱又幼迂淤于盂榆虞愚舆余俞逾鱼愉渝渔隅予娱雨与屿禹宇语羽玉域芋郁吁遇喻峪御愈欲狱育誉浴寓裕预豫驭鸳渊冤元垣袁原援辕园员圆猿源缘远苑愿怨院曰约越跃钥岳粤月悦阅耘云郧匀陨允运蕴酝晕韵孕匝砸杂栽哉灾宰载再在咱攒暂赞赃脏葬遭糟凿藻枣早澡蚤躁噪造皂灶燥责择则泽贼怎增憎曾赠扎喳渣札轧铡闸眨栅榨咋乍炸诈摘斋宅窄债寨瞻毡詹粘沾盏斩辗崭展蘸栈占战站湛绽樟章彰漳张掌涨杖丈帐账仗胀瘴障招昭找沼赵照罩兆肇召遮折哲蛰辙者锗蔗这浙珍斟真甄砧臻贞针侦枕疹诊震振镇阵蒸挣睁征狰争怔整拯正政帧症郑证芝枝支吱蜘知肢脂汁之织职直植殖执值侄址指止趾只旨纸志挚掷至致置帜峙制智秩稚质炙痔滞治窒中盅忠钟衷终种肿重仲众舟周州洲诌粥轴肘帚咒皱宙昼骤珠株蛛朱猪诸诛逐竹烛煮拄瞩嘱主著柱助蛀贮铸筑住注祝驻抓爪拽专砖转撰赚篆桩庄装妆撞壮状椎锥追赘坠缀谆准捉拙卓桌琢茁酌啄着灼浊兹咨资姿滋淄孜紫仔籽滓子自渍字鬃棕踪宗综总纵邹走奏揍租足卒族祖诅阻组钻纂嘴醉最罪尊遵昨左佐柞做作坐座亍丌兀丐廿卅丕亘丞鬲孬噩丨禺丿匕乇夭爻卮氐囟胤馗毓睾鼗丶亟鼐乜乩亓芈孛啬嘏仄厍厝厣厥厮靥赝匚叵匦匮匾赜卦卣刂刈刎刭刳刿剀剌剞剡剜蒯剽劂劁劐劓冂罔亻仃仉仂仨仡仫仞伛仳伢佤仵伥伧伉伫佞佧攸佚佝佟佗伲伽佶佴侑侉侃侏佾佻侪佼侬侔俦俨俪俅俚俣俜俑俟俸倩偌俳倬倏倮倭俾倜倌倥倨偾偃偕偈偎偬偻傥傧傩傺僖儆僭僬僦僮儇儋仝氽佘佥俎龠汆籴兮巽黉馘冁夔勹匍訇匐凫夙兕亠兖亳衮袤亵脔裒禀嬴蠃羸冫冱冽冼凇冖冢冥讠讦讧讪讴讵讷诂诃诋诏诎诒诓诔诖诘诙诜诟诠诤诨诩诮诰诳诶诹诼诿谀谂谄谇谌谏谑谒谔谕谖谙谛谘谝谟谠谡谥谧谪谫谮谯谲谳谵谶卩卺阝阢阡阱阪阽阼陂陉陔陟陧陬陲陴隈隍隗隰邗邛邝邙邬邡邴邳邶邺邸邰郏郅邾郐郄郇郓郦郢郜郗郛郫郯郾鄄鄢鄞鄣鄱鄯鄹酃酆刍奂劢劬劭劾哿勐勖勰叟燮矍廴凵凼鬯厶弁畚巯坌垩垡塾墼壅壑圩圬圪圳圹圮圯坜圻坂坩垅坫垆坼坻坨坭坶坳垭垤垌垲埏垧垴垓垠埕埘埚埙埒垸埴埯埸埤埝堋堍埽埭堀堞堙塄堠塥塬墁墉墚墀馨鼙懿艹艽艿芏芊芨芄芎芑芗芙芫芸芾芰苈苊苣芘芷芮苋苌苁芩芴芡芪芟苄苎芤苡茉苷苤茏茇苜苴苒苘茌苻苓茑茚茆茔茕苠苕茜荑荛荜茈莒茼茴茱莛荞茯荏荇荃荟荀茗荠茭茺茳荦荥荨茛荩荬荪荭荮莰荸莳莴莠莪莓莜莅荼莶莩荽莸荻莘莞莨莺莼菁萁菥菘堇萘萋菝菽菖萜萸萑萆菔菟萏萃菸菹菪菅菀萦菰菡葜葑葚葙葳蒇蒈葺蒉葸萼葆葩葶蒌蒎萱葭蓁蓍蓐蓦蒽蓓蓊蒿蒺蓠蒡蒹蒴蒗蓥蓣蔌甍蔸蓰蔹蔟蔺蕖蔻蓿蓼蕙蕈蕨蕤蕞蕺瞢蕃蕲蕻薤薨薇薏蕹薮薜薅薹薷薰藓藁藜藿蘧蘅蘩蘖蘼廾弈夼奁耷奕奚奘匏尢尥尬尴扌扪抟抻拊拚拗拮挢拶挹捋捃掭揶捱捺掎掴捭掬掊捩掮掼揲揸揠揿揄揞揎摒揆掾摅摁搋搛搠搌搦搡摞撄摭撖摺撷撸撙撺擀擐擗擤擢攉攥攮弋忒甙弑卟叱叽叩叨叻吒吖吆呋呒呓呔呖呃吡呗呙吣吲咂咔呷呱呤咚咛咄呶呦咝哐咭哂咴哒咧咦哓哔呲咣哕咻咿哌哙哚哜咩咪咤哝哏哞唛哧唠哽唔哳唢唣唏唑唧唪啧喏喵啉啭啁啕唿啐唼唷啖啵啶啷唳唰啜喋嗒喃喱喹喈喁喟啾嗖喑啻嗟喽喾喔喙嗪嗷嗉嘟嗑嗫嗬嗔嗦嗝嗄嗯嗥嗲嗳嗌嗍嗨嗵嗤辔嘞嘈嘌嘁嘤嘣嗾嘀嘧嘭噘嘹噗嘬噍噢噙噜噌噔嚆噤噱噫噻噼嚅嚓嚯囔囗囝囡囵囫囹囿圄圊圉圜帏帙帔帑帱帻帼帷幄幔幛幞幡岌屺岍岐岖岈岘岙岑岚岜岵岢岽岬岫岱岣峁岷峄峒峤峋峥崂崃崧崦崮崤崞崆崛嵘崾崴崽嵬嵛嵯嵝嵫嵋嵊嵩嵴嶂嶙嶝豳嶷巅彳彷徂徇徉後徕徙徜徨徭徵徼衢彡犭犰犴犷犸狃狁狎狍狒狨狯狩狲狴狷猁狳猃狺狻猗猓猡猊猞猝猕猢猹猥猬猸猱獐獍獗獠獬獯獾舛夥飧夤夂饣饧饨饩饪饫饬饴饷饽馀馄馇馊馍馐馑馓馔馕庀庑庋庖庥庠庹庵庾庳赓廒廑廛廨廪膺忄忉忖忏怃忮怄忡忤忾怅怆忪忭忸怙怵怦怛怏怍怩怫怊怿怡恸恹恻恺恂恪恽悖悚悭悝悃悒悌悛惬悻悱惝惘惆惚悴愠愦愕愣惴愀愎愫慊慵憬憔憧憷懔懵忝隳闩闫闱闳闵闶闼闾阃阄阆阈阊阋阌阍阏阒阕阖阗阙阚丬爿戕氵汔汜汊沣沅沐沔沌汨汩汴汶沆沩泐泔沭泷泸泱泗沲泠泖泺泫泮沱泓泯泾洹洧洌浃浈洇洄洙洎洫浍洮洵洚浏浒浔洳涑浯涞涠浞涓涔浜浠浼浣渚淇淅淞渎涿淠渑淦淝淙渖涫渌涮渫湮湎湫溲湟溆湓湔渲渥湄滟溱溘滠漭滢溥溧溽溻溷滗溴滏溏滂溟潢潆潇漤漕滹漯漶潋潴漪漉漩澉澍澌潸潲潼潺濑濉澧澹澶濂濡濮濞濠濯瀚瀣瀛瀹瀵灏灞宀宄宕宓宥宸甯骞搴寤寮褰寰蹇謇辶迓迕迥迮迤迩迦迳迨逅逄逋逦逑逍逖逡逵逶逭逯遄遑遒遐遨遘遢遛暹遴遽邂邈邃邋彐彗彖彘尻咫屐屙孱屣屦羼弪弩弭艴弼鬻屮妁妃妍妩妪妣妗姊妫妞妤姒妲妯姗妾娅娆姝娈姣姘姹娌娉娲娴娑娣娓婀婧婊婕娼婢婵胬媪媛婷婺媾嫫媲嫒嫔媸嫠嫣嫱嫖嫦嫘嫜嬉嬗嬖嬲嬷孀尕尜孚孥孳孑孓孢驵驷驸驺驿驽骀骁骅骈骊骐骒骓骖骘骛骜骝骟骠骢骣骥骧纟纡纣纥纨纩纭纰纾绀绁绂绉绋绌绐绔绗绛绠绡绨绫绮绯绱绲缍绶绺绻绾缁缂缃缇缈缋缌缏缑缒缗缙缜缛缟缡缢缣缤缥缦缧缪缫缬缭缯缰缱缲缳缵幺畿巛甾邕玎玑玮玢玟珏珂珑玷玳珀珉珈珥珙顼琊珩珧珞玺珲琏琪瑛琦琥琨琰琮琬琛琚瑁瑜瑗瑕瑙瑷瑭瑾璜璎璀璁璇璋璞璨璩璐璧瓒璺韪韫韬杌杓杞杈杩枥枇杪杳枘枧杵枨枞枭枋杷杼柰栉柘栊柩枰栌柙枵柚枳柝栀柃枸柢栎柁柽栲栳桠桡桎桢桄桤梃栝桕桦桁桧桀栾桊桉栩梵梏桴桷梓桫棂楮棼椟椠棹椤棰椋椁楗棣椐楱椹楠楂楝榄楫榀榘楸椴槌榇榈槎榉楦楣楹榛榧榻榫榭槔榱槁槊槟榕槠榍槿樯槭樗樘橥槲橄樾檠橐橛樵檎橹樽樨橘橼檑檐檩檗檫猷獒殁殂殇殄殒殓殍殚殛殡殪轫轭轱轲轳轵轶轸轷轹轺轼轾辁辂辄辇辋辍辎辏辘辚軎戋戗戛戟戢戡戥戤戬臧瓯瓴瓿甏甑甓攴旮旯旰昊昙杲昃昕昀炅曷昝昴昱昶昵耆晟晔晁晏晖晡晗晷暄暌暧暝暾曛曜曦曩贲贳贶贻贽赀赅赆赈赉赇赍赕赙觇觊觋觌觎觏觐觑牮犟牝牦牯牾牿犄犋犍犏犒挈挲掰搿擘耄毪毳毽毵毹氅氇氆氍氕氘氙氚氡氩氤氪氲攵敕敫牍牒牖爰虢刖肟肜肓肼朊肽肱肫肭肴肷胧胨胩胪胛胂胄胙胍胗朐胝胫胱胴胭脍脎胲胼朕脒豚脶脞脬脘脲腈腌腓腴腙腚腱腠腩腼腽腭腧塍媵膈膂膑滕膣膪臌朦臊膻臁膦欤欷欹歃歆歙飑飒飓飕飙飚殳彀毂觳斐齑斓於旆旄旃旌旎旒旖炀炜炖炝炻烀炷炫炱烨烊焐焓焖焯焱煳煜煨煅煲煊煸煺熘熳熵熨熠燠燔燧燹爝爨灬焘煦熹戾戽扃扈扉礻祀祆祉祛祜祓祚祢祗祠祯祧祺禅禊禚禧禳忑忐怼恝恚恧恁恙恣悫愆愍慝憩憝懋懑戆肀聿沓泶淼矶矸砀砉砗砘砑斫砭砜砝砹砺砻砟砼砥砬砣砩硎硭硖硗砦硐硇硌硪碛碓碚碇碜碡碣碲碹碥磔磙磉磬磲礅磴礓礤礞礴龛黹黻黼盱眄眍盹眇眈眚眢眙眭眦眵眸睐睑睇睃睚睨睢睥睿瞍睽瞀瞌瞑瞟瞠瞰瞵瞽町畀畎畋畈畛畲畹疃罘罡罟詈罨罴罱罹羁罾盍盥蠲钅钆钇钋钊钌钍钏钐钔钗钕钚钛钜钣钤钫钪钭钬钯钰钲钴钶钷钸钹钺钼钽钿铄铈铉铊铋铌铍铎铐铑铒铕铖铗铙铘铛铞铟铠铢铤铥铧铨铪铩铫铮铯铳铴铵铷铹铼铽铿锃锂锆锇锉锊锍锎锏锒锓锔锕锖锘锛锝锞锟锢锪锫锩锬锱锲锴锶锷锸锼锾锿镂锵镄镅镆镉镌镎镏镒镓镔镖镗镘镙镛镞镟镝镡镢镤镥镦镧镨镩镪镫镬镯镱镲镳锺矧矬雉秕秭秣秫稆嵇稃稂稞稔稹稷穑黏馥穰皈皎皓皙皤瓞瓠甬鸠鸢鸨鸩鸪鸫鸬鸲鸱鸶鸸鸷鸹鸺鸾鹁鹂鹄鹆鹇鹈鹉鹋鹌鹎鹑鹕鹗鹚鹛鹜鹞鹣鹦鹧鹨鹩鹪鹫鹬鹱鹭鹳疒疔疖疠疝疬疣疳疴疸痄疱疰痃痂痖痍痣痨痦痤痫痧瘃痱痼痿瘐瘀瘅瘌瘗瘊瘥瘘瘕瘙瘛瘼瘢瘠癀瘭瘰瘿瘵癃瘾瘳癍癞癔癜癖癫癯翊竦穸穹窀窆窈窕窦窠窬窨窭窳衤衩衲衽衿袂袢裆袷袼裉裢裎裣裥裱褚裼裨裾裰褡褙褓褛褊褴褫褶襁襦襻疋胥皲皴矜耒耔耖耜耠耢耥耦耧耩耨耱耋耵聃聆聍聒聩聱覃顸颀颃颉颌颍颏颔颚颛颞颟颡颢颥颦虍虔虬虮虿虺虼虻蚨蚍蚋蚬蚝蚧蚣蚪蚓蚩蚶蛄蚵蛎蚰蚺蚱蚯蛉蛏蚴蛩蛱蛲蛭蛳蛐蜓蛞蛴蛟蛘蛑蜃蜇蛸蜈蜊蜍蜉蜣蜻蜞蜥蜮蜚蜾蝈蜴蜱蜩蜷蜿螂蜢蝽蝾蝻蝠蝰蝌蝮螋蝓蝣蝼蝤蝙蝥螓螯螨蟒蟆螈螅螭螗螃螫蟥螬螵螳蟋蟓螽蟑蟀蟊蟛蟪蟠蟮蠖蠓蟾蠊蠛蠡蠹蠼缶罂罄罅舐竺竽笈笃笄笕笊笫笏筇笸笪笙笮笱笠笥笤笳笾笞筘筚筅筵筌筝筠筮筻筢筲筱箐箦箧箸箬箝箨箅箪箜箢箫箴篑篁篌篝篚篥篦篪簌篾篼簏簖簋簟簪簦簸籁籀臾舁舂舄臬衄舡舢舣舭舯舨舫舸舻舳舴舾艄艉艋艏艚艟艨衾袅袈裘裟襞羝羟羧羯羰羲籼敉粑粝粜粞粢粲粼粽糁糇糌糍糈糅糗糨艮暨羿翎翕翥翡翦翩翮翳糸絷綦綮繇纛麸麴赳趄趔趑趱赧赭豇豉酊酐酎酏酤酢酡酰酩酯酽酾酲酴酹醌醅醐醍醑醢醣醪醭醮醯醵醴醺豕鹾趸跫踅蹙蹩趵趿趼趺跄跖跗跚跞跎跏跛跆跬跷跸跣跹跻跤踉跽踔踝踟踬踮踣踯踺蹀踹踵踽踱蹉蹁蹂蹑蹒蹊蹰蹶蹼蹯蹴躅躏躔躐躜躞豸貂貊貅貘貔斛觖觞觚觜觥觫觯訾謦靓雩雳雯霆霁霈霏霎霪霭霰霾龀龃龅龆龇龈龉龊龌黾鼋鼍隹隼隽雎雒瞿雠銎銮鋈錾鍪鏊鎏鐾鑫鱿鲂鲅鲆鲇鲈稣鲋鲎鲐鲑鲒鲔鲕鲚鲛鲞鲟鲠鲡鲢鲣鲥鲦鲧鲨鲩鲫鲭鲮鲰鲱鲲鲳鲴鲵鲶鲷鲺鲻鲼鲽鳄鳅鳆鳇鳊鳋鳌鳍鳎鳏鳐鳓鳔鳕鳗鳘鳙鳜鳝鳟鳢靼鞅鞑鞒鞔鞯鞫鞣鞲鞴骱骰骷鹘骶骺骼髁髀髅髂髋髌髑魅魃魇魉魈魍魑飨餍餮饕饔髟髡髦髯髫髻髭髹鬈鬏鬓鬟鬣麽麾縻麂麇麈麋麒鏖麝麟黛黜黝黠黟黢黩黧黥黪黯鼢鼬鼯鼹鼷鼽鼾齄";
		var qswhSpell = ["a", 0, "ai", 2, "an", 15, "ang", 24, "ao", 27, "ba", 36, "bai", 54, "ban", 62, "bang", 77, "bao", 89, "bei", 106, "ben", 121, "beng", 125, "bi", 131, "bian", 155, "biao", 167, "bie", 171, "bin", 175, "bing", 181, "bo", 190, "bu", 211, "ca", 220, "cai", 221, "can", 232, "cang", 239, "cao", 244, "ce", 249, "ceng", 254, "cha", 256, "chai", 267, "chan", 270, "chang", 280, "chao", 293, "che", 302, "chen", 308, "cheng", 318, "chi", 333, "chong", 349, "chou", 354, "chu", 366, "chuai", 382, "chuan", 383, "chuang", 390, "chui", 396, "chun", 401, "chuo", 408, "ci", 410, "cong", 422, "cou", 428, "cu", 429, "cuan", 433, "cui", 436, "cun", 444, "cuo", 447, "da", 453, "dai", 459, "dan", 471, "dang", 486, "dao", 491, "de", 503, "deng", 506, "di", 513, "dian", 532, "diao", 548, "die", 557, "ding", 564, "diu", 573, "dong", 574, "dou", 584, "du", 591, "duan", 606, "dui", 612, "dun", 616, "duo", 625, "e", 637, "en", 650, "er", 651, "fa", 659, "fan", 667, "fang", 684, "fei", 695, "fen", 707, "feng", 722, "fo", 737, "fou", 738, "fu", 739, "ga", 784, "gai", 786, "gan", 792, "gang", 803, "gao", 812, "ge", 822, "gei", 839, "gen", 840, "geng", 842, "gong", 849, "gou", 864, "gu", 873, "gua", 891, "guai", 897, "guan", 900, "guang", 911, "gui", 914, "gun", 930, "guo", 933, "ha", 939, "hai", 940, "han", 947, "hang", 966, "hao", 969, "he", 978, "hei", 996, "hen", 998, "heng", 1002, "hong", 1007, "hou", 1016, "hu", 1023, "hua", 1041, "huai", 1050, "huan", 1055, "huang", 1069, "hui", 1083, "hun", 1104, "huo", 1110, "ji", 1120, "jia", 1173, "jian", 1190, "jiang", 1230, "jiao", 1243, "jie", 1271, "jin", 1298, "jing", 1318, "jiong", 1343, "jiu", 1345, "ju", 1362, "juan", 1387, "jue", 1394, "jun", 1404, "ka", 1415, "kai", 1419, "kan", 1424, "kang", 1430, "kao", 1437, "ke", 1441, "ken", 1456, "keng", 1460, "kong", 1462, "kou", 1466, "ku", 1470, "kua", 1477, "kuai", 1482, "kuan", 1486, "kuang", 1488, "kui", 1496, "kun", 1507, "kuo", 1511, "la", 1515, "lai", 1522, "lan", 1525, "lang", 1540, "lao", 1547, "le", 1556, "lei", 1558, "leng", 1569, "li", 1572, "lia", 1606, "lian", 1607, "liang", 1621, "liao", 1632, "lie", 1645, "lin", 1650, "ling", 1662, "liu", 1676, "long", 1687, "lou", 1696, "lu", 1702, "lv", 1722, "luan", 1736, "lue", 1742, "lun", 1744, "luo", 1751, "ma", 1763, "mai", 1772, "man", 1778, "mang", 1787, "mao", 1793, "me", 1805, "mei", 1806, "men", 1822, "meng", 1825, "mi", 1833, "mian", 1847, "miao", 1856, "mie", 1864, "min", 1866, "ming", 1872, "miu", 1878, "mo", 1879, "mou", 1896, "mu", 1899, "na", 1914, "nai", 1921, "nan", 1926, "nang", 1929, "nao", 1930, "ne", 1935, "nei", 1936, "nen", 1938, "neng", 1939, "ni", 1940, "nian", 1951, "niang", 1958, "niao", 1960, "nie", 1962, "nin", 1969, "ning", 1970, "niu", 1976, "nong", 1980, "nu", 1984, "nv", 1987, "nuan", 1988, "nue", 1989, "nuo", 1991, "o", 1995, "ou", 1996, "pa", 2003, "pai", 2009, "pan", 2015, "pang", 2023, "pao", 2028, "pei", 2035, "pen", 2044, "peng", 2046, "pi", 2060, "pian", 2077, "piao", 2081, "pie", 2085, "pin", 2087, "ping", 2092, "po", 2101, "pu", 2110, "qi", 2125, "qia", 2161, "qian", 2164, "qiang", 2186, "qiao", 2194, "qie", 2209, "qin", 2214, "qing", 2225, "qiong", 2238, "qiu", 2240, "qu", 2248, "quan", 2261, "que", 2272, "qun", 2280, "ran", 2282, "rang", 2286, "rao", 2291, "re", 2294, "ren", 2296, "reng", 2306, "ri", 2308, "rong", 2309, "rou", 2319, "ru", 2322, "ruan", 2332, "rui", 2334, "run", 2337, "ruo", 2339, "sa", 2341, "sai", 2344, "san", 2348, "sang", 2352, "sao", 2355, "se", 2359, "sen", 2362, "seng", 2363, "sha", 2364, "shai", 2373, "shan", 2375, "shang", 2391, "shao", 2399, "she", 2410, "shen", 2422, "sheng", 2438, "shi", 2449, "shou", 2496, "shu", 2506, "shua", 2539, "shuai", 2541, "shuan", 2545, "shuang", 2547, "shui", 2550, "shun", 2554, "shuo", 2558, "si", 2562, "song", 2578, "sou", 2586, "su", 2589, "suan", 2602, "sui", 2605, "sun", 2616, "suo", 2619, "ta", 2627, "tai", 2636, "tan", 2645, "tang", 2663, "tao", 2676, "te", 2687, "teng", 2688, "ti", 2692, "tian", 2707, "tiao", 2715, "tie", 2720, "ting", 2723, "tong", 2733, "tou", 2746, "tu", 2750, "tuan", 2761, "tui", 2763, "tun", 2769, "tuo", 2772, "wa", 2783, "wai", 2790, "wan", 2792, "wang", 2809, "wei", 2819, "wen", 2852, "weng", 2862, "wo", 2865, "wu", 2874, "xi", 2903, "xia", 2938, "xian", 2951, "xiang", 2977, "xiao", 2997, "xie", 3015, "xin", 3036, "xing", 3046, "xiong", 3061, "xiu", 3068, "xu", 3077, "xuan", 3096, "xue", 3106, "xun", 3112, "ya", 3126, "yan", 3142, "yang", 3175, "yao", 3192, "ye", 3207, "yi", 3222, "yin", 3275, "ying", 3291, "yo", 3309, "yong", 3310, "you", 3325, "yu", 3346, "yuan", 3390, "yue", 3410, "yun", 3420, "za", 3432, "zai", 3435, "zan", 3442, "zang", 3446, "zao", 3449, "ze", 3463, "zei", 3467, "zen", 3468, "zeng", 3469, "zha", 3473, "zhai", 3487, "zhan", 3493, "zhang", 3510, "zhao", 3525, "zhe", 3535, "zhen", 3545, "zheng", 3561, "zhi", 3576, "zhong", 3619, "zhou", 3630, "zhu", 3644, "zhua", 3670, "zhuai", 3672, "zhuan", 3673, "zhuang", 3679, "zhui", 3686, "zhun", 3692, "zhuo", 3694, "zi", 3705, "zong", 3720, "zou", 3727, "zu", 3731, "zuan", 3739, "zui", 3741, "zun", 3745, "zuo", 3747];

		function UrlEncode(str) {
			var i,
			    c,
			    p,
			    q,
			    ret = "",
			    strSpecial = "!\"#$%&'()*+,/:;<=>?@[\]^`{|}~%";
			for (i = 0; i < str.length; i++) {
				if (str.charCodeAt(i) >= 0x4e00) {
					var p = strGB.indexOf(str.charAt(i));
					if (p >= 0) {
						q = p % 94;
						p = (p - q) / 94;
						ret += ("%" + (0xB0 + p).toString(16) + "%" + (0xA1 + q).toString(16)).toUpperCase();
					}
				} else {
					c = str.charAt(i);
					if (c == " ") ret += "+";else if (strSpecial.indexOf(c) != -1) ret += "%" + str.charCodeAt(i).toString(16);else ret += c;
				}
			}
			return ret;
		}
		function getSpell(str, sp) {
			var i,
			    c,
			    t,
			    p,
			    ret = "";
			if (sp == null) sp = "";
			for (i = 0; i < str.length; i++) {
				if (str.charCodeAt(i) >= 0x4e00) {
					p = strGB.indexOf(str.charAt(i));
					if (p > -1 && p < 3755) {
						for (t = qswhSpell.length - 1; t > 0; t = t - 2) {
							if (qswhSpell[t] <= p) break;
						}if (t > 0) ret += qswhSpell[t - 1] + sp;
					}
				} else {
					ret += str.charAt(i);
				}
			}
			return ret.substr(0, ret.length - sp.length);
		}
		function getSpellSzm(str) {
			var i,
			    c,
			    t,
			    p,
			    szm = "";
			for (i = 0; i < str.length; i++) {
				if (str.charCodeAt(i) >= 0x4e00) {
					p = strGB.indexOf(str.charAt(i));
					if (p > -1 && p < 3755) {
						for (t = qswhSpell.length - 1; t > 0; t = t - 2) {
							if (qswhSpell[t] <= p) break;
						}if (t > 0) {
							szm += qswhSpell[t - 1].substring(0, 1);
						}
					}
				} else {
					szm += str.charAt(i);
				}
			}
			return szm;
		}
		$.extend(this, { // 为this对象
			"cmptype": 'gb2312', // 将方法注册为公共方法
			"version": "3.13.0",
			"UrlEncode": UrlEncode,
			"getSpell": getSpell,
			"getSpellSzm": getSpellSzm
		});
	}
	return TaGB2312;
});

/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

(function (factory) {
	if (true) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {
		factory(jQuery);
	}
})(function ($) {

	$.extend(true, window, {
		hotKeyregister: hotKeyregister()
	});

	function hotKeyregister() {
		var all_shortcuts = {};
		function add(shortcut_combination, callback, opt) {
			//Provide a set of default options
			var default_options = {
				'type': 'keydown',
				'propagate': false,
				'disable_in_input': true,
				'target': document,
				'keycode': false
			};
			if (!opt) opt = default_options;else {
				for (var dfo in default_options) {
					if (typeof opt[dfo] == 'undefined') opt[dfo] = default_options[dfo];
				}
			}

			var ele = opt.target;
			if (typeof opt.target == 'string') ele = document.getElementById(opt.target);
			var ths = this;
			shortcut_combination = shortcut_combination.toLowerCase();

			//The function to be called at keypress
			var func = function func(e) {
				e = e || window.event;

				//Find Which key is pressed
				var code;
				if (e.keyCode) code = e.keyCode;else if (e.which) code = e.which;
				var character = String.fromCharCode(code).toLowerCase();

				if (opt['disable_in_input']) {
					//Don't enable shortcut keys in Input, Textarea fields
					var element;
					if (e.target) element = e.target;else if (e.srcElement) element = e.srcElement;
					if (element) {
						if (element.nodeType == 3) element = element.parentNode;

						if (element.tagName == 'INPUT' || element.tagName == 'TEXTAREA') {
							if (e.ctrlKey && "a,z,c,x,y,v".indexOf(character) != -1) {
								//排除默认对文本的操作快捷
								return;
							}
						}
					}
				}

				if (code == 188) character = ","; //If the user presses , when the type is onkeydown
				if (code == 190) character = "."; //If the user presses , when the type is onkeydown

				var keys = shortcut_combination.split("+");
				//Key Pressed - counts the number of valid keypresses - if it is same as the number of keys, the shortcut function is invoked
				var kp = 0;

				//Work around for stupid Shift key bug created by using lowercase - as a result the shift+num combination was broken
				var shift_nums = {
					"`": "~",
					"1": "!",
					"2": "@",
					"3": "#",
					"4": "$",
					"5": "%",
					"6": "^",
					"7": "&",
					"8": "*",
					"9": "(",
					"0": ")",
					"-": "_",
					"=": "+",
					";": ":",
					"'": "\"",
					",": "<",
					".": ">",
					"/": "?",
					"\\": "|"
				};
				//Special Keys - and their codes
				var special_keys = {
					'esc': 27,
					'escape': 27,
					'tab': 9,
					'space': 32,
					'return': 13,
					'enter': 13,
					'backspace': 8,

					'scrolllock': 145,
					'scroll_lock': 145,
					'scroll': 145,
					'capslock': 20,
					'caps_lock': 20,
					'caps': 20,
					'numlock': 144,
					'num_lock': 144,
					'num': 144,

					'pause': 19,
					'break': 19,

					'insert': 45,
					'home': 36,
					'delete': 46,
					'end': 35,

					'pageup': 33,
					'page_up': 33,
					'pu': 33,

					'pagedown': 34,
					'page_down': 34,
					'pd': 34,

					'left': 37,
					'up': 38,
					'right': 39,
					'down': 40,

					'f1': 112,
					'f2': 113,
					'f3': 114,
					'f4': 115,
					'f5': 116,
					'f6': 117,
					'f7': 118,
					'f8': 119,
					'f9': 120,
					'f10': 121,
					'f11': 122,
					'f12': 123
				};

				var modifiers = {
					shift: { wanted: false, pressed: false },
					ctrl: { wanted: false, pressed: false },
					alt: { wanted: false, pressed: false },
					meta: { wanted: false, pressed: false //Meta is Mac specific
					} };

				if (e.ctrlKey) modifiers.ctrl.pressed = true;
				if (e.shiftKey) modifiers.shift.pressed = true;
				if (e.altKey) modifiers.alt.pressed = true;
				if (e.metaKey) modifiers.meta.pressed = true;

				for (var i = 0, k; k = keys[i], i < keys.length; i++) {
					//Modifiers
					if (k == 'ctrl' || k == 'control') {
						kp++;
						modifiers.ctrl.wanted = true;
					} else if (k == 'shift') {
						kp++;
						modifiers.shift.wanted = true;
					} else if (k == 'alt') {
						kp++;
						modifiers.alt.wanted = true;
					} else if (k == 'meta') {
						kp++;
						modifiers.meta.wanted = true;
					} else if (k.length > 1) {
						//If it is a special key
						if (special_keys[k] == code) kp++;
					} else if (opt['keycode']) {
						if (opt['keycode'] == code) kp++;
					} else {
						//The special keys did not match
						if (character == k) kp++;else {
							if (shift_nums[character] && e.shiftKey) {
								//Stupid Shift key bug created by using lowercase
								character = shift_nums[character];
								if (character == k) kp++;
							}
						}
					}
				}

				if (kp == keys.length && modifiers.ctrl.pressed == modifiers.ctrl.wanted && modifiers.shift.pressed == modifiers.shift.wanted && modifiers.alt.pressed == modifiers.alt.wanted && modifiers.meta.pressed == modifiers.meta.wanted) {
					if (Base.globvar && !Base.globvar.isSubmitNow) {
						callback(e);
					}
					if (!opt['propagate']) {
						//Stop the event
						//e.cancelBubble is supported by IE - this will kill the bubbling process.
						e.cancelBubble = true;
						e.returnValue = false;

						//e.stopPropagation works in Firefox.
						if (e.stopPropagation) {
							e.stopPropagation();
							e.preventDefault();
						}
						return false;
					}
				}
			};
			all_shortcuts[shortcut_combination] = {
				'callback': func,
				'target': ele,
				'event': opt['type']
			};
			//Attach the function with the event
			if (ele.addEventListener) ele.addEventListener(opt['type'], func, false);else if (ele.attachEvent) ele.attachEvent('on' + opt['type'], func);else ele['on' + opt['type']] = func;
		}

		function remove(shortcut_combination) {
			shortcut_combination = shortcut_combination.toLowerCase();
			var binding = all_shortcuts[shortcut_combination];
			delete all_shortcuts[shortcut_combination];
			if (!binding) return;
			var type = binding['event'];
			var ele = binding['target'];
			var callback = binding['callback'];
			//liys修改，事件取消顺序与事件绑定不一致
			if (ele.removeEventListener) ele.removeEventListener(type, callback, false);else if (ele.detachEvent) ele.detachEvent('on' + type, callback);else ele['on' + type] = false;
		}

		return {
			"remove": remove,
			"add": add,
			"all_shortcuts": all_shortcuts
		};
	}
});

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

(function (e) {
   true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_FACTORY__ = (e),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : e(jQuery);
})(function (e) {
  function t(t, s) {
    var a,
        n,
        r,
        o = t.nodeName.toLowerCase();return "area" === o ? (a = t.parentNode, n = a.name, t.href && n && "map" === a.nodeName.toLowerCase() ? (r = e("img[usemap='#" + n + "']")[0], !!r && i(r)) : !1) : (/input|select|textarea|button|object/.test(o) ? !t.disabled : "a" === o ? t.href || s : s) && i(t);
  }function i(t) {
    return e.expr.filters.visible(t) && !e(t).parents().addBack().filter(function () {
      return "hidden" === e.css(this, "visibility");
    }).length;
  }e.ui = e.ui || {}, e.extend(e.ui, { version: "1.11.1", keyCode: { BACKSPACE: 8, COMMA: 188, DELETE: 46, DOWN: 40, END: 35, ENTER: 13, ESCAPE: 27, HOME: 36, LEFT: 37, PAGE_DOWN: 34, PAGE_UP: 33, PERIOD: 190, RIGHT: 39, SPACE: 32, TAB: 9, UP: 38 } }), e.fn.extend({ scrollParent: function scrollParent(t) {
      var i = this.css("position"),
          s = "absolute" === i,
          a = t ? /(auto|scroll|hidden)/ : /(auto|scroll)/,
          n = this.parents().filter(function () {
        var t = e(this);return s && "static" === t.css("position") ? !1 : a.test(t.css("overflow") + t.css("overflow-y") + t.css("overflow-x"));
      }).eq(0);return "fixed" !== i && n.length ? n : e(this[0].ownerDocument || document);
    }, uniqueId: function () {
      var e = 0;return function () {
        return this.each(function () {
          this.id || (this.id = "ui-id-" + ++e);
        });
      };
    }(), removeUniqueId: function removeUniqueId() {
      return this.each(function () {
        /^ui-id-\d+$/.test(this.id) && e(this).removeAttr("id");
      });
    } }), e.extend(e.expr[":"], { data: e.expr.createPseudo ? e.expr.createPseudo(function (t) {
      return function (i) {
        return !!e.data(i, t);
      };
    }) : function (t, i, s) {
      return !!e.data(t, s[3]);
    }, focusable: function focusable(i) {
      return t(i, !isNaN(e.attr(i, "tabindex")));
    }, tabbable: function tabbable(i) {
      var s = e.attr(i, "tabindex"),
          a = isNaN(s);return (a || s >= 0) && t(i, !a);
    } }), e("<a>").outerWidth(1).jquery || e.each(["Width", "Height"], function (t, i) {
    function s(t, i, s, n) {
      return e.each(a, function () {
        i -= parseFloat(e.css(t, "padding" + this)) || 0, s && (i -= parseFloat(e.css(t, "border" + this + "Width")) || 0), n && (i -= parseFloat(e.css(t, "margin" + this)) || 0);
      }), i;
    }var a = "Width" === i ? ["Left", "Right"] : ["Top", "Bottom"],
        n = i.toLowerCase(),
        r = { innerWidth: e.fn.innerWidth, innerHeight: e.fn.innerHeight, outerWidth: e.fn.outerWidth, outerHeight: e.fn.outerHeight };e.fn["inner" + i] = function (t) {
      return void 0 === t ? r["inner" + i].call(this) : this.each(function () {
        e(this).css(n, s(this, t) + "px");
      });
    }, e.fn["outer" + i] = function (t, a) {
      return "number" != typeof t ? r["outer" + i].call(this, t) : this.each(function () {
        e(this).css(n, s(this, t, !0, a) + "px");
      });
    };
  }), e.fn.addBack || (e.fn.addBack = function (e) {
    return this.add(null == e ? this.prevObject : this.prevObject.filter(e));
  }), e("<a>").data("a-b", "a").removeData("a-b").data("a-b") && (e.fn.removeData = function (t) {
    return function (i) {
      return arguments.length ? t.call(this, e.camelCase(i)) : t.call(this);
    };
  }(e.fn.removeData)), e.ui.ie = !!/msie [\w.]+/.exec(navigator.userAgent.toLowerCase()), e.fn.extend({ focus: function (t) {
      return function (i, s) {
        return "number" == typeof i ? this.each(function () {
          var t = this;setTimeout(function () {
            e(t).focus(), s && s.call(t);
          }, i);
        }) : t.apply(this, arguments);
      };
    }(e.fn.focus), disableSelection: function () {
      var e = "onselectstart" in document.createElement("div") ? "selectstart" : "mousedown";return function () {
        return this.bind(e + ".ui-disableSelection", function (e) {
          e.preventDefault();
        });
      };
    }(), enableSelection: function enableSelection() {
      return this.unbind(".ui-disableSelection");
    }, zIndex: function zIndex(t) {
      if (void 0 !== t) return this.css("zIndex", t);if (this.length) for (var i, s, a = e(this[0]); a.length && a[0] !== document;) {
        if (i = a.css("position"), ("absolute" === i || "relative" === i || "fixed" === i) && (s = parseInt(a.css("zIndex"), 10), !isNaN(s) && 0 !== s)) return s;a = a.parent();
      }return 0;
    } }), e.ui.plugin = { add: function add(t, i, s) {
      var a,
          n = e.ui[t].prototype;for (a in s) {
        n.plugins[a] = n.plugins[a] || [], n.plugins[a].push([i, s[a]]);
      }
    }, call: function call(e, t, i, s) {
      var a,
          n = e.plugins[t];if (n && (s || e.element[0].parentNode && 11 !== e.element[0].parentNode.nodeType)) for (a = 0; n.length > a; a++) {
        e.options[n[a][0]] && n[a][1].apply(e.element, i);
      }
    } };var s = 0,
      a = Array.prototype.slice;e.cleanData = function (t) {
    return function (i) {
      var s, a, n;for (n = 0; null != (a = i[n]); n++) {
        try {
          s = e._data(a, "events"), s && s.remove && e(a).triggerHandler("remove");
        } catch (r) {}
      }t(i);
    };
  }(e.cleanData), e.widget = function (t, i, s) {
    var a,
        n,
        r,
        o,
        h = {},
        l = t.split(".")[0];return t = t.split(".")[1], a = l + "-" + t, s || (s = i, i = e.Widget), e.expr[":"][a.toLowerCase()] = function (t) {
      return !!e.data(t, a);
    }, e[l] = e[l] || {}, n = e[l][t], r = e[l][t] = function (e, t) {
      return this._createWidget ? (arguments.length && this._createWidget(e, t), void 0) : new r(e, t);
    }, e.extend(r, n, { version: s.version, _proto: e.extend({}, s), _childConstructors: [] }), o = new i(), o.options = e.widget.extend({}, o.options), e.each(s, function (t, s) {
      return e.isFunction(s) ? (h[t] = function () {
        var e = function e() {
          return i.prototype[t].apply(this, arguments);
        },
            a = function a(e) {
          return i.prototype[t].apply(this, e);
        };return function () {
          var t,
              i = this._super,
              n = this._superApply;return this._super = e, this._superApply = a, t = s.apply(this, arguments), this._super = i, this._superApply = n, t;
        };
      }(), void 0) : (h[t] = s, void 0);
    }), r.prototype = e.widget.extend(o, { widgetEventPrefix: n ? o.widgetEventPrefix || t : t }, h, { constructor: r, namespace: l, widgetName: t, widgetFullName: a }), n ? (e.each(n._childConstructors, function (t, i) {
      var s = i.prototype;e.widget(s.namespace + "." + s.widgetName, r, i._proto);
    }), delete n._childConstructors) : i._childConstructors.push(r), e.widget.bridge(t, r), r;
  }, e.widget.extend = function (t) {
    for (var i, s, n = a.call(arguments, 1), r = 0, o = n.length; o > r; r++) {
      for (i in n[r]) {
        s = n[r][i], n[r].hasOwnProperty(i) && void 0 !== s && (t[i] = e.isPlainObject(s) ? e.isPlainObject(t[i]) ? e.widget.extend({}, t[i], s) : e.widget.extend({}, s) : s);
      }
    }return t;
  }, e.widget.bridge = function (t, i) {
    var s = i.prototype.widgetFullName || t;e.fn[t] = function (n) {
      var r = "string" == typeof n,
          o = a.call(arguments, 1),
          h = this;return n = !r && o.length ? e.widget.extend.apply(null, [n].concat(o)) : n, r ? this.each(function () {
        var i,
            a = e.data(this, s);return "instance" === n ? (h = a, !1) : a ? e.isFunction(a[n]) && "_" !== n.charAt(0) ? (i = a[n].apply(a, o), i !== a && void 0 !== i ? (h = i && i.jquery ? h.pushStack(i.get()) : i, !1) : void 0) : e.error("no such method '" + n + "' for " + t + " widget instance") : e.error("cannot call methods on " + t + " prior to initialization; " + "attempted to call method '" + n + "'");
      }) : this.each(function () {
        var t = e.data(this, s);t ? (t.option(n || {}), t._init && t._init()) : e.data(this, s, new i(n, this));
      }), h;
    };
  }, e.Widget = function () {}, e.Widget._childConstructors = [], e.Widget.prototype = { widgetName: "widget", widgetEventPrefix: "", defaultElement: "<div>", options: { disabled: !1, create: null }, _createWidget: function _createWidget(t, i) {
      i = e(i || this.defaultElement || this)[0], this.element = e(i), this.uuid = s++, this.eventNamespace = "." + this.widgetName + this.uuid, this.options = e.widget.extend({}, this.options, this._getCreateOptions(), t), this.bindings = e(), this.hoverable = e(), this.focusable = e(), i !== this && (e.data(i, this.widgetFullName, this), this._on(!0, this.element, { remove: function remove(e) {
          e.target === i && this.destroy();
        } }), this.document = e(i.style ? i.ownerDocument : i.document || i), this.window = e(this.document[0].defaultView || this.document[0].parentWindow)), this._create(), this._trigger("create", null, this._getCreateEventData()), this._init();
    }, _getCreateOptions: e.noop, _getCreateEventData: e.noop, _create: e.noop, _init: e.noop, destroy: function destroy() {
      this._destroy(), this.element.unbind(this.eventNamespace).removeData(this.widgetFullName).removeData(e.camelCase(this.widgetFullName)), this.widget().unbind(this.eventNamespace).removeAttr("aria-disabled").removeClass(this.widgetFullName + "-disabled " + "ui-state-disabled"), this.bindings.unbind(this.eventNamespace), this.hoverable.removeClass("ui-state-hover"), this.focusable.removeClass("ui-state-focus");
    }, _destroy: e.noop, widget: function widget() {
      return this.element;
    }, option: function option(t, i) {
      var s,
          a,
          n,
          r = t;if (0 === arguments.length) return e.widget.extend({}, this.options);if ("string" == typeof t) if (r = {}, s = t.split("."), t = s.shift(), s.length) {
        for (a = r[t] = e.widget.extend({}, this.options[t]), n = 0; s.length - 1 > n; n++) {
          a[s[n]] = a[s[n]] || {}, a = a[s[n]];
        }if (t = s.pop(), 1 === arguments.length) return void 0 === a[t] ? null : a[t];a[t] = i;
      } else {
        if (1 === arguments.length) return void 0 === this.options[t] ? null : this.options[t];r[t] = i;
      }return this._setOptions(r), this;
    }, _setOptions: function _setOptions(e) {
      var t;for (t in e) {
        this._setOption(t, e[t]);
      }return this;
    }, _setOption: function _setOption(e, t) {
      return this.options[e] = t, "disabled" === e && (this.widget().toggleClass(this.widgetFullName + "-disabled", !!t), t && (this.hoverable.removeClass("ui-state-hover"), this.focusable.removeClass("ui-state-focus"))), this;
    }, enable: function enable() {
      return this._setOptions({ disabled: !1 });
    }, disable: function disable() {
      return this._setOptions({ disabled: !0 });
    }, _on: function _on(t, i, s) {
      var a,
          n = this;"boolean" != typeof t && (s = i, i = t, t = !1), s ? (i = a = e(i), this.bindings = this.bindings.add(i)) : (s = i, i = this.element, a = this.widget()), e.each(s, function (s, r) {
        function o() {
          return t || n.options.disabled !== !0 && !e(this).hasClass("ui-state-disabled") ? ("string" == typeof r ? n[r] : r).apply(n, arguments) : void 0;
        }"string" != typeof r && (o.guid = r.guid = r.guid || o.guid || e.guid++);var h = s.match(/^([\w:-]*)\s*(.*)$/),
            l = h[1] + n.eventNamespace,
            u = h[2];u ? a.delegate(u, l, o) : i.bind(l, o);
      });
    }, _off: function _off(e, t) {
      t = (t || "").split(" ").join(this.eventNamespace + " ") + this.eventNamespace, e.unbind(t).undelegate(t);
    }, _delay: function _delay(e, t) {
      function i() {
        return ("string" == typeof e ? s[e] : e).apply(s, arguments);
      }var s = this;return setTimeout(i, t || 0);
    }, _hoverable: function _hoverable(t) {
      this.hoverable = this.hoverable.add(t), this._on(t, { mouseenter: function mouseenter(t) {
          e(t.currentTarget).addClass("ui-state-hover");
        }, mouseleave: function mouseleave(t) {
          e(t.currentTarget).removeClass("ui-state-hover");
        } });
    }, _focusable: function _focusable(t) {
      this.focusable = this.focusable.add(t), this._on(t, { focusin: function focusin(t) {
          e(t.currentTarget).addClass("ui-state-focus");
        }, focusout: function focusout(t) {
          e(t.currentTarget).removeClass("ui-state-focus");
        } });
    }, _trigger: function _trigger(t, i, s) {
      var a,
          n,
          r = this.options[t];if (s = s || {}, i = e.Event(i), i.type = (t === this.widgetEventPrefix ? t : this.widgetEventPrefix + t).toLowerCase(), i.target = this.element[0], n = i.originalEvent) for (a in n) {
        a in i || (i[a] = n[a]);
      }return this.element.trigger(i, s), !(e.isFunction(r) && r.apply(this.element[0], [i].concat(s)) === !1 || i.isDefaultPrevented());
    } }, e.each({ show: "fadeIn", hide: "fadeOut" }, function (t, i) {
    e.Widget.prototype["_" + t] = function (s, a, n) {
      "string" == typeof a && (a = { effect: a });var r,
          o = a ? a === !0 || "number" == typeof a ? i : a.effect || i : t;a = a || {}, "number" == typeof a && (a = { duration: a }), r = !e.isEmptyObject(a), a.complete = n, a.delay && s.delay(a.delay), r && e.effects && e.effects.effect[o] ? s[t](a) : o !== t && s[o] ? s[o](a.duration, a.easing, n) : s.queue(function (i) {
        e(this)[t](), n && n.call(s[0]), i();
      });
    };
  }), e.widget;var n = !1;e(document).mouseup(function () {
    n = !1;
  }), e.widget("ui.mouse", { version: "1.11.1", options: { cancel: "input,textarea,button,select,option", distance: 1, delay: 0 }, _mouseInit: function _mouseInit() {
      var t = this;this.element.bind("mousedown." + this.widgetName, function (e) {
        return t._mouseDown(e);
      }).bind("click." + this.widgetName, function (i) {
        return !0 === e.data(i.target, t.widgetName + ".preventClickEvent") ? (e.removeData(i.target, t.widgetName + ".preventClickEvent"), i.stopImmediatePropagation(), !1) : void 0;
      }), this.started = !1;
    }, _mouseDestroy: function _mouseDestroy() {
      this.element.unbind("." + this.widgetName), this._mouseMoveDelegate && this.document.unbind("mousemove." + this.widgetName, this._mouseMoveDelegate).unbind("mouseup." + this.widgetName, this._mouseUpDelegate);
    }, _mouseDown: function _mouseDown(t) {
      if (!n) {
        this._mouseStarted && this._mouseUp(t), this._mouseDownEvent = t;var i = this,
            s = 1 === t.which,
            a = "string" == typeof this.options.cancel && t.target.nodeName ? e(t.target).closest(this.options.cancel).length : !1;return s && !a && this._mouseCapture(t) ? (this.mouseDelayMet = !this.options.delay, this.mouseDelayMet || (this._mouseDelayTimer = setTimeout(function () {
          i.mouseDelayMet = !0;
        }, this.options.delay)), this._mouseDistanceMet(t) && this._mouseDelayMet(t) && (this._mouseStarted = this._mouseStart(t) !== !1, !this._mouseStarted) ? (t.preventDefault(), !0) : (!0 === e.data(t.target, this.widgetName + ".preventClickEvent") && e.removeData(t.target, this.widgetName + ".preventClickEvent"), this._mouseMoveDelegate = function (e) {
          return i._mouseMove(e);
        }, this._mouseUpDelegate = function (e) {
          return i._mouseUp(e);
        }, this.document.bind("mousemove." + this.widgetName, this._mouseMoveDelegate).bind("mouseup." + this.widgetName, this._mouseUpDelegate), t.preventDefault(), n = !0, !0)) : !0;
      }
    }, _mouseMove: function _mouseMove(t) {
      return e.ui.ie && (!document.documentMode || 9 > document.documentMode) && !t.button ? this._mouseUp(t) : t.which ? this._mouseStarted ? (this._mouseDrag(t), t.preventDefault()) : (this._mouseDistanceMet(t) && this._mouseDelayMet(t) && (this._mouseStarted = this._mouseStart(this._mouseDownEvent, t) !== !1, this._mouseStarted ? this._mouseDrag(t) : this._mouseUp(t)), !this._mouseStarted) : this._mouseUp(t);
    }, _mouseUp: function _mouseUp(t) {
      return this.document.unbind("mousemove." + this.widgetName, this._mouseMoveDelegate).unbind("mouseup." + this.widgetName, this._mouseUpDelegate), this._mouseStarted && (this._mouseStarted = !1, t.target === this._mouseDownEvent.target && e.data(t.target, this.widgetName + ".preventClickEvent", !0), this._mouseStop(t)), n = !1, !1;
    }, _mouseDistanceMet: function _mouseDistanceMet(e) {
      return Math.max(Math.abs(this._mouseDownEvent.pageX - e.pageX), Math.abs(this._mouseDownEvent.pageY - e.pageY)) >= this.options.distance;
    }, _mouseDelayMet: function _mouseDelayMet() {
      return this.mouseDelayMet;
    }, _mouseStart: function _mouseStart() {}, _mouseDrag: function _mouseDrag() {}, _mouseStop: function _mouseStop() {}, _mouseCapture: function _mouseCapture() {
      return !0;
    } }), e.widget("ui.sortable", e.ui.mouse, { version: "1.11.1", widgetEventPrefix: "sort", ready: !1, options: { appendTo: "parent", axis: !1, connectWith: !1, containment: !1, cursor: "auto", cursorAt: !1, dropOnEmpty: !0, forcePlaceholderSize: !1, forceHelperSize: !1, grid: !1, handle: !1, helper: "original", items: "> *", opacity: !1, placeholder: !1, revert: !1, scroll: !0, scrollSensitivity: 20, scrollSpeed: 20, scope: "default", tolerance: "intersect", zIndex: 1e3, activate: null, beforeStop: null, change: null, deactivate: null, out: null, over: null, receive: null, remove: null, sort: null, start: null, stop: null, update: null }, _isOverAxis: function _isOverAxis(e, t, i) {
      return e >= t && t + i > e;
    }, _isFloating: function _isFloating(e) {
      return (/left|right/.test(e.css("float")) || /inline|table-cell/.test(e.css("display"))
      );
    }, _create: function _create() {
      var e = this.options;this.containerCache = {}, this.element.addClass("ui-sortable"), this.refresh(), this.floating = this.items.length ? "x" === e.axis || this._isFloating(this.items[0].item) : !1, this.offset = this.element.offset(), this._mouseInit(), this._setHandleClassName(), this.ready = !0;
    }, _setOption: function _setOption(e, t) {
      this._super(e, t), "handle" === e && this._setHandleClassName();
    }, _setHandleClassName: function _setHandleClassName() {
      this.element.find(".ui-sortable-handle").removeClass("ui-sortable-handle"), e.each(this.items, function () {
        (this.instance.options.handle ? this.item.find(this.instance.options.handle) : this.item).addClass("ui-sortable-handle");
      });
    }, _destroy: function _destroy() {
      this.element.removeClass("ui-sortable ui-sortable-disabled").find(".ui-sortable-handle").removeClass("ui-sortable-handle"), this._mouseDestroy();for (var e = this.items.length - 1; e >= 0; e--) {
        this.items[e].item.removeData(this.widgetName + "-item");
      }return this;
    }, _mouseCapture: function _mouseCapture(t, i) {
      var s = null,
          a = !1,
          n = this;return this.reverting ? !1 : this.options.disabled || "static" === this.options.type ? !1 : (this._refreshItems(t), e(t.target).parents().each(function () {
        return e.data(this, n.widgetName + "-item") === n ? (s = e(this), !1) : void 0;
      }), e.data(t.target, n.widgetName + "-item") === n && (s = e(t.target)), s ? !this.options.handle || i || (e(this.options.handle, s).find("*").addBack().each(function () {
        this === t.target && (a = !0);
      }), a) ? (this.currentItem = s, this._removeCurrentsFromItems(), !0) : !1 : !1);
    }, _mouseStart: function _mouseStart(t, i, s) {
      var a,
          n,
          r = this.options;if (this.currentContainer = this, this.refreshPositions(), this.helper = this._createHelper(t), this._cacheHelperProportions(), this._cacheMargins(), this.scrollParent = this.helper.scrollParent(), this.offset = this.currentItem.offset(), this.offset = { top: this.offset.top - this.margins.top, left: this.offset.left - this.margins.left }, e.extend(this.offset, { click: { left: t.pageX - this.offset.left, top: t.pageY - this.offset.top }, parent: this._getParentOffset(), relative: this._getRelativeOffset() }), this.helper.css("position", "absolute"), this.cssPosition = this.helper.css("position"), this.originalPosition = this._generatePosition(t), this.originalPageX = t.pageX, this.originalPageY = t.pageY, r.cursorAt && this._adjustOffsetFromHelper(r.cursorAt), this.domPosition = { prev: this.currentItem.prev()[0], parent: this.currentItem.parent()[0] }, this.helper[0] !== this.currentItem[0] && this.currentItem.hide(), this._createPlaceholder(), r.containment && this._setContainment(), r.cursor && "auto" !== r.cursor && (n = this.document.find("body"), this.storedCursor = n.css("cursor"), n.css("cursor", r.cursor), this.storedStylesheet = e("<style>*{ cursor: " + r.cursor + " !important; }</style>").appendTo(n)), r.opacity && (this.helper.css("opacity") && (this._storedOpacity = this.helper.css("opacity")), this.helper.css("opacity", r.opacity)), r.zIndex && (this.helper.css("zIndex") && (this._storedZIndex = this.helper.css("zIndex")), this.helper.css("zIndex", r.zIndex)), this.scrollParent[0] !== document && "HTML" !== this.scrollParent[0].tagName && (this.overflowOffset = this.scrollParent.offset()), this._trigger("start", t, this._uiHash()), this._preserveHelperProportions || this._cacheHelperProportions(), !s) for (a = this.containers.length - 1; a >= 0; a--) {
        this.containers[a]._trigger("activate", t, this._uiHash(this));
      }return e.ui.ddmanager && (e.ui.ddmanager.current = this), e.ui.ddmanager && !r.dropBehaviour && e.ui.ddmanager.prepareOffsets(this, t), this.dragging = !0, this.helper.addClass("ui-sortable-helper"), this._mouseDrag(t), !0;
    }, _mouseDrag: function _mouseDrag(t) {
      var i,
          s,
          a,
          n,
          r = this.options,
          o = !1;for (this.position = this._generatePosition(t), this.positionAbs = this._convertPositionTo("absolute"), this.lastPositionAbs || (this.lastPositionAbs = this.positionAbs), this.options.scroll && (this.scrollParent[0] !== document && "HTML" !== this.scrollParent[0].tagName ? (this.overflowOffset.top + this.scrollParent[0].offsetHeight - t.pageY < r.scrollSensitivity ? this.scrollParent[0].scrollTop = o = this.scrollParent[0].scrollTop + r.scrollSpeed : t.pageY - this.overflowOffset.top < r.scrollSensitivity && (this.scrollParent[0].scrollTop = o = this.scrollParent[0].scrollTop - r.scrollSpeed), this.overflowOffset.left + this.scrollParent[0].offsetWidth - t.pageX < r.scrollSensitivity ? this.scrollParent[0].scrollLeft = o = this.scrollParent[0].scrollLeft + r.scrollSpeed : t.pageX - this.overflowOffset.left < r.scrollSensitivity && (this.scrollParent[0].scrollLeft = o = this.scrollParent[0].scrollLeft - r.scrollSpeed)) : (t.pageY - e(document).scrollTop() < r.scrollSensitivity ? o = e(document).scrollTop(e(document).scrollTop() - r.scrollSpeed) : e(window).height() - (t.pageY - e(document).scrollTop()) < r.scrollSensitivity && (o = e(document).scrollTop(e(document).scrollTop() + r.scrollSpeed)), t.pageX - e(document).scrollLeft() < r.scrollSensitivity ? o = e(document).scrollLeft(e(document).scrollLeft() - r.scrollSpeed) : e(window).width() - (t.pageX - e(document).scrollLeft()) < r.scrollSensitivity && (o = e(document).scrollLeft(e(document).scrollLeft() + r.scrollSpeed))), o !== !1 && e.ui.ddmanager && !r.dropBehaviour && e.ui.ddmanager.prepareOffsets(this, t)), this.positionAbs = this._convertPositionTo("absolute"), this.options.axis && "y" === this.options.axis || (this.helper[0].style.left = this.position.left + "px"), this.options.axis && "x" === this.options.axis || (this.helper[0].style.top = this.position.top + "px"), i = this.items.length - 1; i >= 0; i--) {
        if (s = this.items[i], a = s.item[0], n = this._intersectsWithPointer(s), n && s.instance === this.currentContainer && a !== this.currentItem[0] && this.placeholder[1 === n ? "next" : "prev"]()[0] !== a && !e.contains(this.placeholder[0], a) && ("semi-dynamic" === this.options.type ? !e.contains(this.element[0], a) : !0)) {
          if (this.direction = 1 === n ? "down" : "up", "pointer" !== this.options.tolerance && !this._intersectsWithSides(s)) break;this._rearrange(t, s), this._trigger("change", t, this._uiHash());break;
        }
      }return this._contactContainers(t), e.ui.ddmanager && e.ui.ddmanager.drag(this, t), this._trigger("sort", t, this._uiHash()), this.lastPositionAbs = this.positionAbs, !1;
    }, _mouseStop: function _mouseStop(t, i) {
      if (t) {
        if (e.ui.ddmanager && !this.options.dropBehaviour && e.ui.ddmanager.drop(this, t), this.options.revert) {
          var s = this,
              a = this.placeholder.offset(),
              n = this.options.axis,
              r = {};n && "x" !== n || (r.left = a.left - this.offset.parent.left - this.margins.left + (this.offsetParent[0] === document.body ? 0 : this.offsetParent[0].scrollLeft)), n && "y" !== n || (r.top = a.top - this.offset.parent.top - this.margins.top + (this.offsetParent[0] === document.body ? 0 : this.offsetParent[0].scrollTop)), this.reverting = !0, e(this.helper).animate(r, parseInt(this.options.revert, 10) || 500, function () {
            s._clear(t);
          });
        } else this._clear(t, i);return !1;
      }
    }, cancel: function cancel() {
      if (this.dragging) {
        this._mouseUp({ target: null }), "original" === this.options.helper ? this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper") : this.currentItem.show();for (var t = this.containers.length - 1; t >= 0; t--) {
          this.containers[t]._trigger("deactivate", null, this._uiHash(this)), this.containers[t].containerCache.over && (this.containers[t]._trigger("out", null, this._uiHash(this)), this.containers[t].containerCache.over = 0);
        }
      }return this.placeholder && (this.placeholder[0].parentNode && this.placeholder[0].parentNode.removeChild(this.placeholder[0]), "original" !== this.options.helper && this.helper && this.helper[0].parentNode && this.helper.remove(), e.extend(this, { helper: null, dragging: !1, reverting: !1, _noFinalSort: null }), this.domPosition.prev ? e(this.domPosition.prev).after(this.currentItem) : e(this.domPosition.parent).prepend(this.currentItem)), this;
    }, serialize: function serialize(t) {
      var i = this._getItemsAsjQuery(t && t.connected),
          s = [];return t = t || {}, e(i).each(function () {
        var i = (e(t.item || this).attr(t.attribute || "id") || "").match(t.expression || /(.+)[\-=_](.+)/);i && s.push((t.key || i[1] + "[]") + "=" + (t.key && t.expression ? i[1] : i[2]));
      }), !s.length && t.key && s.push(t.key + "="), s.join("&");
    }, toArray: function toArray(t) {
      var i = this._getItemsAsjQuery(t && t.connected),
          s = [];return t = t || {}, i.each(function () {
        s.push(e(t.item || this).attr(t.attribute || "id") || "");
      }), s;
    }, _intersectsWith: function _intersectsWith(e) {
      var t = this.positionAbs.left,
          i = t + this.helperProportions.width,
          s = this.positionAbs.top,
          a = s + this.helperProportions.height,
          n = e.left,
          r = n + e.width,
          o = e.top,
          h = o + e.height,
          l = this.offset.click.top,
          u = this.offset.click.left,
          d = "x" === this.options.axis || s + l > o && h > s + l,
          c = "y" === this.options.axis || t + u > n && r > t + u,
          p = d && c;return "pointer" === this.options.tolerance || this.options.forcePointerForContainers || "pointer" !== this.options.tolerance && this.helperProportions[this.floating ? "width" : "height"] > e[this.floating ? "width" : "height"] ? p : t + this.helperProportions.width / 2 > n && r > i - this.helperProportions.width / 2 && s + this.helperProportions.height / 2 > o && h > a - this.helperProportions.height / 2;
    }, _intersectsWithPointer: function _intersectsWithPointer(e) {
      var t = "x" === this.options.axis || this._isOverAxis(this.positionAbs.top + this.offset.click.top, e.top, e.height),
          i = "y" === this.options.axis || this._isOverAxis(this.positionAbs.left + this.offset.click.left, e.left, e.width),
          s = t && i,
          a = this._getDragVerticalDirection(),
          n = this._getDragHorizontalDirection();return s ? this.floating ? n && "right" === n || "down" === a ? 2 : 1 : a && ("down" === a ? 2 : 1) : !1;
    }, _intersectsWithSides: function _intersectsWithSides(e) {
      var t = this._isOverAxis(this.positionAbs.top + this.offset.click.top, e.top + e.height / 2, e.height),
          i = this._isOverAxis(this.positionAbs.left + this.offset.click.left, e.left + e.width / 2, e.width),
          s = this._getDragVerticalDirection(),
          a = this._getDragHorizontalDirection();return this.floating && a ? "right" === a && i || "left" === a && !i : s && ("down" === s && t || "up" === s && !t);
    }, _getDragVerticalDirection: function _getDragVerticalDirection() {
      var e = this.positionAbs.top - this.lastPositionAbs.top;return 0 !== e && (e > 0 ? "down" : "up");
    }, _getDragHorizontalDirection: function _getDragHorizontalDirection() {
      var e = this.positionAbs.left - this.lastPositionAbs.left;return 0 !== e && (e > 0 ? "right" : "left");
    }, refresh: function refresh(e) {
      return this._refreshItems(e), this._setHandleClassName(), this.refreshPositions(), this;
    }, _connectWith: function _connectWith() {
      var e = this.options;return e.connectWith.constructor === String ? [e.connectWith] : e.connectWith;
    }, _getItemsAsjQuery: function _getItemsAsjQuery(t) {
      function i() {
        o.push(this);
      }var s,
          a,
          n,
          r,
          o = [],
          h = [],
          l = this._connectWith();if (l && t) for (s = l.length - 1; s >= 0; s--) {
        for (n = e(l[s]), a = n.length - 1; a >= 0; a--) {
          r = e.data(n[a], this.widgetFullName), r && r !== this && !r.options.disabled && h.push([e.isFunction(r.options.items) ? r.options.items.call(r.element) : e(r.options.items, r.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), r]);
        }
      }for (h.push([e.isFunction(this.options.items) ? this.options.items.call(this.element, null, { options: this.options, item: this.currentItem }) : e(this.options.items, this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), this]), s = h.length - 1; s >= 0; s--) {
        h[s][0].each(i);
      }return e(o);
    }, _removeCurrentsFromItems: function _removeCurrentsFromItems() {
      var t = this.currentItem.find(":data(" + this.widgetName + "-item)");this.items = e.grep(this.items, function (e) {
        for (var i = 0; t.length > i; i++) {
          if (t[i] === e.item[0]) return !1;
        }return !0;
      });
    }, _refreshItems: function _refreshItems(t) {
      this.items = [], this.containers = [this];var i,
          s,
          a,
          n,
          r,
          o,
          h,
          l,
          u = this.items,
          d = [[e.isFunction(this.options.items) ? this.options.items.call(this.element[0], t, { item: this.currentItem }) : e(this.options.items, this.element), this]],
          c = this._connectWith();if (c && this.ready) for (i = c.length - 1; i >= 0; i--) {
        for (a = e(c[i]), s = a.length - 1; s >= 0; s--) {
          n = e.data(a[s], this.widgetFullName), n && n !== this && !n.options.disabled && (d.push([e.isFunction(n.options.items) ? n.options.items.call(n.element[0], t, { item: this.currentItem }) : e(n.options.items, n.element), n]), this.containers.push(n));
        }
      }for (i = d.length - 1; i >= 0; i--) {
        for (r = d[i][1], o = d[i][0], s = 0, l = o.length; l > s; s++) {
          h = e(o[s]), h.data(this.widgetName + "-item", r), u.push({ item: h, instance: r, width: 0, height: 0, left: 0, top: 0 });
        }
      }
    }, refreshPositions: function refreshPositions(t) {
      this.offsetParent && this.helper && (this.offset.parent = this._getParentOffset());var i, s, a, n;for (i = this.items.length - 1; i >= 0; i--) {
        s = this.items[i], s.instance !== this.currentContainer && this.currentContainer && s.item[0] !== this.currentItem[0] || (a = this.options.toleranceElement ? e(this.options.toleranceElement, s.item) : s.item, t || (s.width = a.outerWidth(), s.height = a.outerHeight()), n = a.offset(), s.left = n.left, s.top = n.top);
      }if (this.options.custom && this.options.custom.refreshContainers) this.options.custom.refreshContainers.call(this);else for (i = this.containers.length - 1; i >= 0; i--) {
        n = this.containers[i].element.offset(), this.containers[i].containerCache.left = n.left, this.containers[i].containerCache.top = n.top, this.containers[i].containerCache.width = this.containers[i].element.outerWidth(), this.containers[i].containerCache.height = this.containers[i].element.outerHeight();
      }return this;
    }, _createPlaceholder: function _createPlaceholder(t) {
      t = t || this;var i,
          s = t.options;s.placeholder && s.placeholder.constructor !== String || (i = s.placeholder, s.placeholder = { element: function element() {
          var s = t.currentItem[0].nodeName.toLowerCase(),
              a = e("<" + s + ">", t.document[0]).addClass(i || t.currentItem[0].className + " ui-sortable-placeholder").removeClass("ui-sortable-helper");return "tr" === s ? t.currentItem.children().each(function () {
            e("<td>&#160;</td>", t.document[0]).attr("colspan", e(this).attr("colspan") || 1).appendTo(a);
          }) : "img" === s && a.attr("src", t.currentItem.attr("src")), i || a.css("visibility", "hidden"), a;
        }, update: function update(e, a) {
          (!i || s.forcePlaceholderSize) && (a.height() || a.height(t.currentItem.innerHeight() - parseInt(t.currentItem.css("paddingTop") || 0, 10) - parseInt(t.currentItem.css("paddingBottom") || 0, 10)), a.width() || a.width(t.currentItem.innerWidth() - parseInt(t.currentItem.css("paddingLeft") || 0, 10) - parseInt(t.currentItem.css("paddingRight") || 0, 10)));
        } }), t.placeholder = e(s.placeholder.element.call(t.element, t.currentItem)), t.currentItem.after(t.placeholder), s.placeholder.update(t, t.placeholder);
    }, _contactContainers: function _contactContainers(t) {
      var i,
          s,
          a,
          n,
          r,
          o,
          h,
          l,
          u,
          d,
          c = null,
          p = null;for (i = this.containers.length - 1; i >= 0; i--) {
        if (!e.contains(this.currentItem[0], this.containers[i].element[0])) if (this._intersectsWith(this.containers[i].containerCache)) {
          if (c && e.contains(this.containers[i].element[0], c.element[0])) continue;c = this.containers[i], p = i;
        } else this.containers[i].containerCache.over && (this.containers[i]._trigger("out", t, this._uiHash(this)), this.containers[i].containerCache.over = 0);
      }if (c) if (1 === this.containers.length) this.containers[p].containerCache.over || (this.containers[p]._trigger("over", t, this._uiHash(this)), this.containers[p].containerCache.over = 1);else {
        for (a = 1e4, n = null, u = c.floating || this._isFloating(this.currentItem), r = u ? "left" : "top", o = u ? "width" : "height", d = u ? "clientX" : "clientY", s = this.items.length - 1; s >= 0; s--) {
          e.contains(this.containers[p].element[0], this.items[s].item[0]) && this.items[s].item[0] !== this.currentItem[0] && (h = this.items[s].item.offset()[r], l = !1, t[d] - h > this.items[s][o] / 2 && (l = !0), a > Math.abs(t[d] - h) && (a = Math.abs(t[d] - h), n = this.items[s], this.direction = l ? "up" : "down"));
        }if (!n && !this.options.dropOnEmpty) return;if (this.currentContainer === this.containers[p]) return;n ? this._rearrange(t, n, null, !0) : this._rearrange(t, null, this.containers[p].element, !0), this._trigger("change", t, this._uiHash()), this.containers[p]._trigger("change", t, this._uiHash(this)), this.currentContainer = this.containers[p], this.options.placeholder.update(this.currentContainer, this.placeholder), this.containers[p]._trigger("over", t, this._uiHash(this)), this.containers[p].containerCache.over = 1;
      }
    }, _createHelper: function _createHelper(t) {
      var i = this.options,
          s = e.isFunction(i.helper) ? e(i.helper.apply(this.element[0], [t, this.currentItem])) : "clone" === i.helper ? this.currentItem.clone() : this.currentItem;return s.parents("body").length || e("parent" !== i.appendTo ? i.appendTo : this.currentItem[0].parentNode)[0].appendChild(s[0]), s[0] === this.currentItem[0] && (this._storedCSS = { width: this.currentItem[0].style.width, height: this.currentItem[0].style.height, position: this.currentItem.css("position"), top: this.currentItem.css("top"), left: this.currentItem.css("left") }), (!s[0].style.width || i.forceHelperSize) && s.width(this.currentItem.width()), (!s[0].style.height || i.forceHelperSize) && s.height(this.currentItem.height()), s;
    }, _adjustOffsetFromHelper: function _adjustOffsetFromHelper(t) {
      "string" == typeof t && (t = t.split(" ")), e.isArray(t) && (t = { left: +t[0], top: +t[1] || 0 }), "left" in t && (this.offset.click.left = t.left + this.margins.left), "right" in t && (this.offset.click.left = this.helperProportions.width - t.right + this.margins.left), "top" in t && (this.offset.click.top = t.top + this.margins.top), "bottom" in t && (this.offset.click.top = this.helperProportions.height - t.bottom + this.margins.top);
    }, _getParentOffset: function _getParentOffset() {
      this.offsetParent = this.helper.offsetParent();var t = this.offsetParent.offset();return "absolute" === this.cssPosition && this.scrollParent[0] !== document && e.contains(this.scrollParent[0], this.offsetParent[0]) && (t.left += this.scrollParent.scrollLeft(), t.top += this.scrollParent.scrollTop()), (this.offsetParent[0] === document.body || this.offsetParent[0].tagName && "html" === this.offsetParent[0].tagName.toLowerCase() && e.ui.ie) && (t = { top: 0, left: 0 }), { top: t.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0), left: t.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0) };
    }, _getRelativeOffset: function _getRelativeOffset() {
      if ("relative" === this.cssPosition) {
        var e = this.currentItem.position();return { top: e.top - (parseInt(this.helper.css("top"), 10) || 0) + this.scrollParent.scrollTop(), left: e.left - (parseInt(this.helper.css("left"), 10) || 0) + this.scrollParent.scrollLeft() };
      }return { top: 0, left: 0 };
    }, _cacheMargins: function _cacheMargins() {
      this.margins = { left: parseInt(this.currentItem.css("marginLeft"), 10) || 0, top: parseInt(this.currentItem.css("marginTop"), 10) || 0 };
    }, _cacheHelperProportions: function _cacheHelperProportions() {
      this.helperProportions = { width: this.helper.outerWidth(), height: this.helper.outerHeight() };
    }, _setContainment: function _setContainment() {
      var t,
          i,
          s,
          a = this.options;"parent" === a.containment && (a.containment = this.helper[0].parentNode), ("document" === a.containment || "window" === a.containment) && (this.containment = [0 - this.offset.relative.left - this.offset.parent.left, 0 - this.offset.relative.top - this.offset.parent.top, e("document" === a.containment ? document : window).width() - this.helperProportions.width - this.margins.left, (e("document" === a.containment ? document : window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top]), /^(document|window|parent)$/.test(a.containment) || (t = e(a.containment)[0], i = e(a.containment).offset(), s = "hidden" !== e(t).css("overflow"), this.containment = [i.left + (parseInt(e(t).css("borderLeftWidth"), 10) || 0) + (parseInt(e(t).css("paddingLeft"), 10) || 0) - this.margins.left, i.top + (parseInt(e(t).css("borderTopWidth"), 10) || 0) + (parseInt(e(t).css("paddingTop"), 10) || 0) - this.margins.top, i.left + (s ? Math.max(t.scrollWidth, t.offsetWidth) : t.offsetWidth) - (parseInt(e(t).css("borderLeftWidth"), 10) || 0) - (parseInt(e(t).css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left, i.top + (s ? Math.max(t.scrollHeight, t.offsetHeight) : t.offsetHeight) - (parseInt(e(t).css("borderTopWidth"), 10) || 0) - (parseInt(e(t).css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top]);
    }, _convertPositionTo: function _convertPositionTo(t, i) {
      i || (i = this.position);var s = "absolute" === t ? 1 : -1,
          a = "absolute" !== this.cssPosition || this.scrollParent[0] !== document && e.contains(this.scrollParent[0], this.offsetParent[0]) ? this.scrollParent : this.offsetParent,
          n = /(html|body)/i.test(a[0].tagName);return { top: i.top + this.offset.relative.top * s + this.offset.parent.top * s - ("fixed" === this.cssPosition ? -this.scrollParent.scrollTop() : n ? 0 : a.scrollTop()) * s, left: i.left + this.offset.relative.left * s + this.offset.parent.left * s - ("fixed" === this.cssPosition ? -this.scrollParent.scrollLeft() : n ? 0 : a.scrollLeft()) * s };
    }, _generatePosition: function _generatePosition(t) {
      var i,
          s,
          a = this.options,
          n = t.pageX,
          r = t.pageY,
          o = "absolute" !== this.cssPosition || this.scrollParent[0] !== document && e.contains(this.scrollParent[0], this.offsetParent[0]) ? this.scrollParent : this.offsetParent,
          h = /(html|body)/i.test(o[0].tagName);return "relative" !== this.cssPosition || this.scrollParent[0] !== document && this.scrollParent[0] !== this.offsetParent[0] || (this.offset.relative = this._getRelativeOffset()), this.originalPosition && (this.containment && (t.pageX - this.offset.click.left < this.containment[0] && (n = this.containment[0] + this.offset.click.left), t.pageY - this.offset.click.top < this.containment[1] && (r = this.containment[1] + this.offset.click.top), t.pageX - this.offset.click.left > this.containment[2] && (n = this.containment[2] + this.offset.click.left), t.pageY - this.offset.click.top > this.containment[3] && (r = this.containment[3] + this.offset.click.top)), a.grid && (i = this.originalPageY + Math.round((r - this.originalPageY) / a.grid[1]) * a.grid[1], r = this.containment ? i - this.offset.click.top >= this.containment[1] && i - this.offset.click.top <= this.containment[3] ? i : i - this.offset.click.top >= this.containment[1] ? i - a.grid[1] : i + a.grid[1] : i, s = this.originalPageX + Math.round((n - this.originalPageX) / a.grid[0]) * a.grid[0], n = this.containment ? s - this.offset.click.left >= this.containment[0] && s - this.offset.click.left <= this.containment[2] ? s : s - this.offset.click.left >= this.containment[0] ? s - a.grid[0] : s + a.grid[0] : s)), { top: r - this.offset.click.top - this.offset.relative.top - this.offset.parent.top + ("fixed" === this.cssPosition ? -this.scrollParent.scrollTop() : h ? 0 : o.scrollTop()), left: n - this.offset.click.left - this.offset.relative.left - this.offset.parent.left + ("fixed" === this.cssPosition ? -this.scrollParent.scrollLeft() : h ? 0 : o.scrollLeft()) };
    }, _rearrange: function _rearrange(e, t, i, s) {
      i ? i[0].appendChild(this.placeholder[0]) : t.item[0].parentNode.insertBefore(this.placeholder[0], "down" === this.direction ? t.item[0] : t.item[0].nextSibling), this.counter = this.counter ? ++this.counter : 1;var a = this.counter;this._delay(function () {
        a === this.counter && this.refreshPositions(!s);
      });
    }, _clear: function _clear(e, t) {
      function i(e, t, i) {
        return function (s) {
          i._trigger(e, s, t._uiHash(t));
        };
      }this.reverting = !1;var s,
          a = [];if (!this._noFinalSort && this.currentItem.parent().length && this.placeholder.before(this.currentItem), this._noFinalSort = null, this.helper[0] === this.currentItem[0]) {
        for (s in this._storedCSS) {
          ("auto" === this._storedCSS[s] || "static" === this._storedCSS[s]) && (this._storedCSS[s] = "");
        }this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper");
      } else this.currentItem.show();for (this.fromOutside && !t && a.push(function (e) {
        this._trigger("receive", e, this._uiHash(this.fromOutside));
      }), !this.fromOutside && this.domPosition.prev === this.currentItem.prev().not(".ui-sortable-helper")[0] && this.domPosition.parent === this.currentItem.parent()[0] || t || a.push(function (e) {
        this._trigger("update", e, this._uiHash());
      }), this !== this.currentContainer && (t || (a.push(function (e) {
        this._trigger("remove", e, this._uiHash());
      }), a.push(function (e) {
        return function (t) {
          e._trigger("receive", t, this._uiHash(this));
        };
      }.call(this, this.currentContainer)), a.push(function (e) {
        return function (t) {
          e._trigger("update", t, this._uiHash(this));
        };
      }.call(this, this.currentContainer)))), s = this.containers.length - 1; s >= 0; s--) {
        t || a.push(i("deactivate", this, this.containers[s])), this.containers[s].containerCache.over && (a.push(i("out", this, this.containers[s])), this.containers[s].containerCache.over = 0);
      }if (this.storedCursor && (this.document.find("body").css("cursor", this.storedCursor), this.storedStylesheet.remove()), this._storedOpacity && this.helper.css("opacity", this._storedOpacity), this._storedZIndex && this.helper.css("zIndex", "auto" === this._storedZIndex ? "" : this._storedZIndex), this.dragging = !1, this.cancelHelperRemoval) {
        if (!t) {
          for (this._trigger("beforeStop", e, this._uiHash()), s = 0; a.length > s; s++) {
            a[s].call(this, e);
          }this._trigger("stop", e, this._uiHash());
        }return this.fromOutside = !1, !1;
      }if (t || this._trigger("beforeStop", e, this._uiHash()), this.placeholder[0].parentNode.removeChild(this.placeholder[0]), this.helper[0] !== this.currentItem[0] && this.helper.remove(), this.helper = null, !t) {
        for (s = 0; a.length > s; s++) {
          a[s].call(this, e);
        }this._trigger("stop", e, this._uiHash());
      }return this.fromOutside = !1, !0;
    }, _trigger: function _trigger() {
      e.Widget.prototype._trigger.apply(this, arguments) === !1 && this.cancel();
    }, _uiHash: function _uiHash(t) {
      var i = t || this;return { helper: i.helper, placeholder: i.placeholder || e([]), position: i.position, originalPosition: i.originalPosition, offset: i.positionAbs, item: i.currentItem, sender: t ? t.element : null };
    } });
});

/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * 页面还原方法,调用方式为Base.xxx();
 * @module Base
 * @class pageReview
 * @static
 */
(function (factory) {
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {
        factory(jQuery);
    }
})(function ($) {
    $.extend(true, window, {
        Base: core()
    });

    function core() {
        /**
         * 显示经办历史现场
         * @method showHandleStatus
         * @param {String} userid 用户id
         * @param {String} time 时间
         * @param {String} optionid 经办
         */
        function showHandleStatus(userid, time, optionid) {
            var param = {};
            param["dto['id']"] = optionid;
            //			param["dto['yae092']"] = userid;
            //			param["dto['date']"] = time;
            //i18n:经办现场回顾
            top.Base.openWindow("optionid", Base.I18n.getLangText("taface.module.pagereview.titlename"), Base.globvar.basePath + '/system/handleOldDataManagerAction!doExecutePage.do', param, top.innerWidth, top.innerHeight, null, null, true);
        }

        /**
         * 获取经办现场信息
         * 20161020 update by yanglq
         * @method getHandleStatus
         * @param {String} jspUrl jsp路径如/sysapp/user.jsp
         */
        function getHandleStatus(callBackFn) {
            var _data = getPageData();

            var disInputs = [];
            var old = document._oldValueObj || [];
            for (var i = 0; i < old.length; i++) {
                var $input = $("#" + old[i].__id);
                var inputId = old[i].__id;
                if ($input.val() != old[i]["ovDto['" + inputId + "']"]) {
                    if ($input.attr("type") == "hidden" && $input.next().next().hasClass("ffb-input")) {
                        $input = $input.next().next();
                        var $oldValueInput = $input.clone();
                        disInputs.push($oldValueInput);
                        $oldValueInput.attr("id", "_showOld" + inputId).addClass("_showOld").attr("value", old[i]["ovDto['" + inputId + "__desc']"]).css("cssText", "background:transparent!important;color:red!important").css({ "position": "absolute", "top": "-12px", "left": "8px", "font-style": "italic", "display": "none" }).insertBefore($input);
                    } else {
                        var $oldValueInput = $input.clone();
                        disInputs.push($oldValueInput);
                        $oldValueInput.attr("id", "_showOld" + inputId).addClass("_showOld").attr("value", old[i]["ovDto['" + inputId + "']"]).css("cssText", "background:transparent!important;color:red!important").css({ "position": "absolute", "top": "-12px", "left": "8px", "font-style": "italic", "display": "none" }).insertBefore($input);
                    }
                }
            }

            var _context = getPageHtml();
            /*if($("#_data").length>0){
             $("#_data").val(_data);
             $("#_context").val(_context);
             }else{
             var $t = $("<textarea id=\"_data\" name=\"dto[\'_data\']\"></textarea>");
             $t.appendTo($('body'));
             $t.hide();
             $t.val(_data);
             var $jsp = $("<textarea id=\"_context\" name=\"dto[\'_context\']\"></textarea>");
             $jsp.appendTo($('body'));
             $jsp.hide();
             $jsp.val(_context);
            	 }*/

            callBackFn = callBackFn || function () {};

            for (var i = 0; i < disInputs.length; i++) {
                disInputs[i].remove();
            }
            var returnJSON = {
                "dto['_data']": _data,
                "dto['_context']": _context
            };

            return returnJSON;
            //不再通过回调保存界面，同业务数据一起提交界面还原数据_data、_context
            /*
             var returnJSON = {
             "dto['_data']": _data,
             "dto['_context']": _context
             };
            	 return returnJSON;*/
            //Base.submit('_data,_context',Base.globvar.basePath + '/sysapp/pageReviewAction!savePageReview.do', null ,null,null,callBackFn);
            //$t.remove();
            //$jsp.remove();
        }
        /**
         * 保存页面数据（旧值）
         */
        function saveOldPageData() {
            var _data = getPageData();
            if ($("#_data_old").length > 0) {
                $("#_data_old").val(_data);
            } else {
                var $t = $("<textarea id=\"_data_old\" name=\"dto[\'data_old\']\"></textarea>");
                $t.appendTo($('body'));
                $t.hide();
                $t.val(_data);
            }
        }
        /**
         * 获取页面数据（新值）
         */
        function getPageData() {
            var data = {};
            var fields = [];
            var lists = [];
            var keys = Ta.core.TaUIManager.keys();
            for (var i = 0; i < keys.length; i++) {
                if ($("#" + keys[i]).parents().hasClass("pageremove")) {
                    continue;
                }
                var obj = Base.getObj(keys[i]);
                if (obj.cmptype == 'datagrid') {
                    var grid = {};
                    grid.id = keys[i];
                    var sdata = Base.getGridSelectedRows(keys[i]);
                    var allDataGrid = Base.getGridData(keys[i]);
                    var allData = new Array(allDataGrid.length);
                    var columns = obj.getColumns();
                    var options = obj.getOptions();
                    var jsFunction = {};
                    var jsIcon = {};
                    var align = {};
                    var dataAlign = {};
                    var totals = {};
                    for (var da = 0; da < allData.length; da++) {
                        allData[da] = $.extend({}, allDataGrid[da]);
                        for (var ci = 0; ci < columns.length; ci++) {
                            if (columns[ci].formatter != null && columns[ci].id != "_checkbox_selector") {
                                allData[da][columns[ci].id] = columns[ci].formatter(da, ci, allData[da][columns[ci].id], columns[ci], allData[da]);
                            }
                            if (columns[ci].click) {
                                var clickname = columns[ci].click.name || columns[ci].click.toString().match(/function\s*([^(]*)\(/)[1];
                                if (clickname && clickname.slice(-"_pr".length) == "_pr") {
                                    jsFunction[columns[ci].id + "_fnname"] = clickname;
                                    jsFunction[columns[ci].id] = columns[ci].click.toString().replace(/[\b\f\n\r\t]/g, '');
                                }
                            }
                            if (columns[ci].icon) {
                                jsIcon[columns[ci].id] = columns[ci].icon;
                            }
                            if (columns[ci].align) {
                                align[columns[ci].id] = columns[ci].align;
                            }
                            if (columns[ci].dataAlign) {
                                dataAlign[columns[ci].id] = columns[ci].dataAlign;
                            }
                            if (columns[ci].totals) {
                                totals[columns[ci].id] = columns[ci].totals;
                            }
                        }
                    }
                    grid['selData'] = sdata;
                    grid['allData'] = allData;
                    grid['jsFunction'] = jsFunction;
                    grid['jsIcon'] = jsIcon;
                    grid['align'] = align;
                    grid['dataAlign'] = dataAlign;
                    grid['totals'] = totals;
                    grid['forceFitColumns'] = options.forceFitColumns;
                    grid['groupingBy'] = options.groupingBy;
                    lists.push(grid);
                }
            }
            data.lists = lists;
            $("input,textarea[id!='_data_old'][id!='_data'][id!='_context']").each(function () {
                if ($(this).attr("id") != null) {
                    if ($(this).attr('readonly')) {
                        var singleData = {};
                        singleData.id = $(this).attr('id');

                        if ($(this).attr('type') == 'checkbox' && $(this).attr('disabled')) {
                            singleData.value = '';
                        } else {
                            singleData.value = Base.getValue(singleData.id);
                        }
                        singleData.status = 'readonly';
                        fields.push(singleData);
                    } else if ($(this).attr('disabled')) {
                        var singleData1 = {};
                        singleData1.id = $(this).attr('id');
                        singleData1.value = Base.getValue(singleData1.id);
                        singleData1.status = 'disabled';
                        fields.push(singleData1);
                    } else {
                        var singleData2 = {};
                        singleData2.id = $(this).attr('id');
                        singleData2.value = Base.getValue(singleData2.id);
                        singleData2.status = '';
                        fields.push(singleData2);
                    }
                }
            });
            data.fields = fields;
            return Ta.util.obj2string(data);
        }
        function getPageHtml() {
            var $doc = $(document.documentElement).clone();
            $doc.find("body").find("script").remove();
            $doc.find(".pageremove").remove();
            var html = $doc[0].outerHTML;
            html = html.replace("$(\"body\").taLayout();", "");
            html = html.replace("main.js", "ta-core-all/TaJsUtil.js");
            var reg = /<script[^<|^>]*src="[^<|^>]*require.js"[^<|^>]*>[^<|^>]*<\/script>/g;
            html = html.replace(reg, "");
            return html;
        }
        /**
         *提交请求的方法<br>
         *与submit用法相同，唯一区别是该方法会隐式提交当前页面的状态<br>
         */
        function submitWithPage(submitIds, url, parameter, onSubmit, autoValidate, _succCallback, _failCallback, isIncludeNullFields, token) {
            var param = getHandleStatus(null);
            $.extend(true, param, parameter);
            Base.submit(submitIds, url, param, onSubmit, autoValidate, _succCallback, _failCallback, isIncludeNullFields, token);
        }

        /**
         *重构Grid组件，同时包含码值的重构
         *
         *@methodrebuildGridFromHtmlWithCollection
         *@author yanglq
         *@date2016/04/29
         */
        function rebuildGridFromHtmlWithCollection() {
            var grid = $(".datagrid");
            grid.each(function () {
                var gridId = $(this).attr("id");
                var columns = [];
                var options = {};
                options.collectionsDataArrayObject = {};

                //从页面解析码值，用于码值的重构，add by licc on 20160428
                var getCollections = function getCollections(gridId) {
                    var scriptStr = $("#" + gridId).find("script").html();
                    if (scriptStr) {
                        var tempStrArray = scriptStr.match(/var\ *data\ *\=\ *[\[]{1}[^\[]+\]\;[\n|\ |\t]*data\.column\ *\=\ *\"[a-z|0-9]+\"\;/gi);
                        var collections = {};
                        var tempStr = "";
                        for (var i = 0, len = tempStrArray.length; i < len; i++) {
                            tempStr = tempStrArray[i];
                            eval(tempStr);
                            collections[data.column] = data;
                        }
                        return collections;
                    }
                };
                var collections = getCollections(gridId);

                $(this).find(".slick-header-column").each(function () {
                    var column = {};
                    column.id = column.field = $(this).attr("field");
                    if (column.id == "__no") {
                        options.haveSn = "true";
                    } else if (column.id == "_checkbox_selector") {
                        options.selectType = "checkbox";
                    } else {
                        column.name = $(this).attr("title");
                        var width = $(this).css("width");
                        width = width.replace("px", "");
                        column.width = Number(width);
                        if (collections) {
                            //如果有码值，则进行码值的重构，add by licc on 20160428
                            if (collections[column.field]) {
                                column.formatter = function (row, cell, value, columnDef, dataContext) {
                                    var reData = value;
                                    var data = collections[column.field];
                                    data.column = column.field;
                                    options.collectionsDataArrayObject[column.field] = data;
                                    for (var i = 0; i < data.length; i++) {
                                        if (data[i].id == value) {
                                            reData = data[i].name;
                                        }
                                    }
                                    return reData ? reData : "";
                                };
                            }
                        }
                        columns.push(column);
                    }
                });
                options.onChecked = function () {
                    returnfalse;
                };
                var $p = $("#" + gridId).parent();
                var height = $p.height();
                $("#" + gridId).remove();
                $("<div/>").attr("id", gridId).css("height", height + "px").addClass("datagrid").attr("fit", "true").appendTo($p);
                var grid_ = new Slick.Grid("#" + gridId, [], columns, options);
                Ta.core.TaUIManager.register(gridId, grid_);
            });
        }
        /**
         * 页面还原重构表格 yanglq
         */
        function rebuildGridFromHtml_pr(gridId, jsFunctionStr, jsIcon, align, dataAlign, forceFitColumns, totals, groupingBy) {
            var grid = $("#" + gridId);
            var jsFunction = jsFunctionStr;
            var columns = [];
            var options = {};
            grid.find(".slick-header-column").each(function () {
                var column = {};
                column.id = column.field = $(this).attr("field");
                if (column.id == "__no") {
                    options.haveSn = "true";
                } else if (column.id == "_checkbox_selector") {
                    options.selectType = "checkbox";
                } else {
                    column.name = $(this).attr("title");
                    var width = $(this).css("width");
                    width = width.replace("px", "");
                    column.width = Number(width);
                    columns.push(column);
                }
                if (jsFunction[column.id]) {
                    //                    eval(jsFunction[column.id]);
                    //                    column.click = eval(jsFunction[column.id+"_fnname"]);
                    column.click = new Function('return ' + jsFunction[column.id])();
                }
                if (jsIcon[column.id]) {
                    column.icon = jsIcon[column.id];
                }
                if (align[column.id]) {
                    column.align = align[column.id];
                }
                if (dataAlign[column.id]) {
                    column.dataAlign = dataAlign[column.id];
                }
                if (totals[column.id]) {
                    column.totals = totals[column.id];
                    column.groupTotalsFormatter = function (totals, columnDef) {
                        var text = "合计:";
                        return text + totals.sum[columnDef.field];
                    };
                }
            });
            options.onChecked = function () {
                return false;
            };
            options.forceFitColumns = forceFitColumns;
            if (groupingBy == 'false') {
                options.groupingBy = false;
            } else {
                options.groupingBy = groupingBy;
            }
            var $t = $("#" + gridId);
            var $p = $t.parent();
            var th = $p.height() > $t.height() ? $p.height() : $t.height();
            $t.remove();
            $("<div/>").attr("id", gridId).css("height", th + "px").addClass("datagrid").attr("fit", "true").appendTo($p);
            var grid_ = new Slick.Grid("#" + gridId, [], columns, options);
            Ta.core.TaUIManager.register(gridId, grid_);
        }
        /**
              * 页面还原重构表格选择行 yanglq
              */
        function setGridSelectRows_pr(gridId, data) {
            var rows = eval(data);
            var rowRanges = [];
            for (var i = 0; i < rows.length; i++) {
                rowRanges[i] = rows[i]._row_;
            }
            Base.getObj(gridId).setSelectedRows(rowRanges);
        }

        /**
              * 页面还原重构tabs yanglq
              */
        function reBuildTabFromHtml_pr(tab) {
            var $tabcon = $(".tabs-container");
            if (tab != null) $tabcon = tab;
            $tabcon.each(function () {
                var divs = [];
                var layoutCfg = {};
                var titles = [];
                var $tabs = $(this);
                var display = [];
                var selected;
                $tabs.children(".tabs-header:first").find("a span").each(function () {
                    titles.push($(this).html());
                });
                $tabs.children(".tabs-header:first").find(".tabs-wrap:first").find(".tabs:first").find("li").each(function () {
                    var $li = $(this);
                    display.push($li.css("display"));
                    if ($li.hasClass("tabs-selected")) {
                        selected = $li.index();
                    }
                });
                $tabs.children(".tabs-panels:first").children("div").each(function () {
                    var tab = {};
                    tab.html = $(this).html();
                    tab.layout = $(this).attr("layout");
                    tab.cols = $(this).attr("cols");
                    divs.push(tab);
                });
                $tabs.html("");
                for (var i = 0; i < titles.length; i++) {
                    var $div = $("<div style='overflow:auto'>").attr("id", $tabs[0].id + "_tab_pr_" + i).attr("title", titles[i]).attr("layout", divs[i].layout ? divs[i].layout : "column").html(divs[i].html).appendTo($tabs);
                    if (i == 0) $div.attr("selected", "true");
                }
                $tabs.removeAttr("onSelect");
                $tabs.removeAttr("onClose");
                $tabs.removeAttr("onLoad");
                $tabs.tauitabs(layoutCfg || {});

                var dis = 0;
                $tabs.children(".tabs-header:first").find(".tabs-wrap:first").find(".tabs:first").find("li").each(function () {
                    $(this).css("display", display[dis++]);
                });

                if ($tabcon.find(".tabs-container").length > 0) reBuildTabFromHtml_pr($tabcon.find(".tabs-container"));
                Base.activeTab($tabs[0].id + "_tab_pr_" + selected);
            });
        }
        /**
         * 设置静态区域 yanglq
         */
        function setPageReadOnly(ids, isReadOnly) {
            if (isReadOnly == null) isReadOnly = true;
            Base._setReadOnly(ids, isReadOnly);
            if (typeof ids == "string") ids = ids.split(",");
            if (isReadOnly) {
                for (var idc in ids) {
                    var $obj = $("#" + ids[idc]);
                    $obj.find(".datagrid_s").remove();
                    if ($obj.hasClass("tabs-container")) {
                        $obj.attr("isInit", "0");
                    }
                    $obj.find(".tabs-container").attr("isInit", "0");
                    $obj.find("button").each(function () {
                        Base.setDisabled(this.id);
                    });
                    $obj.find(".ta-datagrid").each(function () {
                        var data = Base.getGridData(this.id);
                        var sdata = Base.getGridSelectedRows(this.id);

                        var gridId = this.id;
                        var columns = [];
                        var options = {};
                        var columns_old = Base.getObj(gridId).getColumns();
                        for (var i = 0; i < columns_old.length; i++) {
                            var column = {};
                            column.id = column.field = columns_old[i].id;
                            if (column.id == "__no") {
                                options.haveSn = "true";
                            } else if (column.id == "_checkbox_selector") {
                                options.selectType = "checkbox";
                            } else {
                                column.name = columns_old[i].name;
                                column.width = columns_old[i].width;
                                column.dataAlign = columns_old[i].dataAlign;
                                //码值
                                if (columns_old[i].formatter && columns_old[i].formatter.name.indexOf("fn") != 0) {
                                    column.formatter = columns_old[i].formatter;
                                    column.editordata = columns_old[i].editordata;
                                }
                                columns.push(column);
                            }
                        }
                        options.onChecked = function () {
                            return false;
                        };
                        var $p = $("#" + gridId).parent();
                        var height = $("#" + gridId).height() || $p.height();
                        $("#" + gridId).css("display", "none");
                        var gridId_s = gridId + "_s";
                        $("<div/>").attr("id", gridId_s).css("height", height + "px").addClass("datagrid datagrid_s").attr("fit", "true").appendTo($p);
                        var grid_ = new Slick.Grid("#" + gridId_s, [], columns, options);
                        Ta.core.TaUIManager.register(gridId_s, grid_);

                        var $grid = $("#" + gridId_s);
                        $grid.find(".slick-cell-checkbox").eq(0).empty();
                        $grid.find(".slick-header").unbind();
                        Base._setGridData(gridId_s, data);
                        grid_.setCheckedRows(sdata);
                        Ta.core.TaUIManager.unregister(gridId_s);
                    });
                }
            } else {
                Base.setEnable(ids);
                for (var idc in ids) {
                    var $obj = $("#" + ids[idc]);
                    if ($obj.hasClass("tabs-container")) {
                        $obj.attr("isInit", "1");
                    }
                    $obj.find(".tabs-container").attr("isInit", "1");
                    $obj.find(".ta-datagrid").css("display", "block");
                    $obj.find(".datagrid_s").remove();
                }
            }
        }

        return {
            getHandleStatus: getHandleStatus,
            saveOldPageData: saveOldPageData,
            submitWithPage: submitWithPage,
            rebuildGridFromHtmlWithCollection: rebuildGridFromHtmlWithCollection,
            reBuildTabFromHtml_pr: reBuildTabFromHtml_pr,
            rebuildGridFromHtml_pr: rebuildGridFromHtml_pr,
            setGridSelectRows_pr: setGridSelectRows_pr
        };
    }
});

/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * 润乾报表打印导出方法,调用方式为Base.xxx(),调用这些方法需要保证报表是使用了Ta+3框架的润乾报表模板管理功能将报表上传到数据库中;
 * @module Base
 * @class print
 * @static
 */

(function (factory) {
	if (true) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(5), __webpack_require__(214)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {
		factory(jQuery);
	}
})(function ($) {
	$.extend(true, window, {
		Base: core()
	});
	function core() {

		return {
			exportAsExcel: exportAsExcel,
			exportAsPdf: exportAsPdf,
			exportAsWord: exportAsWord,
			exportAsText: exportAsText,
			print: print,
			directPrint: directPrint,
			flashPrint: flashPrint,
			openReport: openReport,
			doPrint: doPrint,
			printForTablePage: printForTablePage,
			printSinglePdf: printSinglePdf,
			printBatchPdf: printBatchPdf,
			printImagePdf: printImagePdf,
			printOfficePdf: printOfficePdf
			/**
    * 导出报表为Excel
    * <br/>var options = {};
    * <br/>options.saveAsName = "门诊医疗卫生申请表"; 设置导出文件名
    * <br/>options.paged = false;  设置分页，默认不分页（分页1、不分页0）
    * <br/>options.formula = false;  设置是否导出公式，默认为否（是1、否0）
    * <br/>options.excelFormat = "2003";  设置导出格式为2003（2003、2007、OpenXML）
    * <br/>options.ratio = 80; 设置显示比例
    * @method exportAsExcel
    * @param {String} raqfilename 报表标识(即文件名，无后缀)
    * @param {Array} args 参数数组
    * <br/>例如:var args = [];args[0]= "arg1=YAE133";args[1]= "arg3=0";
    * @param {Object} options 其他设置
    *
    */
		};function exportAsExcel(raqfilename, args, options) {
			var defaultType = {
				action: "3",
				raqid: raqfilename
			};
			Base.doPrint(defaultType, args, options);
		}
		/**
   * 导出报表为PDF
   * <br/>var options = {};
   * <br/>options.paged = false; 设置分页，默认分页（分页1、不分页0）
   * <br/>options.expStyle = "graph"; 设置导出文字默认为图形方式（图形graph，文本text）
   * <br/>options.saveAsName = "数据报表1521";
   * <br/>Base.exportAsPdf("DATA1521",args);
   * @method exportAsPdf
   * @param {String} raqfilename 报表标识(即文件名，无后缀)
   * @param {Array} args 参数数组
   * <br/>例如:var args = []; args[0]= "arg1=YAE133"; args[1]= "arg3=0";
   * @param {Object} options 其他设置
   *
   */
		function exportAsPdf(raqfilename, args, options) {
			var defaultType = {
				action: "6",
				raqid: raqfilename
			};
			Base.doPrint(defaultType, args, options);
		}

		/**
   * 导出报表为Word
   * <br/>var options = {};
   * <br/>options.columns = 2; 报表分栏数
   * <br/>options.saveAsName = "数据报表1521";
   * <br/>Base.exportAsWord("DATA1521",args);
   * @method exportAsWord
   * @param {String} raqfilename 报表标识(即文件名，无后缀)
   * @param {Array} args 参数数组
   * <br/>例如:var args = [];args[0]= "arg1=YAE133";args[1]= "arg3=0";
   * @param {Object} options 其他参数
   *
   */
		function exportAsWord(raqfilename, args, options) {
			var defaultType = {
				action: "7",
				raqid: raqfilename
			};
			Base.doPrint(defaultType, args, options);
		}
		/**
   * 导出报表为Txt
   * <br/>var options = {};
   * <br/>options.saveAsName = "数据报表1521";
   * <br/>Base.exportAsText("DATA1521",args);
   * @method exportAsText
   * @param {String} raqfilename 报表标识(即文件名，无后缀)
   * @param {Array} args 参数数组
   * <br/>例如:var args = [];args[0]= "arg1=YAE133";args[1]= "arg3=0";
   * @param {Object} options 其他参数
   *
   */
		function exportAsText(raqfilename, args, options) {
			var defaultType = {
				action: "18",
				raqid: raqfilename
			};
			Base.doPrint(defaultType, args, options);
		}

		/**
   * 预览打印
   * @method print
   * @param {String} raqfilename 报表标识(即文件名，无后缀)
   * @param {Array} args 参数数组
   * <br/>例如: var args = [];args[0]= "arg1=YAE133"; args[1]= "arg3=0";
   * @param {Object} options 保存打印设置（savePrintSetup）,大数据分页传输打印（serverPagedPrint）
   * 和分栏（columns），如options.savePrintSetup=true
   */
		function print(raqfilename, args, options) {
			var defaultType = {
				action: "2",
				raqid: raqfilename
			};
			Base.doPrint(defaultType, args, options);
		}

		/**
   * 直接打印
   * @method directPrint
   * @param {String} raqfilename 报表标识(即文件名，无后缀)
   * @param {Array} args 参数数组
   * <br/>例如:var args = []; args[0]= "arg1=YAE133";args[1]= "arg3=0";
   * @param {Object} options 保存打印（savePrintSetup）,大数据分页传输打印（serverPagedPrint），选择打印机（needSelectPrinter）、打印机名称（printerName）
   * 和分栏（columns），如options.savePrintSetup=yes
   */
		function directPrint(raqfilename, args, options) {
			var defaultType = {
				action: "30",
				raqid: raqfilename
			};
			Base.doPrint(defaultType, args, options);
		}

		/**
   * flash打印
   * @method flashPrint
   * @param {String} raqfilename 报表标识(即文件名，无后缀)
   * @param {Array} args 参数数组
   * <br/>例如:var args = []; args[0]= "arg1=YAE133";args[1]= "arg3=0";
   */
		function flashPrint(raqfilename, args) {
			var argStr = "";
			for (var i in args) {
				if (i > 0) {
					argStr += ";" + args[i];
				} else {
					argStr += args[i];
				}
			}
			Base.submit(null, Base.globvar.contextPath + "/runqian/queryReportAction!flashPrint.do?raq=" + raqfilename + "&paramString=" + argStr, null, null, false, function (data) {
				var cacheId = data.fieldData.cacheId;
				if (null != cacheId) {
					var o = {};
					o.ctxPath = Base.globvar.contextPath;
					o.name = "report1";
					o.reportFileName = raqfilename;
					o.cacheId = cacheId;
					rq_flashPrint(o);
				}
			});
		}

		/**
   * 打开预览报表窗口
   * @method openReport
   * @param {String} raqfilename 报表标识(即文件名，无后缀)
   * @param {Object} options 窗口的宽高，如：options.width=800,options.height=600
   * @param {String} args 参数串key1=value1;key2=value2;key3=...
   */
		function openReport(raqfilename, options, args) {
			if (!args) args = "";
			var option = {
				name: Base.I18n.getLangText("taface.module.print.reportname"), //i18n:报表
				width: 800,
				height: 600
			};
			option = $.extend({}, option, options);
			Base.openWindow(raqfilename, option.name, Base.globvar.contextPath + "/runqian/queryReportAction.do?raq=" + raqfilename + "&raqParam=" + args, null, option.width, option.height, null, null, true);
		}

		/**
   * 打印导出方法的入口，不要直接调用
   * @method doPrint
   * @private
   * @param {Object} type
   * @param {Array} args
   * @param {Object} options
   */
		function doPrint(type, args, options) {
			//pengwei新增：判断报表名称不为空
			if (!type.raqid) {
				Base.alert(Base.I18n.getLangText("taface.module.print.checkInfo.reportnameisnull"), "error"); //i18n:报表名称不能为空!
				return;
			}
			var defaultType = {
				action: "30",
				raqid: ""
			};
			defaultType = $.extend({}, defaultType, type);
			var defaultOptions = {
				saveAsName: defaultType.raqid, //导出文件名称，默认去raq名称
				columns: 0, //是否分栏，必须和raq模板里设置的一致
				savePrintSetup: "no", //是否保存打印设置，默认不开启
				serverPagedPrint: "no", //大数据分页传输打印，默认不开启
				paged: false, //导出是否分页
				formula: false, //excel导出是否导出表达式
				excelFormat: "2003", //excle导出格式，有2003、2007、OpenXML可选
				ratio: 80, //导出显示比例，默认80%
				expStyle: "graph", //pdf导出格式，默认图片格式，text为文本格式
				needSelectPrinter: "no", //直接打印是否显示打印机选择界面，默认不显示
				printerName: "no" //直接打印指定打印机，不设置则使用默认打印机

			};
			var actionType = defaultType.action;
			//导出pdf默认分页
			if (actionType == "6") {
				defaultOptions.paged = true;
			}
			defaultOptions = $.extend({}, defaultOptions, options);
			defaultOptions.paged = defaultOptions.paged ? "1" : "0";
			defaultOptions.formula = defaultOptions.formula ? "1" : "0";
			var raqidStr = "&raq=" + defaultType.raqid;
			var argStr = "";
			if (args != undefined) {
				argStr += "&paramString=";
			}
			for (var i in args) {
				if (i > 0) {
					argStr += ";" + args[i];
				} else {
					argStr += args[i];
				}
			}
			if ($("body").find("#printIframe").size() == 0) {
				$('<iframe id="printIframe" width="50" height="50" style="position:absolute;left:-100px;top:-100px"></iframe>"').appendTo("body");
			}
			$("#printIframe").attr("src", Base.globvar.contextPath + "/runqian/queryReportAction!printReport.do?action=" + defaultType.action + raqidStr + argStr + "&saveAsName=" + defaultOptions.saveAsName + "&paged=" + defaultOptions.paged + "&formula=" + defaultOptions.formula + "&excelFormat=" + defaultOptions.excelFormat + "&expStyle=" + defaultOptions.expStyle + "&ratio=" + defaultOptions.ratio + "&columns=" + defaultOptions.columns + "&savePrintSetup=" + defaultOptions.savePrintSetup + "&serverPagedPrint=" + defaultOptions.serverPagedPrint + "&needSelectPrinter=" + defaultOptions.needSelectPrinter + "&printerName=" + defaultOptions.printerName);
		}

		/**
   * web打印
   * @method printForTablePage
   * @param {String} id
   * @param {Object} options
   */
		function printForTablePage(id, options) {
			$("#" + id).printForTablePage(options);
		}

		/**
   * pdf打印
   * @param {Object} reportObj 润乾报表对象
   * 					包含：reportId(润乾模板标识),reportData(报表数据)两个属性
   * @param {String} openType 打开方式 "1"为新开一个标签页 "2"为打开一个弹出窗口，"3"为用pdfjs方式打开一个标签，"4"为pdfjs方式打开一个弹出窗口，默认为"1"
  * 								     "1","2"在ie浏览器下不支持
   */
		function printSinglePdf(reportObj, openType) {
			var reportJson = JSON.stringify(reportObj);
			openType = openType != null ? openType : "1";
			switch (openType) {
				case "1":
					window.open(Base.globvar.basePath + "runqian/printPdfAction!singlePrint.do?dto.reportJson=" + encodeURIComponent(reportJson));
					break;
				case "2":
					var param = {
						"dto.reportJson": reportJson
					};
					Base.openWindow("printPdf", "打印窗口", Base.globvar.basePath + "runqian/printPdfAction!singlePrint.do", param, "80%", "80%", null, null, true);
					break;
				case "3":
					//pdfjs方式
					window.open(Base.globvar.facePath + "support/pdfjs/web/viewer.html?isdownLoad=true&isprint=true&targetType=pdf&file=" + Base.globvar.basePath + "runqian/printPdfAction!singlePrint.do?dto.reportJson%3D" + encodeURIComponent(encodeURIComponent(reportJson)));
					break;
				case "4":
					//pdfjs窗口
					Base.openWindow("printPdf", "打印窗口", Base.globvar.facePath + "support/pdfjs/web/viewer.html?isdownLoad=true&isprint=true&targetType=pdf&file=" + Base.globvar.basePath + "runqian/printPdfAction!singlePrint.do?dto.reportJson%3D" + encodeURIComponent(encodeURIComponent(reportJson)), null, "80%", "80%", null, null, true);
					break;

			}
		}

		/**
   * pdf批量合并打印
   * @param reportArry 报表对象数组
   * @param openType 打开方式 "1"为新开一个标签页 "2"为打开一个弹出窗口，"3"为用pdfjs方式打开一个标签，"4"为pdfjs方式打开一个弹出窗口，默认为"1"
  * 							"1","2"在ie浏览器下不支持
   */
		function printBatchPdf(reportArry, openType) {
			var reportJson = JSON.stringify(reportArry);
			openType = openType != null ? openType : "1";
			switch (openType) {
				case "1":
					window.open(Base.globvar.basePath + "runqian/printPdfAction!batchPrint.do?dto.reportJson=" + encodeURIComponent(reportJson));
					break;
				case "2":
					var param = {
						"dto.reportJson": reportJson
					};
					Base.openWindow("printPdf", "打印窗口", Base.globvar.basePath + "runqian/printPdfAction!batchPrint.do", param, "80%", "80%", null, null, true);
					break;
				case "3":
					//pdfjs方式
					window.open(Base.globvar.facePath + "support/pdfjs/web/viewer.html?isdownLoad=true&isprint=true&targetType=pdf&file=" + Base.globvar.basePath + "runqian/printPdfAction!batchPrint.do?dto.reportJson%3D" + encodeURIComponent(encodeURIComponent(reportJson)));
					break;
				case "4":
					//pdfjs弹窗
					Base.openWindow("printPdf", "打印窗口", Base.globvar.facePath + "support/pdfjs/web/viewer.html?isdownLoad=true&isprint=true&targetType=pdf&file=" + Base.globvar.basePath + "runqian/printPdfAction!batchPrint.do?dto.reportJson%3D" + encodeURIComponent(encodeURIComponent(reportJson)), null, "80%", "80%", null, null, true);
					break;
			}
		}

		/**
  * pdf图片打印
   * @param imageUrl 图片路径
   * @param openType 打开方式 "1"为新开一个标签页 "2"为打开一个弹出窗口，"3"为用pdfjs方式打开一个标签，"4"为pdfjs方式打开一个弹出窗口，默认为"1"
  * 							"1","2"在ie浏览器下不支持
   */
		function printImagePdf(imageUrl, openType) {
			openType = openType != null ? openType : "1";
			switch (openType) {
				case "1":
					window.open(Base.globvar.basePath + "runqian/printPdfAction!imagePrint.do?dto.imageUrl=" + imageUrl);
					break;
				case "2":
					var param = {
						"dto.imageUrl": imageUrl
					};
					Base.openWindow("printPdf", "打印窗口", Base.globvar.basePath + "runqian/printPdfAction!imagePrint.do", param, "80%", "80%", null, null, true);
					break;
				case "3":
					//pdfjs方式
					window.open(Base.globvar.facePath + "support/pdfjs/web/viewer.html?isdownLoad=true&isprint=true&targetType=pdf&file=" + Base.globvar.basePath + "runqian/printPdfAction!imagePrint.do?dto.imageUrl%3D" + imageUrl);
					break;
				case "4":
					//pdfjs弹窗
					Base.openWindow("printPdf", "打印窗口", Base.globvar.facePath + "support/pdfjs/web/viewer.html?isdownLoad=true&isprint=true&targetType=pdf&file=" + Base.globvar.basePath + "runqian/printPdfAction!imagePrint.do?dto.imageUrl%3D" + imageUrl, null, "80%", "80%", null, null, true);
					break;
			}
		}

		/**
  * office文档打印
   * @param officeUrl office文件路径
   * @param officeType office类型
   * @param openType 打开方式 "1"为新开一个标签页 "2"为打开一个弹出窗口，"3"为用pdfjs方式打开一个标签，"4"为pdfjs方式打开一个弹出窗口，默认为"1"
  * 							"1","2"在ie浏览器下不支持
   */
		function printOfficePdf(officeUrl, officeType, openType) {
			openType = openType != null ? openType : "1";
			switch (openType) {
				case "1":
					window.open(Base.globvar.basePath + "runqian/printPdfAction!officePrint.do?dto.officeUrl=" + officeUrl + "&dto.officeType=" + officeType);
					break;
				case "2":
					var param = {
						"dto.officeUrl": officeUrl,
						"dto.officeType": officeType
					};
					Base.openWindow("printPdf", "打印窗口", Base.globvar.basePath + "runqian/printPdfAction!officePrint.do", param, "80%", "80%", null, null, true);
					break;
				case "3":
					//pdfjs方式
					window.open(Base.globvar.facePath + "support/pdfjs/web/viewer.html?isdownLoad=true&isprint=true&targetType=pdf&file=" + Base.globvar.basePath + "runqian/printPdfAction!officePrint.do?dto.officeUrl%3D" + officeUrl + "%26dto.officeType%3D" + officeType);
					break;
				case "4":
					//pdfjs弹窗
					Base.openWindow("printPdf", "打印窗口", Base.globvar.facePath + "support/pdfjs/web/viewer.html?isdownLoad=true&isprint=true&targetType=pdf&file=" + Base.globvar.basePath + "runqian/printPdfAction!officePrint.do?dto.officeUrl%3D" + officeUrl + "%26dto.officeType%3D" + officeType, null, "80%", "80%", null, null, true);
					break;
			}
		}
	}
});

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

(function (factory) {
	if (true) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {
		factory(jQuery);
	}
})(function ($) {
	/**
  * initialize the target menu, the function can be invoked only once
  */
	__webpack_require__(222);

	function init(target) {
		$(target).appendTo('body');
		$(target).addClass('menu-top'); // the top menu
		var menus = [];
		adjust($(target));

		for (var i = 0; i < menus.length; i++) {
			var menu = menus[i];
			wrapMenu(menu);
			menu.find('>div.menu-item').each(function () {
				bindMenuItemEvent($(this));
			});

			menu.find('div.menu-item').click(function () {
				// only the sub menu clicked can hide all menus
				if (!this.submenu) {
					hideAll(target);
				}
				return false;
			});
		}

		function adjust(menu) {
			menus.push(menu);
			menu.find('>div').each(function () {
				var item = $(this);
				var submenu = item.find('>div');
				if (submenu.length) {
					submenu.insertAfter(target);
					item[0].submenu = submenu;
					adjust(submenu);
				}
			});
		}

		/**
   * bind menu item event
   */
		function bindMenuItemEvent(item) {
			item.hover(function () {
				// hide other menu
				item.siblings().each(function () {
					if (this.submenu) {
						hideMenu(this.submenu);
					}
					$(this).removeClass('menu-active');
				});

				// show this menu
				item.addClass('menu-active');
				var submenu = item[0].submenu;
				if (submenu) {
					var left = item.offset().left + item.outerWidth() - 2;
					if (left + submenu.outerWidth() > $(window).width()) {
						left = item.offset().left - submenu.outerWidth() + 2;
					}
					showMenu(submenu, {
						left: left,
						top: item.offset().top - 3
					});
				}
			}, function (e) {
				item.removeClass('menu-active');
				var submenu = item[0].submenu;
				if (submenu) {
					if (e.pageX >= parseInt(submenu.css('left'))) {
						item.addClass('menu-active');
					} else {
						hideMenu(submenu);
					}
				} else {
					item.removeClass('menu-active');
				}
			});
		}

		/**
   * wrap a menu and set it's status to hidden
   * the menu not include sub menus
   */
		function wrapMenu(menu) {
			menu.addClass('menu').find('>div').each(function () {
				var item = $(this);
				if (item.hasClass('menu-sep')) {
					item.html('');
				} else {
					var text = item.addClass('menu-item').html();
					item.empty().append($('<div class="menu-text"></div>').html(text));
					var icon = item.attr('icon');
					if (icon) {
						$('<div class="menu-icon"></div>').addClass(icon).appendTo(item);
					}
					if (item[0].submenu) {
						$('<div class="menu-rightarrow faceIcon icon-arrow_right"></div>').appendTo(item); // has sub menu
					}

					if ($.boxModel == true) {
						var height = item.height();
						item.height(height - (item.outerHeight() - item.height()));
					}
				}
			});
			menu.hide();
		}
	}

	function onDocClick(e) {
		var target = e.data;
		hideAll(target);
		return false;
	}

	/**
  * hide top menu and it's all sub menus
  */
	function hideAll(target) {
		var opts = $.data(target, 'menu').options;
		hideMenu($(target));
		$(document).unbind('.menu');
		opts.onHide.call(target);

		//		var state = $.data(target, 'menu');
		//		if (state){
		//			hideMenu($(target));
		//			$(document).unbind('.menu');
		//			state.options.onHide.call(target);
		//		}
		return false;
	}

	/**
  * show the top menu
  */
	function showTopMenu(target, pos) {
		var opts = $.data(target, 'menu').options;
		if (pos) {
			opts.left = pos.left;
			opts.top = pos.top;
		}
		showMenu($(target), { left: opts.left, top: opts.top }, function () {
			$(document).bind('click.menu', target, onDocClick);
			opts.onShow.call(target);
		});
	}

	function showMenu(menu, pos, callback) {
		if (!menu) return;

		if (pos) {
			menu.css(pos);
		}

		menu.show(1, function () {
			if (callback) {
				callback();
			}
		});
	}

	function hideMenu(menu) {
		if (!menu) return;

		hideit(menu);
		menu.find('div.menu-item').each(function () {
			if (this.submenu) {
				hideMenu(this.submenu);
			}
			$(this).removeClass('menu-active');
		});

		function hideit(m) {
			if (m[0].shadow) {
				m[0].shadow.hide();
			}
			m.hide();
		}
	}

	$.fn.menu = function (options, param) {
		if (typeof options == 'string') {
			switch (options) {
				case 'show':
					return this.each(function () {
						showTopMenu(this, param);
					});
				case 'hide':
					return this.each(function () {
						hideAll(this);
					});
			}
		}

		options = options || {};
		return this.each(function () {
			var state = $.data(this, 'menu');
			if (state) {
				$.extend(state.options, options);
			} else {
				state = $.data(this, 'menu', {
					options: $.extend({}, $.fn.menu.defaults, options)
				});
				init(this);
			}
			$(this).css({
				left: state.options.left,
				top: state.options.top
			});
		});
	};

	$.fn.menu.defaults = {
		zIndex: 110000,
		left: 0,
		top: 0,
		onShow: function onShow() {},
		onHide: function onHide() {}
	};
});

/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Created by Administrator on 2016/10/31.
 * updated by lanyc on 2017-2-8 模块化定义，引入api和css
 */
__webpack_require__(223);
__webpack_require__(224);

/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Created by Administrator on 2016/11/4.
 */

__webpack_require__(227);
__webpack_require__(228);
__webpack_require__(229);
__webpack_require__(230);
__webpack_require__(102);

/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

(function (factory) {
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(28)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {
        factory(jQuery);
    }
})(function ($) {
    $.extend(true, window, {
        taboxcomponent: TaBoxComponent
    });

    __webpack_require__(232);
    function TaBoxComponent(options) {

        var self = this;
        options = $.extend({
            txtId: "boxcomponent"
        }, options || {});
        function init() {

            $(document).mousedown(function (e) {
                var target = e.target || e.srcElement;
                if (!$(target).parents().is(".boxComponent")) {
                    $(".boxComponent").hide();
                }
            });
            return self;
        } // end init

        init(); // 调用初始化方法
        function setReadOnly(isReadOnly) {
            TaContainerSupport.setReadOnly(options.txtId, isReadOnly);
        }
        function setEnable(isEnable) {
            TaContainerSupport.setEnable(options.txtId, isEnable);
        }
        function setVisible(isVisiable, isHold) {
            TaContainerSupport.setVisible(options.txtId, isVisiable, isHold);
        }
        function setRequired(isRequired) {
            TaContainerSupport.setRequired(options.txtId, isRequired);
        }
        function resetData() {
            TaContainerSupport.resetData(options.txtId);
        }
        function clearData() {
            TaContainerSupport.clearData(options.txtId);
        }
        function doValidate() {
            var result = TaContainerSupport.doValidate(options.txtId);
            if (typeof result == 'string') {
                return false;
            }
            return result;
        }
        function cleanValidateStyle() {
            TaContainerSupport.cleanValidateStyle(options.txtId);
        }

        $.extend(this, { // 为this对象
            "cmptype": 'taboxcomponent', // 将方法注册为公共方法
            "version": "1.1.0",
            setReadOnly: setReadOnly,
            setEnable: setEnable,
            setVisible: setVisible,
            setRequired: setRequired,
            reset: resetData,
            clearData: clearData,
            doValidate: doValidate,
            cleanValidateStyle: cleanValidateStyle
        });
    }

    return TaBoxComponent;
});

/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

(function (factory) {
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {
        factory(jQuery);
    }
})(function ($) {
    $.extend(true, window, {
        "Slick": {
            "Event": Event,
            "EventData": EventData,
            "EventHandler": EventHandler,
            "Range": Range,
            "NonDataRow": NonDataItem,
            "Group": Group,
            "GroupTotals": GroupTotals,
            "EditorLock": EditorLock,
            "GlobalEditorLock": new EditorLock()
        }
    });

    function EventHandler() {
        //add by zzb
        var handlers = [];

        this.subscribe = function (event, handler) {
            handlers.push({
                event: event,
                handler: handler
            });
            event.subscribe(handler);

            return this; // allow chaining
        };

        this.unsubscribe = function (event, handler) {
            var i = handlers.length;
            while (i--) {
                if (handlers[i].event === event && handlers[i].handler === handler) {
                    handlers.splice(i, 1);
                    event.unsubscribe(handler);
                    return;
                }
            }

            return this; // allow chaining
        };

        this.unsubscribeAll = function () {
            var i = handlers.length;
            while (i--) {
                handlers[i].event.unsubscribe(handlers[i].handler);
            }
            handlers = [];

            return this; // allow chaining
        };
    }

    function EventData() {
        var isPropagationStopped = false;
        var isImmediatePropagationStopped = false;
        this.stopPropagation = function () {
            isPropagationStopped = true;
        };
        this.isPropagationStopped = function () {
            return isPropagationStopped;
        };
        this.stopImmediatePropagation = function () {
            isImmediatePropagationStopped = true;
        };
        this.isImmediatePropagationStopped = function () {
            return isImmediatePropagationStopped;
        };
    }

    function Event() {
        var handlers = [];
        this.subscribe = function (fn) {
            handlers.push(fn);
        };
        this.unsubscribe = function (fn) {
            for (var i = handlers.length - 1; i >= 0; i--) {
                if (handlers[i] === fn) {
                    handlers.splice(i, 1);
                }
            }
        };
        this.notify = function (args, e, scope) {
            e = e || new EventData();
            scope = scope || this;

            var returnValue;
            for (var i = 0; i < handlers.length && !(e.isPropagationStopped() || e.isImmediatePropagationStopped()); i++) {
                returnValue = handlers[i].call(scope, e, args);
            }
            return returnValue;
        };
    }

    function Range(fromRow, fromCell, toRow, toCell) {
        if (toRow === undefined && toCell === undefined) {
            toRow = fromRow;
            toCell = fromCell;
        }
        this.fromRow = Math.min(fromRow, toRow);
        this.fromCell = Math.min(fromCell, toCell);
        this.toRow = Math.max(fromRow, toRow);
        this.toCell = Math.max(fromCell, toCell);
        this.isSingleRow = function () {
            return this.fromRow == this.toRow;
        };
        this.isSingleCell = function () {
            return this.fromRow == this.toRow && this.fromCell == this.toCell;
        };
        this.contains = function (row, cell) {
            return row >= this.fromRow && row <= this.toRow && cell >= this.fromCell && cell <= this.toCell;
        };
        this.toString = function () {
            if (this.isSingleCell()) {
                return "(" + this.fromRow + ":" + this.fromCell + ")";
            } else {
                return "(" + this.fromRow + ":" + this.fromCell + " - " + this.toRow + ":" + this.toCell + ")";
            }
        };
    }

    function NonDataItem() {
        this.__nonDataRow = true;
    }

    function Group() {
        this.__group = true;
        this.__updated = false;
        this.count = 0;
        this.value = null;
        this.title = null;
        this.collapsed = false;
        this.totals = null;
        this._row_ = null;
    }

    Group.prototype = new NonDataItem();
    Group.prototype.equals = function (group) {
        return this.value === group.value && this.count === group.count && this.collapsed === group.collapsed;
    };

    function GroupTotals() {
        this.__groupTotals = true;
        this.group = null;
    }
    GroupTotals.prototype = new NonDataItem();
    function EditorLock() {
        var activeEditController = null;
        this.isActive = function (editController) {
            return editController ? activeEditController === editController : activeEditController !== null;
        };
        this.activate = function (editController) {
            if (editController === activeEditController) {
                return;
            }
            if (activeEditController !== null) {
                throw "SlickGrid.EditorLock.activate: an editController is still active, can't activate another editController";
            }
            if (!editController.commitCurrentEdit) {
                throw "SlickGrid.EditorLock.activate: editController must implement .commitCurrentEdit()";
            }
            if (!editController.cancelCurrentEdit) {
                throw "SlickGrid.EditorLock.activate: editController must implement .cancelCurrentEdit()";
            }
            activeEditController = editController;
        };
        this.deactivate = function (editController) {
            if (activeEditController !== editController) {
                throw "SlickGrid.EditorLock.deactivate: specified editController is not the currently active one";
            }
            activeEditController = null;
        };
        this.commitCurrentEdit = function () {
            return activeEditController ? activeEditController.commitCurrentEdit() : true;
        };
        this.cancelCurrentEdit = function cancelCurrentEdit() {
            return activeEditController ? activeEditController.cancelCurrentEdit() : true;
        };
    }
});

/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(jQuery) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * 表格视图
 * @module Grid
 * @namespace Slick.Data
 */
(function (factory) {
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {
        factory(jQuery);
    }
})(function ($) {
    $.extend(true, window, {
        Slick: {
            Data: {
                DataView: DataView,
                Aggregators: {
                    Avg: AvgAggregator, //平均
                    Min: MinAggregator, //最小
                    Max: MaxAggregator, //最大
                    Sum: SumAggregator
                }
            }
        }
    });

    /***
     * A sample Model implementation.
     * Provides a filtered view of the underlying data.
     *
     * Relies on the data item having an "id" property uniquely identifying it.
     */
    /**
     * 表格视图
     * @class DataView
     * @static
     * @constructor
     * @param {Object} options
     * @param {Object} grid
     */
    function DataView(options, grid) {
        var self = this;
        var groupItemMetadataProvider = new Slick.Data.GroupItemMetadataProvider();
        var defaults = {
            groupItemMetadataProvider: groupItemMetadataProvider,
            //TODO 林森
            url: null
        };

        // private
        var idProperty = "__id___"; // property holding a unique row id   idProperty 与 items 元素位置的关系保存在idxById
        var rowId = "_row_"; //真实的行ID（渲染结果）
        var rowSn = "_rowSn_"; //数据行序号,暂不暴露，在dataview 中留存 id 与 rowSn 的关系
        var maxIdPropertyValue = 0; //当前最大的 id 值
        var items = []; // data by index
        var rows = []; // data by row
        var idxById = {}; // indexes by id
        var rowSnById = {}; // rowSn by id
        var rowsById = null; // rows by id; lazy-calculated
        var filter = null; // filter function
        var updated = null; // updated item ids
        var suspend = false; // suspends the recalculation
        var sortAsc = true;
        var fastSortField;
        var sortComparer;

        // grouping
        var groupingGetter;
        var groupingGetterIsAFn;
        var groupingFormatter;
        var groupingComparer;
        var groups = [];
        var groupsByVal = {};
        var collapsedGroups = {};
        var aggregators;
        var aggregateCollapsed = false;

        var pagesize = 0;
        var pagenum = 0;
        var totalRows = 0;

        var total = 0;

        // events
        var onRowCountChanged = new Slick.Event();
        var onRowsChanged = new Slick.Event();
        var onPagingInfoChanged = new Slick.Event();

        options = $.extend(true, {}, defaults, options);
        //分组
        grid.registerPlugin(groupItemMetadataProvider);
        /**
         * 设置暂停位为true
         */
        function beginUpdate() {
            suspend = true;
        }
        /**
         * 设置暂停位为false 并刷新
         */
        function endUpdate(hints) {
            suspend = false;
            refresh(hints);
        }

        /*
         * 重新创建idProperty 与 实际数据的 关系对象
         */
        function recreatTdxById() {
            idxById = {};
        }
        /**
         * 检测数据项是否有id，并将id保存在idxById 中
         * @param {number} startingIndex 起始Index
         */
        function updateIdxById(startingIndex) {
            startingIndex = startingIndex || 0;
            var id;
            for (var i = startingIndex, l = items.length; i < l; i++) {
                id = items[i][idProperty];
                if (id === undefined) {
                    throw "Each data element must implement a unique 'id' property";
                }
                idxById[id] = i;
            }
        }
        /**
         * 确保id是独一无二的
         */
        function ensureIdUniqueness() {
            var id;
            for (var i = 0, l = items.length; i < l; i++) {
                id = items[i][idProperty];
                if (id === undefined || idxById[id] !== i) {
                    throw "Each data element must implement a unique 'id' property";
                }
            }
        }

        /**
         * add by xp
         * _row_ 定位为渲染行行号，以便跟事件回传 和 api 入参 统一， 从 0 开始
         * _rowSn_ 为数据行的序号，从1 开始
         */
        function updateRowLocate() {
            initRowRelation(); //初始化渲染行号与idProperty，序号与idProperty的数据关系
            for (var j = 0; j < items.length; j++) {
                // items[j][rowSn] = getRowSnById(items[j][idProperty]);//暂不暴露该值，无意义
                items[j][rowId] = getRowById(items[j][idProperty]);
            }
        }
        // 初始化渲染行号与idProperty，序号与idProperty的数据关系
        function initRowRelation() {
            var index = 1;
            rowSnById = {};
            rowsById = {};
            for (var i = 0, l = rows.length; i < l; ++i) {
                if (!rows[i].__nonDataRow && rows[i].__group != true && rows[i].__groupTotals != true) {
                    rowSnById[rows[i][idProperty]] = index++;
                }
                rowsById[rows[i][idProperty]] = i;
            }
        }
        /**
         * 设置dataview数据
         * @param {array} data 传人数据
         * @param {string} objectIdProperty 指定数据id项名称
         */
        function setItems(data, objectIdProperty) {
            if (objectIdProperty !== undefined) idProperty = objectIdProperty;
            var tmp = null;
            if (!jQuery.isArray(data)) {
                tmp = data.list || [];
                total = data.total || tmp.length || 0;
            } else {
                //grid.clearDirty();
                tmp = data;
                total = tmp.length || 0;
            }
            updatePagerCount();

            for (var i = 0; i < tmp.length; i++) {
                if (!tmp[i].__group) tmp[i][idProperty] = maxIdPropertyValue = i;
            }
            items = tmp;

            idxById = {}; //设置idxById 为空
            updateIdxById(); //设置idxById，检测id
            ensureIdUniqueness(); //检查id的唯一性
            refresh(); //刷新数据
            //分页:默认选择行,liys添加
            if (typeof grid.getOptions().defaultRows == "function") {
                //defaultRows为function
                var str = grid.getOptions().defaultRows();
                grid.setSelectRowsByData(str);
            } else if (grid.getOptions().defaultRows != undefined && grid.getOptions().defaultRows.length > 0) {
                //defaultRows为json数组
                grid.setSelectRowsByData(grid.getOptions().defaultRows);
            }
        }

        function setPagingOptions(args) {
            if (args.pageSize != undefined) pagesize = args.pageSize;

            if (args.pageNum != undefined) pagenum = Math.min(args.pageNum, Math.ceil(totalRows / pagesize));

            onPagingInfoChanged.notify(getPagingInfo(), null, self);

            refresh();
        }

        function getPagingInfo() {
            return { pageSize: pagesize, pageNum: pagenum, totalRows: totalRows };
        }

        function sort(comparer, ascending) {
            sortAsc = ascending;
            sortComparer = comparer;
            fastSortField = null;
            if (ascending === false) items.reverse();
            items.sort(comparer);
            if (ascending === false) items.reverse();

            idxById = {};
            updateIdxById();
            refresh();
        }

        /***
         * Provides a workaround for the extremely slow sorting in IE.
         * Does a [lexicographic] sort on a give column by temporarily overriding Object.prototype.toString
         * to return the value of that field and then doing a native Array.sort().
         */
        function fastSort(field, ascending) {
            sortAsc = ascending;
            fastSortField = field;
            sortComparer = null;
            var oldToString = Object.prototype.toString;
            Object.prototype.toString = typeof field == "function" ? field : function () {
                return this[field];
            };
            // an extra reversal for descending sort keeps the sort stable
            // (assuming a stable native sort implementation, which isn't true in some cases)
            if (ascending === false) items.reverse();
            items.sort();
            Object.prototype.toString = oldToString;
            if (ascending === false) items.reverse();
            idxById = {};
            updateIdxById();
            refresh();
        }

        function reSort() {
            if (sortComparer) {
                sort(sortComparer, sortAsc);
            } else if (fastSortField) {
                fastSort(fastSortField, sortAsc);
            }
        }

        function setFilter(filterFn) {
            filter = filterFn;
            refresh();
        }

        function groupBy(valueGetter, valueFormatter, sortComparer) {
            if (!options.groupItemMetadataProvider) {
                options.groupItemMetadataProvider = new Slick.Data.GroupItemMetadataProvider();
            }
            groupingGetter = valueGetter;
            groupingGetterIsAFn = typeof groupingGetter === "function";
            groupingFormatter = valueFormatter;
            groupingComparer = sortComparer;
            collapsedGroups = {};
            groups = [];
            refresh();
        }

        function setAggregators(groupAggregators, includeCollapsed) {
            aggregators = groupAggregators;
            aggregateCollapsed = includeCollapsed !== undefined ? includeCollapsed : aggregateCollapsed;
            refresh();
        }

        // idProperty 与 真实数据下标的对应关系
        function getIdxById(id) {
            return idxById[id];
        }

        // idProperty 与 渲染行号的对应关系
        function getRowById(id) {
            if (!rowsById) {
                initRowRelation();
            }

            return rowsById[id];
        }

        // idProperty 与 rowSn 的关系
        function getRowSnById(id) {
            return rowSnById[id];
        }

        function updateItem(id, item, isCurrentPage) {
            if (idxById[id] === undefined || id !== item[idProperty]) throw "Invalid or non-matching id";
            items[idxById[id]] = item;
            if (!updated) updated = {};
            updated[id] = true;
            refresh(isCurrentPage);
        }

        function insertItem(insertBefore, item, isCurrentPage) {
            items.splice(insertBefore, 0, item);
            updateIdxById(insertBefore);
            refresh(isCurrentPage);

            total++;
            updatePagerCount();
        }

        function addItem(item, isCurrentPage) {
            items.push(item);
            updateIdxById(items.length - 1);
            refresh(isCurrentPage);

            total++;
            updatePagerCount();
        }

        function deleteItem(id, isCurrentPage) {
            var idx = idxById[id];
            if (idx === undefined) {
                throw "Invalid id";
            }
            delete idxById[id];
            items.splice(idx, 1);
            updateIdxById(idx);
            refresh(isCurrentPage);

            total--;
            updatePagerCount();
        }

        /**
         * 根据total更新分页条总数统计
         * @author xiep
         */
        function updatePagerCount() {
            var pager = grid.getPager();
            if (pager != null) {
                pager.setStatus(total);
            }
        }

        function getLength() {
            return rows.length;
        }

        /**
         * 得到data
         * @return {array} items
         */
        function getItems() {
            return items;
        }

        function getItemByIdx(i) {
            return items[i];
        }

        /**
         * 通过id查找item
         */
        function getItemById(id) {
            return items[idxById[id]];
        }

        function getItem(i) {
            var row = rows[i];
            return row;
        }
        /**
         * 得到meta数据，在判断是否被选中处调用
         */
        function getItemMetadata(i) {
            var item = rows[i];
            if (item === undefined) {
                return null;
            }

            // overrides for group rows
            if (item.__group) {
                return options.groupItemMetadataProvider.getGroupRowMetadata(item);
            }

            // overrides for totals rows
            if (item.__groupTotals) {
                return options.groupItemMetadataProvider.getTotalsRowMetadata(item);
            }
            //关于第一行选中问题注释，问题原因：当第一行选中是，select = false的也被选中颜色
            //			if (i === 0) {
            //				return {
            //	                selectable: true,
            //	                //focusable: options.totalsFocusable,
            //	                cssClasses: "cell",
            //	                //formatter: defaultTotalsCellFormatter,
            //	                editor: null
            //            	}
            //			}
            return null;
        }

        function collapseGroup(groupingValue) {
            collapsedGroups[groupingValue] = true;
            refresh(true); //modify by xp 分组合并/展开滚动条位置不变
        }

        function expandGroup(groupingValue) {
            delete collapsedGroups[groupingValue];
            refresh(true);
        }

        function getGroups() {
            return groups;
        }

        function getGroupByRow(rowId) {
            return getGroupsByVal(getGroupKeyValue(rows[rowId]));
        }

        function getGroupsByVal(val) {
            return groupsByVal[val];
        }

        function getGroupKeyValue(r) {
            return groupingGetterIsAFn ? groupingGetter(r) : r[groupingGetter];
        }

        function extractGroups(rows) {
            var group;
            var val;
            var groups = [];
            groupsByVal = {};
            var r;

            for (var i = 0, l = rows.length; i < l; i++) {
                r = rows[i];
                val = groupingGetterIsAFn ? groupingGetter(r) : r[groupingGetter];
                group = groupsByVal[val];
                if (!group) {
                    group = new Slick.Group();
                    group.count = 0;
                    group.value = val;
                    group.rows = [];
                    groups[groups.length] = group;
                    groupsByVal[val] = group;
                }
                group.rows[group.count++] = r;
            }

            return groups;
        }

        // TODO:  lazy totals calculation
        function calculateGroupTotals(group) {
            var r, idx;

            if (group.collapsed && !aggregateCollapsed) {
                return;
            }

            idx = aggregators.length;
            while (idx--) {
                aggregators[idx].init();
            }

            for (var j = 0, jj = group.rows.length; j < jj; j++) {
                r = group.rows[j];
                idx = aggregators.length;
                while (idx--) {
                    aggregators[idx].accumulate(r);
                }
            }
            var t = new Slick.GroupTotals();
            idx = aggregators.length;
            while (idx--) {
                aggregators[idx].storeResult(t);
            }
            t.group = group;
            group.totals = t;
        }

        function calculateTotals(groups) {
            var idx = groups.length;
            while (idx--) {
                calculateGroupTotals(groups[idx]);
            }
        }
        //groups里面存放分组信息
        function finalizeGroups(groups) {
            var idx = groups.length,
                g;
            while (idx--) {
                g = groups[idx];
                g.collapsed = g.value in collapsedGroups;
                g.title = groupingFormatter ? groupingFormatter(g) : g.value;
            }
        }

        function flattenGroupedRows(groups) {
            var groupedRows = [],
                gl = 0,
                idx,
                t,
                g,
                r;
            for (var i = 0, l = groups.length; i < l; i++) {
                g = groups[i];
                g[rowId] = gl;
                if (grid.getOptions().groupingBy !== "_onlyTotals") groupedRows[gl++] = g;
                if (!g.collapsed) {
                    for (var j = 0, jj = g.rows.length; j < jj; j++) {
                        groupedRows[gl++] = g.rows[j];
                    }
                }

                if (g.totals && (!g.collapsed || aggregateCollapsed)) {
                    groupedRows[gl++] = g.totals;
                }
            }
            return groupedRows;
        }

        function getFilteredAndPagedItems(items, filter) {
            var pageStartRow = pagesize * pagenum;
            var pageEndRow = pageStartRow + pagesize; //分页信息
            var itemIdx = 0,
                rowIdx = 0,
                item;
            var newRows = [];

            // filter the data and get the current page if paging
            if (filter) {
                for (var i = 0, il = items.length; i < il; ++i) {
                    item = items[i];

                    if (filter(item)) {
                        if (!pagesize || itemIdx >= pageStartRow && itemIdx < pageEndRow) {
                            newRows[rowIdx] = item;
                            rowIdx++;
                        }
                        itemIdx++;
                    }
                }
            } else {
                newRows = pagesize ? items.slice(pageStartRow, pageEndRow) : items.concat();
                itemIdx = items.length;
            }

            return { totalRows: itemIdx, rows: newRows };
        }

        function getFilteredItems() {
            return getFilteredAndPagedItems(items, filter).rows;
        }

        function getRowDiffs(rows, newRows) {
            var item,
                r,
                eitherIsNonData,
                diff = [];
            for (var i = 0, rl = rows.length, nrl = newRows.length; i < nrl; i++) {
                if (i >= rl) {
                    diff[diff.length] = i;
                } else {
                    item = newRows[i];
                    r = rows[i];

                    if (groupingGetter && (eitherIsNonData = item.__nonDataRow || r.__nonDataRow) && item.__group !== r.__group || item.__updated || item.__group && !item.equals(r) || aggregators && eitherIsNonData && (
                    // no good way to compare totals since they are arbitrary DTOs
                    // deep object comparison is pretty expensive
                    // always considering them 'dirty' seems easier for the time being
                    item.__groupTotals || r.__groupTotals) || item[idProperty] != r[idProperty] || updated && updated[item[idProperty]]) {
                        diff[diff.length] = i;
                    }
                }
            }
            return diff;
        }
        /**
         * 从新计算
         */
        function recalc(_items, _rows, _filter) {
            rowsById = null;

            var newRows = [];

            var filteredItems = getFilteredAndPagedItems(_items, _filter);
            // grid.trigger(grid.onSelectedRowsChanged, {rows:grid.getSelectedRows(), data:grid.getSelectRowsDataToObj()}, null);
            //通过data获取总量及row
            totalRows = filteredItems.totalRows;
            newRows = filteredItems.rows;
            groups = [];
            if (groupingGetter != null) {
                groups = extractGroups(newRows);
                if (groups.length) {
                    finalizeGroups(groups);
                    if (aggregators) {
                        calculateTotals(groups);
                    }
                    groups.sort(groupingComparer);
                    newRows = flattenGroupedRows(groups);
                }
            }
            var diff = getRowDiffs(_rows, newRows);

            rows = newRows;

            return diff;
        }

        function refresh(isCurrentPage) {
            if (suspend) return; //判断是否为暂停状态
            //初始都为0
            var countBefore = rows.length;
            var totalRowsBefore = totalRows;
            //第一次 rows空，filter空
            var diff = recalc(items, rows, filter); // pass as direct refs to avoid closure perf hit

            // if the current page is no longer valid, go to last page and recalc
            // we suffer a performance penalty here, but the main loop (recalc) remains highly optimized
            if (pagesize && totalRows < pagenum * pagesize) {
                pagenum = Math.floor(totalRows / pagesize);
                diff = recalc(items, rows, filter);
            }

            updated = null;

            //新增刷新表格行序号方法(必须在rows与items idProperty值同步以后,行重绘之前) add by xp
            updateRowLocate();

            if (totalRowsBefore != totalRows) onPagingInfoChanged.notify(getPagingInfo(), null, self);
            if (countBefore != rows.length) onRowCountChanged.notify({ previous: countBefore, current: rows.length }, null, self);
            if (diff.length > 0) onRowsChanged.notify({ rows: diff }, null, self);
            if (!isCurrentPage) grid.scrollRowIntoView(0);
        }

        function getTotal() {
            return total;
        }

        function getNextIdPropertyValue() {
            // return (items && items.length > 0)?++maxIdPropertyValue:maxIdPropertyValue=0;
            return ++maxIdPropertyValue;
        }

        return {
            "updateRowLocate": updateRowLocate,
            // methods
            "beginUpdate": beginUpdate,
            "endUpdate": endUpdate,
            "setPagingOptions": setPagingOptions,
            "getPagingInfo": getPagingInfo,
            "getItems": getItems,
            "setItems": setItems,
            "setFilter": setFilter,
            "sort": sort,
            "fastSort": fastSort,
            "reSort": reSort,
            "groupBy": groupBy,
            "setAggregators": setAggregators,
            "collapseGroup": collapseGroup,
            "expandGroup": expandGroup,
            "getGroups": getGroups,
            "getGroupsByVal": getGroupsByVal,
            "getGroupByRow": getGroupByRow,
            "getIdxById": getIdxById,
            "getRowById": getRowById,
            "getRowSnById": getRowSnById,
            "getItemById": getItemById,
            "getItemByIdx": getItemByIdx,
            "refresh": refresh,
            "updateItem": updateItem,
            "insertItem": insertItem,
            "addItem": addItem,
            "deleteItem": deleteItem,

            "recreatTdxById": recreatTdxById,
            "updateIdxById": updateIdxById, //设置idxById，检测id
            "ensureIdUniqueness": ensureIdUniqueness,

            // data provider methods
            "getLength": getLength,
            "getItem": getItem,
            "getItemMetadata": getItemMetadata,

            // events
            "onRowCountChanged": onRowCountChanged,
            "onRowsChanged": onRowsChanged,
            "onPagingInfoChanged": onPagingInfoChanged,
            "getTotal": getTotal,
            "getFilteredItems": getFilteredItems,
            "getNextIdPropertyValue": getNextIdPropertyValue
        };
    }

    function AvgAggregator(field, totalsFormatter) {
        var count;
        var nonNullCount;
        var sum;

        this.init = function () {
            count = 0;
            nonNullCount = 0;
            sum = 0;
        };

        this.accumulate = function (item) {
            var val = item[field];
            count++;
            if (val != null && !isNaN(val)) {
                nonNullCount++;
                sum += 1 * val;
            }
        };

        this.storeResult = function (groupTotals) {
            if (!groupTotals.avg) {
                groupTotals.avg = {};
            }
            if (nonNullCount != 0) {
                if (totalsFormatter) {
                    groupTotals.avg[field] = totalsFormatter(Number(sum / nonNullCount).toFixed(5));
                } else {
                    groupTotals.avg[field] = formatterTotals(Number(sum / nonNullCount).toFixed(5));
                }
            }
        };
    }

    function MinAggregator(field, totalsFormatter) {
        var min;

        this.init = function () {
            min = null;
        };

        this.accumulate = function (item) {
            var val = item[field];
            if (val != null && !isNaN(val)) {
                if (min == null || val < min) {
                    min = val;
                }
            }
        };

        this.storeResult = function (groupTotals) {
            if (!groupTotals.min) {
                groupTotals.min = {};
            }
            if (totalsFormatter) {
                groupTotals.min[field] = totalsFormatter(min);
            } else {
                groupTotals.min[field] = formatterTotals(min);
            }
        };
    }

    function SumAggregator(field, totalsFormatter) {
        var sum;

        this.init = function () {
            sum = 0;
        };

        this.accumulate = function (item) {
            var val = item[field];
            if (val != null && !isNaN(val)) {
                // sum += Number(val);
                sum = Ta.util.floatAdd(sum, Number(val));
            }
        };

        this.storeResult = function (groupTotals) {
            if (!groupTotals.sum) {
                groupTotals.sum = {};
            }
            if (totalsFormatter) {
                groupTotals.sum[field] = totalsFormatter(sum);
            } else groupTotals.sum[field] = formatterTotals(sum);
        };
    }

    function MaxAggregator(field, totalsFormatter) {
        var max;

        this.init = function () {
            max = null;
        };

        this.accumulate = function (item) {
            var val = item[field];
            if (val != null && !isNaN(val)) {
                if (max == null || val > max) {
                    max = val;
                }
            }
        };

        this.storeResult = function (groupTotals) {
            if (!groupTotals.max) {
                groupTotals.max = {};
            }
            if (totalsFormatter) {
                groupTotals.max[field] = totalsFormatter(max);
            } else {
                groupTotals.max[field] = formatterTotals(max);
            }
        };
    }
    //格式化统计信息
    function formatterTotals(value) {
        var moneyValue = String(value);
        if (value !== "" && value != undefined) {
            var t_moneyValue;
            if (moneyValue.indexOf(".") > 0) {
                t_moneyValue = moneyValue.substring(0, moneyValue.indexOf("."));
                var t_p = moneyValue.substring(moneyValue.indexOf("."));
                var re = /(-?\d+)(\d{3})/;
                while (re.test(t_moneyValue)) {
                    t_moneyValue = t_moneyValue.replace(re, "$1,$2");
                }
                moneyValue = t_moneyValue + t_p;
            } else {
                var re = /(-?\d+)(\d{3})/;
                while (re.test(moneyValue)) {
                    moneyValue = moneyValue.replace(re, "$1,$2");
                }
            }
        }
        return moneyValue;
    }
    // TODO:  add more built-in aggregators
    // TODO:  merge common aggregators in one to prevent needles iterating
});
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

(function (factory) {
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {
        factory(jQuery);
    }
})(function ($) {
    $.extend(true, window, {
        Slick: {
            Data: {
                GroupItemMetadataProvider: GroupItemMetadataProvider
            }
        }
    });

    /***
     * Provides item metadata for group (Slick.Group) and totals (Slick.Totals) rows produced by the DataView.
     * This metadata overrides the default behavior and formatting of those rows so that they appear and function
     * correctly when processed by the grid.
     *
     * This class also acts as a grid plugin providing event handlers to expand & collapse groups.
     * If "grid.registerPlugin(...)" is not called, expand & collapse will not work.
     *
     * @class GroupItemMetadataProvider
     * @module Data
     * @namespace Slick.Data
     * @constructor
     * @param options
     */
    function GroupItemMetadataProvider(options) {
        var _grid;
        var _groupSelectedRowsLookup = {};

        var _defaults = {
            groupCssClass: "slick-group",
            totalsCssClass: "slick-group-totals",
            groupFocusable: true,
            totalsFocusable: false,
            toggleCssClass: "slick-group-toggle",
            toggleExpandedCssClass: " faceIcon expanded icon-reduce ",
            toggleCollapsedCssClass: " faceIcon collapsed icon-add ",
            enableExpandCollapse: true,

            //分组选择
            groupCheckable: false,
            groupCheckCssClass: "slick-cell-groupcheckbox"
        };

        options = $.extend(true, {}, _defaults, options);

        function defaultGroupCellFormatter(row, cell, value, columnDef, item) {
            if (!options.enableExpandCollapse) {
                return item.title;
            }
            return "<span class='" + options.toggleCssClass + " " + (item.collapsed ? options.toggleCollapsedCssClass : options.toggleExpandedCssClass) + "'></span>" + item.title;
        }

        function defaultGroupCellCheckFormatter(row, cell, value, columnDef, item) {
            return _groupSelectedRowsLookup[item.value] ? "<input type='checkbox' checked='checked'>" : "<input type='checkbox'>";
        }

        function defaultTotalsCellFormatter(row, cell, value, columnDef, item) {
            return columnDef.groupTotalsFormatter && columnDef.groupTotalsFormatter(item, columnDef) || "";
        }

        function init(grid) {
            _grid = grid;
            _grid.onClick.subscribe(handleGridClick);
            _grid.onKeyDown.subscribe(handleGridKeyDown);

            if (_grid.getOptions().selectType == "checkbox") {
                options.groupCheckable = true;
                _grid.onSelectedRowsChanged.subscribe(handleGroupSelectedRowsChanged);
                _grid.onClick.subscribe(handleGridGroupCheckClick);
            }
        }

        function destroy() {
            if (_grid) {
                _grid.onClick.unsubscribe(handleGridClick);
                _grid.onKeyDown.unsubscribe(handleGridKeyDown);
                if (options.groupCheckable) {
                    _grid.onSelectedRowsChanged.unsubscribe(handleGroupSelectedRowsChanged);
                    _grid.onClick.unsubscribe(handleGridGroupCheckClick);
                }
            }
        }

        function handleGridClick(e, args) {
            var item = this.getDataItem(args.row);
            if (item && item instanceof Slick.Group && $(e.target).hasClass(options.toggleCssClass)) {
                if (item.collapsed) {
                    this.getData().expandGroup(item.value);
                } else {
                    this.getData().collapseGroup(item.value);
                }

                e.stopImmediatePropagation();
                e.preventDefault();
            }
        }

        // TODO:  add -/+ handling
        function handleGridKeyDown(e, args) {
            if (options.enableExpandCollapse && e.which == 32) {
                var activeCell = this.getActiveCell();
                if (activeCell) {
                    var item = this.getDataItem(activeCell.row);
                    if (item && item instanceof Slick.Group) {
                        if (item.collapsed) {
                            this.getData().expandGroup(item.value);
                        } else {
                            this.getData().collapseGroup(item.value);
                        }

                        e.stopImmediatePropagation();
                        e.preventDefault();
                    }
                }
            }
        }

        /**
         * 当选择行改变时
         */
        function handleGroupSelectedRowsChanged(e, args) {
            var selectedRows = _grid.getSelectedRows(); //获取选择行号
            var groupLookup = {},
                lookup = {},
                row,
                i,
                _group,
                _groupValue;
            for (i = 0; i < selectedRows.length; i++) {
                row = selectedRows[i];
                _group = _grid.getDataView().getGroupByRow(row);
                if (_group) {
                    _groupValue = _group.value;

                    typeof lookup[_groupValue] == "undefined" ? lookup[_groupValue] = 1 : lookup[_groupValue]++; //设置查找到位true
                    if (lookup[_groupValue] == _group.count) {
                        //如果相同不做改变
                        groupLookup[_groupValue] = true; //删除之前状态中row
                        if (_groupSelectedRowsLookup[_groupValue] != groupLookup[_groupValue]) {
                            _grid.invalidateRow(_group._row_);
                            delete _groupSelectedRowsLookup[_groupValue];
                        }
                    }
                }
            }

            for (i in _groupSelectedRowsLookup) {
                _group = _grid.getDataView().getGroupsByVal(i);
                _grid.invalidateRow(_group._row_);
            }

            _groupSelectedRowsLookup = groupLookup;
            _grid.render();
        }

        function handleGridGroupCheckClick(e, args) {
            var item = this.getDataItem(args.row);
            //如果分组选择
            if (item && item instanceof Slick.Group) {
                var target = e.srcElement || e.target;
                var $checkbox;
                if ($(target).hasClass(options.groupCheckCssClass)) {
                    $checkbox = $(target).children();
                } else {
                    $checkbox = $(target);
                }

                //modify by xp 分组与checkbox同时存在时的冲突问题
                if ($checkbox.parent().hasClass(options.groupCheckCssClass)) {
                    e.stopPropagation();
                    e.stopImmediatePropagation();
                } else {
                    return;
                }

                if (!$checkbox.attr("disabled")) {
                    var groupSelectRows = [];
                    if (!item.collapsed) {
                        for (var i = 0; i < item.rows.length; i++) {
                            groupSelectRows.push(item.rows[i]["_row_"]);
                        }
                        if (_groupSelectedRowsLookup[item.value]) {
                            _grid.setSelectedRows($.grep(_grid.getSelectedRows(), function (n) {
                                return groupSelectRows.indexOf(n) < 0;
                            }));
                        } else {
                            _grid.setSelectedRows(_grid.getSelectedRows().concat(groupSelectRows));
                        }
                    }

                    e.stopImmediatePropagation();
                    e.preventDefault();
                }
            }
        }

        function getGroupRowMetadata(item) {
            if (options.groupCheckable) {
                return {
                    selectable: false,
                    focusable: false, //options.groupFocusable,
                    cssClasses: options.groupCssClass,
                    columns: {
                        0: {
                            formatter: defaultGroupCellCheckFormatter,
                            editor: null,
                            cssClass: options.groupCheckCssClass
                        },
                        1: {
                            colspan: "*",
                            formatter: defaultGroupCellFormatter,
                            editor: null
                        }
                    }
                };
            } else {
                return {
                    selectable: false,
                    focusable: false, //options.groupFocusable,
                    cssClasses: options.groupCssClass,
                    columns: {
                        0: {
                            colspan: "*",
                            formatter: defaultGroupCellFormatter,
                            editor: null
                        }
                    }
                };
            }
        }

        function getTotalsRowMetadata(item) {
            return {
                selectable: false,
                focusable: options.totalsFocusable,
                cssClasses: options.totalsCssClass,
                formatter: defaultTotalsCellFormatter,
                editor: null
            };
        }

        return {
            "init": init,
            "destroy": destroy,
            "getGroupRowMetadata": getGroupRowMetadata,
            "getTotalsRowMetadata": getTotalsRowMetadata
        };
    }
});

/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

(function (factory) {
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {
        factory(jQuery);
    }
})(function ($) {
    // register namespace
    $.extend(true, window, {
        "Slick": {
            "CheckboxSelectColumn": CheckboxSelectColumn
        }
    });

    function CheckboxSelectColumn(options) {
        var _grid;
        var enableSelectRows = []; //记录表格支持选择的行数
        var disableSelectRows = []; //记录表格不支持选择的行数
        // var _idProperty = "__id___";
        var _self = this;
        var _selectedRowsLookup = {};
        var _defaults = {
            columnId: "_checkbox_selector",
            cssClass: "slick-cell-checkbox",
            // toolTip:"全选/撤销",
            toolTip: Base.I18n.getLangText('taface.module.grid.all') + "/" + Base.I18n.getLangText('taface.module.grid.reverse'),
            width: 40
        };

        var _options = $.extend(true, {}, _defaults, options);

        function init(grid) {
            _grid = grid;
            _grid.onSelectedRowsChanged.subscribe(handleSelectedRowsChanged);
            _grid.onClick.subscribe(handleClick);
            _grid.onHeaderClick.subscribe(handleHeaderClick);
        }

        function destroy() {
            _grid.onSelectedRowsChanged.unsubscribe(handleSelectedRowsChanged);
            _grid.onClick.unsubscribe(handleClick);
            _grid.onHeaderClick.unsubscribe(handleHeaderClick);
        }
        /**
         * 当选择行改变时
         */
        function handleSelectedRowsChanged(e, args) {
            initRowsSelectState();
            var selectedRows = _grid.getSelectedRows(); //获取选择行号
            var lookup = {},
                row,
                i;
            //通过两个for循环排除没有改变的列.如selectLook 1 2 3， look 2 4，invalidate 2,4
            for (i = 0; i < selectedRows.length; i++) {
                row = selectedRows[i]; // row = 选择的行号
                lookup[row] = true; //设置查找到位true
                if (lookup[row] !== _selectedRowsLookup[row]) {
                    //如果相同不做改变
                    _grid.invalidateRow(row); //当之前的查找项和当前查找项标志不同是，销毁该行
                    delete _selectedRowsLookup[row]; //删除之前状态中row 
                }
            }
            //销毁之前选择的row
            for (i in _selectedRowsLookup) {
                _grid.invalidateRow(i);
            }

            _selectedRowsLookup = lookup; //设置当前选择数据为最新选择数据
            _grid.render();

            //当选种中的数据和数据长度相同时，勾选顶部选择框，添加排除数据为0时的
            if (selectedRows.length != 0 && selectedRows.length == _grid.getDataView().getLength() - disableSelectRows.length && _grid.getDataLength() != 0) {
                _grid.updateColumnHeader(_options.columnId, "<input type='checkbox'  class='slick-checkbox-header' checked='checked'>", _options.toolTip);
            } else {
                _grid.updateColumnHeader(_options.columnId, "<input type='checkbox'  class='slick-checkbox-header'>", _options.toolTip);
            }
        }

        //区分行选中状态，
        /*
         * 如果表格设置了option.onCheck条件，不满足的行将作为可选但未选的行处理，
         * 这将导致两种情况：
         * 一、无法完全全选： 点击全选会勾选表格可选的所有行，但是全选本身不会被勾选(可通过点击全选框外的空白处取消勾选)
         * 二、单选完成后不能反选全选: 用户勾选所有可选表格行后，全选框并不会被勾选
         */
        function initRowsSelectState($e) {
            var rows = []; //当前可以选择的行，从enableSelectRows中筛选出满足option.onCheck条件的
            var isGroupBy = false,
                isTotals = _grid.getOptions().hasTotals;
            //如果表格中存在分组
            var groupby = _grid.getOptions().groupingBy;
            if (groupby && groupby != "_onlyTotals") {
                isGroupBy = true;
            }

            disableSelectRows = [];
            enableSelectRows = [];

            if (isGroupBy || isTotals || _options.onChecked) {
                for (var i = 0; i < _grid.getDataView().getLength(); i++) {
                    var rowData = _grid.getDataView().getItem(i);
                    if (rowData == undefined || _grid.getDataView().getItemMetadata(i) != undefined) {
                        disableSelectRows.push(i); //记录表格不支持选择的行数  统计、分组等
                        continue;
                    }

                    enableSelectRows.push(i); //记录表格支持选择的行数
                    //判断是否是全选
                    if ($e && $e.hasClass("slick-checkbox-header")) {
                        if (typeof _options.onChecked == 'undefined' || _options.onChecked(rowData)) {
                            //通过canSelect传入rowdata判断是否能被选择
                            rows.push(i); //记录表格支持选择的行数
                        }
                    } else {
                        rows.push(i); //记录表格支持选择的行数
                    }
                }
            } else {
                for (var i = 0; i < _grid.getDataLength(); i++) {
                    rows.push(i);
                    enableSelectRows.push(i); //记录表格支持选择的行数
                }
            }
            return rows;
        }

        function handleClick(e, args) {
            // clicking on a row select checkbox
            //如果点击了单元格，判断是否是checkBox
            var a;
            var target = e.srcElement || e.target;
            var $checkbox;
            if ($(target).hasClass("slick-cell-checkbox")) {
                $checkbox = $(target).children();
            } else {
                $checkbox = $(target);
            }

            //modify by xp 分组与checkbox同时存在时的冲突问题
            if ($checkbox.parent().hasClass("slick-cell-checkbox")) {
                e.stopPropagation();
                e.stopImmediatePropagation();
            } else {
                return;
            }

            if ((a = _grid.getColumns()[args.cell].id) === _options.columnId) {
                // 如果是编辑状态尝试提交
                if (_grid.getEditorLock().isActive() && !_grid.getEditorLock().commitCurrentEdit()) {
                    e.preventDefault();
                    e.stopImmediatePropagation();
                    return;
                }
                //如果
                if (!$checkbox.attr("disabled")) {
                    if (_selectedRowsLookup[args.row]) {
                        _grid.setSelectedRows($.grep(_grid.getSelectedRows(), function (n) {
                            return n != args.row;
                        }));
                    } else {
                        if (_grid.getDataView().getLength() - disableSelectRows.length != enableSelectRows.length) {
                            initRowsSelectState($checkbox);
                        }
                        _grid.setSelectedRows(_grid.getSelectedRows().concat(args.row));
                    }
                }
                if (typeof _options.onRowSelect == "function") {
                    //add by zhouhy 点击回调加入isSelect属性
                    if ($(target).context.checked == undefined) {
                        args.isSelect = !$checkbox.get(0).checked;
                    } else {
                        args.isSelect = $(target).context.checked;
                    }
                    _options.onRowSelect(args, e);
                }
                e.stopPropagation();
                e.stopImmediatePropagation();
            }
            //disableSelectRows = [];//清除不能选择计数
        }

        function handleHeaderClick(e, args) {
            var target = e.srcElement || e.target;
            if (args.column && args.column.id == _options.columnId) {
                // if editing, try to commit
                if (_grid.getEditorLock().isActive() && !_grid.getEditorLock().commitCurrentEdit()) {
                    e.preventDefault();
                    e.stopImmediatePropagation();
                    return;
                }

                if ($(target).is(":checked")) {
                    var rows = initRowsSelectState($(target));
                    _grid.setSelectedRows(rows);
                } else {
                    _grid.setSelectedRows([]);
                    disableSelectRows = []; //清除不能选择计数
                }

                if (typeof _options.onRowSelect == "function") {
                    //add by zhouhy 点击回调加入isSelect属性
                    if ($(target).context.checked == undefined) {
                        args.isSelect = $(target).find("input").get(0).checked;
                    } else {
                        args.isSelect = $(target).context.checked;
                    }
                    _options.onRowSelect(args, e);
                }
                e.stopPropagation();
                e.stopImmediatePropagation();
            }
        }

        function getColumnDefinition() {
            return {
                id: _options.columnId,
                name: "<input type='checkbox' class='slick-checkbox-header'>",
                toolTip: _options.toolTip,
                field: "sel",
                width: _options.width,
                resizable: false,
                sortable: false,
                cssClass: _options.cssClass,
                formatter: checkboxSelectionFormatter
            };
        }
        function delete_selectedRowsLookup(row) {
            delete _selectedRowsLookup[row];
        }
        function checkboxSelectionFormatter(row, cell, value, columnDef, dataContext) {
            var checkAble = true;
            //        	_options.canSelect = function (rowData) {
            //        		if (rowData["aac001"] == '14437856') return false;
            //        		return true;
            //        	}
            if (_options.onChecked) {
                checkAble = _options.onChecked(dataContext);
            }
            if (!checkAble) return _selectedRowsLookup[row] ? "<input type='checkbox' checked='checked' disabled='true'>" : "<input type='checkbox' disabled='true'>";
            //be here,checkAble always is true
            if (dataContext) {
                return _selectedRowsLookup[row] ? "<input type='checkbox' checked='checked'>" : "<input type='checkbox'>";
            }
            return null;
        }
        function setNull() {
            _selectedRowsLookup = [];
        }
        $.extend(this, {
            "init": init,
            "destroy": destroy,
            "delete_selectedRowsLookup": delete_selectedRowsLookup,
            "getColumnDefinition": getColumnDefinition,
            "setNull": setNull,
            "handleSelectedRowsChanged": handleSelectedRowsChanged
        });
    }
});

/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/* THESE FORMATTERS & EDITORS ARE JUST SAMPLES! */
/**
 * 编辑框
 * @module Grid
 * @namespace SlickEditor
 */
//selectInput,text,date,number,bool
(function (factory) {
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(5), __webpack_require__(149), __webpack_require__(41), __webpack_require__(73)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {
        factory(jQuery);
    }
})(function ($) {
    /**
     * 创建编辑框
     * @class SlickEditor
     * @static
     * @constructor
     */
    var SlickEditor = {
        //validator
        /**
         * @method notNull
         * @private
         */
        notNull: function notNull(value) {
            if (value === undefined || value === null || !value.length)
                // return {valid:false, msg:"不能为空"};
                return { valid: false, msg: Base.I18n.getLangText('taface.module.grid.required') };else return { valid: true, msg: null };
        },
        //formart
        /**
         * @method SelectorCellFormatter
         * @private
         */
        SelectorCellFormatter: function SelectorCellFormatter(row, cell, value, columnDef, dataContext) {
            return !dataContext ? "" : row;
        },
        /**
         * @method SelectInputFormatter
         * @private
         */
        SelectInputFormatter: function SelectInputFormatter(row, cell, value, columnDef, dataContext) {
            var reData = value;
            if (!columnDef.editordata) {
                // throw "下拉框数据不正确";
                return reData ? reData : "";
            }
            var data = columnDef.editordata;
            for (var i = 0; i < data.length; i++) {
                if (data[i].id == value) {
                    reData = data[i].name;
                }
            }
            return reData ? reData : "";
        },
        DynamicSelectInputFormatter: function DynamicSelectInputFormatter(row, cell, value, columnDef, dataContext) {
            var reData = value;
            if (!columnDef.editordata) {
                throw "下拉框数据不正确";
            }
            var data = columnDef.dynamicSelectCallBack(row, columnDef, dataContext, columnDef.editordata);
            for (var i = 0; i < data.length; i++) {
                if (data[i].id == value) {
                    reData = data[i].name;
                }
            }
            return reData ? reData : "";
        },
        /**
         * 用于formatter中,金钱格式化,例如:formatter="MoneyFormatter",产生的结果32.32-->￥32.32,3434.32-->￥343,4.32
         * @method MoneyFormatter
         * @param row 行号
         * @param cell 列号
         * @param value 单元格值
         * @param columnDef 列头信息
         * @param dataContext 该行数据信息
         * @returns {String} 格式化后的信息
         */
        MoneyFormatter: function MoneyFormatter(row, cell, value, columnDef, dataContext) {
            if (value === "" || value == undefined) {
                return "";
            } else {
                var moneyValue = String(value);
                var t_moneyValue;
                if (moneyValue.indexOf(".") > 0) {
                    t_moneyValue = moneyValue.substring(0, moneyValue.indexOf("."));
                    var t_p = moneyValue.substring(moneyValue.indexOf("."));
                    var re = /(-?\d+)(\d{3})/;
                    while (re.test(t_moneyValue)) {
                        t_moneyValue = t_moneyValue.replace(re, "$1,$2");
                    }
                    moneyValue = t_moneyValue + t_p;
                } else {
                    var re = /(-?\d+)(\d{3})/;
                    while (re.test(moneyValue)) {
                        moneyValue = moneyValue.replace(re, "$1,$2");
                    }
                }
                return "<div style='text-align:right;line-height:24px;'>" + "￥" + moneyValue + "</div>";
            }
        },
        /**
         * 用于formatter中,金钱格式化,例如:formatter="MoneyFormatterNo$",产生的结果3223.32-->322,3.32
         * @method MoneyFormatterNo$
         * @param row 行号
         * @param cell 列号
         * @param value 单元格值
         * @param columnDef 列头信息
         * @param dataContext 该行数据信息
         * @returns {String} 格式化后的信息
         */
        MoneyFormatterNo$: function MoneyFormatterNo$(row, cell, value, columnDef, dataContext) {
            if (value === "" || value == undefined) {
                return "";
            } else {
                var moneyValue = String(value);
                var t_moneyValue;
                if (moneyValue.indexOf(".") > 0) {
                    t_moneyValue = moneyValue.substring(0, moneyValue.indexOf("."));
                    var t_p = moneyValue.substring(moneyValue.indexOf("."));
                    var re = /(-?\d+)(\d{3})/;
                    while (re.test(t_moneyValue)) {
                        t_moneyValue = t_moneyValue.replace(re, "$1,$2");
                    }
                    moneyValue = t_moneyValue + t_p;
                } else {
                    var re = /(-?\d+)(\d{3})/;
                    while (re.test(moneyValue)) {
                        moneyValue = moneyValue.replace(re, "$1,$2");
                    }
                }
                if (moneyValue.indexOf(".") < 0) {
                    moneyValue += ".00";
                } else if (moneyValue.substring(moneyValue.indexOf(".")).length < 3) {
                    moneyValue += "0";
                }
                return "<div style='text-align:right;line-height:24px;'>" + moneyValue + "</div>";
            }
        },
        /**
         * 用于formatter中,数据格式化,百分比,例如:formatter="PercentCompleteCellFormatter",产生的结果32-->32%
         * @method PercentCompleteCellFormatter
         * @param row 行号
         * @param cell 列号
         * @param value 单元格值
         * @param columnDef 列头信息
         * @param dataContext 该行数据信息
         * @returns {String} 格式化后的信息
         */
        PercentCompleteCellFormatter: function PercentCompleteCellFormatter(row, cell, value, columnDef, dataContext) {
            if (value == null || value === "") return "-";else if (value < 50) return "<span style='color:red;font-weight:bold;'>" + value + "%</span>";else return "<span style='color:green'>" + value + "%</span>";
        },
        /**
         * * 用于formatter中,背景颜色变化,例如:formatter="GraphicalPercentCompleteCellFormatter",根据不同的结果产生不同的背景颜色及长度
         * @method GraphicalPercentCompleteCellFormatter
         * @param row 行号
         * @param cell 列号
         * @param value 单元格值
         * @param columnDef 列头信息
         * @param dataContext 该行数据信息
         * @returns {String} 格式化后的信息
         */
        GraphicalPercentCompleteCellFormatter: function GraphicalPercentCompleteCellFormatter(row, cell, value, columnDef, dataContext) {
            if (value == null || value === "") return "";

            var color;

            if (value < 30) color = "red";else if (value < 70) color = "silver";else color = "green";

            return "<span class='percent-complete-bar' style='display:block;height:100%;line-height:24px;background:" + color + ";width:" + value + "%'>" + value + "</span>";
        },
        /**
         * 用于formatter中,例如:formatter="YesNoCellFormatter",空返回No,否则返回Yes
         * @method YesNoCellFormatter
         * @param row 行号
         * @param cell 列号
         * @param value 单元格值
         * @param columnDef 列头信息
         * @param dataContext 该行数据信息
         * @returns {String} 格式化后的信息
         */
        YesNoCellFormatter: function YesNoCellFormatter(row, cell, value, columnDef, dataContext) {
            return value ? "是" : "否";
        },
        /**
         *  用于formatter中,背景图片,例如:formatter="BoolCellFormatter",空返回"",否则返回一张显示"对号"的图片
         * @method BoolCellFormatter
         * @param row 行号
         * @param cell 列号
         * @param value 单元格值
         * @param columnDef 列头信息
         * @param dataContext 该行数据信息
         * @returns {Object} 格式化后的信息
         */
        BoolCellFormatter: function BoolCellFormatter(row, cell, value, columnDef, dataContext) {
            return value ? "<img src='" + Base.globvar.basePath + "/ta/resource/themes/base/slickgrid/images/tick.png'>" : "";
        },
        /**
         *  用于formatter中,背景图片,例如:formatter="TaskNameFormatter",在value前面显示一张"+"号的图片
         * @method TaskNameFormatter
         * @param row 行号
         * @param cell 列号
         * @param value 单元格值
         * @param columnDef 列头信息
         * @param dataContext 该行数据信息
         * @returns {Object} 格式化后的信息
         */
        TaskNameFormatter: function TaskNameFormatter(row, cell, value, columnDef, dataContext) {
            // todo:  html encode
            var spacer = "<span style='display:inline-block;height:1px;width:" + (2 + 15 * dataContext["indent"]) + "px'></span>";
            return spacer + " <img src='" + Base.globvar.basePath + "/ta/resource/themes/base/slickgrid/images/expand.gif'>&nbsp;" + value;
        },
        /**
         * 用于formatter中,背景图片,例如:formatter="ResourcesFormatter",dataContext必须有resources字段,且resources是数组,该列的width<50才生效
         * @method ResourcesFormatter
         * @param row 行号
         * @param cell 列号
         * @param value 单元格值
         * @param columnDef 列头信息
         * @param dataContext 该行数据信息
         * @returns {Object} 格式化后的信息
         */
        ResourcesFormatter: function ResourcesFormatter(row, cell, value, columnDef, dataContext) {
            var resources = dataContext["resources"];
            if (!resources || resources.length == 0) return "";
            if (columnDef.width < 50) return (resources.length > 1 ? "<center><img src='" + Base.globvar.basePath + "/ta/resource/themes/base/slickgrid/images/info.gif' " : "<center><img src='" + Base.globvar.basePath + "/ta/resource/themes/base/slickgrid/images/drag-handle.png' ") + " title='" + resources.join(", ") + "'></center>";else return resources.join(", ");
        },
        //*********************************editor//
        dynamicSelectInput: function dynamicSelectInput(args, data, options) {
            var $input;
            var inputObj;
            var defaultValue;
            var id = "gridSelect_tree";
            var scope = this;
            data = args.column.dynamicSelectCallBack(args.item._row_, args.column, args.item, args.column.editordata);
            this.init = function () {
                var $selectinputLayoutInput = $("<div class='selectinput-layout-input' style='margin-left: 0px' ></div>");
                $input = $("<div id='" + id + "'/>");
                $selectinputLayoutInput.append($input);
                $selectinputLayoutInput.appendTo(args.container);
                if (options != undefined && options.flexboxOption != undefined) {
                    options.flexboxOption.onSelect = function (hid, inp) {
                        args.grid.getEditorLock().commitCurrentEdit();
                    };
                    inputObj = $input.flexbox(data, options.flexboxOption);
                } else {
                    var option = {};
                    option.allowInputOtherText = options.allowInputOtherText;
                    option.onSelect = function (hid, inp) {
                        args.grid.getEditorLock().commitCurrentEdit();
                    };
                    option.onClear = function (oldInpVal, oldHdnVal) {
                        args.grid.getEditorLock().commitCurrentEdit();
                    };
                    option.required = options.required;
                    option.toolTip = options.toolTip || null;
                    option.bpopTipMsg = options.popMsg || null;
                    if (typeof options.onFocus == "function") {
                        option.onFocus = options.onFocus;
                    }
                    inputObj = $input.flexbox(data, option);
                }
                inputObj[0].getInput().css("height", 25).blur(function (e) {
                    args.grid.getEditorLock().commitCurrentEdit();
                }).bind("keydown.nav", function (e) {
                    if (typeof options.onKeydown == "function") options.onKeydown(e);
                    if (e.keyCode === 37 || e.keyCode === 39) {
                        e.stopImmediatePropagation();
                    } else if (e.keyCode === 13) {
                        inputObj[0].getInput().blur();
                        args.grid.getEditorLock().commitCurrentEdit();
                        args.grid.navigateRight();
                    }
                });
                inputObj[0].setFocus();
            };
            this.destroy = function () {
                $input.remove();
                $("#" + id + "_ctr").remove();
                Bubble.hideInfo();
            };

            this.focus = function () {
                inputObj[0].setFocus();
            };
            this.blur = function () {
                args.grid.getEditorLock().commitCurrentEdit();
                inputObj[0].setBlur();
            };
            this.getValue = function () {
                return inputObj[0].getValue(0);
            };

            this.setValue = function (val) {
                inputObj[0].setValue(val);
            };

            this.loadValue = function (item) {
                // defaultValue = item[args.column.field] || "";
                //modify by cy 修改默认值是0 解析成空的情况
                defaultValue = "";
                if (item[args.column.field] !== undefined && item[args.column.field] !== null) {
                    defaultValue = item[args.column.field];
                }
                inputObj[0].setValue(defaultValue);
                this.defaultValue = defaultValue;
                //$input.select();
            };

            this.serializeValue = function () {
                return inputObj[0].getValue(1);
            };

            this.applyValue = function (item, state) {
                item[args.column.field] = state;
            };
            //this.onChangefn = options.onChange;

            this.isValueChanged = function () {
                //如果获取的显示值为空,则 清空隐藏框的值
                if (inputObj[0].getValue(0) == "") {
                    inputObj[0].clearSelectValue();
                }
                //modify by cy 修改值为0的情况 被识别成"" null 等;
                return !(inputObj[0].getValue(1) === "" && defaultValue === null) && inputObj[0].getValue(1) !== defaultValue;
            };

            this.validate = function () {
                var rs = true;
                if (inputObj[0]) {
                    rs = inputObj[0].doValidate();
                }
                return {
                    valid: rs,
                    msg: null
                };
            };

            this.init();
        },
        selectInput: function selectInput(args, data, options) {
            var $input;
            var inputObj;
            var defaultValue;
            var id = "gridSelect_tree";
            var scope = this;
            this.init = function () {
                var $selectinputLayoutInput = $("<div class='selectinput-layout-input' style='margin-left: 0px' ></div>");
                $input = $("<div id='" + id + "'/>");
                $selectinputLayoutInput.append($input);
                $selectinputLayoutInput.appendTo(args.container);
                if (options != undefined && options.flexboxOption != undefined) {
                    options.flexboxOption.onSelect = function (hid, inp) {
                        args.grid.getEditorLock().commitCurrentEdit();
                    };
                    options.flexboxOption.onClear = function (oldInpVal, oldHdnVal) {
                        args.grid.getEditorLock().commitCurrentEdit();
                    };
                    options.flexboxOption.getValidateValues = function () {
                        return [inputObj[0].getValue(), args.item, args.column];
                    };
                    inputObj = $input.flexbox(data, options.flexboxOption);
                } else {
                    var option = {};
                    option.allowInputOtherText = options.allowInputOtherText;
                    option.onSelect = function (hid, inp) {
                        args.grid.getEditorLock().commitCurrentEdit();
                    };
                    option.onClear = function (oldInpVal, oldHdnVal) {
                        args.grid.getEditorLock().commitCurrentEdit();
                    };
                    option.required = options.required;
                    option.toolTip = options.toolTip || null;
                    option.bpopTipMsg = options.popMsg || null;
                    if (typeof options.onFocus == "function") {
                        option.onFocus = options.onFocus;
                    }
                    option.getValidateValues = function () {
                        return [inputObj[0].getValue(), args.item, args.column];
                    };
                    inputObj = $input.flexbox(data, option);
                }
                inputObj[0].getInput().css("height", 25).blur(function () {
                    args.grid.getEditorLock().commitCurrentEdit();
                }).bind("keydown.nav", function (e) {
                    if (typeof options.onKeydown == "function") options.onKeydown(e);
                    if (e.keyCode === 37 || e.keyCode === 39) {
                        e.stopImmediatePropagation();
                    } else if (e.keyCode === 13) {
                        inputObj[0].getInput().blur();
                        args.grid.getEditorLock().commitCurrentEdit();
                        args.grid.navigateRight();
                    }
                });
                inputObj[0].setFocus();
            };
            this.destroy = function () {
                $input.remove();
                $("#" + id + "_ctr").remove();
                Bubble.hideInfo();
            };

            this.focus = function () {
                inputObj[0].setFocus();
            };
            this.blur = function () {
                args.grid.getEditorLock().commitCurrentEdit();
                inputObj[0].setBlur();
            };
            this.getValue = function () {
                return inputObj[0].getValue(0);
            };

            this.setValue = function (val) {
                inputObj[0].setValue(val);
            };

            this.loadValue = function (item) {
                // defaultValue = item[args.column.field] || "";
                //modify by cy 修改默认值是0 解析成空的情况
                defaultValue = "";
                if (item[args.column.field] !== undefined && item[args.column.field] !== null) {
                    defaultValue = item[args.column.field];
                }
                inputObj[0].setValue(defaultValue);
                this.defaultValue = defaultValue;
                //$input.select();
            };

            this.serializeValue = function () {
                return inputObj[0].getValue(1);
            };

            this.applyValue = function (item, state) {
                item[args.column.field] = state;
            };
            //this.onChangefn = options.onChange;

            this.isValueChanged = function () {
                //如果获取的显示值为空,则 清空隐藏框的值
                if (inputObj[0].getValue(0) == "") {
                    inputObj[0].clearSelectValue();
                }
                //modify by cy 修改值为0的情况 被识别成"" null 等;
                return !(inputObj[0].getValue(1) === "" && defaultValue === null) && inputObj[0].getValue(1) !== defaultValue;
            };

            this.validate = function () {
                var rs = true;
                if (inputObj[0]) {
                    rs = inputObj[0].doValidate();
                }
                return {
                    valid: rs,
                    msg: null
                };
            };

            this.init();
        },
        treeEditor: function treeEditor(args, data, options) {
            var $input, $tree, $div;
            var zTreeObj;
            var defaultValue;
            var scope = this;
            this.init = function () {
                $input = $("<input style='height:20px' class='editor-text' type='text'/>").appendTo(args.container);
                $input.bind("focus", function () {
                    if (zTreeObj == null) {
                        $div = $("<div>").appendTo(args.container);
                        $tree = $("<ul id='" + args.column.id + "'class='ztree grid-ztree'>").appendTo($div);
                        var setting = {
                            view: {
                                selectedMulti: false
                            },
                            data: {
                                simpleData: {
                                    enable: true,
                                    idKey: "id",
                                    pIdKey: "pId",
                                    rootPId: null
                                },
                                keep: {
                                    parent: false,
                                    leaf: false
                                }
                            },
                            async: {
                                enable: true,
                                url: (options.editorOptions ? options.editorOptions.url : "") || ""
                            },
                            callback: {
                                onClick: function onClick(event, treeId, treeNode) {
                                    $input.val(treeNode.id);
                                    args.column.editordata = [treeNode];
                                    args.grid.getEditorLock().commitCurrentEdit();
                                }
                            }
                            // zTreeObj = $.fn.zTree.init($tree, setting, data);
                        };zTreeObj = $.fn.zTree.init($tree, setting, options.editorOptions.data);
                        zTreeObj.expandAll(true);
                    }
                });

                $input.bind("keydown.nav", function (e) {
                    if (typeof options.onKeydown == "function") options.onKeydown(e);
                    if (e.keyCode === 37 || e.keyCode === 39) {
                        e.stopImmediatePropagation();
                    } else if (e.keyCode === 13) {
                        args.grid.navigateRight();
                    }
                });
                $input.focus();
            };

            this.destroy = function () {
                $input.remove();
                $.fn.zTree.destroy(args.column.id);
                $div.remove();
            };

            this.focus = function () {
                $input.focus();
            };

            this.getValue = function () {
                return $input.val();
            };

            this.setValue = function (val) {
                $input.val(val);
            };

            this.loadValue = function (item) {
                defaultValue = item[args.column.field] || "";
                $input.val(defaultValue);
                this.defaultValue = defaultValue;
                //$input.select();
            };

            this.serializeValue = function () {
                return $input.val();
            };

            this.applyValue = function (item, state) {
                item[args.column.field] = state;
            };
            this.isValueChanged = function () {
                return !($input.val() == "" && defaultValue == null) && $input.val() != defaultValue;
            };

            this.validate = function () {
                if (args.column.validator) {
                    var validationResults = args.column.validator($input.val());
                    if (!validationResults.valid) return validationResults;
                }

                return {
                    valid: true,
                    msg: null
                };
            };

            this.init();
        },
        selectGrid: function selectGrid(args, data, options) {
            var grid;
            var container;
            var inputObj;
            var defaultValue;
            var scope = this;
            this.init = function () {
                $container = $("<span />").appendTo(args.container);

                var data = options.gridDatafn();
                var columns = options.gridItemfn();
                var option = options.gridOptionfn();

                if (option.onEnter && typeof option.onEnter == "function") {
                    var tempfn = option.onEnter;
                    option.onEnter = function (grid) {
                        return function (grid) {
                            tempfn(grid);
                            if (!grid.getIsHidden()) {
                                args.grid.navigateRight();
                            }
                        }(grid);
                    };
                }

                grid = new SelectGridEditor($container, columns, data, option);
                grid.getInput().focus();
            };

            this.destroy = function () {
                $container.remove();
            };
            this.focus = function () {
                grid.getInput().focus();
            };
            this.getValue = function () {
                return grid.getDescData();
            };
            this.setValue = function (val) {
                grid.setDescData(val);
            };
            this.loadValue = function (item) {
                defaultValue = item[args.column.field] || "";
                grid.setDescData(defaultValue);
                this.defaultValue = defaultValue;
            };
            this.serializeValue = function () {
                return grid.getDescData();
            };
            this.applyValue = function (item, state) {
                item[args.column.field] = state;
            };
            this.isValueChanged = function () {
                return true;
                //return (!(inputObj[0].getValue(1) == "" && defaultValue == null)) && (inputObj[0].getValue(1) != defaultValue);
            };
            this.validate = function () {
                if (args.column.validator) {
                    var validationResults = args.column.validator($input.val());
                    if (!validationResults.valid) return validationResults;
                }
                return {
                    valid: true,
                    msg: null
                };
            };
            this.init();
        },
        selectInputDesc: function selectInputDesc(args, data, options) {
            var $input;
            var inputObj;
            var defaultValue;
            var scope = this;
            this.init = function () {
                $input = $("<div />").appendTo(args.container);
                if (options.flexboxOption != undefined) {
                    options.flexboxOption.allowInputOtherText = true;
                    inputObj = $input.flexbox(data, options.flexboxOption);
                } else inputObj = $input.flexbox(data, { allowInputOtherText: true });

                inputObj[0].getInput().css("height", 25).blur(function () {
                    args.grid.getEditorLock().commitCurrentEdit();
                }).bind("keydown.nav", function (e) {
                    if (typeof options.onKeydown == "function") options.onKeydown(e);
                    if (e.keyCode === 37 || e.keyCode === 39) {
                        e.stopImmediatePropagation();
                    } else if (e.keyCode === 13) {
                        args.grid.navigateRight();
                    }
                });
                inputObj[0].setFocus();
            };

            this.destroy = function () {
                $input.remove();
            };

            this.focus = function () {
                inputObj[0].setFocus();
                // $input.focus();
            };

            this.getValue = function () {
                return inputObj[0].getValue(0);
            };

            this.setValue = function (val) {
                inputObj[0].setValue(val);
            };

            this.loadValue = function (item) {
                defaultValue = item[args.column.field] || "";
                inputObj[0].setValue(defaultValue);
                this.defaultValue = defaultValue;
                //$input.select();
            };

            this.serializeValue = function () {
                return inputObj[0].getValue(0);
            };

            this.applyValue = function (item, state) {
                item[args.column.field] = state;
            };

            this.isValueChanged = function () {
                return !(inputObj[0].getValue(0) == "" && defaultValue == null) && inputObj[0].getValue(0) != defaultValue;
            };

            this.validate = function () {
                if (args.column.validator) {
                    var validationResults = args.column.validator($input.val());
                    if (!validationResults.valid) return validationResults;
                }

                return {
                    valid: true,
                    msg: null
                };
            };

            this.init();
        },
        text: function text(args, data, options) {
            var $input;
            var defaultValue;
            var validObj = null;
            var validType = options.validType == undefined ? "" : options.validType;
            this.init = function () {
                var str = "<input />";
                $input = $(str).appendTo(args.container).bind("keydown.nav", function (e) {
                    if (typeof options.onKeydown == "function") options.onKeydown(e);
                    if (e.keyCode === 37 || e.keyCode === 39) {
                        e.stopImmediatePropagation();
                    } else if (e.keyCode === 13) {
                        args.grid.navigateRight();
                    }
                }).bind("keyup.nav", function (e) {
                    if (typeof options.onKeyup == "function") options.onKeyup(e);
                    if (e.keyCode === 37 || e.keyCode === 39) {
                        e.stopImmediatePropagation();
                    } else if (e.keyCode === 13) {
                        //args.grid.navigateRight();
                    }
                }).bind("focus.nav", function (e) {
                    if (typeof options.onFocus == "function") options.onFocus(e);
                    if (e.keyCode === 37 || e.keyCode === 39) {
                        e.stopImmediatePropagation();
                    } else if (e.keyCode === 13) {
                        //args.grid.navigateRight();
                    }
                }).blur(function () {
                    args.grid.getEditorLock().commitCurrentEdit();
                }).focus().select();
                if (options.popMsg) {
                    options.bpopTipMsg = options.popMsg;
                    var _op = {
                        info: options.popMsg || "这是提示信息喵"
                    };
                    Bubble.setBubbleEvent($input, _op);
                }
                if (options.validType != "" || options.required == true) {
                    options.getValidateValues = function () {
                        return [$input.val(), args.item, args.column];
                    };
                    validObj = new validateObj(null, $input, options, null);
                    options.required == true && validObj.addOrder({ type: "required", msg: options.toolTip || null });
                    options.validType != "" && validObj.addOrder(options.validType);
                }
            };
            this.destroy = function () {
                Bubble.hideInfo();
                $input.remove();
            };

            this.focus = function () {
                $input.focus();
            };

            this.getValue = function () {
                return $input.val();
            };

            this.setValue = function (val) {
                $input.val(val);
            };
            this.loadValue = function (item) {
                defaultValue = item[args.column.field] || "";
                $input.val(defaultValue);
                $input[0].defaultValue = defaultValue;
                $input.select();
                this.defaultValue = defaultValue;
            };

            this.serializeValue = function () {
                return $input.val();
            };

            this.applyValue = function (item, state) {
                item[args.column.field] = state;
            };

            this.isValueChanged = function () {
                return !($input.val() == "" && defaultValue == null) && $input.val() != defaultValue;
            };

            this.validate = function () {
                var valid = true;
                if (validObj) {
                    valid = validObj.executeValidate();
                }
                return {
                    valid: valid,
                    msg: null
                };
            };

            this.init();
        },
        date: function date(args, data, options) {
            var id = options.id + "_date";
            var dateObj = null;
            var $input;
            var defaultValue;
            var scope = this;
            this.init = function () {
                var str = "<input id= '" + id + "' type='text' class='editor-text datefield Wdate' maxlength='10'/>";
                $input = $(str);
                $input.appendTo(args.container);

                options.value = args.item[args.column.field];
                options.params = {
                    el: $input[0],
                    dateFmt: 'yyyy-MM-dd',
                    errDealMode: 1
                };
                options.getValidateValues = function () {
                    return [$input.val(), args.item, args.column];
                };
                dateObj = new TaDate(id, options);

                $input.bind("keydown.nav", function (e) {
                    if (typeof options.onKeydown == "function") options.onKeydown(e);

                    if (e.keyCode === 37 || e.keyCode === 39) {
                        e.stopImmediatePropagation();
                    } else if (e.keyCode === 13) {
                        if (options.showSelectPanel == true) {
                            //e.stopImmediatePropagation();
                            return false;
                        } else {
                            args.grid.navigateRight();
                        }
                    }
                }).blur(function (e) {
                    //此处应销毁绑定的日期框组件,但目前只有最新版日期组件支持$dp.unbind(),暂时先解决关键性的focus事件问题
                    $input.unbind("focus");
                    //日期面板会丢失两次焦点，需要排除第一次焦点丢失（选择面板）的情况，不然表格单元格提交失败
                    if ($dp.dd.style.display == "none") {
                        //commitCurrentEdit可能存在失败的情况
                        if (args.grid.getEditorLock().commitCurrentEdit()) {
                            $dp.hide();
                        }
                    }
                }).focus().select();
            };

            this.destroy = function () {
                $input.remove();
            };

            this.focus = function () {
                $input.focus();
            };

            this.getValue = function () {
                return $input.val();
            };

            this.setValue = function (val) {
                $input.val(val);
            };

            this.loadValue = function (item) {
                defaultValue = item[args.column.field] || "";
                $input.val(defaultValue);
                $input[0].defaultValue = defaultValue;
                $input.select();
                this.defaultValue = defaultValue;
            };

            this.serializeValue = function () {
                return $input.val();
            };

            this.applyValue = function (item, state) {
                item[args.column.field] = state;
            };

            this.isValueChanged = function () {
                return !($input.val() == "" && defaultValue == null) && $input.val() != defaultValue;
            };

            this.validate = function () {
                var valid = true;
                if (dateObj) {
                    valid = dateObj.doValidate();
                }
                return {
                    valid: valid,
                    msg: null
                };
            };

            this.init();
        },
        dateTime: function dateTime(args, data, options) {
            var id = options.id + "_dateTime";
            var dateObj = null;
            var $input;
            var defaultValue;
            var scope = this;

            this.init = function () {

                var str = "<input id= '" + id + "' type='text' class='editor-text datetimefield Wdate' maxlength='19'/>";
                $input = $(str);
                $input.appendTo(args.container);

                options.value = args.item[args.column.field];
                options.params = {
                    el: $input[0],
                    dateFmt: 'yyyy-MM-dd HH:mm:ss',
                    errDealMode: 1
                };
                options.getValidateValues = function () {
                    return [$input.val(), args.item, args.column];
                };
                dateObj = new TaDate(id, options);

                $input.bind("keydown.nav", function (e) {
                    if (typeof options.onKeydown == "function") options.onKeydown(e);

                    if (e.keyCode === 37 || e.keyCode === 39) {
                        e.stopImmediatePropagation();
                    } else if (e.keyCode === 13) {
                        if (options.showSelectPanel == true) {
                            return false;
                        } else {
                            args.grid.navigateRight();
                        }
                    }
                }).blur(function (e) {
                    //此处应销毁绑定的日期框组件,但目前只有最新版日期组件支持$dp.unbind(),暂时先解决关键性的focus事件问题
                    $input.unbind("focus");
                    //日期面板会丢失两次焦点，需要排除第一次焦点丢失（选择面板）的情况，不然表格单元格提交失败
                    if ($dp.dd.style.display == "none") {
                        //commitCurrentEdit可能存在失败的情况
                        if (args.grid.getEditorLock().commitCurrentEdit()) {
                            $dp.hide();
                        }
                    }
                }).focus().select();
            };

            this.destroy = function () {
                $input.remove();
            };

            this.focus = function () {
                $input.focus();
            };

            this.getValue = function () {
                return $input.val();
            };

            this.setValue = function (val) {
                $input.val(val);
            };

            this.loadValue = function (item) {
                defaultValue = item[args.column.field] || "";
                $input.val(defaultValue);
                $input[0].defaultValue = defaultValue;
                $input.select();
                this.defaultValue = defaultValue;
            };

            this.serializeValue = function () {
                return $input.val();
            };

            this.applyValue = function (item, state) {
                item[args.column.field] = state;
            };

            this.isValueChanged = function () {
                return !($input.val() == "" && defaultValue == null) && $input.val() != defaultValue;
            };

            this.validate = function () {
                var valid = true;
                if (dateObj) {
                    valid = dateObj.doValidate();
                }

                return {
                    valid: valid,
                    msg: null
                };
            };

            this.init();
        },

        issue: function issue(args, data, options) {
            var id = options.id + "_issue";
            var dateObj = null;
            var $input;
            var defaultValue;
            var scope = this;

            this.init = function () {
                var str = "<input id= '" + id + "' type='text' class='editor-text issuefield Wdate' maxlength='6'/>";
                $input = $(str);
                $input.appendTo(args.container);

                options.value = args.item[args.column.field];
                options.params = {
                    el: $input[0],
                    dateFmt: 'yyyyMM',
                    errDealMode: 1
                };
                options.getValidateValues = function () {
                    return [$input.val(), args.item, args.column];
                };
                dateObj = new TaDate(id, options);

                $input.bind("keydown.nav", function (e) {
                    if (typeof options.onKeydown == "function") options.onKeydown(e);

                    if (e.keyCode === 37 || e.keyCode === 39) {
                        e.stopImmediatePropagation();
                    } else if (e.keyCode === 13) {
                        if (options.showSelectPanel != undefined && options.showSelectPanel == true) {
                            return false;
                        } else {
                            args.grid.navigateRight();
                        }
                    }
                }).blur(function () {
                    //此处应销毁绑定的日期框组件,但目前只有最新版日期组件支持$dp.unbind(),暂时先解决关键性的focus事件问题
                    $input.unbind("focus");
                    //日期面板会丢失两次焦点，需要排除第一次焦点丢失（选择面板）的情况，不然表格单元格提交失败
                    if ($dp.dd.style.display == "none") {
                        //commitCurrentEdit可能存在失败的情况
                        if (args.grid.getEditorLock().commitCurrentEdit()) {
                            $dp.hide();
                        }
                    }
                }).focus().select();
            };

            this.destroy = function () {
                $input.remove();
            };

            this.focus = function () {
                $input.focus();
            };

            this.getValue = function () {
                return $input.val();
            };

            this.setValue = function (val) {
                $input.val(val);
            };

            this.loadValue = function (item) {
                defaultValue = item[args.column.field] || "";
                $input.val(defaultValue);
                $input[0].defaultValue = defaultValue;
                $input.select();
                this.defaultValue = defaultValue;
            };

            this.serializeValue = function () {
                return $input.val();
            };

            this.applyValue = function (item, state) {
                item[args.column.field] = state;
            };

            this.isValueChanged = function () {
                return !($input.val() == "" && defaultValue == null) && $input.val() != defaultValue;
            };

            this.validate = function () {
                var valid = true;
                if (dateObj) {
                    valid = dateObj.doValidate();
                }

                return {
                    valid: valid,
                    msg: null
                };
            };

            this.init();
        },

        number: function number(args, data, options) {
            var $input;
            var id = options.id + "_number";
            var defaultValue;
            var numberobj = null;
            this.init = function () {
                $input = $("<input type=text id='" + id + "'/>");
                if (options.max != undefined) {
                    $input.attr("max", options.max);
                }
                if (options.min != undefined) {
                    $input.attr("min", options.min);
                }
                if (options.precision != undefined) {
                    $input.attr("precision", options.precision);
                }
                if (options.popMsg) {
                    options.bpopTipMsg = options.popMsg;
                    var _op = {
                        info: options.popMsg || "这是提示信息喵"
                    };
                    Bubble.setBubbleEvent($input, _op);
                }
                $input.bind("keydown.nav", function (e) {
                    if (typeof options.onKeydown == "function") options.onKeydown(e);
                    if (e.keyCode === 37 || e.keyCode === 39) {
                        e.stopImmediatePropagation();
                    }
                });
                $input.bind("keyup.nav", function (e) {
                    if (typeof options.onKeyup == "function") options.onKeyup(e);
                    if (e.keyCode === 37 || e.keyCode === 39) {
                        e.stopImmediatePropagation();
                    }
                });
                $input.bind("focus.nav", function (e) {
                    if (typeof options.onFocus == "function") options.onFocus(e);
                    if (e.keyCode === 37 || e.keyCode === 39) {
                        e.stopImmediatePropagation();
                    } else if (e.keyCode === 13) {
                        //                        	args.grid.navigateRight();
                    }
                });
                options.getValidateValues = function () {
                    return [$input.val(), args.item, args.column];
                };
                $input.appendTo(args.container);
                numberobj = new TaNumber(id, options);
                $input.bind("keydown.nav", function (e) {
                    if (e.keyCode === 13) {
                        args.grid.navigateRight();
                    }
                });
                $input.blur(function () {
                    args.grid.getEditorLock().commitCurrentEdit();
                }).focus().select();
            };

            this.destroy = function () {
                Bubble.hideInfo();
                numberobj = null;
                $input.remove();
            };

            this.focus = function () {
                $input.focus();
            };

            this.loadValue = function (item) {
                defaultValue = item[args.column.field];
                $input.val(defaultValue);
                $input[0].defaultValue = defaultValue;
                $input.select();
                this.defaultValue = defaultValue;
            };

            this.serializeValue = function () {
                return $input.val() || "";
            };

            this.applyValue = function (item, state) {
                item[args.column.field] = state;
            };

            this.isValueChanged = function () {
                var val = "" + $input.val();
                var b = "" + defaultValue == null ? "" : defaultValue;
                var d = !(val == "" && b == null) && val != b;
                return d;
            };

            this.validate = function () {
                var rs = true;
                if (numberobj) {
                    rs = numberobj.doValidate();
                }
                return {
                    valid: rs,
                    msg: null
                };
            };

            this.init();
        },
        bool: function bool(args, data, options) {
            var $select;
            var defaultValue;
            var scope = this;
            var $input = null;
            this.init = function () {
                $select = $("<div  class='bool-editor-con' tabindex='0'>" + "<input type='checkbox' class='editor-checkbox' id='" + options.id + "'>" + "<label for='" + options.id + "'></label>" + "</div>");
                $select.appendTo(args.container);
                $input = $select.find("input");
                $select.on("blur", function () {
                    args.grid.getEditorLock().commitCurrentEdit();
                });
                $select.focus();
            };

            this.destroy = function () {
                $select.remove();
            };

            this.focus = function () {
                $select.focus();
            };

            this.loadValue = function (item) {
                defaultValue = item[args.column.field];
                if (defaultValue) $input[0].checked = true;else $input[0].checked = false;
                this.defaultValue = defaultValue;
            };

            this.serializeValue = function () {
                return $input[0].checked;
            };

            this.getValue = function (target) {
                return $input[0].checked;
            };

            this.setValue = function (target, value) {
                $input[0].checked = value;
            };
            this.applyValue = function (item, state) {
                item[args.column.field] = state;
            };

            this.isValueChanged = function () {
                return $input[0].checked != defaultValue;
            };

            this.validate = function () {
                return {
                    valid: true,
                    msg: null
                };
            };

            this.init();
        },
        StarCellEditor: function StarCellEditor(args) {
            var $input;
            var defaultValue;
            var scope = this;

            function toggle(e) {
                if (e.type == "keydown" && e.which != 32) return;

                if ($input.css("opacity") == "1") $input.css("opacity", 0.5);else $input.css("opacity", 1);

                e.preventDefault();
                e.stopPropagation();
                return false;
            }

            this.init = function () {
                $input = $("<IMG src='../resource/themes/base/slickgrid/images/bullet_star.png' align=absmiddle tabIndex=0 title='Click or press Space to toggle' />").bind("click keydown", toggle).appendTo(args.container).focus();
            };

            this.destroy = function () {
                $input.unbind("click keydown", toggle);
                $input.remove();
            };

            this.focus = function () {
                $input.focus();
            };

            this.loadValue = function (item) {
                defaultValue = item[args.column.field];
                $input.css("opacity", defaultValue ? 1 : 0.2);
            };

            this.serializeValue = function () {
                return $input.css("opacity") == "1";
            };

            this.applyValue = function (item, state) {
                item[args.column.field] = state;
            };

            this.isValueChanged = function () {
                return defaultValue != ($input.css("opacity") == "1");
            };

            this.validate = function () {
                return {
                    valid: true,
                    msg: null
                };
            };

            this.init();
        },
        /*
         * An example of a "detached" editor.
         * The UI is added onto document BODY and .position(), .show() and .hide() are implemented.
         * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.
         */
        textArea: function textArea(args, data, options) {
            var $input, $wrapper;
            var defaultValue;
            var scope = this;

            this.init = function () {
                var $container = $("body");

                $wrapper = $("<DIV class='grid-textarea'/>").appendTo($container);

                $input = $("<TEXTAREA hidefocus rows=5 >").appendTo($wrapper);

                // $("<DIV style='text-align:right'><BUTTON>保存</BUTTON><BUTTON>取消</BUTTON></DIV>")
                var str = "<div style='text-align: right'>";
                str += "<button class='tabutton basebutton solid btn-main small space'><span>" + Base.I18n.getLangText('taface.general.save') + "</span></button>";
                str += "<button class='tabutton basebutton solid btn-main small'><span>" + Base.I18n.getLangText('taface.general.cancel') + "</span></button>";
                str += "</div>";
                $(str).appendTo($wrapper);

                $wrapper.find("button:first").bind("click", this.save);
                $wrapper.find("button:last").bind("click", this.cancel);
                $input.bind("keydown", this.handleKeyDown);

                if (options.popMsg) {
                    options.bpopTipMsg = options.popMsg;
                    var _op = {
                        info: options.popMsg || "未设置提示信息"
                    };
                    Bubble.setBubbleEvent($input, _op);
                }

                scope.position(args.position);
                $input.focus().select();
            };

            this.handleKeyDown = function (e) {
                if (e.which == 13 && e.ctrlKey) {
                    scope.save();
                } else if (e.which == 27) {
                    e.preventDefault();
                    scope.cancel();
                } else if (e.which == 9 && e.shiftKey) {
                    e.preventDefault();
                    grid.navigatePrev();
                } else if (e.which == 9) {
                    e.preventDefault();
                    grid.navigateNext();
                }
            };

            this.save = function () {
                args.commitChanges();
            };

            this.cancel = function () {
                $input.val(defaultValue);
                args.cancelChanges();
            };

            this.hide = function () {
                $wrapper.hide();
            };

            this.show = function () {
                $wrapper.show();
            };

            this.position = function (position) {
                //inputarea height 250 + 5  width 80 + 5
                var top = position.bodyTop - 15;
                var left = position.bodyLeft - 15;
                var right = position.bodyRight - 25;
                var bottom = position.bodyBottom - 25;

                if (right < 250) left = left - (250 - right - position.width);
                if (bottom < 80) top = top - (80 - bottom - position.height);
                $wrapper.css("top", top).css("left", left);
            };

            this.destroy = function () {
                $wrapper.remove();
            };

            this.focus = function () {
                $input.focus();
            };

            this.loadValue = function (item) {
                $input.val(defaultValue = item[args.column.field]);
                $input.select();
                this.defaultValue = defaultValue;
            };

            this.serializeValue = function () {
                return $input.val();
            };

            this.applyValue = function (item, state) {
                item[args.column.field] = state;
            };

            this.isValueChanged = function () {
                return !($input.val() == "" && defaultValue == null) && $input.val() != defaultValue;
            };

            this.validate = function () {
                return {
                    valid: true,
                    msg: null
                };
            };

            this.init();
        }

    };

    $.extend(window, SlickEditor);
});

/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

(function (factory) {
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(17), __webpack_require__(63), __webpack_require__(33)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {
        factory(jQuery);
    }
})(function ($) {
    $.extend(true, window, {
        TaNumber: TaNumber
    });
    __webpack_require__(235);
    function TaNumber(numberId, options) {
        options = $.extend({
            min: null,
            max: null,
            precision: 0,
            numberRound: false,
            asAamount: false,
            amountPre: null,
            softkeyboard: false,
            placeholder: false,
            textHelpWidth: "200",
            textHelpPosition: "bottomLeft",
            textHelp: null,
            bpopTipWidth: "300",
            bpopTipHeight: "500",
            bpopTipPosition: "top",
            bpopTipMsg: null,
            value: null,
            readOnly: false,
            disabled: false,
            onClick: null,
            onFocus: null,
            onBlur: null,
            onChange: null,
            onKeydown: null,
            required: false,
            toolTip: "必输入数字"
        }, options || {});
        var $showInput = $("#" + numberId).attr("realId", numberId);
        var $textInputDiv = $showInput.parent("div.number-input-div");
        var $textLayoutDiv = $textInputDiv.parent("div.number-layout-div");
        var $Label = $textLayoutDiv.find("label");
        var $textHelp = $showInput.siblings(".textHelp-layout-Container");
        var $validateIcon = $showInput.siblings(".validateIcon");
        var $hiddenInput = null;
        var moneyInputObj;
        var validObj = null; //验证对象 add by cy
        //组件事件静默标志 true 静默，静默类事件不执行
        var isSilence = false;

        function init() {

            // fixValue($showInput);
            // bindEvents($showInput);
            // validate($showInput);
            $showInput.numberbox();
            if (options.asAamount) {
                //创建金额输入框
                var t = { numberRound: options.numberRound, decimalPlace: options.precision, symbol: options.amountPre };
                moneyInputObj = moneyInput($showInput, t);
            }
            validate($showInput);
            // 提示文字,写了placeholder属性后会触发这段js代码
            if (options.placeholder) {
                Base.funPlaceholder($showInput[0]);
            }
            // 绑定软键盘点击事件
            if (options.softkeyboard) {
                if (window.TaSoftKeyBoard) {
                    $(".numberSoftKeyboardIcon", $textInputDiv).on("click", function () {
                        new TaSoftKeyBoard(numberId);
                    });
                }
            }

            // 提示文字位置信息
            if (options.textHelp) {
                var _op = {
                    width: options.textHelpWidth,
                    position: options.textHelpPosition,
                    info: options.textHelp,
                    arrowWidth: 16
                };
                Bubble.setBubbleEvent($textHelp, _op);
            }
            if (options.bpopTipMsg) {
                var _op = {
                    width: options.bpopTipWidth,
                    height: options.bpopTipHeight,
                    position: options.bpopTipPosition,
                    info: options.bpopTipMsg
                };
                Bubble.setBubbleEvent($showInput, _op);
            }

            _declarationState(true);
        } // end init

        /**
         * 声明组件状态
         * @param isInit 是否是组件初始化
         * @private
         */
        function _declarationState(isInit) {
            if (isInit) {
                if (options.value !== null) setValue(options.value);
                if (options.readOnly) setReadOnly();
                if (options.disabled) setEnable(false);
                if (options.required) setRequired();
            } else {
                setValue(options.value);
                setReadOnly(options.readOnly);
                setEnable(!options.disabled);
                setRequired(options.required);
            }
        }

        function bindEvents(target) {
            var options = $.data(target, 'numberbox');
            //自定义事件绑定 注意silenceEvent 标注静默事件
            $(target).on("click.silenceEvent", function (e) {
                if (isSilence) return;
                if (typeof options.onClick == "string") eval(options.onClick);
                // if(typeof options.onClick == "function")options.onClick(this);
            });
            $(target).on("focus.silenceEvent", function (e) {
                if (isSilence) return;
                $textInputDiv.addClass("active");
                if (typeof options.onFocus == "string") eval(options.onFocus);
                // if(typeof options.onFocus == "function")options.onFocus(this);

                $(this).select();
            });
            $(target).on("blur", function (e) {
                if (isSilence) return;
                $textInputDiv.removeClass("active");
                if (typeof options.onBlur == "string") eval(options.onBlur);
                // if(typeof options.onBlur == "function")options.onBlur(this);

                fixValue(target);
                return false;
            });
            $(target).on("keydown.silenceEvent", function (e) {
                if (isSilence) return;
                if (typeof options.onKeydown == "string") eval(options.onKeydown);
                // if(typeof options.onKeydown == "function")options.onKeydown(this);

                if (e.keyCode == 13) {
                    fixValue(target);
                }
            });
            $(target).on("change.silenceEvent", function (e) {
                if (isSilence) return;
                if (typeof options.onChange == "string") eval(options.onChange);
                // if(typeof options.onChange == "function")options.onChange(this);
            });
            $(target).on("keypress.silenceEvent", function (e) {
                if (isSilence) return false;

                var that = this;
                var oldValue = $(this).val();

                if (!options.numberRound && (options.precision == undefined || options.precision == 0) && e.which == 46) return false;

                if (!options.numberRound) {
                    setTimeout(function () {
                        if ($(that).val().indexOf(".") != -1 && $(that).val().length - $(that).val().indexOf(".") - 1 > options.precision) {
                            $(that).val(oldValue);
                            return false;
                        }
                    }, 0);
                }
                if (e.which == 45) {
                    //-
                    //只能输入一个"-"号
                    if ($(this).val().indexOf("-") != -1) return false;
                    //没有"-"号时,当用户输入"-"号,则在最前面添加"-"号
                    else {
                            $(this).val("-" + $(this).val());
                        }
                    //return true;
                }
                if (options.max) {//达到或者超出最大值时，鼠标选中可更改
                    /*if(Number($(this).val()) >= Number($(this).attr('max'))){
                     return false;
                     }*/
                }
                if (e.which == 46) {
                    //.
                    if ($(this).val().indexOf(".", $(this).val().indexOf(".")) != -1) return false;
                    return true;
                } else if (e.which >= 48 && e.which <= 57 && e.ctrlKey == false && e.shiftKey == false || e.which == 0 || e.which == 8) {
                    return true;
                } else if (e.ctrlKey == true && (e.which == 99 || e.which == 118)) {
                    return true;
                } else {
                    return false;
                }
            });
        }

        function fixValue(target) {
            var options = $.data(target, 'numberbox');
            var val = null;
            if (options.numberRound) {
                //val = parseFloat($(target).val()).toFixed(options.precision);
                //modify by cy 解决tofixed的四舍五入算法使用的四舍六入五成双的这个规则和平常我们理解的不同的四舍五入不同
                val = parseFloat($(target).val());
                var vl = Math.pow(10, options.precision);
                val = (Math.round(val * vl) / vl).toFixed(options.precision);
            } else {
                var nStr = $(target).val();
                var dw = nStr.indexOf(".");
                if (nStr === '') {
                    val = '';
                } else if (dw == -1) {
                    val = Number(nStr);
                } else val = Number(nStr.substring(0, dw + options.precision + 1));
            }

            if (isNaN(val) || val === null || val === "") {
                $(target).val('');
                return;
            }

            val = val.toString();
            if (options.min != null && options.min != undefined && val < options.min) {
                $(target).val(options.min.toFixed(options.precision));
                if ($hiddenInput) {
                    $hiddenInput.val(options.min.toFixed(options.precision));
                }
            } else if (options.max != null && options.max != undefined && val > options.max) {
                $(target).val(options.max.toFixed(options.precision));
                if ($hiddenInput) {
                    $hiddenInput.val(options.max.toFixed(options.precision));
                }
            } else {
                $(target).val(val);
            }
        }

        //校验
        function validate(target) {
            var options = $.data(target, 'numberbox');
            if (!validObj) {
                var opts = {
                    min: options.min == '0' ? 0 : parseFloat(options.min) || undefined,
                    max: options.max == '0' ? 0 : parseFloat(options.max) || undefined
                };
                //options.triggerHandles="blur";
                validObj = new validateObj(numberId, $(target), options, setStateStyle);
                $(target).addClass("validate");
                validObj.addOrder({ type: "number", param: [opts.min, opts.max] });
                //validObj.addOrder({type:"number",param:[1,100]})
            }
        }

        function doValidate() {
            if (validObj) {
                return validObj.executeValidate();
            } else {
                return true;
            }
        }

        /**
         * 设置是是否必输。
         * @method setRequired
         * @param {bool} value true:必输 false 没有必输要求,默认true
         * @author cy
         */
        function setRequired(value) {
            if (value === false) {
                $textLayoutDiv.removeClass("required");
                validObj && validObj.removeOrder("required");
            } else {
                //必输
                $textLayoutDiv.addClass("required");
                if (validObj) {
                    validObj.addOrder({ type: "required", msg: options.toolTip });
                } else {
                    validObj = new validateObj(numberId, $showInput, options, setStateStyle);
                    $showInput.addClass("validate");
                    validObj.addOrder({ type: "required", msg: options.toolTip });
                }
            }
        }

        //验证状态样式调整
        function setStateStyle(bool) {
            if (bool === false) {
                $textInputDiv.removeClass("successvalidate").addClass("failvalidate");
                $validateIcon.removeClass("icon-correct2").addClass("icon-close2");
            } else if (bool === true) {
                $textInputDiv.removeClass("failvalidate").addClass("successvalidate");
                $validateIcon.removeClass("icon-close2").addClass("icon-correct2");
            } else {
                $textInputDiv.removeClass("failvalidate successvalidate");
                $validateIcon.removeClass("icon-close2 icon-correct2");
            }
        }

        //grid内嵌依赖
        $.fn.numberbox = function (opts, value) {
            opts = opts || {};
            opts = $.extend(options, opts);
            $.data(this, 'numberbox', opts);
            fixValue(this);
            bindEvents(this);
            if (value !== undefined) {
                $(this).val(value);
            }
        };

        // 金额输入,不适用与grid中，可通过fomatter实现
        var moneyInput = function moneyInput(target, options, value) {
            // 隐藏文本框的DOM节点
            var $hidden;
            var scope = target;
            // 显示转换后的大写金额的DOM容器
            var $cnBox;

            // 当前调用的jquery包装的input对象
            var $container;
            // 当前调用的input的DOM节点
            var $input;
            // 当前input对象的DOM ID
            var container;
            // 用户实际输入的金额
            var money;
            // 货币符号
            var _symbol;
            // 小数位数
            var _decimal;
            // 是否四舍五入
            var _numberRound;
            // 是否显示中文转换金额
            var showCnMoney = false;

            // 控件初始化
            function initMoney() {
                var _options = options;
                var _cnBox = _options.cnBox;
                if (_cnBox != undefined && typeof _cnBox === "string" && _cnBox !== "") {
                    if (_cnBox.indexOf("#") === -1) {
                        _cnBox = "#" + _cnBox;
                    }
                    $cnBox = $(_cnBox);
                    if ($cnBox.length < 1) {
                        throw new Error("cnBox: " + _cnBox + " does not exist.");
                    }
                    showCnMoney = true;
                }

                $container = scope;
                container = scope[0].id || "";
                if (container === "" || $container.length < 1) {
                    throw new Error("moneyInput container: " + container + " does not exist.");
                }
                $input = $container.get(0);
                $($input).on('keypress.moneybox', function (e) {
                    if (options.precision == 0 && e.which == 46) return false;
                    if ($(this).val().indexOf(".") != -1 && $(this).val().length - $(this).val().indexOf(".") > options.precision) {
                        return false;
                    }
                    if (e.which == 45) {
                        //-
                        return false;
                    }
                    if (e.which == 46) {
                        //.
                        if ($(this).val().indexOf(".", $(this).val().indexOf(".")) != -1) return false;
                        return true;
                    } else if (e.which >= 48 && e.which <= 57 && e.ctrlKey == false && e.shiftKey == false || e.which == 0 || e.which == 8) {
                        return true;
                    } else if (e.ctrlKey == true && (e.which == 99 || e.which == 118)) {
                        return true;
                    } else {
                        return false;
                    }
                });

                var name = $(scope).attr('name');
                $(scope).removeAttr('name');
                $hiddenInput = $("<input id=\"" + container + "_hidden\" type=\"hidden\" style=\"display:none\" name=\"" + name + "\" value=\"" + $(scope).val() + "\"/>").insertAfter($container);
                $hiddenInput.addClass("ComponentsSerialize");
                if (showCnMoney) {
                    $hiddenInput.insertAfter($cnBox);
                } else {
                    $hiddenInput.insertAfter($container);
                }
                // 给文本框绑定事件
                $container.on("focus", resumeMoney);
                $container.on("blur", formatMoney);
                $container.on("input propertychange", recordMoney);
                $hidden = $hiddenInput.get(0);
                _symbol = _options.symbol == undefined ? "" : _options.symbol;
                _decimal = _options.decimalPlace == undefined ? 0 : parseInt(_options.decimalPlace);
                _numberRound = _options.numberRound == undefined ? true : _options.numberRound;
            }

            // 文本框获得焦点时清除货币符号显示实际金额
            function resumeMoney() {
                var _money = parseFloat($hidden.value);
                _money = isNaN(_money) ? "" : new Number(_money);
                if (_decimal !== 0 && _money !== "") {
                    if (_numberRound == true || _numberRound == "true") {
                        _money = _money.toFixed(_decimal).toString();
                    } else {
                        var nStr = _money.toString();
                        var dw = nStr.indexOf(".");
                        if (dw < 0) {
                            _money = nStr;
                        } else {
                            _money = nStr.substring(0, dw + _decimal + 1);
                        }
                    }
                    var dotIndex = _money.indexOf(".");
                    if (dotIndex != -1) {
                        var dotL = _money.substring(0, dotIndex);
                        var dotR = _money.substring(dotIndex, _money.length);
                        if (dotR.indexOf("0") != -1) {
                            for (var i = dotR.length - 1; i > 0; i--) {
                                var c = dotR.charAt(i);
                                if (c === "0") {
                                    dotR = dotR.slice(0, i);
                                } else {
                                    break;
                                }
                            }
                        }
                        dotR = dotR === "." ? "" : dotR;
                        _money = dotL + dotR;
                    }
                }
                if (_decimal == 0) {
                    if (_numberRound == true || _numberRound == "true") {
                        _money == "" ? 0 : _money.toFixed(_decimal).toString();
                        //_money = _money.toFixed(_decimal).toString();
                    } else {
                        var nStr = _money.toString();
                        var dw = nStr.indexOf(".");
                        if (dw < 0) {
                            _money = nStr;
                        } else {
                            _money = nStr.substring(0, dw + _decimal);
                        }
                    }
                }

                $input.value = isNaN(_money) || _money == undefined || _money === "" ? "" : _money;
            }

            // 按照每隔三位显示一个逗号的规律显示格式化后的金额
            function formatMoney() {
                var num = money = $hidden.value === "" ? "" : parseFloat($hidden.value);
                if (_numberRound == true || _numberRound == "true") {
                    num = num !== "" && String(num.toFixed(_decimal));
                } else {
                    var nStr = num.toString();
                    var dw = nStr.indexOf(".");
                    if (dw < 0) {
                        var numVal = Number(nStr);
                    } else {
                        var numVal = Number(nStr.substring(0, dw + _decimal + 1));
                    }
                    num = num !== "" && String(numVal);
                }
                //如果输入的数字小数位数小于规定的位数,则补'0'
                if (num.toString().indexOf('.') < 0) {
                    if (_decimal > 0) {
                        num = num + '.';
                        for (var i = 0; i < _decimal; i++) {
                            num += '0';
                        }
                    }
                } else {
                    var inputlength = num.substring(num.indexOf('.')).length - 1;
                    if (inputlength < _decimal && inputlength > 0) {
                        for (var i = 0; i < _decimal - inputlength; i++) {
                            num += '0';
                        }
                    }
                }
                //小数位不参与格式化，t_num记录小数点（包括小数点）后的数字
                //change by cy 修改没有小数位的时候把数字作为小数点后面的东西,出错
                var t_num = "";
                if (num && _decimal != 0) {
                    t_num = num.substring(num.lastIndexOf("."), num.length);
                    num = num.substring(0, num.indexOf("."));
                }
                var re = /(-?\d+)(\d{3})/;
                if (money != undefined || money !== "") {
                    while (re.test(num)) {
                        num = num.replace(re, "$1,$2");
                    }
                }
                num = num + t_num;
                $input.value = money == undefined || money === "" ? "" : _symbol + num;
                if (showCnMoney) cnMoneyFormat();
            }

            // 失去焦点时将实际金额保存到隐藏文本框中
            function recordMoney(op) {
                var _inputMoney = parseFloat($input.value);
                money = isNaN(_inputMoney) ? "" : _inputMoney;
                _inputMoney = new Number(_inputMoney);

                if (_numberRound == true || _numberRound == "true") {
                    $hidden.value = isNaN($input.value) || isNaN(_inputMoney) || money === "" ? "" : _inputMoney.toFixed(_decimal);
                } else {
                    var nStr = _inputMoney.toString();
                    var dw = nStr.indexOf(".");
                    if (dw < 0) {
                        var _inputVal = Number(nStr);
                    } else {
                        var _inputVal = Number(nStr.substring(0, dw + _decimal + 1));
                    }
                    $hidden.value = isNaN($input.value) || isNaN(_inputMoney) || money === "" ? "" : _inputVal;
                }
            }

            // 显示转换后的中文金额
            function cnMoneyFormat() {
                var num = money;
                var cnMoney = "零元整";
                var strOutput = "";
                var strUnit = '仟佰拾亿仟佰拾万仟佰拾元角分';
                num += "00";
                var intPos = num.indexOf('.');
                if (intPos >= 0) num = num.substring(0, intPos) + num.substr(intPos + 1, 2);
                strUnit = strUnit.substr(strUnit.length - num.length);
                for (var i = 0; i < num.length; i++) {
                    strOutput += '零壹贰叁肆伍陆柒捌玖'.substr(num.substr(i, 1), 1) + strUnit.substr(i, 1);
                }cnMoney = strOutput.replace(/零角零分$/, '整').replace(/零[仟佰拾]/g, '零').replace(/零{2,}/g, '零').replace(/零([亿|万])/g, '$1').replace(/零+元/, '元').replace(/亿零{0,3}万/, '亿').replace(/^元/, "零元");
                $cnBox.text(isNaN(money) || money == undefined || money === "" ? "" : cnMoney);
            }

            // 获取显示的值
            function getValue() {
                return $hiddenInput.val();
            };
            // 设置隐藏文本框和文本输入框的值
            function setValue(value) {
                if (isNaN(value)) {
                    $hidden.value = "";
                    $input.value = "";
                    return;
                }
                $hidden.value = value;
                //处理onChange事件获得的值,比如3.99999,得到的值为3.99(precision = 2)
                var num = money = value === "" ? "" : parseFloat(value);
                if (_numberRound == true || _numberRound == "true") {
                    num = num !== "" && String(num.toFixed(_decimal));
                } else {
                    var nStr = num.toString();
                    var dw = nStr.indexOf(".");
                    if (dw < 0) {
                        var numVal = Number(nStr);
                    } else {
                        var numVal = Number(nStr.substring(0, dw + _decimal + 1));
                    }
                    num = num !== "" && String(numVal);
                }
                $hidden.value = num;
                $container.blur();
            }

            initMoney();

            return {
                setValue: setValue,
                getValue: getValue
            };
        };

        function setValue(value) {
            if (typeof value == 'string') {
                value = $.trim(value);
            }
            if (options.asAamount) {
                moneyInputObj.setValue(value);
            } else {
                $showInput.val(value);
                fixValue($showInput);
            }
        }

        function clear() {
            if ($showInput) {
                $showInput.val("");
            }
            if ($hiddenInput) {
                $hiddenInput.val("");
            }
            if (options.asAamount) {
                moneyInputObj.setValue(NaN);
            }
            if (validObj) {
                validObj.executeValidate();
            }
        }

        function getValue() {
            if ($hiddenInput !== undefined && $hiddenInput !== null) {
                return $hiddenInput.val();
            } else {
                return $showInput.val();
            }
        }

        function setReadOnly(isReadOnly, isIconSilence) {
            var bool = isReadOnly === false;
            $showInput.blur();
            setStateStyle();
            if (bool) {
                $textInputDiv.removeClass("readonly");
                $showInput.removeAttr('readOnly');
                $Label.attr("for", numberId);
            } else {
                $textInputDiv.addClass("readonly");
                $showInput.attr('readOnly', true);
                $Label.attr("for", numberId + "_readonly");
                Bubble.hideInfo();
            }
            _silenceControl(!bool, !bool && !(isIconSilence === false));
        }

        function setEnable(isEnable) {
            var bool = isEnable === false;
            setStateStyle();
            if (bool) {
                $showInput.attr('disabled', true);
                $textInputDiv.addClass("disabled");
                $showInput.prev(".numberIcon").css("display", "");
                Bubble.hideInfo();
            } else {
                $showInput.attr('disabled', false);
                $textInputDiv.removeClass("disabled");
                $showInput.prev(".numberIcon").css("display", "none");
            }
            _silenceControl(bool, bool);
        }

        function setVisible(isVisiable, isHold) {
            if (isVisiable) {
                $textLayoutDiv.show().css('visibility', 'visible');
            } else {
                if (isHold) {
                    $textLayoutDiv.css('visibility', 'hidden');
                } else {
                    $textLayoutDiv.hide();
                }
            }
        }

        function setFocus() {
            $showInput.focus();
        }

        function getInput() {
            return $showInput;
        }

        function getInputLabel() {
            if ($textLayoutDiv.find("label")[0]) {
                return $textLayoutDiv.find("label");
            }
        }

        function reset() {
            _declarationState();
            setStateStyle();
            Bubble.hideInfo();
        }

        //组件静默状态控制，按事件和图标区分，readOnly,disable默认都是事件不执行，图标不显示 add by xp
        function _silenceControl(eventBool, iconBool) {
            if (iconBool) {
                $textInputDiv.find(".numberIcon").hide();
                $showInput.removeClass("pd-r36");
            } else {
                $textInputDiv.find(".numberLongTimeIcon").show(); //numberLongTimeIcon 标注的是常时间显示的图标
                $textInputDiv.find(".numberLongTimeIcon").siblings("#" + numberId).addClass("pd-r36"); //数字居右时，防止显示键盘数字被遮挡
            }
            isSilence = eventBool;
        }

        /**
         *序列化方法,用于提交时拼接数据
         */
        function newSerialize(id, isIncludeNullFields) {
            var str = "";
            if ($hiddenInput) {
                str += $hiddenInput.taserialize(isIncludeNullFields);
            } else {
                str += $showInput.taserialize(isIncludeNullFields);
            }
            return str;
        }

        $.extend(this, { // 为this对象
            "cmptype": 'tanumber', // 将方法注册为公共方法
            "version": "1.1.0",
            setValue: setValue,
            getValue: getValue,
            setReadOnly: setReadOnly,
            setEnable: setEnable,
            setFocus: setFocus,
            setVisible: setVisible,
            newSerialize: newSerialize,
            getInput: getInput,
            getInputLabel: getInputLabel,
            doValidate: doValidate,
            setRequired: setRequired,
            setValidateStyle: setStateStyle,
            reset: reset,
            clear: clear
        });
        init(); // 调用初始化方法
    }

    TaNumber.prototype = new TaFieldComponent();
    TaNumber.prototype.constructor = TaNumber;
    return TaNumber;
});

/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 *
 * 修改原Radio模式为radiom
 * @author LinSen
 */
(function (factory) {
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {
        factory(jQuery);
    }
})(function ($) {
    // register namespace
    $.extend(true, window, {
        "Slick": {
            "RadioSelectColumn": RadioSelectColumn
        }
    });

    function RadioSelectColumn(options) {
        var _grid;
        var _self = this;
        var _selectedRowsLookup = {};
        var _defaults = {
            columnId: "_radio_selector",
            cssClass: "slick-cell-checkbox",
            toolTip: "Select/Deselect Only One",
            width: 35 //change by cy 解决ie下radio列出现...的问题
        };

        var _options = $.extend(true, {}, _defaults, options);

        function init(grid) {
            _grid = grid;
            _grid.onSelectedRowsChanged.subscribe(handleSelectedRowsChanged);
            _grid.onClick.subscribe(handleClick);
        }

        function destroy() {
            _grid.onSelectedRowsChanged.unsubscribe(handleSelectedRowsChanged);
            _grid.onClick.unsubscribe(handleClick);
        }
        //当选择的行改变时，重新渲染
        function handleSelectedRowsChanged(e, args) {
            var selectedRows = _grid.getSelectedRows();
            var lookup = {},
                row,
                i;
            for (i = 0; i < selectedRows.length; i++) {
                row = selectedRows[i];
                lookup[row] = true;
                if (lookup[row] !== _selectedRowsLookup[row]) {
                    _grid.invalidateRow(row);
                    delete _selectedRowsLookup[row];
                }
            }
            for (i in _selectedRowsLookup) {
                _grid.invalidateRow(i);
            }
            _selectedRowsLookup = lookup;
            _grid.render();
        }
        /**
         * 点击事件判断是不是Radio
         */
        function handleClick(e, args) {
            var target = e.srcElement || e.target;
            var $radio;
            if ($(target).hasClass("slick-cell-radio")) {
                $radio = $(target).children();
            } else {
                $radio = $(target);
            }
            //add by cy radio点击行其他部分也要触发行选中事件
            if (typeof _options.onRowSelect == "function") {
                //add by zhouhy 点击回调加入isSelect属性
                if ($radio.context.checked == undefined) {
                    if ($radio.find("input").context.attributes[1] == undefined) {
                        args.isSelect = false;
                    } else {
                        args.isSelect = true;
                    }
                } else {
                    if ($radio.context.attributes[1] == undefined) {
                        args.isSelect = true;
                    } else {
                        args.isSelect = false;
                    }
                }
                _options.onRowSelect(args, e);
            }
            //modify by xp 分组与radio同时存在时的冲突问题
            if ($radio.parent().hasClass("slick-cell-checkbox")) {
                e.stopPropagation();
                e.stopImmediatePropagation();
            } else {
                return;
            }

            if (_grid.getColumns()[args.cell].id === _options.columnId && $radio.is(":radio")) {
                // if editing, try to commit
                if (_grid.getEditorLock().isActive() && !_grid.getEditorLock().commitCurrentEdit()) {
                    e.preventDefault();
                    e.stopImmediatePropagation();
                    return;
                }

                if (_selectedRowsLookup[args.row]) {
                    _grid.setSelectedRows($.grep(_grid.getSelectedRows(), function (n) {
                        return n != args.row;
                    }));
                } else {
                    var radioRow = [];
                    radioRow[0] = args.row;
                    _grid.setSelectedRows(radioRow);
                }

                e.stopPropagation();
                e.stopImmediatePropagation();
            }
        }

        function getColumnDefinition() {
            return {
                id: _options.columnId,
                toolTip: _options.toolTip,
                field: "sel",
                width: _options.width,
                resizable: false,
                sortable: false,
                cssClass: _options.cssClass,
                formatter: RadioSelectionFormatter
            };
        }

        function RadioSelectionFormatter(row, cell, value, columnDef, dataContext) {
            if (dataContext) {
                return _selectedRowsLookup[row] ? "<input type='radio' checked='checked'>" : "<input type='radio'>";
            }
            return null;
        }

        $.extend(this, {
            "init": init,
            "destroy": destroy,

            "getColumnDefinition": getColumnDefinition
        });
    }
});

/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * 分页条
 *
 * @module Grid
 * @namespace Slick.Controls
 */
(function (factory) {
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(13)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {
        factory(jQuery);
    }
})(function ($) {
    /**
     * 创建分页条
     * @class Pager
     * @static
     * @constructor
     * @param {Object} dataView
     * @param {Object} grid
     * @param {Object} $container
     * @param {Object} options 参数
     * @param {Array} buttons
     */
    function SlickGridPager(dataView, grid, $container, options, buttons) {
        var $status, $limit, $start; //分别为状态栏，条数，开始条数
        var $first = {};
        var $prev = {};
        var $howInput = {};
        var $pageL = {};
        var $next = {};
        var $last = {};0;
        var $limitInput = {};
        var $count;
        var $defaultCanvas;
        var $fullCanvas;
        var pageFirst; //pageSize 为数组后第一次限制的值
        var self = this; //自身
        var count = 0,
            limit = 400,
            start = 0; //记录总条数，每页条数，开始条数
        var def = { //默认配置
            pageSize: 400, //分页大小
            showCount: true, //是否显示总条数及最后一页按钮
            showButton: true,
            showExcel: true,
            showDetails: true,
            expKeyOrName: true, //导出时是导出码值还是描述值,默认是码值
            exportFileName: "export"

            /**
             * 初始化函数，构建UI
             * @method init
             * @private
             */
        };function init() {
            if (options.pageSize == null) {
                //change by zzb 修改pageSize支持传入数组
                //查询config.properties配置文件中的默认每页记录数
                var pSize = Base.globvar.pageSize;
                if (!isNaN(pSize)) {
                    options.pageSize = pSize;
                }
            }
            options = $.extend(true, {}, def, options); //配置
            constructPagerUI(); //创建界面
        }

        /**
         * 公共方法,用于初始化状态
         * @method setStatus
         */

        function setStatus(total) {
            if (total >= 0) {
                count = total;
                start = Number($start.val());
                limit = Number($limit.val());
                updatePager();
                if (!($pageL.length == undefined || $howInput.length == undefined)) {
                    $pageL.html("/" + Math.ceil(count / limit));
                    $howInput.val(Math.ceil(start / limit) + 1);
                }

                if (options.showCount == true) {
                    // $count.html("共 " + Math.ceil(count) + "条");
                    $count.html(Base.I18n.getLangText('taface.module.grid.totalandcount', Math.ceil(count)));
                }
                //	$status.text("第" + (Math.ceil(start/limit) + 1 ) + "页/共" + Math.ceil(count/limit) + "页　每页" + limit + "条/共" + count + "条");
            } else {
                $start.val("0");
                count = 0;
                start = Number($start.val());
                limit = Number($limit.val());
                updatePager();

                if (!$pageL.length == undefined) {
                    $pageL.html("/" + Math.ceil(count / limit));
                    $howInput.val(0);
                }

                if (options.showCount == true) {
                    // $count.html("共 " + Math.ceil(0) + "条");
                    $count.html(Base.I18n.getLangText('taface.module.grid.totalandcount', Math.ceil(0)));
                }
                //$status.text("第" + start + "条~" + (start + limit) + "条/每页" + limit + "条");
            }
        }

        /**
         * 更新显示状态
         */
        function updatePager() {
            var state = getNavState();
            if ($first.length) {
                $first.attr("disabled", false).removeClass("slick-icon-page-first-dis").addClass("slick-icon-page-first");
                if (!state.canGotoFirst) {
                    $first.attr("disabled", true);
                    $first.addClass("slick-icon-page-first-dis").removeClass("slick-icon-page-first");
                }
            }
            if ($last.length) {
                $last.attr("disabled", false).removeClass("slick-icon-page-last-dis").addClass("slick-icon-page-last");
                if (!state.canGotoLast) {
                    $last.attr("disabled", true);
                    $last.addClass("slick-icon-page-last-dis").removeClass("slick-icon-page-last");
                }
            }
            if ($next.length) {
                $next.attr("disabled", false).removeClass("slick-icon-page-next-dis").addClass("slick-icon-page-next");
                if (!state.canGotoNext) {
                    $next.attr("disabled", true);
                    $next.addClass("slick-icon-page-next-dis").removeClass("slick-icon-page-next");
                }
            }
            if ($prev.length) {
                $prev.attr("disabled", false).removeClass("slick-icon-page-prev-dis").addClass("slick-icon-page-prev");
                if (!state.canGotoPrev) {
                    $prev.attr("disabled", true);
                    $prev.addClass("slick-icon-page-prev-dis").removeClass("slick-icon-page-prev");
                }
            }
        }

        /**
         * 动态设置分页url
         * @method setPagerUrl
         * @param url url地址
         */
        function setPagerUrl(url) {
            options.url = url;
        }

        /**
         * 远程调用
         */
        function load(url, param) {
            if (typeof options.validateForm == "function") {
                if (!options.validateForm()) {
                    return;
                }
            }
            var suburl = url ? url : options.url;

            //判断是否传递自己
            var submitString = "";
            if (options.submitIds) {
                var ids = options.submitIds.split(",");
                for (var i = 0; i < ids.length; i++) {
                    if ($("#" + ids[i]).is($("#" + grid.getGridId())) || $("#" + ids[i]).has($("#" + grid.getGridId()))) {
                        submitString = options.submitIds;
                        break;
                    }
                }

                if (!submitString) {
                    submitString = options.submitIds + "," + grid.getGridId();
                }
            } else {
                submitString = grid.getGridId();
            }

            if (options.successCallBack == undefined) {
                Base.submit(submitString, suburl, param);
            } else {
                Base.submit(submitString, suburl, param, null, null, options.successCallBack);
            }
        }

        /**
         * 判断是否可以进行一些操作
         */
        function getNavState() {
            var cannotLeaveEditMode = !Slick.GlobalEditorLock.commitCurrentEdit();
            return {
                canGotoFirst: !cannotLeaveEditMode && Number($limit.val()) != 0 && Number($start.val()) / Number($limit.val()) > 0,
                canGotoLast: !cannotLeaveEditMode && Number($limit.val()) != 0 && Math.ceil(count / limit) > Math.ceil(start / limit) + 1,
                canGotoPrev: !cannotLeaveEditMode && Number($limit.val()) != 0 && Number($start.val()) / Number($limit.val()) > 0,
                canGotoNext: !cannotLeaveEditMode && Number($limit.val()) != 0 && Math.ceil(count / limit) > Math.ceil(start / limit) + 1
            };
        }

        function gotoFirst() {
            updatePager();
            $start.val(0);
            //$howInput.val(Math.ceil(start/limit) + 1);
            load(options.url, options.param);
            grid.clearDirtyWidthOutPager();
        }

        function gotoLast() {
            updatePager();
            var start = (Math.ceil(count / limit) - 1) * limit;
            $start.val(start);
            //$howInput.val(Math.ceil(start/limit) + 1);
            load(options.url, options.param);
            grid.clearDirtyWidthOutPager();
        }

        function gotoPrev() {
            updatePager();
            var num = Number($start.val()) - Number($limit.val());
            if (num < 0) return;
            $start.val(num);
            //$howInput.val(Math.ceil(start/limit) + 1);
            load(options.url, options.param);
            grid.clearDirtyWidthOutPager();
        }

        function gotoNext() {
            if (Math.ceil(start / limit) + 1 == Math.ceil(count / limit)) return; //用count
            updatePager();
            $start.val(Number($start.val()) + Number($limit.val()));
            //$howInput.val(Math.ceil(start/limit) + 1);
            load(options.url, options.param);
            grid.clearDirtyWidthOutPager();
        }

        /**
         * 构建ui
         */
        function constructPagerUI() {
            $container.empty();
            var $nav = $("<div class='slick-pager-nav-dis'/>").appendTo($container);

            var select = '<select class="slick-pagination-page-list">'; //change by zzb
            if (typeof options.pageSize == "number") {
                var array = [10, 20, 50, 100, 200, 500];
                pageFirst = parseInt(options.pageSize);
                array.push(pageFirst);
                array.sort(function (a, b) {
                    return a > b ? 1 : -1;
                }); //从小到大排序
                for (var i = 0; i < array.length; i++) {
                    if (i == 0 || array[i] != array[i - 1]) {
                        if (pageFirst == array[i]) {
                            select += '<option selected="selected">' + array[i] + '</option>';
                        } else {
                            select += '<option>' + array[i] + '</option>';
                        }
                    }
                }
            } else if (_typeof(options.pageSize) == "object") {
                pageFirst = options.pageSize[0];
                for (var i = 0; i < options.pageSize.length; i++) {
                    if (pageFirst == options.pageSize[i]) {
                        select += '<option selected="selected">' + options.pageSize[i] + '</option>';
                    } else {
                        select += '<option>' + options.pageSize[i] + '</option>';
                    }
                }
            }
            select += '</select>';
            $limitInput = $(select);
            $limitInput.appendTo($nav);
            var input = '<input type="text" class="slick-pagination-page-input " maxlength="5"/>';
            var $input = $(input); //add by zzb
            $input.appendTo($nav);
            $input.val(pageFirst);
            $input.keypress(function (e) {
                if (e.which >= 48 && e.which <= 57 && e.ctrlKey == false && e.shiftKey == false || e.which == 0 || e.which == 8) {
                    return true;
                } else if (e.ctrlKey == true && (e.which == 99 || e.which == 118)) {
                    return true;
                }
                return false;
            }).change(function (e) {
                limit = Number($(this).val().trim());
                if (isNaN(limit) || limit <= 0) {
                    // Base.alert("请输入正整数");
                    Base.alert(Base.I18n.getLangText('taface.module.grid.inputsignlessinteger'));
                    return;
                }
                $limit.val(limit);
                $limitInput.val(limit);
                updatePager();
                //load(options.url, options.param);
                //grid.clearDirtyWidthOutPager();
                gotoFirst(); //自定义分页后，刷新表格到第一页 add by zhou
            }).keyup(function (e) {
                if (e.keyCode === 13) {
                    this.blur();
                }
            });

            $limitInput.change(function (value) {
                limit = Number($(this).val());
                $limit.val(limit);
                $input.val(limit);
                updatePager();
                //load(options.url, options.param);
                //grid.clearDirtyWidthOutPager();
                gotoFirst(); //重新选择分页后，刷新表格到第一页  add by zhou
            });
            //	            $("<span>").html("条&nbsp").appendTo($nav);
            // modify by cy 修复 	showDetails 查询数据 limit没有初始化的导致出错
            if (options.showDetails) {
                //$("<span class='tool-separator'/>").appendTo($nav);
            } else {
                $limitInput.css({ "display": "none" });
                $input.css({ "display": "none" });
            }
            if (options.showButton) {
                $first = $('<button type="button"/>').addClass("slick-icon-page-button slick-icon-page-first-dis").appendTo($nav).mouseover(function () {
                    $(this).addClass('x-btn-over');
                }).mouseout(function () {
                    $(this).removeClass('x-btn-over');
                }).click(gotoFirst).attr("disabled", true);
                $prev = $('<button type="button"/>').addClass("slick-icon-page-button slick-icon-page-prev-dis").appendTo($nav).click(gotoPrev).attr("disabled", true);
                //$("<span class='tool-separator'/>").appendTo($nav);
            }

            $howInput = $("<input>").addClass("slick-pagination-page").appendTo($nav).val("1").keypress(function (e) {
                if (e.which >= 48 && e.which <= 57 && e.ctrlKey == false && e.shiftKey == false || e.which == 0 || e.which == 8) {
                    return true;
                } else if (e.ctrlKey == true && (e.which == 99 || e.which == 118)) {
                    return true;
                }
                return false;
            }).change(function () {
                start = Number(this.value) - 1;
                if (isNaN(start) || Number(start) < 0) {
                    $(this).val(1);
                    // Base.alert("请输入正整数");
                    Base.alert(Base.I18n.getLangText('taface.module.grid.inputsignlessinteger'));

                    return;
                }
                if (start >= $pageL.html().substring(1, $pageL.html().length)) {
                    // Base.alert("超出总页数,将返回最后一页","error");
                    Base.alert(Base.I18n.getLangText('taface.module.grid.exceedthetotalpage'), "error");
                    $(this).val($pageL.html().substring(1, $pageL.html().length));
                    start = Number(this.value) - 1;
                }
                $start.val(start * limit);
                updatePager();
                load(options.url, options.param);
                grid.clearDirtyWidthOutPager();
            }).keyup(function (e) {
                if (e.keyCode == 13) {
                    $(this).blur();
                    if ($.browser.msie) {
                        start = Number(this.value) - 1;
                        if (Number(start) == "NaN" || Number(start) <= 0) {
                            $(this).val(1);
                            // Base.alert("请输入正整数");
                            Base.alert(Base.I18n.getLangText('taface.module.grid.inputsignlessinteger'));

                            return;
                        }
                        if (start >= $pageL.html().substring(1, $pageL.html().length)) {
                            // Base.alert("超出总页数,将返回最后一页","error");
                            Base.alert(Base.I18n.getLangText('taface.module.grid.exceedthetotalpage'), "error");
                            $(this).val($pageL.html().substring(1, $pageL.html().length));
                            start = Number(this.value) - 1;
                        }
                        $start.val(start * limit);
                        updatePager();
                        load(options.url, options.param);
                        grid.clearDirtyWidthOutPager();
                    }
                }
            });
            ;
            $pageL = $("<span>").addClass("slick-pager-font").html("/1").appendTo($nav);

            if (options.showDetails) {
                //$("<span class='tool-separator'/>").appendTo($nav);
            } else {
                $pageL.css({ "display": "none" });
            }
            if (options.showButton) {
                $next = $('<button type="button"/>').addClass("slick-icon-page-button slick-icon-page-next-dis").appendTo($nav).click(gotoNext).attr("disabled", true);
                $last = $('<button class="slick-icon-page-button slick-icon-page-last-dis" type="button"/>').appendTo($nav).click(gotoLast).attr("disabled", true);
                //$("<span class='tool-separator'/>").appendTo($nav);
            }

            $limit = $('<input id="' + grid.getGridId() + '_limit" type="hidden" name="gridInfo[\'' + grid.getGridId() + '_limit\']" value="' + pageFirst + '"/>').appendTo($container);
            $start = $('<input id="' + grid.getGridId() + '_start" type="hidden" name="gridInfo[\'' + grid.getGridId() + '_start\']" value="-1"/>').appendTo($container).val(0);

            //            var icon_prefix = "<span class='ui-state-default ui-corner-all ui-icon-container'><span class='ui-icon ";
            //            var icon_suffix = "' /></span>";

            var $settings = $("<span class='slick-pager-settings'/>").appendTo($container);
            if (options.showCount) {
                // $count = $("<span>").html("共" + 0 + "条&nbsp").appendTo($nav);
                $count = $("<span>").html(Base.I18n.getLangText('taface.module.grid.totalandcount', 0) + "&nbsp").appendTo($nav);
            }
            /** 自定义button*/
            if (options.buttons) {
                for (var but = 0; but < options.buttons.length; but++) {
                    options.buttons[but].appendTo($settings);
                }
            }

            $container.children().wrapAll("<div class='slick-pager' />");
        }

        /**
         * 重置
         * @method clearDirty
         */
        function clearDirty() {
            $start.val(0);
            count = 0;
            start = 0;
            updatePager();
            setStatus(count);
        }

        // add by zzb
        function getCount() {
            return count;
        }

        $.extend(this, {
            "getCount": getCount,
            "setStatus": setStatus,
            "setPagerUrl": setPagerUrl,
            "clearDirty": clearDirty
        });
        init();
        return self;
    }

    // Slick.Controls.Pager
    $.extend(true, window, { Slick: { Controls: { Pager: SlickGridPager } } });
});

/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
(function (factory) {
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(17), __webpack_require__(103)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {
        factory(jQuery);
    }
}(function ($) {

    __webpack_require__(237);
    $.extend(true, window, {
        SelectTree: TaSelectTree
    });
    function TaSelectTree(id, options) {
        var defaults = {
            async: true,
            asyncParam: ['id'],
            asyncParamOther: {},
            nameKey: 'name',
            idKey: 'id',
            parentKey: 'pId',
            nodesData: '',
            taTree: null,
            preNode: null,
            toolTip: Base.I18n.getLangText("taface.module.selecttree.toolTip"),
            check: {
                enable: false,
                chkStyle: "checkbox"
            },
            value: null,
            required:false,
            readOnly: false,
            disabled: false,
            validType: null,
            textHelp: false,
            textHelpWidth: 200,
            textHelpPosition: "bottomLeft"
        };
        options = $.extend({}, defaults, options);
        var $showInput = $("#" + options.targetDESC).attr("realId", options.treeId);
        var $hiddenInput = $("#" + options.targetId).addClass("ComponentsSerialize");//添加组件传参标识
        var $inputContainer= $showInput.parent("div.selectTree-input-Container");
        var $layoutContainer=$inputContainer.parent("div.selectTree-layout-Container");
        var $Label = $(".selectTree-label",$layoutContainer);
        var $textHelp = $showInput.siblings(".textHelp-layout-Container");
        var $validateIcon = $showInput.siblings(".validateIcon");
        var validObj=null;
        //组件事件静默标志 true 静默
        var isSilence = false;
        //yanglq 筛选功能的变量
        var node = {};
        node.value = "";
        node.preNode = null;

        var $selectTree_ul = $("<ul class='ztree'></ul>");
        var $selectTree_ul_div = $("<div class='ul_box'></div>");
        var $selectTree_container = $("<div class='selectTree-win-Container'></div>");

        function init() {
            $showInput.on("focus.silenceEvent", function (e) {
                if (isSilence)return;
                $inputContainer.addClass("active");
                if (typeof options.onFocus == "string")eval(options.onFocus);
                // if(typeof options.onFocus == "function")options.onFocus(this);
            });
            $showInput.on("blur.silenceEvent", function (e) {
                if (isSilence)return;
                $inputContainer.removeClass("active");
                if (typeof options.onBlur == "string")eval(options.onBlur);
                // if(typeof options.onBlur == "function")options.onBlur(this);
            });

            //页面加载完成后绑定事件
            $(document).bind("mousedown",function (event) {
                if (!(event.target.id == "dropdownTreeBackground_" + options.treeId
                    || $(event.target).parents("#dropdownTreeBackground_" + options.treeId).length > 0
                    || $.contains($layoutContainer[0],event.target) )) {
                    fnHideSelectTree();
                    goBackPreNode();
                } else {
                    setTimeout(function () {
                        document.getElementById(options.targetDESC).focus();//保持输入框焦点
                    }, 0);
                }
            });

            $validateIcon.on("click.silenceEvent", function () {
                var $this = $(this);
                if (isSilence || !$this.hasClass("icon-close2"))return;
                setValue("");
                setStateStyle();
            });

            _initWin();
            _createSelectTree();

            //绑定事件函数,代替老版本的span节点上的onclick 事件 fnShowSelectTree_<%=treeId%>
            $("#fnShowSelectTree_" + options.treeId).bind("click", function () {
                if ($("#dropdownTreeBackground_" + options.treeId).css('display') == "block") {
                    fnHideSelectTree();
                } else {
                    fnShowSelectTree();
                }
            });
            //绑定事件函数,代替老版本的span节点上的onclick 事件 fn_${treeId}_remove
            $("#fn_" + options.treeId + "_remove").bind("click", function () {
                clearSelectValue();
                doValidate();
            });

            // 提示文字
            if (options.textHelp) {
                var _op = {
                    width: options.textHelpWidth,
                    position: options.textHelpPosition,
                    info: options.textHelp,
                    arrowWidth: 16
                };
                Bubble.setBubbleEvent($textHelp,_op);
            }

            //yanglq 下拉树筛选功能 20161111 修改by xp note:此处只能监听keydown事件，因为全局有个回车keydown事件
            $showInput.on('input propertychange keydown', processKeyDown).click(function () {
                if ($("#dropdownTreeBackground_" + options.treeId).css('display') == "block") {
                    fnHideSelectTree();
                } else {
                    fnShowSelectTree();
                }
            });

            _declarationState(true);
            return this;
        }

        function _initWin(){
            $selectTree_container.attr('id', id);
            $selectTree_ul.attr('id', options.treeId);
            if (options.height) {
                $selectTree_container.css('height', options.height);
            }
            if (options.width) {
                $selectTree_container.css('width', options.width);
            }

            if(options.check.enable){
                $selectTree_ul_div.css({"paddingTop":"30px"});
                var $selectTreeSure = $("<div class='treeSureBar'></div>")
                $selectTreeSure.append("<button class='tabutton basebutton solid btn-main small'><span>确认</span></button>");
                $selectTreeSure.click(function(){
                    var nodes = options.taTree.getCheckedNodes();
                    setValueByNode(nodes);
                    fnHideSelectTree();
                    doValidate();
                })
                $selectTree_container.append($selectTreeSure)
            }

            $selectTree_ul_div.append($selectTree_ul);
            $selectTree_container.append($selectTree_ul_div);

//            	$inputContainer.after($selectTree_container);
            $("body").append($selectTree_container);
        }

        function _declarationState(isInit){
            if(isInit){
                if (options.value !== null)setValue(options.value);//setValue 放前面，是为了处理部分组件setValue生成新元素的情况，新元素如有必要也要纳入后续的readOnly、disabled状态管理范围 xp
                if (options.readOnly)setReadOnly();
                if (options.disabled)setEnable(false);
                if (options.required)setRequired();
            }else{
                setValue(options.value);
                setReadOnly(options.readOnly);
                setEnable(!options.disabled);
                setRequired(options.required);
            }
        }

        //xp 时间延时器
        var timeout = false;
        function processKeyDown(e) {
            if(options.check.enable)return;
            var that = this;
            if (timeout) clearTimeout(timeout);

            //利用setTimeout模拟实现oninput事件
            timeout = setTimeout(function () {
                var value = $(that).val();
                if (value != node.value) {
                    node.value = value;

                    //过滤树节点
                    filterTree(options.taTree, fnFilter, value, false, null);

                    node.preNode = options.taTree.getNodesByFilter(fnFilter, true, null);//记录
                    options.taTree.selectNode(node.preNode, false);//选中第一个过滤结果

                    document.getElementById(options.targetDESC).focus();//还原焦点
                }
                var code = (e.keyCode ? e.keyCode : e.which);
                if (code == 9 || code == 13) {
                    if ($("#dropdownTreeBackground_" + options.treeId).css('display') != "none") {
                        fnHideSelectTree();
                        var treeObj = options.taTree;
                        var _node = treeObj.getSelectedNodes();
                        if (_node.length > 0) options.preNode = _node[_node.length - 1];
                        goBackPreNode();
                    }
                    Base._goNextFormField(options.treeId);
                    e.preventDefault();
                } else if (code >= 37 && code <= 40) {
                    consoleTreebyCode(code);
                }
                $showInput.triggerHandler("contentChange");
            },0)
        }

        function setRequired(bool) {
            if (bool === false) {
                $layoutContainer.removeClass("required");
                validObj && validObj.removeOrder("required");
                setStateStyle();
                Bubble.hideInfo();
            } else {//必输
                $layoutContainer.addClass("required");
                if (validObj) {
                    validObj.addOrder({type: "required", msg: options.toolTip})
                } else {
                    options.triggerHandles="input propertychange mouseover blur focus contentChange";
                    validObj = new validateObj(options.treeId, $showInput, options,setStateStyle);
                    $showInput.addClass("validate");
                    validObj.addOrder({type: "required", msg: options.toolTip})
                }
            }
        }

        function setStateStyle(bool) {
            if (bool === false) {
                $inputContainer.removeClass("successvalidate").addClass("failvalidate");
                $validateIcon.removeClass("icon-correct2").addClass("icon-close2");
            } else if(bool === true) {
                $inputContainer.removeClass("failvalidate").addClass("successvalidate");
                $validateIcon.removeClass("icon-close2").addClass("icon-correct2");
            }else{
                $inputContainer.removeClass("failvalidate successvalidate");
                $validateIcon.removeClass("icon-close2 icon-correct2")
            }
        }

        function doValidate(){
            if(validObj){
                return validObj.executeValidate();
            }else {
                return true;
            }
        }


        function clearSelectValue() {
            _setValue(options.targetId, '');
            _setValue(options.targetDESC, '');
            options.preNode = null;
            //清除过滤效果 xp
            options.taTree.showNodes(options.taTree.transformToArray(options.taTree.getNodeByTId(options.treeId + "_1")));
            //还原树
            options.taTree.cancelSelectedNode();

        }

        function getInput() {
            return $showInput;
        }

        function  getInputLabel() {
            return $Label;
        }


        var fnFilter = function (_node) {
            if (_node["py"] && _node[py].indexOf(node.value) > -1) return true;
            if (_node[options.nameKey] && _node[options.nameKey].indexOf(node.value) > -1) return true;
            return false;
        };


        //过滤树节点的显示 xp
        function filterTree(treeObj, fleter, value, isSimple, parentNode) {
            if (typeof fleter !== "function"
                || typeof treeObj === "undefined" || treeObj === null) {
                return true;
            }
            if (typeof isSimple === "undefined") {
                isSimple = false;
            }

            if (typeof parentNode === "undefined" || parentNode === null) {
                parentNode = treeObj.getNodeByTId(options.treeId + "_1");
            }

            if (typeof value === "undefined" || value === null || value === "") {
                treeObj.showNodes(treeObj.transformToArray(parentNode));
                return true;
            }

            if (parentNode.isParent && parentNode.children && parentNode.children.length > 0) {
                var childrens = parentNode.children;
                var showChildCou = 0;
                for (var _i = 0; _i< childrens.length;_i++) {
                    var hasShowChild = filterTree(treeObj, fleter, value, isSimple, childrens[_i]);
                    if (hasShowChild) {
                        showChildCou++;
                    }
                }
                if (showChildCou > 0 || fleter(parentNode)) {
                    if (parentNode.isHidden)
                        treeObj.showNode(parentNode);
                } else {
                    if (!parentNode.isHidden)
                        treeObj.hideNode(parentNode);
                }

            } else {
                if (fleter(parentNode)) {
                    if (parentNode.isHidden)
                        treeObj.showNode(parentNode)
                } else {
                    if (!parentNode.isHidden)
                        treeObj.hideNode(parentNode);
                }
            }

            return !parentNode.isHidden;
        }

        function _createSelectTree() {
            var setting = {
                view: {
                    selectedMulti: false,
                    autoCancelSelected: false,
                    fontCss: options.fontCss
                },
                async: {
                    url: options.url,
                    autoParam: options.asyncParam,
                    otherParam: options.asyncParamOther,
                    enable: options.async
                },
                check: options.check,
                data: {
                    keep: {
                        parent: false,
                        leaf: false
                    },
                    key: {
                        children: "children",
                        name: options.nameKey
                    },
                    simpleData: {
                        enable: true,
                        idKey: options.idKey,
                        pIdKey: options.parentKey,
                        rootPId: ""
                    }
                },
                callback: {
                    beforeClick: typeof options.selectTreeBeforeClick == "function" ?
                        function (treeId, treeNode) {
                            return selectTreeBeforeClick(treeId, treeNode) && options.selectTreeBeforeClick(treeId, treeNode);
                        }:selectTreeBeforeClick
                    ,
                    onClick: typeof options.selectTreeCallback == "function" ?
                        function (event, treeId, treeNode) {
                            fnSlctTargetDept(event, treeId, treeNode);
                            options.selectTreeCallback(event, treeId, treeNode);
                        }:fnSlctTargetDept
                    ,
                    beforeCheck:selectTreeBeforeCheck,
                    onCheck:fnSlctTargetDept,
                    onAsyncSuccess: options.selectTreeLoadComplete
                }
            };
            var nodesData = options.nodesData;
            options.taTree = $.fn.zTree.init($("#" + options.treeId), setting, nodesData);
//			Ta.core.TaUIManager.register(options.treeId, options.taTree);
        }

        function getValue() {
            return $hiddenInput.val();
        }

        //add xp
        function _setValue(id, value, isAppend) {
            var $target = null;
            if(id == options.targetId){
                $target = $hiddenInput
            }else if (id == options.targetDESC){
                $target = $showInput;
            }else{
                $target = $("#" + id);
            }

            if(isAppend){
                var oldValue = $("#" + id).val();
                if(typeof oldValue == 'undefined' || oldValue == null || oldValue == ''){
                    $target.val(value);
                }else{
                    var newValue = oldValue + "," + value;
                    $target.val(newValue);
                }
            }else{
                $target.val(value);
            }
        }

        //cy add 获取checkbox选中的节点
        function getCheckedNodes() {
            return options.taTree.getCheckedNodes(true);
        }

        //xp add 获取节点数据
        function getSelectNodeValue() {
            return options.taTree.getSelectedNodes();
        }

        function getNodeByByIdKey(idKeyValue) {
            return options.taTree.getNodeByParam(options.idKey, idKeyValue, null);
        }

        function _setSelectTreeValue(treeNode,isAppend) {
            if (treeNode) {
                options.taTree.selectNode(treeNode, false);
                if (options.taTree.isSelectedNode(treeNode)) {
                    _setValue(options.targetId, treeNode[options.idKey],isAppend);
                    _setValue(options.targetDESC, treeNode[options.nameKey],isAppend);
                }
            }
        }

        //add xiep
        function setValue(node){
            clearSelectValue();
            var nodeAry = [];
            if($.isArray(node)){
                nodeAry = node;
            }else{
                if(!node)node={};
                if(typeof node == "string"){
                    var value = node.split(",");
                    node = {};
                    node[options.idKey] = value[0];
                    node[options.nameKey] = value[1];
                }
                nodeAry.push(node);
            }

            for(var i=0;i<nodeAry.length;i++){
                var treeNode = options.taTree.getNodeByParam(options.idKey, nodeAry[i][options.idKey], null);
                if(treeNode){
                    _setSelectTreeValue(treeNode,true);
                }else{
                    _setValue(options.targetId, nodeAry[i][options.idKey],true);
                    _setValue(options.targetDESC, nodeAry[i][options.nameKey],true);
                }
            }

        }

        function setValueByNode(treeNode) {
            clearSelectValue();

            var nodeAry = [];
            if($.isArray(treeNode)){
                nodeAry = treeNode;
            }else{
                nodeAry.push(treeNode);
            }

            for(var i=0;i<nodeAry.length;i++){
                _setSelectTreeValue(nodeAry[i],true);
            }
        }

        function setValueByIdKey(idKeyValue) {
            clearSelectValue();

            var arrayIds = [];
            if($.isArray(idKeyValue)){
                arrayIds = idKeyValue;
            }else if(idKeyValue.toString().indexOf(",") > -1){
                arrayIds = idKeyValue.split(",");
            }else{
                arrayIds.push(idKeyValue);
            }

            for(var i=0;i<arrayIds.length;i++){
                idKeyValue = arrayIds[i];
                var treeNode = options.taTree.getNodeByParam(options.idKey, idKeyValue, null);
                _setSelectTreeValue(treeNode,true);
            }
        }

        function setReadOnly(isReadOnly, isIconSilence) {
            var bool = isReadOnly === false;
            $showInput.blur();
            if (bool) {
                $showInput.removeAttr('readonly');
                $inputContainer.removeClass('readonly');
                $Label.attr("for",options.targetDESC);
            } else {
                fnHideSelectTree();
                $showInput.attr('readOnly', true);
                $inputContainer.addClass("readonly");
                $Label.attr("for",options.targetDESC+"_readonly");
            }
            _silenceControl(!bool,  !bool && !(isIconSilence === false));
            setStateStyle();
        }

        function setEnable(isEnable) {
            var bool = isEnable === false;
            if (bool) {
                fnHideSelectTree();
                $showInput.attr('disabled', true);
                $hiddenInput.attr('disabled', true);
                $inputContainer.addClass("disabled");
            } else {
                $showInput.attr('disabled', false);
                $hiddenInput.attr('disabled', false);
                $inputContainer.removeClass("disabled");
            }
            _silenceControl(bool, bool);
            setStateStyle();
        }

        //组件静默状态控制，按事件和图标区分，readOnly,disable默认都是事件不执行，图标不显示 add by xp
        function _silenceControl(eventBool, iconBool) {
            if (iconBool) {
                $inputContainer.find(".selectTreeIcon").hide();
            } else {
                $inputContainer.find(".selectTreeIcon").show();
            }
            isSilence = eventBool;
        }

        //yanglq 判断是否有相同的父节点
        function isSameParent(node1, node2) {
            if (node1 != null && node2 != null) {
                if (node2 == node1) {
                    return false;
                }
                else {
                    return isSameParent(node1, node2.getParentNode());
                }
            }
            else {
                return true;
            }
        }

        //yanglq 没有选择新节点，焦点离开后，输入框值成上一个节点的值
        function goBackPreNode() {
            if (options.preNode != null) {
                _setValue(options.targetId, options.preNode[options.idKey]);
                _setValue(options.targetDESC, options.preNode[options.nameKey]);
            }
        }

        //获取上一个可视节点 xp
        function getPreNode(node) {
            if (!node) return;
            var preNode = node.getPreNode();
            if (preNode && preNode.isHidden) {
                preNode = getPreNode(preNode);
            }
            return preNode;
        }

        //获取下一个可视节点 xp
        function getNextNode(node) {
            if (!node) return;
            var preNode = node.getNextNode();
            if (preNode && preNode.isHidden) {
                preNode = getNextNode(preNode);
            }
            return preNode;
        }

        //yanglq 根据上下左右 方向键控制树
        function consoleTreebyCode(code) {
            //var treeObj = Ta.core.TaUIManager.getCmp(treeId);
            var treeObj = options.taTree;
            var node = treeObj.getSelectedNodes();
            var length = node.length;
            if (length > 0) {
                if (code == 37) { //左  收起该节点
                    treeObj.expandNode(node[length - 1], false);
                } else if (code == 38) { //上   选中节点的上一个节点
                    if (getPreNode(node[length - 1]))
                        treeObj.selectNode(getPreNode(node[length - 1]), false);
                    else
                        treeObj.selectNode(node[length - 1].getParentNode(), false);
                } else if (code == 39) { //右  展开该节点
                    treeObj.expandNode(node[length - 1], true);
                } else if (code == 40) { //下  选中节点的下一个节点
                    if (node[length - 1].open)
                        treeObj.selectNode(treeObj.getNodeByParam("isHidden", false, node[length - 1]), false);
                    else
                        treeObj.selectNode(getNextNode(node[length - 1]), false);
                }
            } else {
                treeObj.selectNode(treeObj.getNodeByTId(options.treeId + "_1"));
            }
            document.getElementById(options.targetDESC).focus();
        }

        //隐藏树
        function fnHideSelectTree() {
            $("#dropdownTreeBackground_" + options.treeId).fadeOut(100);
            $("#fnShowSelectTree_" + options.treeId).removeClass("icon-arrow_up");
        }

        //显示树
        function fnShowSelectTree() {
            $("#fnShowSelectTree_" + options.treeId).addClass("icon-arrow_up");

            //多选树展示时需要选中处理
            if(options.check.enable){
                options.taTree.checkAllNodes(false);
                var value = getValue();
                if(value){
                    var idValues = value.split(",");
                    for(var i =0;i<idValues.length;i++){
                        var node = options.taTree.getNodeByParam(options.idKey, idValues[i], null);
                        options.taTree.checkNode(node, true, false);
                    }
                }
            }





            if ($("#dropdownTreeBackground_" + options.treeId).css('display') == "block") {
                return;
            }

            var p = $inputContainer.offset();
            var w = $inputContainer.outerWidth() - 2;

            var top;
            if (p.top + $("#dropdownTreeBackground_" + options.treeId).height() + 32 > document.body.scrollHeight && p.top - $("#dropdownTreeBackground_" + options.treeId).height() - 2 > 0) {
                top = p.top - $("#dropdownTreeBackground_" + options.treeId).height() - 2;
            } else {
                top = p.top + 32;
            }

            if (options.cssStyle != null && options.cssStyle.indexOf("width") != -1) {
                $("#dropdownTreeBackground_" + options.treeId).css({"top": top, "left": p.left});
            } else if (options.width != null) {
                $("#dropdownTreeBackground_" + options.treeId).css({"top": top, "left": p.left});
            } else {
                $("#dropdownTreeBackground_" + options.treeId).css({"top": top, "left": p.left, "width": w});
            }
            $("#dropdownTreeBackground_" + options.treeId).css({
                "position": "absolute",
                "overflow": "auto"
            }).slideDown(100);
        }

        //框架默认节点点击事件,获取节点设置值
        function fnSlctTargetDept(event, treeId, treeNode) {
            if(options.check.enable)return;
            options.preNode = treeNode;
            _setValue(options.targetId, treeNode[options.idKey]);
            if (options.nameKey != null) {
                _setValue(options.targetDESC, treeNode[options.nameKey]);
            } else {
                _setValue(options.targetDESC, treeNode.name);
            }
            $showInput.triggerHandler("contentChange");
            fnHideSelectTree();
        }

        //框架默认,节点被点击后最先触发事件
        function selectTreeBeforeClick(treeId, treeNode) {
            if (options.minLevel != null) {
                if (parseInt(treeNode.level) + 1 < parseInt(options.minLevel)) {
                    //alert('当前选择层级为'+parseInt(treeNode.level+1)+',必须选择大于等于层级为'+options.minLevel+'的节点数据');
                    alert(Base.I18n.getLangText('taface.module.selecttree.chooselevelgreater', parseInt(treeNode.level + 1), options.minLevel));
                    if(!options.check.enable){
                        _setValue(options.targetId, '');
                        _setValue(options.targetDESC, '');
                    }
                    return false;
                }
            }
            if (options.maxLevel != null) {
                if (parseInt(treeNode.level) >= parseInt(options.maxLevel)) {
                    //alert('当前选择层级为'+parseInt(treeNode.level+1)+',必须选择小于等于层级为'+options.maxLevel+'的节点数据');
                    alert(Base.I18n.getLangText('taface.module.selecttree.chooselevelless', parseInt(treeNode.level + 1), options.maxLevel));
                    if(!options.check.enable){
                        _setValue(options.targetId, '');
                        _setValue(options.targetDESC, '');
                    }
                    return false;
                }
            }

            if(options.check.enable){
                options.taTree.checkNode(treeNode, !treeNode.checked , true);
            }
            return true;
        }

        //多选模式选择事件
        function selectTreeBeforeCheck(treeId, treeNode){
            if(!options.check.enable)return false;
            if (options.minLevel != null) {
                if (parseInt(treeNode.level) + 1 < parseInt(options.minLevel)) {
                    //alert('当前选择层级为'+parseInt(treeNode.level+1)+',必须选择大于等于层级为'+options.minLevel+'的节点数据');
                    alert(Base.I18n.getLangText('taface.module.selecttree.chooselevelgreater', parseInt(treeNode.level + 1), options.minLevel));
                    return false;
                }
            }
            if (options.maxLevel != null) {
                if (parseInt(treeNode.level) >= parseInt(options.maxLevel)) {
                    //alert('当前选择层级为'+parseInt(treeNode.level+1)+',必须选择小于等于层级为'+options.maxLevel+'的节点数据');
                    alert(Base.I18n.getLangText('taface.module.selecttree.chooselevelless', parseInt(treeNode.level + 1), options.maxLevel));
                    return false;
                }
            }
            options.taTree.selectNode(treeNode);
            return true;
        }

        function getzTreeObj() {
            return options.taTree;
        }

        function setFocus() {
            $showInput.focus();
            fnShowSelectTree();
        }

        function setVisible(isVisiable, isHold) {
            if (isVisiable) {
                $layoutContainer.show().css('visibility', 'visible');
            } else {
                fnHideSelectTree();
                if (isHold) {
                    $layoutContainer.css('visibility', 'hidden');
                } else {
                    $layoutContainer.hide();
                }
            }
        }
        function newSerialize(id, isIncludeNullFields) {
            var str = "";
            if ($hiddenInput) {
                str += $hiddenInput.taserialize(isIncludeNullFields)+"&";
            }
            str += $showInput.taserialize(isIncludeNullFields);

            return str;
        }

        function reset(){
            _declarationState();
            setStateStyle();
        }

        $.extend(this, {
            "cmptype": 'TaSelectTree',
            "version": "1.0.0",
            hideTree: fnHideSelectTree,
            showTree: fnShowSelectTree,
            setValue: setValue,
            setValueByNode: setValueByNode,
            setValueByIdKey: setValueByIdKey,
            getValue: getValue,
            clearSelect: clearSelectValue,
            clear:clearSelectValue,
            getSelectNodeValue: getSelectNodeValue,
            getCheckedNodes: getCheckedNodes,
            getNodeByByIdKey: getNodeByByIdKey,
            getzTreeObj: getzTreeObj,
            setFocus: setFocus,
            setVisible: setVisible,
            setEnable: setEnable,
            setReadOnly: setReadOnly,
            setRequired:setRequired,
            getInput: getInput,
            getInputLabel:getInputLabel,
            doValidate:doValidate,
            setValidateStyle:setStateStyle,
            reset:reset,
            newSerialize:newSerialize
        });

        init();
    }

    return TaSelectTree;
}));



/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(jQuery) {

(function ($) {
  // register namespace
  $.extend(true, window, {
    "Slick": {
      "RowMoveManager": RowMoveManager
    }
  });

  function RowMoveManager(options) {
    var _grid;
    var _canvas;
    var _dragging;
    var _self = this;
    var _handler = new Slick.EventHandler();
    var _defaults = {
      cancelEditOnDrag: false
    };

    function init(grid) {
      options = $.extend(true, {}, _defaults, options);
      _grid = grid;
      _canvas = _grid.getCanvasNode();
      _handler.subscribe(_grid.onDragInit, handleDragInit).subscribe(_grid.onDragStart, handleDragStart).subscribe(_grid.onDrag, handleDrag).subscribe(_grid.onDragEnd, handleDragEnd);
    }

    function destroy() {
      _handler.unsubscribeAll();
    }

    function handleDragInit(e, dd) {
      // prevent the grid from cancelling drag'n'drop by default
      e.stopImmediatePropagation();
    }

    function handleDragStart(e, dd) {
      var cell = _grid.getCellFromEvent(e);

      if (options.cancelEditOnDrag && _grid.getEditorLock().isActive()) {
        _grid.getEditorLock().cancelCurrentEdit();
      }

      if (_grid.getEditorLock().isActive() || !/move|selectAndMove/.test(_grid.getColumns()[cell.cell].behavior)) {
        return false;
      }

      _dragging = true;
      e.stopImmediatePropagation();

      var selectedRows = _grid.getSelectedRows();

      if (selectedRows.length == 0 || $.inArray(cell.row, selectedRows) == -1) {
        selectedRows = [cell.row];
        _grid.setSelectedRows(selectedRows);
      }

      var rowHeight = _grid.getOptions().rowHeight;

      dd.selectedRows = selectedRows;

      dd.selectionProxy = $("<div class='slick-reorder-proxy'/>").css("position", "absolute").css("zIndex", "99999").css("width", $(_canvas).innerWidth()).css("height", rowHeight * selectedRows.length).appendTo(_canvas);

      dd.guide = $("<div class='slick-reorder-guide'/>").css("position", "absolute").css("zIndex", "99998").css("width", $(_canvas).innerWidth()).css("top", -1000).appendTo(_canvas);

      dd.insertBefore = -1;
    }

    function handleDrag(e, dd) {
      if (!_dragging) {
        return;
      }

      e.stopImmediatePropagation();

      var top = e.pageY - $(_canvas).offset().top;
      dd.selectionProxy.css("top", top - 5);

      var insertBefore = Math.max(0, Math.min(Math.round(top / _grid.getOptions().rowHeight), _grid.getDataLength()));
      if (insertBefore !== dd.insertBefore) {
        var eventData = {
          "rows": dd.selectedRows,
          "insertBefore": insertBefore
        };

        if (_self.onBeforeMoveRows.notify(eventData) === false) {
          dd.guide.css("top", -1000);
          dd.canMove = false;
        } else {
          dd.guide.css("top", insertBefore * _grid.getOptions().rowHeight);
          dd.canMove = true;
        }

        dd.insertBefore = insertBefore;
      }
    }

    function handleDragEnd(e, dd) {
      if (!_dragging) {
        return;
      }
      _dragging = false;
      e.stopImmediatePropagation();

      dd.guide.remove();
      dd.selectionProxy.remove();

      if (dd.canMove) {
        var eventData = {
          "rows": dd.selectedRows,
          "insertBefore": dd.insertBefore
        };
        // TODO:  _grid.remapCellCssClasses ?
        _self.onMoveRows.notify(eventData);
      }
    }

    $.extend(this, {
      "onBeforeMoveRows": new Slick.Event(),
      "onMoveRows": new Slick.Event(),

      "init": init,
      "destroy": destroy
    });
  }
})(jQuery);
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

(function (factory) {
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(17)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {
        factory(jQuery);
    }
})(function ($) {
    $.extend(true, window, {
        TaCheckbox: TaCheckbox
    });

    __webpack_require__(252);
    function TaCheckbox(id, options) {

        options = $.extend({
            checked: false,
            readOnly: false,
            disabled: false
        }, options || {});

        var obj = document.getElementById(id);
        var $checkboxInput = $(obj).attr("realId", id);
        var $layoutContainer = $checkboxInput.parent("div.checkbox-layout-Container");
        //组件事件静默标志 true 静默，静默类事件不执行
        var isSilence = false;

        function init() {
            $layoutContainer.bind("mousedown.checkbox", function (e) {
                if (isSilence) return;
                if (e.which == 3) return;
                setChecked(!obj.checked);
                //事件
                var fun = $(this).attr("_onClick");
                if (fun != null && fun != "") eval(fun);
            });
            _declarationState(true);
        }

        /**
         * 声明组件状态
         * @param isInit 是否是组件初始化
         * @private
         */
        function _declarationState(isInit) {
            if (isInit) {
                if (options.checked) setChecked(options.checked);
                if (options.disabled) setEnable(!options.disabled);
                if (options.readOnly) setReadOnly(options.readOnly);
            } else {
                setChecked(options.checked);
                setEnable(!options.disabled);
                setReadOnly(options.readOnly);
            }
        }

        function setValue(value) {
            setChecked(obj.value == value); //当且仅当传入的value和标签的value值相等的时候才选中
        }
        function getValue() {
            return obj.checked ? $checkboxInput.val() : null;
        }

        function setReadOnly(isReadOnly, isIconSilence) {
            var bool = isReadOnly === false;
            if (bool) {
                $checkboxInput.removeAttr('readOnly');
                if ($layoutContainer.hasClass("checkbox-checked-readOnly")) $layoutContainer.removeClass("checkbox-checked-readOnly").addClass("checkbox-checked");else if ($layoutContainer.hasClass("checkbox-uncheck-readOnly")) $layoutContainer.removeClass("checkbox-uncheck-readOnly").addClass("checkbox-uncheck");
            } else {
                $checkboxInput.attr('readOnly', true);
                if ($layoutContainer.hasClass("checkbox-checked")) $layoutContainer.removeClass("checkbox-checked").addClass("checkbox-checked-readOnly");else if ($layoutContainer.hasClass("checkbox-uncheck")) $layoutContainer.removeClass("checkbox-uncheck").addClass("checkbox-uncheck-readOnly");
            }
            _silenceControl(!bool, !bool && !(isIconSilence === false));
        }

        function setEnable(isEnable) {
            var bool = isEnable === false;
            if (bool) {
                $checkboxInput.attr('disabled', 'disabled');
                if ($layoutContainer.hasClass("checkbox-checked")) $layoutContainer.removeClass("checkbox-checked").addClass("checkbox-checked-disabled");else if ($layoutContainer.hasClass("checkbox-uncheck")) $layoutContainer.removeClass("checkbox-uncheck").addClass("checkbox-uncheck-disabled");
            } else {
                $checkboxInput.removeAttr('disabled');
                if ($layoutContainer.hasClass("checkbox-checked-disabled")) $layoutContainer.removeClass("checkbox-checked-disabled").addClass("checkbox-checked");else if ($layoutContainer.hasClass("checkbox-uncheck-disabled")) $layoutContainer.removeClass("checkbox-uncheck-disabled").addClass("checkbox-uncheck");
            }
            _silenceControl(bool, bool);
        }

        //组件静默状态控制，按事件和图标区分，readOnly,disable默认都是事件不执行，图标不显示 add by xp
        function _silenceControl(eventBool, iconBool) {
            isSilence = eventBool;
        }

        function setVisible(isVisiable, isHold) {
            if (isVisiable) {
                $layoutContainer.show().css('visibility', 'visible');
            } else {
                if (isHold) {
                    $layoutContainer.css('visibility', 'hidden');
                } else {
                    $layoutContainer.hide();
                }
            }
        }

        function _setCheckedStyle($_d, checked) {
            if (checked) {
                if ($_d.hasClass("checkbox-uncheck")) $_d.removeClass("checkbox-uncheck").addClass("checkbox-checked");else if ($_d.hasClass("checkbox-uncheck-readOnly")) $_d.removeClass("checkbox-uncheck-readOnly").addClass("checkbox-checked-readOnly");else if ($_d.hasClass("checkbox-uncheck-disabled")) $_d.removeClass("checkbox-uncheck-disabled").addClass("checkbox-checked-disabled");
            } else {
                if ($_d.hasClass("checkbox-checked")) $_d.removeClass("checkbox-checked").addClass("checkbox-uncheck");else if ($_d.hasClass("checkbox-checked-readOnly")) $_d.removeClass("checkbox-checked-readOnly").addClass("checkbox-uncheck-readOnly");else if ($_d.hasClass("checkbox-checked-disabled")) $_d.removeClass("checkbox-checked-disabled").addClass("checkbox-uncheck-disabled");
            }
        }

        function setChecked(checked) {
            //modify by xp
            obj.checked = !(checked === false);
            _setCheckedStyle($layoutContainer, obj.checked);
        }

        function getInputLabel() {
            if ($layoutContainer.find("label")[0]) {
                return $layoutContainer.find("label");
            }
        }

        function getInput() {
            if ($checkboxInput) {
                return $(obj);
            }
        }

        function reset() {
            _declarationState();
        }

        init();

        return {
            "cmptype": 'tacheckbox',
            'version': '1.1.0',
            "setValue": setValue,
            "getValue": getValue,
            "setReadOnly": setReadOnly,
            "setVisible": setVisible,
            "setEnable": setEnable,
            "setChecked": setChecked,
            "getInputLabel": getInputLabel,
            "getInput": getInput,
            "reset": reset
        };
    };

    return TaCheckbox;
});

/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

(function (factory) {
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(17)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {
        factory(jQuery);
    }
})(function ($) {

    __webpack_require__(267);
    $.extend(true, window, {
        TaRadio: TaRadio
    });
    function TaRadio(id, options) {
        options = $.extend({
            checked: false,
            readOnly: false,
            disabled: false,
            onClick: null
        }, options || {});

        var obj = document.getElementById(id);
        var $radioInput = $(obj).attr("realId", id);
        var $layoutContainer = $radioInput.parent("div.radio-layout-Container");
        //组件事件静默标志 true 静默，静默类事件不执行
        var isSilence = false;

        function init() {

            $layoutContainer.bind("mousedown.radio", function (e) {
                if (isSilence) return;
                if (typeof options.onClick == "string") eval(options.onClick);

                setChecked(!obj.checked);
            });

            _declarationState(true);
        }

        /**
         * 声明组件状态
         * @param isInit 是否是组件初始化
         * @private
         */
        function _declarationState(isInit) {
            if (isInit) {
                if (options.checked) setChecked(options.checked);
                if (options.disabled) setEnable(!options.disabled);
                if (options.readOnly) setReadOnly(options.readOnly);
            } else {
                setChecked(options.checked);
                setEnable(!options.disabled);
                setReadOnly(options.readOnly);
            }
        }

        function setValue(value) {
            //modify by xp radio需要始终保持他自身的排它性
            setChecked(obj.value == value);
        }
        function getValue() {
            return obj.checked ? $(obj).val() : undefined;
        }

        function setReadOnly(isReadOnly, isIconSilence) {
            var bool = isReadOnly === false;
            if (bool) {
                $radioInput.removeAttr('readOnly');
                if ($layoutContainer.hasClass("radio-checked-readOnly")) $layoutContainer.removeClass("radio-checked-readOnly").addClass("radio-checked");else if ($layoutContainer.hasClass("radio-uncheck-readOnly")) $layoutContainer.removeClass("radio-uncheck-readOnly").addClass("radio-uncheck");
            } else {
                $radioInput.attr('readOnly', true);
                if ($layoutContainer.hasClass("radio-checked")) $layoutContainer.removeClass("radio-checked").addClass("radio-checked-readOnly");else if ($layoutContainer.hasClass("radio-uncheck")) $layoutContainer.removeClass("radio-uncheck").addClass("radio-uncheck-readOnly");
            }
            _silenceControl(!bool, !bool && !(isIconSilence === false));
        }

        function setEnable(isEnable) {
            var bool = isEnable === false;
            if (bool) {
                $(obj).attr('disabled', 'disabled');
                if ($layoutContainer.hasClass("radio-checked")) $layoutContainer.removeClass("radio-checked").addClass("radio-checked-disabled");else if ($layoutContainer.hasClass("radio-uncheck")) $layoutContainer.removeClass("radio-uncheck").addClass("radio-uncheck-disabled");
            } else {
                $(obj).removeAttr('disabled');
                if ($layoutContainer.hasClass("radio-checked-disabled")) $layoutContainer.removeClass("radio-checked-disabled").addClass("radio-checked");else if ($layoutContainer.hasClass("radio-uncheck-disabled")) $layoutContainer.removeClass("radio-uncheck-disabled").addClass("radio-uncheck");
            }
            _silenceControl(bool, bool);
        }

        //组件静默状态控制，按事件和图标区分，readOnly,disable默认都是事件不执行，图标不显示 add by xp
        function _silenceControl(eventBool, iconBool) {
            isSilence = eventBool;
        }

        function setVisible(isVisiable, isHold) {
            if (isVisiable) {
                $layoutContainer.show().css('visibility', 'visible');
            } else {
                if (isHold) {
                    $layoutContainer.css('visibility', 'hidden');
                } else {
                    $layoutContainer.hide();
                }
            }
        }

        /**
        * 控制 选中/未选中 样式
        * @private
        * @method _setCheckedStyle
        */
        function _setCheckedStyle($_d, checked) {
            if (checked) {
                if ($_d.hasClass("radio-uncheck")) $_d.removeClass("radio-uncheck").addClass("radio-checked");else if ($_d.hasClass("radio-uncheck-readOnly")) $_d.removeClass("radio-uncheck-readOnly").addClass("radio-checked-readOnly");else if ($_d.hasClass("radio-uncheck-disabled")) $_d.removeClass("radio-uncheck-disabled").addClass("radio-checked-disabled");
            } else {
                if ($_d.hasClass("radio-checked")) $_d.removeClass("radio-checked").addClass("radio-uncheck");else if ($_d.hasClass("radio-checked-readOnly")) $_d.removeClass("radio-checked-readOnly").addClass("radio-uncheck-readOnly");else if ($_d.hasClass("radio-checked-disabled")) $_d.removeClass("radio-checked-disabled").addClass("radio-uncheck-disabled");
            }
        }

        function setChecked(checked) {
            //modify by xp
            checked = !(checked === false);
            //radio 的排它性
            if (checked) {
                $("input:radio[name=\"" + obj.name + "\"]:not([id=\"" + obj.id + "\"])").each(function () {
                    this.checked = false;
                    var tobj = Base.getObj(this.id);
                    if (tobj && tobj.cmptype == "TaRadio") {
                        tobj.setChecked(false);
                    }
                });
            }

            obj.checked = checked == true;
            _setCheckedStyle($layoutContainer, obj.checked);
        }

        function getInput() {
            return $radioInput;
        }

        function getInputLabel() {
            return $(".radio-label", $layoutContainer);
        }

        function reset() {
            _declarationState();
        }

        init();

        return {
            "cmptype": 'TaRadio',
            'version': '1.1.0',
            "setValue": setValue,
            "getValue": getValue,
            "setChecked": setChecked,
            "setReadOnly": setReadOnly,
            "setEnable": setEnable,
            "setVisible": setVisible,
            "getInput": getInput,
            "getInputLabel": getInputLabel,
            "reset": reset
        };
    }
    return TaRadio;
});

/***/ }),
/* 156 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = !__webpack_require__(9) && !__webpack_require__(4)(function () {
  return Object.defineProperty(__webpack_require__(106)('div'), 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

exports.f = __webpack_require__(7);


/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

var has = __webpack_require__(18);
var toIObject = __webpack_require__(19);
var arrayIndexOf = __webpack_require__(74)(false);
var IE_PROTO = __webpack_require__(108)('IE_PROTO');

module.exports = function (object, names) {
  var O = toIObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};


/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(10);
var anObject = __webpack_require__(2);
var getKeys = __webpack_require__(44);

module.exports = __webpack_require__(9) ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = getKeys(Properties);
  var length = keys.length;
  var i = 0;
  var P;
  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
  return O;
};


/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = __webpack_require__(19);
var gOPN = __webpack_require__(47).f;
var toString = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return gOPN(it);
  } catch (e) {
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};


/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 19.1.2.1 Object.assign(target, source, ...)
var getKeys = __webpack_require__(44);
var gOPS = __webpack_require__(75);
var pIE = __webpack_require__(68);
var toObject = __webpack_require__(11);
var IObject = __webpack_require__(67);
var $assign = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || __webpack_require__(4)(function () {
  var A = {};
  var B = {};
  // eslint-disable-next-line no-undef
  var S = Symbol();
  var K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function (k) { B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var aLen = arguments.length;
  var index = 1;
  var getSymbols = gOPS.f;
  var isEnum = pIE.f;
  while (aLen > index) {
    var S = IObject(arguments[index++]);
    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
  } return T;
} : $assign;


/***/ }),
/* 163 */
/***/ (function(module, exports) {

// 7.2.9 SameValue(x, y)
module.exports = Object.is || function is(x, y) {
  // eslint-disable-next-line no-self-compare
  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
};


/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var aFunction = __webpack_require__(12);
var isObject = __webpack_require__(6);
var invoke = __webpack_require__(165);
var arraySlice = [].slice;
var factories = {};

var construct = function (F, len, args) {
  if (!(len in factories)) {
    for (var n = [], i = 0; i < len; i++) n[i] = 'a[' + i + ']';
    // eslint-disable-next-line no-new-func
    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
  } return factories[len](F, args);
};

module.exports = Function.bind || function bind(that /* , ...args */) {
  var fn = aFunction(this);
  var partArgs = arraySlice.call(arguments, 1);
  var bound = function (/* args... */) {
    var args = partArgs.concat(arraySlice.call(arguments));
    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
  };
  if (isObject(fn.prototype)) bound.prototype = fn.prototype;
  return bound;
};


/***/ }),
/* 165 */
/***/ (function(module, exports) {

// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function (fn, args, that) {
  var un = that === undefined;
  switch (args.length) {
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return fn.apply(that, args);
};


/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

var $parseInt = __webpack_require__(3).parseInt;
var $trim = __webpack_require__(58).trim;
var ws = __webpack_require__(112);
var hex = /^[-+]?0[xX]/;

module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix) {
  var string = $trim(String(str), 3);
  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));
} : $parseInt;


/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

var $parseFloat = __webpack_require__(3).parseFloat;
var $trim = __webpack_require__(58).trim;

module.exports = 1 / $parseFloat(__webpack_require__(112) + '-0') !== -Infinity ? function parseFloat(str) {
  var string = $trim(String(str), 3);
  var result = $parseFloat(string);
  return result === 0 && string.charAt(0) == '-' ? -0 : result;
} : $parseFloat;


/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

var cof = __webpack_require__(25);
module.exports = function (it, msg) {
  if (typeof it != 'number' && cof(it) != 'Number') throw TypeError(msg);
  return +it;
};


/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.3 Number.isInteger(number)
var isObject = __webpack_require__(6);
var floor = Math.floor;
module.exports = function isInteger(it) {
  return !isObject(it) && isFinite(it) && floor(it) === it;
};


/***/ }),
/* 170 */
/***/ (function(module, exports) {

// 20.2.2.20 Math.log1p(x)
module.exports = Math.log1p || function log1p(x) {
  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
};


/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.16 Math.fround(x)
var sign = __webpack_require__(115);
var pow = Math.pow;
var EPSILON = pow(2, -52);
var EPSILON32 = pow(2, -23);
var MAX32 = pow(2, 127) * (2 - EPSILON32);
var MIN32 = pow(2, -126);

var roundTiesToEven = function (n) {
  return n + 1 / EPSILON - 1 / EPSILON;
};

module.exports = Math.fround || function fround(x) {
  var $abs = Math.abs(x);
  var $sign = sign(x);
  var a, result;
  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
  a = (1 + EPSILON32 / EPSILON) * $abs;
  result = a - (a - $abs);
  // eslint-disable-next-line no-self-compare
  if (result > MAX32 || result != result) return $sign * Infinity;
  return $sign * result;
};


/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

// call something on iterator step with safe closing on error
var anObject = __webpack_require__(2);
module.exports = function (iterator, fn, value, entries) {
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch (e) {
    var ret = iterator['return'];
    if (ret !== undefined) anObject(ret.call(iterator));
    throw e;
  }
};


/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

var aFunction = __webpack_require__(12);
var toObject = __webpack_require__(11);
var IObject = __webpack_require__(67);
var toLength = __webpack_require__(8);

module.exports = function (that, callbackfn, aLen, memo, isRight) {
  aFunction(callbackfn);
  var O = toObject(that);
  var self = IObject(O);
  var length = toLength(O.length);
  var index = isRight ? length - 1 : 0;
  var i = isRight ? -1 : 1;
  if (aLen < 2) for (;;) {
    if (index in self) {
      memo = self[index];
      index += i;
      break;
    }
    index += i;
    if (isRight ? index < 0 : length <= index) {
      throw TypeError('Reduce of empty array with no initial value');
    }
  }
  for (;isRight ? index >= 0 : length > index; index += i) if (index in self) {
    memo = callbackfn(memo, self[index], index, O);
  }
  return memo;
};


/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)

var toObject = __webpack_require__(11);
var toAbsoluteIndex = __webpack_require__(45);
var toLength = __webpack_require__(8);

module.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {
  var O = toObject(this);
  var len = toLength(O.length);
  var to = toAbsoluteIndex(target, len);
  var from = toAbsoluteIndex(start, len);
  var end = arguments.length > 2 ? arguments[2] : undefined;
  var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
  var inc = 1;
  if (from < to && to < from + count) {
    inc = -1;
    from += count - 1;
    to += count - 1;
  }
  while (count-- > 0) {
    if (from in O) O[to] = O[from];
    else delete O[to];
    to += inc;
    from += inc;
  } return O;
};


/***/ }),
/* 175 */
/***/ (function(module, exports) {

module.exports = function (done, value) {
  return { value: value, done: !!done };
};


/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var regexpExec = __webpack_require__(127);
__webpack_require__(1)({
  target: 'RegExp',
  proto: true,
  forced: regexpExec !== /./.exec
}, {
  exec: regexpExec
});


/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

// 21.2.5.3 get RegExp.prototype.flags()
if (__webpack_require__(9) && /./g.flags != 'g') __webpack_require__(10).f(RegExp.prototype, 'flags', {
  configurable: true,
  get: __webpack_require__(69)
});


/***/ }),
/* 178 */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return { e: false, v: exec() };
  } catch (e) {
    return { e: true, v: e };
  }
};


/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(2);
var isObject = __webpack_require__(6);
var newPromiseCapability = __webpack_require__(131);

module.exports = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};


/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var strong = __webpack_require__(181);
var validate = __webpack_require__(52);
var MAP = 'Map';

// 23.1 Map Objects
module.exports = __webpack_require__(83)(MAP, function (get) {
  return function Map() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.1.3.6 Map.prototype.get(key)
  get: function get(key) {
    var entry = strong.getEntry(validate(this, MAP), key);
    return entry && entry.v;
  },
  // 23.1.3.9 Map.prototype.set(key, value)
  set: function set(key, value) {
    return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);
  }
}, strong, true);


/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var dP = __webpack_require__(10).f;
var create = __webpack_require__(46);
var redefineAll = __webpack_require__(51);
var ctx = __webpack_require__(24);
var anInstance = __webpack_require__(49);
var forOf = __webpack_require__(50);
var $iterDefine = __webpack_require__(117);
var step = __webpack_require__(175);
var setSpecies = __webpack_require__(48);
var DESCRIPTORS = __webpack_require__(9);
var fastKey = __webpack_require__(39).fastKey;
var validate = __webpack_require__(52);
var SIZE = DESCRIPTORS ? '_s' : 'size';

var getEntry = function (that, key) {
  // fast case
  var index = fastKey(key);
  var entry;
  if (index !== 'F') return that._i[index];
  // frozen object case
  for (entry = that._f; entry; entry = entry.n) {
    if (entry.k == key) return entry;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME;         // collection type
      that._i = create(null); // index
      that._f = undefined;    // first entry
      that._l = undefined;    // last entry
      that[SIZE] = 0;         // size
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear() {
        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
          entry.r = true;
          if (entry.p) entry.p = entry.p.n = undefined;
          delete data[entry.i];
        }
        that._f = that._l = undefined;
        that[SIZE] = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function (key) {
        var that = validate(this, NAME);
        var entry = getEntry(that, key);
        if (entry) {
          var next = entry.n;
          var prev = entry.p;
          delete that._i[entry.i];
          entry.r = true;
          if (prev) prev.n = next;
          if (next) next.p = prev;
          if (that._f == entry) that._f = next;
          if (that._l == entry) that._l = prev;
          that[SIZE]--;
        } return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn /* , that = undefined */) {
        validate(this, NAME);
        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
        var entry;
        while (entry = entry ? entry.n : this._f) {
          f(entry.v, entry.k, this);
          // revert to the last existing entry
          while (entry && entry.r) entry = entry.p;
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key) {
        return !!getEntry(validate(this, NAME), key);
      }
    });
    if (DESCRIPTORS) dP(C.prototype, 'size', {
      get: function () {
        return validate(this, NAME)[SIZE];
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var entry = getEntry(that, key);
    var prev, index;
    // change existing entry
    if (entry) {
      entry.v = value;
    // create new entry
    } else {
      that._l = entry = {
        i: index = fastKey(key, true), // <- index
        k: key,                        // <- key
        v: value,                      // <- value
        p: prev = that._l,             // <- previous entry
        n: undefined,                  // <- next entry
        r: false                       // <- removed
      };
      if (!that._f) that._f = entry;
      if (prev) prev.n = entry;
      that[SIZE]++;
      // add to index
      if (index !== 'F') that._i[index] = entry;
    } return that;
  },
  getEntry: getEntry,
  setStrong: function (C, NAME, IS_MAP) {
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    $iterDefine(C, NAME, function (iterated, kind) {
      this._t = validate(iterated, NAME); // target
      this._k = kind;                     // kind
      this._l = undefined;                // previous
    }, function () {
      var that = this;
      var kind = that._k;
      var entry = that._l;
      // revert to the last existing entry
      while (entry && entry.r) entry = entry.p;
      // get next entry
      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
        // or finish the iteration
        that._t = undefined;
        return step(1);
      }
      // return step by kind
      if (kind == 'keys') return step(0, entry.k);
      if (kind == 'values') return step(0, entry.v);
      return step(0, [entry.k, entry.v]);
    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

    // add [@@species], 23.1.2.2, 23.2.2.2
    setSpecies(NAME);
  }
};


/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var strong = __webpack_require__(181);
var validate = __webpack_require__(52);
var SET = 'Set';

// 23.2 Set Objects
module.exports = __webpack_require__(83)(SET, function (get) {
  return function Set() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.2.3.1 Set.prototype.add(value)
  add: function add(value) {
    return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);
  }
}, strong);


/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(3);
var each = __webpack_require__(32)(0);
var redefine = __webpack_require__(15);
var meta = __webpack_require__(39);
var assign = __webpack_require__(162);
var weak = __webpack_require__(184);
var isObject = __webpack_require__(6);
var validate = __webpack_require__(52);
var NATIVE_WEAK_MAP = __webpack_require__(52);
var IS_IE11 = !global.ActiveXObject && 'ActiveXObject' in global;
var WEAK_MAP = 'WeakMap';
var getWeak = meta.getWeak;
var isExtensible = Object.isExtensible;
var uncaughtFrozenStore = weak.ufstore;
var InternalMap;

var wrapper = function (get) {
  return function WeakMap() {
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
};

var methods = {
  // 23.3.3.3 WeakMap.prototype.get(key)
  get: function get(key) {
    if (isObject(key)) {
      var data = getWeak(key);
      if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);
      return data ? data[this._i] : undefined;
    }
  },
  // 23.3.3.5 WeakMap.prototype.set(key, value)
  set: function set(key, value) {
    return weak.def(validate(this, WEAK_MAP), key, value);
  }
};

// 23.3 WeakMap Objects
var $WeakMap = module.exports = __webpack_require__(83)(WEAK_MAP, wrapper, methods, weak, true, true);

// IE11 WeakMap frozen keys fix
if (NATIVE_WEAK_MAP && IS_IE11) {
  InternalMap = weak.getConstructor(wrapper, WEAK_MAP);
  assign(InternalMap.prototype, methods);
  meta.NEED = true;
  each(['delete', 'has', 'get', 'set'], function (key) {
    var proto = $WeakMap.prototype;
    var method = proto[key];
    redefine(proto, key, function (a, b) {
      // store frozen objects on internal weakmap shim
      if (isObject(a) && !isExtensible(a)) {
        if (!this._f) this._f = new InternalMap();
        var result = this._f[key](a, b);
        return key == 'set' ? this : result;
      // store all the rest on native weakmap
      } return method.call(this, a, b);
    });
  });
}


/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var redefineAll = __webpack_require__(51);
var getWeak = __webpack_require__(39).getWeak;
var anObject = __webpack_require__(2);
var isObject = __webpack_require__(6);
var anInstance = __webpack_require__(49);
var forOf = __webpack_require__(50);
var createArrayMethod = __webpack_require__(32);
var $has = __webpack_require__(18);
var validate = __webpack_require__(52);
var arrayFind = createArrayMethod(5);
var arrayFindIndex = createArrayMethod(6);
var id = 0;

// fallback for uncaught frozen keys
var uncaughtFrozenStore = function (that) {
  return that._l || (that._l = new UncaughtFrozenStore());
};
var UncaughtFrozenStore = function () {
  this.a = [];
};
var findUncaughtFrozen = function (store, key) {
  return arrayFind(store.a, function (it) {
    return it[0] === key;
  });
};
UncaughtFrozenStore.prototype = {
  get: function (key) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) return entry[1];
  },
  has: function (key) {
    return !!findUncaughtFrozen(this, key);
  },
  set: function (key, value) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) entry[1] = value;
    else this.a.push([key, value]);
  },
  'delete': function (key) {
    var index = arrayFindIndex(this.a, function (it) {
      return it[0] === key;
    });
    if (~index) this.a.splice(index, 1);
    return !!~index;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME;      // collection type
      that._i = id++;      // collection id
      that._l = undefined; // leak store for uncaught frozen objects
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.3.3.2 WeakMap.prototype.delete(key)
      // 23.4.3.3 WeakSet.prototype.delete(value)
      'delete': function (key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME))['delete'](key);
        return data && $has(data, this._i) && delete data[this._i];
      },
      // 23.3.3.4 WeakMap.prototype.has(key)
      // 23.4.3.4 WeakSet.prototype.has(value)
      has: function has(key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME)).has(key);
        return data && $has(data, this._i);
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var data = getWeak(anObject(key), true);
    if (data === true) uncaughtFrozenStore(that).set(key, value);
    else data[that._i] = value;
    return that;
  },
  ufstore: uncaughtFrozenStore
};


/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/ecma262/#sec-toindex
var toInteger = __webpack_require__(26);
var toLength = __webpack_require__(8);
module.exports = function (it) {
  if (it === undefined) return 0;
  var number = toInteger(it);
  var length = toLength(number);
  if (number !== length) throw RangeError('Wrong length!');
  return length;
};


/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

// all object keys, includes non-enumerable and symbols
var gOPN = __webpack_require__(47);
var gOPS = __webpack_require__(75);
var anObject = __webpack_require__(2);
var Reflect = __webpack_require__(3).Reflect;
module.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {
  var keys = gOPN.f(anObject(it));
  var getSymbols = gOPS.f;
  return getSymbols ? keys.concat(getSymbols(it)) : keys;
};


/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray
var isArray = __webpack_require__(76);
var isObject = __webpack_require__(6);
var toLength = __webpack_require__(8);
var ctx = __webpack_require__(24);
var IS_CONCAT_SPREADABLE = __webpack_require__(7)('isConcatSpreadable');

function flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {
  var targetIndex = start;
  var sourceIndex = 0;
  var mapFn = mapper ? ctx(mapper, thisArg, 3) : false;
  var element, spreadable;

  while (sourceIndex < sourceLen) {
    if (sourceIndex in source) {
      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];

      spreadable = false;
      if (isObject(element)) {
        spreadable = element[IS_CONCAT_SPREADABLE];
        spreadable = spreadable !== undefined ? !!spreadable : isArray(element);
      }

      if (spreadable && depth > 0) {
        targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;
      } else {
        if (targetIndex >= 0x1fffffffffffff) throw TypeError();
        target[targetIndex] = element;
      }

      targetIndex++;
    }
    sourceIndex++;
  }
  return targetIndex;
}

module.exports = flattenIntoArray;


/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-string-pad-start-end
var toLength = __webpack_require__(8);
var repeat = __webpack_require__(114);
var defined = __webpack_require__(30);

module.exports = function (that, maxLength, fillString, left) {
  var S = String(defined(that));
  var stringLength = S.length;
  var fillStr = fillString === undefined ? ' ' : String(fillString);
  var intMaxLength = toLength(maxLength);
  if (intMaxLength <= stringLength || fillStr == '') return S;
  var fillLen = intMaxLength - stringLength;
  var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
  if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
  return left ? stringFiller + S : S + stringFiller;
};


/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

var getKeys = __webpack_require__(44);
var toIObject = __webpack_require__(19);
var isEnum = __webpack_require__(68).f;
module.exports = function (isEntries) {
  return function (it) {
    var O = toIObject(it);
    var keys = getKeys(O);
    var length = keys.length;
    var i = 0;
    var result = [];
    var key;
    while (length > i) if (isEnum.call(O, key = keys[i++])) {
      result.push(isEntries ? [key, O[key]] : O[key]);
    } return result;
  };
};


/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var classof = __webpack_require__(57);
var from = __webpack_require__(191);
module.exports = function (NAME) {
  return function toJSON() {
    if (classof(this) != NAME) throw TypeError(NAME + "#toJSON isn't generic");
    return from(this);
  };
};


/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

var forOf = __webpack_require__(50);

module.exports = function (iter, ITERATOR) {
  var result = [];
  forOf(iter, false, result.push, result, ITERATOR);
  return result;
};


/***/ }),
/* 192 */
/***/ (function(module, exports) {

// https://rwaldron.github.io/proposal-math-extensions/
module.exports = Math.scale || function scale(x, inLow, inHigh, outLow, outHigh) {
  if (
    arguments.length === 0
      // eslint-disable-next-line no-self-compare
      || x != x
      // eslint-disable-next-line no-self-compare
      || inLow != inLow
      // eslint-disable-next-line no-self-compare
      || inHigh != inHigh
      // eslint-disable-next-line no-self-compare
      || outLow != outLow
      // eslint-disable-next-line no-self-compare
      || outHigh != outHigh
  ) return NaN;
  if (x === Infinity || x === -Infinity) return x;
  return (x - inLow) * (outHigh - outLow) / (inHigh - inLow) + outLow;
};


/***/ }),
/* 193 */,
/* 194 */,
/* 195 */,
/* 196 */,
/* 197 */,
/* 198 */,
/* 199 */,
/* 200 */,
/* 201 */,
/* 202 */,
/* 203 */,
/* 204 */,
/* 205 */,
/* 206 */,
/* 207 */,
/* 208 */,
/* 209 */,
/* 210 */,
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__.p = Base.globvar.facePath;
window.Base = window.Base || {};
//基本样式
__webpack_require__(212);

//模块加载
//ta-extends
__webpack_require__(61);
__webpack_require__(133);
__webpack_require__(134);
__webpack_require__(135);
__webpack_require__(136);
__webpack_require__(137);
__webpack_require__(89);
__webpack_require__(13);
//cookie并不是标准的模块所以webpack不能识别用相对路径来引入
__webpack_require__(99);
__webpack_require__(36);

//ta-base
__webpack_require__(17);
__webpack_require__(138);
__webpack_require__(139);
__webpack_require__(54);
//ta-core
__webpack_require__(215);
__webpack_require__(5);
__webpack_require__(63);
__webpack_require__(216);
__webpack_require__(62);
__webpack_require__(28);
__webpack_require__(33);
__webpack_require__(53);

//ta-layout
__webpack_require__(218);

//ta-components
__webpack_require__(65);
__webpack_require__(64);
__webpack_require__(246);
__webpack_require__(143);
__webpack_require__(248);
__webpack_require__(250);
__webpack_require__(154);
__webpack_require__(253);
__webpack_require__(88);
__webpack_require__(255);
__webpack_require__(41);
__webpack_require__(71);
__webpack_require__(141);
__webpack_require__(257);
__webpack_require__(259);
__webpack_require__(72);
__webpack_require__(261);
__webpack_require__(263);
__webpack_require__(149);
__webpack_require__(265);
__webpack_require__(37);
__webpack_require__(155);
__webpack_require__(268);
__webpack_require__(73);
__webpack_require__(152);
__webpack_require__(270);
__webpack_require__(272);
__webpack_require__(142);
__webpack_require__(274);
__webpack_require__(276);
__webpack_require__(103);
__webpack_require__(22);
__webpack_require__(278);
__webpack_require__(280);
__webpack_require__(282);

//按需加载模块
/*var req_modules = ["citypicker", "fileupload", "helptip", "indexwindow", "menu",
    "progress", "richText", "searchPanel", "selectButton", "selectData", "spinner",
    "steps", "tableView", "tabsVertical", "uploader", "vhanchor"];


for (var i = 0; i < req_modules.length; i++) {
    window["required_" + req_modules[i]] = function (fn) {
        return require.ensure([], function (require) {
            require(req_modules[i]);
            fn();
        }, req_modules[i]);
    };

}*/

//如果是ie浏览器，需要引入模块，兼容ie下组件按需加载时Promise方法未定义
if (!!window.ActiveXObject || "ActiveXObject" in window) {
    __webpack_require__(284);
}

window.required_badge = function (fn) {
    return __webpack_require__.e/* require.ensure */(16).then((function (require) {
        __webpack_require__(486);
        fn();
    }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
};

window.required_citypicker = function (fn) {
    return __webpack_require__.e/* require.ensure */(7).then((function (require) {
        __webpack_require__(487);
        fn();
    }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
};
window.required_cascadepicker = function (fn) {
    return __webpack_require__.e/* require.ensure */(15).then((function (require) {
        __webpack_require__(488);
        fn();
    }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
};

window.required_fileupload = function (fn) {
    return __webpack_require__.e/* require.ensure */(6).then((function (require) {
        __webpack_require__(489);
        fn();
    }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
};

window.required_helptip = function (fn) {
    return new Promise(function(resolve) { resolve(); }).then((function (require) {
        __webpack_require__(72);
        fn();
    }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
};

window.required_menu = function (fn) {
    return new Promise(function(resolve) { resolve(); }).then((function (require) {
        __webpack_require__(140);
        fn();
    }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
};
window.required_progress = function (fn) {
    return __webpack_require__.e/* require.ensure */(14).then((function (require) {
        __webpack_require__(490);
        fn();
    }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
};
window.required_richText = function (fn) {
    return __webpack_require__.e/* require.ensure */(17).then((function (require) {
        __webpack_require__(491);
        fn();
    }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
};
window.required_searchPanel = function (fn) {
    return __webpack_require__.e/* require.ensure */(4).then((function (require) {
        __webpack_require__(492);
        fn();
    }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
};
window.required_selectButton = function (fn) {
    return __webpack_require__.e/* require.ensure */(3).then((function (require) {
        __webpack_require__(493);
        fn();
    }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
};
window.required_selectData = function (fn) {
    return __webpack_require__.e/* require.ensure */(13).then((function (require) {
        __webpack_require__(494);
        fn();
    }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
};

window.required_spinner = function (fn) {
    return __webpack_require__.e/* require.ensure */(12).then((function (require) {
        __webpack_require__(495);
        fn();
    }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
};
window.required_steps = function (fn) {
    return __webpack_require__.e/* require.ensure */(2).then((function (require) {
        __webpack_require__(496);
        fn();
    }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
};
window.required_suggest = function (fn) {
    return __webpack_require__.e/* require.ensure */(11).then((function (require) {
        __webpack_require__(497);
        fn();
    }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
};

window.required_transfer = function (fn) {
    return __webpack_require__.e/* require.ensure */(9).then((function (require) {
        __webpack_require__(498);
        fn();
    }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
};

window.required_tableView = function (fn) {
    return __webpack_require__.e/* require.ensure */(1).then((function (require) {
        __webpack_require__(499);
        fn();
    }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
};

window.required_tabsVertical = function (fn) {
    return __webpack_require__.e/* require.ensure */(10).then((function (require) {
        __webpack_require__(500);
        fn();
    }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
};
window.required_uploader = function (fn) {
    return __webpack_require__.e/* require.ensure */(5).then((function (require) {
        __webpack_require__(501);
        fn();
    }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
};
window.required_vhanchor = function (fn) {
    return __webpack_require__.e/* require.ensure */(8).then((function (require) {
        __webpack_require__(502);
        fn();
    }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
};
window.required_fileview = function (fn) {
    return __webpack_require__.e/* require.ensure */(0).then((function (require) {
        __webpack_require__(503);
        fn();
    }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
};

//ta-old
// require("anchor");
// require("buttonLayout");
// require("imgupload");
// require("imgview");
// require("json-2.3");
// require("media");
// require("mediaUrl");
// require("passwordCheck");
// require("query");
// require("selectLabelText");
// require("skip");
// require("token");
// require("uploadify");
// require("windowmessage");
//require("toolbar");

/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Created by whisper on 2017/3/14.
 */

//样式入口文件
//require("./base/icons.css");//基础图标
__webpack_require__(213); //基础样式

//提取的公共样式
/*require("./base-common/sexbutton.scss");//小button
require("./base-common/fielddiv.scss");//布局相关*/

/***/ }),
/* 213 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

(function (factory) {
	if (true) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {
		factory(jQuery);
	}
})(function ($) {
	$.fn.printForTablePage = function (options) {
		//各种属性、参数
		var defaults = {
			isVertical: true, //是否纵向打印,true纵向打印,false横向打印
			paper: "A4", //纸张规格
			marginLeft: "0.5", //单位：英寸,左边页边距
			marginRight: "0.5", //单位：英寸,右边页边距
			marginTop: "0.5", //单位：英寸,上边页边距
			marginBottom: "0.3", //单位：英寸,底边页边距
			printButton: "printButton", //打印按钮的ID，页面上无须绑定onclick事件
			headerClass: "header", //页头的样式
			itemClass: "item", //普通行的样式
			isIframePrint: false, //打印页面是否在iframe框架里面
			isAutoPageBreak: false, //是否自动分页
			isContainHeader: false
		};
		var browser = getNavigatorType();

		var $this = $(this);

		var options = $.extend(defaults, options);

		window.onload = function () {
			pageSetup(options);
			autoPageBreak(options);
		};

		if ("ie" == browser) {
			var isIePrint = getQueryString("isIePrint");
			if (isIePrint == 1) {
				document.all.WebBrowser.ExecWB(7, 1);
			}
			$("#" + options.printButton).click(function () {
				if (options.isIframePrint) {
					window.open(window.location.href + '?isIePrint=1', '', 'height=600,width=1024,top=0,left=0,toolbar=no,menubar=no,scrollbars=yes, resizable=no,location=no, status=no');
				} else {
					document.all.WebBrowser.ExecWB(7, 1);
				}
			});
		} else if ("chrome" == browser) {
			$("#" + options.printButton).click(function () {
				var histoty = document.body.innerHTML;
				window.print();
				document.body.innerHTML = histoty;
			});
		}
		//解析浏览器地址栏参数
		function getQueryString(name) {
			var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)", "i");
			var r = window.location.search.substr(1).match(reg);
			if (r != null) return decodeURIComponent(r[2]);
			return "";
		};

		//判断浏览器类型
		function getNavigatorType() {
			var Sys = {};
			var ua = navigator.userAgent.toLowerCase();
			var s;
			(s = ua.match(/msie ([\d.]+)/)) ? Sys.ie = s[1] : (s = ua.match(/firefox\/([\d.]+)/)) ? Sys.firefox = s[1] : (s = ua.match(/chrome\/([\d.]+)/)) ? Sys.chrome = s[1] : (s = ua.match(/opera.([\d.]+)/)) ? Sys.opera = s[1] : (s = ua.match(/version\/([\d.]+).*safari/)) ? Sys.safari = s[1] : 0;
			if (Sys.ie) {
				return "ie";
			} else if (Sys.firefox) {
				return "firefox";
			} else if (Sys.chrome) {
				return "chrome";
			} else if (Sys.opera) {
				return "opera";
			} else if (Sys.safari) {
				return "safari";
			} else {
				return "";
			}
		}

		//获得IE浏览器版本
		function checkIEV() {
			var X, V, N;
			V = navigator.appVersion;
			N = navigator.appName;
			if (N == "Microsoft Internet Explorer") X = parseFloat(V.substring(V.indexOf("MSIE") + 5, V.lastIndexOf("Windows")));else X = parseFloat(V);
			return X;
		}

		//自动分页,解决tr跨页显示的问题
		function autoPageBreak(options) {
			if (options.isAutoPageBreak) {
				//定义打印页面高度
				var pageHeight = 0;
				if ("ie" == browser) {
					if (options.isVertical) {
						pageHeight = 1020;
					} else {
						pageHeight = 810;
					}
				} else if ("chrome" == browser) {
					if (options.isVertical) {
						pageHeight = 1070;
					} else {
						pageHeight = 750;
					}
				}
				var h = 0;
				var content = "<table width='100%' cellpadding='0' cellspacing='0' border='0'>";
				$("tr").each(function (i) {
					h += $(this).height();
					//console.log(h+":"+pageHeight+":"+$(this).height()+":"+i);
					if (h < pageHeight) {
						content += $(this).prop('outerHTML');
					} else if (h == pageHeight) {
						content += $(this).prop('outerHTML');
						content += "</table><table width='100%' cellpadding='0' cellspacing='0' border='0'>";
						if (options.isContainHeader) {
							if ($(this).next("tr").hasClass(options.itemClass)) {
								content += $("tr." + options.headerClass).prop('outerHTML');
								h += $("tr." + options.headerClass).height();
							}
						}
						h = 0;
					} else {
						content += "</table><table width='100%' cellpadding='0' cellspacing='0' border='0'>";
						h = 0;
						if (options.isContainHeader) {
							if ($(this).hasClass(options.itemClass)) {
								content += $("tr." + options.headerClass).prop('outerHTML');
								h += $("tr." + options.headerClass).height();
							}
						}
						content += $(this).prop('outerHTML');
					}
				});
				content += "</table>";
				$this.empty().html(content);
			}
		}

		//设置网页打印的页眉页脚和页边距
		function pageSetup(options) {
			if ("ie" == browser) {
				var HKEY_Root, HKEY_Path, HKEY_Key;
				HKEY_Root = "HKEY_CURRENT_USER";
				HKEY_Path = "\\Software\\Microsoft\\Internet Explorer\\PageSetup\\";
				try {
					var Wsh = new ActiveXObject("WScript.Shell");
					HKEY_Key = "header";
					//设置页眉（为空）
					//Wsh.RegRead(HKEY_Root+HKEY_Path+HKEY_Key)可获得原页面设置
					Wsh.RegWrite(HKEY_Root + HKEY_Path + HKEY_Key, "");
					HKEY_Key = "footer";
					//设置页脚（为空）
					Wsh.RegWrite(HKEY_Root + HKEY_Path + HKEY_Key, "");

					//这里需要浏览器版本，8.0以下的页边距设置与8.0及以上不一样，注意注册表里的单位是英寸，打印设置中是毫米，1英寸=25.4毫米
					if (checkIEV() < 8.0) {
						HKEY_Key = "margin_left";
						//设置左页边距
						Wsh.RegWrite(HKEY_Root + HKEY_Path + HKEY_Key, "0.25");
						HKEY_Key = "margin_right";
						//设置右页边距
						Wsh.RegWrite(HKEY_Root + HKEY_Path + HKEY_Key, "0.25");
						HKEY_Key = "margin_top";
						//设置上页边距
						Wsh.RegWrite(HKEY_Root + HKEY_Path + HKEY_Key, "0.10");
						HKEY_Key = "margin_bottom";
						//设置下页边距
						Wsh.RegWrite(HKEY_Root + HKEY_Path + HKEY_Key, "0.10");
					} else {
						HKEY_Key = "margin_left";
						//设置左页边距
						Wsh.RegWrite(HKEY_Root + HKEY_Path + HKEY_Key, options.marginLeft);
						HKEY_Key = "margin_right";
						//设置右页边距
						Wsh.RegWrite(HKEY_Root + HKEY_Path + HKEY_Key, options.marginRight);
						HKEY_Key = "margin_top";
						//设置上页边距
						Wsh.RegWrite(HKEY_Root + HKEY_Path + HKEY_Key, options.marginTop);
						HKEY_Key = "margin_bottom";
						//设置下页边距
						Wsh.RegWrite(HKEY_Root + HKEY_Path + HKEY_Key, options.marginBottom);
					}
				} catch (e) {
					// alert("ActiveX控件被禁用,请按下面步骤操作：\n1、请打开浏览器‘工具’菜单/‘选项’/‘安全’下的‘自定义级别’，\n把‘对没有标记为安全的activex控件进行初始化和脚本运行’设置为‘启用’。\n2、刷新本页 ");
					alert(Base.I18n.getLangText('taface.module.webprint.ActiveXcontrolisdisabled'));
				}
			}
		}
	};
});

/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * @license RequireJS domReady 2.0.1 Copyright (c) 2010-2012, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/requirejs/domReady for details
 */
/*jslint */
/*global require: false, define: false, requirejs: false,
 window: false, clearInterval: false, document: false,
 self: false, setInterval: false */

!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
    'use strict';

    var isTop,
        testDiv,
        scrollIntervalId,
        isBrowser = typeof window !== "undefined" && window.document,
        isPageLoaded = !isBrowser,
        doc = isBrowser ? document : null,
        readyCalls = [];

    function runCallbacks(callbacks) {
        var i;
        for (i = 0; i < callbacks.length; i += 1) {
            callbacks[i](doc);
        }
    }

    function callReady() {
        var callbacks = readyCalls;

        if (isPageLoaded) {
            //Call the DOM ready callbacks
            if (callbacks.length) {
                readyCalls = [];
                runCallbacks(callbacks);
            }
        }
    }

    /**
     * Sets the page as loaded.
     */
    function pageLoaded() {
        if (!isPageLoaded) {
            isPageLoaded = true;
            if (scrollIntervalId) {
                clearInterval(scrollIntervalId);
            }

            callReady();
        }
    }

    if (isBrowser) {
        if (document.addEventListener) {
            //Standards. Hooray! Assumption here that if standards based,
            //it knows about DOMContentLoaded.
            document.addEventListener("DOMContentLoaded", pageLoaded, false);
            window.addEventListener("load", pageLoaded, false);
        } else if (window.attachEvent) {
            window.attachEvent("onload", pageLoaded);

            testDiv = document.createElement('div');
            try {
                isTop = window.frameElement === null;
            } catch (e) {}

            //DOMContentLoaded approximation that uses a doScroll, as found by
            //Diego Perini: http://javascript.nwbox.com/IEContentLoaded/,
            //but modified by other contributors, including jdalton
            if (testDiv.doScroll && isTop && window.external) {
                scrollIntervalId = setInterval(function () {
                    try {
                        testDiv.doScroll();
                        pageLoaded();
                    } catch (e) {}
                }, 30);
            }
        }

        //Check if document already complete, and if so, just trigger page load
        //listeners. Latest webkit browsers also use "interactive", and
        //will fire the onDOMContentLoaded before "interactive" but not after
        //entering "interactive" or "complete". More details:
        //http://dev.w3.org/html5/spec/the-end.html#the-end
        //http://stackoverflow.com/questions/3665561/document-readystate-of-interactive-vs-ondomcontentloaded
        //Hmm, this is more complicated on further use, see "firing too early"
        //bug: https://github.com/requirejs/domReady/issues/1
        //so removing the || document.readyState === "interactive" test.
        //There is still a window.onload binding that should get fired if
        //DOMContentLoaded is missed.
        if (document.readyState === "complete") {
            pageLoaded();
        }
    }

    /** START OF PUBLIC API **/

    /**
     * Registers a callback for DOM ready. If DOM is already ready, the
     * callback is called immediately.
     * @param {Function} callback
     */
    function domReady(callback) {
        if (isPageLoaded) {
            callback(doc);
        } else {
            readyCalls.push(callback);
        }
        return domReady;
    }

    domReady.version = '2.0.1';

    /**
     * Loader Plugin API method
     */
    domReady.load = function (name, req, onLoad, config) {
        if (config.isBuild) {
            onLoad(null);
        } else {
            domReady(onLoad);
        }
    };

    /** END OF PUBLIC API **/

    return domReady;
}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

(function (factory) {
	if (true) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {
		factory(jQuery);
	}
})(function ($) {
	$.extend(true, window, {
		Ta: {
			"core": core()
		}
	});

	function core() {
		return {
			"TaUICreater": TaUICreater(),
			"TaUIManager": TaUIManager()
		};
	}

	function TaUIManager() {
		var uis = new Ta.util.Map();
		function register(id, uiObj) {
			if (this.getCmp(id)) {
				alert(Base.I18n.getLangText("taface.module.tauimanager.register.id", id)); //国际化修改，原内容："注意:TaUIManager 里已经注册有id为['+id+']的对象"
			}
			uis.put(id, uiObj);
		}
		/**
   * 获取对象
   */
		function getCmp(id) {
			return uis.get(id);
		}
		/**
   * 移除注册的对象
   */
		function unregister(id) {
			return uis.remove(id);
		}
		/**
   * 所有组件的id
   */
		function keys() {
			return uis.keys();
		}

		function removeObjInCantainer($contaner) {
			var ids = uis.keys();
			if (ids) {
				for (var i = 0; i < ids.length; i++) {
					var _obj = $("#" + ids[i], $contaner)[0];
					if (_obj) {
						var _tempObj = uis.get(ids[i]); //lins 20120821
						if (_tempObj.cmptype == "datagrid") _tempObj.destroy(); //lins 20120821 添加表格销毁
						this.unregister(ids[i]);
					}
				}
			}
		}
		return {
			"register": register,
			"getCmp": getCmp,
			"unregister": unregister,
			"keys": keys,
			"removeObjInCantainer": removeObjInCantainer
		};
	};

	/**
  * 用户标签生成的组件创建代码添加到这个里面去，然后框架在talayout执行后统一调用create方法。
  *标签生成的组件大致如下：
  *
  *Ta.core.TaUICreater.addUI(function(){
  *	var columns = [];
  *  //.......
  *	var grid = new SlickGrid("#mygrid",columns,options);
  *	TaUIManager.register(grid);
  *});
  */
	function TaUICreater() {
		var uiForCreate = [];

		function addUI(fn) {

			if (uiForCreate) uiForCreate.push(fn);
		}
		function removeAllUI() {}
		function create() {
			if (uiForCreate) {
				// for (var i = 0; i < uiForCreate.length; i++){
				// 	if(uiForCreate[i]){
				// 		uiForCreate[i]();
				// 		uiForCreate[i] = null;
				// 	}
				// }
				//change by chenyao  从外层向内层渲染
				for (var i = uiForCreate.length - 1; i >= 0; i--) {
					if (uiForCreate[i]) {
						uiForCreate[i]();
						uiForCreate[i] = null;
					}
				}
			}
		}

		return {
			"create": create,
			"removeAllUI": removeAllUI,
			"addUI": addUI
		};
	};
});

/***/ }),
/* 217 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

__webpack_require__(219);
(function (factory) {
	if (true) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(13), __webpack_require__(220), __webpack_require__(60), __webpack_require__(41), __webpack_require__(55), __webpack_require__(221), __webpack_require__(140), __webpack_require__(63), __webpack_require__(88), __webpack_require__(141), __webpack_require__(73), __webpack_require__(22), __webpack_require__(37), __webpack_require__(142), __webpack_require__(103), __webpack_require__(17), __webpack_require__(139), __webpack_require__(54), __webpack_require__(138), __webpack_require__(136)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {
		factory(jQuery);
	}
})(function ($) {
	$.fn.taLayout = function (p) {
		var $container = $(this);
		function dolayout($element) {
			var layout = $element.attr("layout");
			var tafit = new TaFit($element);
			if (layout == "border") {
				var layoutCfg = $element.attr('layoutCfg');
				if (layoutCfg && layoutCfg.length > 0) layoutCfg = eval("(" + layoutCfg + ")");
				new TaBorder($element).ligerLayout(layoutCfg); //zzb
			} else {
				//column
				var cols = $element.attr('cols');
				if (cols && cols > 1) {
					var elements = $element.children().not('#pageloading,legend,li,script');
					for (var i = 1; i <= elements.length; i++) {
						var e = $(elements[i - 1]);
						if (e.attr("fit")) {
							new TaFit(e).tauifitheight();
						}
					}
				}
			}
			if ($element.is('div.grid[height]') && 'true' != $element.attr("fit") && $element.attr("height").indexOf("%") > 0) {
				TaAutoPercentHeight($element).autoPercentHeight();
				return;
			}
			if ($element.attr('fit') == 'true' && ($element.hasClass('grid') || $element.hasClass('datagrid') || $element[0].tagName.toUpperCase() == 'FORM' || $element[0].tagName.toUpperCase() == 'TABLE')) {
				tafit.tauifitheight();
				return;
			}
			//布局结束
		}
		var c = $container;
		dolayout(c);
		function bianli(d) {
			var tmp = d.children();
			if (tmp[0] && tmp[0].tagName == 'TEXTAREA') {
				tmp[0].value = tmp[0].value.replaceAll("<br>", "\r\n");
			}
			if (tmp.length > 0) {
				var $fitFistEl = null;
				for (var i = 0; i < tmp.length; i++) {
					var tn = tmp[i].tagName && tmp[i].tagName.toLowerCase();
					if ("div,body,form,fieldset,table,tbody,tr,td".indexOf(tn) == -1) {
						continue;
					} else {
						var $tmp = $(tmp[i]);
						if ($tmp.attr("fit") == "true") {
							if ($fitFistEl == null) {
								$fitFistEl = $tmp;
							} else {
								$tmp.css("height", $fitFistEl.height());
							}
						}
						dolayout($tmp);
					}

					bianli($(tmp[i]));
				}
			}
		}
		bianli(c);
		//init begin
		if (Ta.core.TaUICreater) {
			Ta.core.TaUICreater.create();
		}
		//init end
		//输入框字符提示
		var _fields = $(":input[type!=hidden]", $container);
		_fields.not('[type=button]').blur(function () {
			Ta.util.InputPositon.remove(); //字数提示删除
		}).filter('[type=text],[type=textarea]').keyup(function () {
			Ta.util.InputPositon.show(this); //字数提示
		});
	};
});

/***/ }),
/* 219 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

(function (factory) {
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(13)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {
        factory(jQuery);
    }
})(function ($) {
    $.extend(true, window, {
        TaBorder: TaBorder
    });
    var LigerUIManagers = {};
    ///	<param name="$" type="jQuery"></param>
    function TaBorder($Border) {
        var defaults = {
            topHeight: 50,
            bottomHeight: 50,
            leftWidth: 110,
            centerWidth: 300,
            rightWidth: 170,
            InWindow: true, //是否以窗口的高度为准 height设置为百分比时可用
            heightDiff: 0, //高度补差
            height: '100%', //高度
            onHeightChanged: null,
            isLeftCollapse: false, //初始化时 左边是否隐藏
            isRightCollapse: false, //初始化时 右边是否隐藏
            allowLeftCollapse: true, //是否允许 左边可以隐藏
            allowRightCollapse: true, //是否允许 右边可以隐藏
            allowLeftResize: true, //是否允许 左边可以调整大小
            allowRightResize: true, //是否允许 右边可以调整大小
            allowTopResize: true, //是否允许 头部可以调整大小
            allowBottomResize: true, //是否允许 底部可以调整大小
            space: 3, //间隔
            hasBorder: false, //设置是否显示边线 lly add
            noLeftCenterBorder: true,
            idSeed: 0,
            afterClick: false //林森添加 当单击面板伸缩时点击事件
        };

        $.fn.ligerGetLayoutManager = function () {
            return LigerUIManagers[this[0].id + "_Layout"];
        };
        $.fn.ligerRemoveLayoutManager = function () {
            return this.each(function () {
                LigerUIManagers[this.id + "_Layout"] = null;
            });
        };
        function ligerLayout(p) {

            $Border.each(function () {
                p = $.extend({}, defaults, p || {});
                if (this.usedLayout) return;
                var g = {
                    init: function init() {
                        $("> .l-layout-left .l-layout-header,> .l-layout-right .l-layout-header", g.layout).hover(function () {
                            $(this).addClass("l-layout-header-over");
                        }, function () {
                            $(this).removeClass("l-layout-header-over");
                        });
                        $(".l-layout-header-toggle", g.layout).hover(function () {
                            $(this).addClass("l-layout-header-toggle-over");
                        }, function () {
                            $(this).removeClass("l-layout-header-toggle-over");
                        });
                        $(".l-layout-header-toggle", g.left).click(function () {
                            g.setLeftCollapse(true);
                        });
                        $(".l-layout-header-toggle", g.right).click(function () {
                            g.setRightCollapse(true);
                        });
                        //set top
                        g.middleTop = 0;
                        if (g.top) {
                            g.middleTop += g.top.height();
                            g.middleTop += parseInt(g.top.css('borderTopWidth'));
                            g.middleTop += parseInt(g.top.css('borderBottomWidth'));
                            g.middleTop += p.space;
                        }
                        if (g.left) {
                            g.left.css({ top: g.middleTop });
                            g.leftCollapse.css({ top: g.middleTop });
                        }
                        if (g.center) g.center.css({ top: g.middleTop });
                        if (g.right) {
                            g.right.css({ top: g.middleTop });
                            g.rightCollapse.css({ top: g.middleTop });
                        }
                        //set left
                        if (g.left) g.left.css({ left: 0 });
                        g.onResize();
                    },
                    setCollapse: function setCollapse() {

                        g.leftCollapse.hover(function () {
                            $(this).addClass("l-layout-collapse-left-over");
                        }, function () {
                            $(this).removeClass("l-layout-collapse-left-over");
                        });
                        g.leftCollapse.toggle.hover(function () {
                            $(this).addClass("l-layout-collapse-left-toggle-over");
                        }, function () {
                            $(this).removeClass("l-layout-collapse-left-toggle-over");
                        });
                        g.rightCollapse.hover(function () {
                            $(this).addClass("l-layout-collapse-right-over");
                        }, function () {
                            $(this).removeClass("l-layout-collapse-right-over");
                        });
                        g.rightCollapse.toggle.hover(function () {
                            $(this).addClass("l-layout-collapse-right-toggle-over");
                        }, function () {
                            $(this).removeClass("l-layout-collapse-right-toggle-over");
                        });
                        g.leftCollapse.toggle.click(function () {
                            g.setLeftCollapse(false);
                        });
                        g.rightCollapse.toggle.click(function () {
                            g.setRightCollapse(false);
                        });
                        if (g.left && g.isLeftCollapse) {
                            g.leftCollapse.show();
                            g.leftDropHandle && g.leftDropHandle.hide();
                            g.left.hide();
                        }
                        if (g.right && g.isRightCollapse) {
                            g.rightCollapse.show();
                            g.rightDropHandle && g.rightDropHandle.hide();
                            g.right.hide();
                        }
                    },
                    setLeftCollapse: function setLeftCollapse(isCollapse, flag) {
                        if (!g.left) return false;
                        g.isLeftCollapse = isCollapse;
                        if (g.isLeftCollapse) {
                            g.leftCollapse.show();
                            g.leftDropHandle && g.leftDropHandle.hide();
                            g.left.hide();
                        } else {
                            g.leftCollapse.hide();
                            g.leftDropHandle && g.leftDropHandle.show();
                            g.left.show();
                        }
                        g.onResize();
                        if (typeof p.afterClick == "function" && flag == undefined) p.afterClick(g, "left"); //林森修改20120910 添加点击收缩后执行方法
                    },
                    setRightCollapse: function setRightCollapse(isCollapse) {
                        if (!g.right) return false;
                        g.isRightCollapse = isCollapse;
                        g.onResize();
                        if (g.isRightCollapse) {
                            g.rightCollapse.show();
                            g.rightDropHandle && g.rightDropHandle.hide();
                            g.right.hide();
                        } else {
                            g.rightCollapse.hide();
                            g.rightDropHandle && g.rightDropHandle.show();
                            g.right.show();
                        }
                        g.onResize();
                        if (typeof p.afterClick == "function") p.afterClick(g, "right"); //林森修改20120910 添加点击收缩后执行方法
                    },
                    addDropHandle: function addDropHandle() {
                        if (g.left && p.allowLeftResize) {
                            g.leftDropHandle = $("<div class='l-layout-drophandle-left " + (p.hasBorder ? 'l-layout-drophandle-left-border' : '') + "'><div class='handle-hover-horizontal'></div></div>");
                            g.layout.append(g.leftDropHandle);
                            g.leftDropHandle && g.leftDropHandle.show();
                            g.leftDropHandle.mousedown(function (e) {
                                g.start('leftresize', e);
                            });
                        }
                        if (g.right && p.allowRightResize) {
                            g.rightDropHandle = $("<div class='l-layout-drophandle-right " + (p.hasBorder ? 'l-layout-drophandle-right-border' : '') + "'><div class='handle-hover-horizontal'></div></div>");
                            g.layout.append(g.rightDropHandle);
                            g.rightDropHandle && g.rightDropHandle.show();
                            g.rightDropHandle.mousedown(function (e) {
                                g.start('rightresize', e);
                            });
                        }
                        if (g.top && p.allowTopResize) {
                            g.topDropHandle = $("<div class='l-layout-drophandle-top " + (p.hasBorder ? 'l-layout-drophandle-top-border' : '') + "'><div class='handle-hover'></div></div>");
                            g.layout.append(g.topDropHandle);
                            g.topDropHandle.show();
                            g.topDropHandle.mousedown(function (e) {
                                g.start('topresize', e);
                            });
                        }
                        if (g.bottom && p.allowBottomResize) {
                            g.bottomDropHandle = $("<div class='l-layout-drophandle-bottom " + (p.hasBorder ? 'l-layout-drophandle-bottom-border' : '') + "'><div class='handle-hover'></div></div>");
                            g.layout.append(g.bottomDropHandle);
                            g.bottomDropHandle.show();
                            g.bottomDropHandle.mousedown(function (e) {
                                g.start('bottomresize', e);
                            });
                        }
                        g.draggingxline = $("<div class='l-layout-dragging-xline'></div>");
                        g.draggingyline = $("<div class='l-layout-dragging-yline'></div>");
                        g.layout.append(g.draggingxline).append(g.draggingyline);
                    },
                    setDropHandlePosition: function setDropHandlePosition() {
                        if (g.leftDropHandle) {
                            g.leftDropHandle.css({ left: g.left.width() + parseInt(g.left.css('left')), height: g.middleHeight, top: g.middleTop });
                        }
                        if (g.rightDropHandle) {
                            g.rightDropHandle.css({ left: parseInt(g.right.css('left')) - p.space, height: g.middleHeight, top: g.middleTop });
                        }
                        //modify by cy
                        if (g.topDropHandle) {
                            // g.topDropHandle.css({ top: g.top.height() + parseInt(g.top.css('top')), width: g.top.width() });
                            g.topDropHandle.css({ top: g.top.height() + parseInt(g.top.css('top')) });
                        }
                        if (g.bottomDropHandle) {
                            // g.bottomDropHandle.css({ top: parseInt(g.bottom.css('top')) - p.space, width: g.bottom.width() });
                            g.bottomDropHandle.css({ top: parseInt(g.bottom.css('top')) - p.space });
                        }
                    },
                    onResize: function onResize() {
                        var oldheight = g.layout.height();
                        //set layout height
                        var h = 0;
                        var windowHeight = $(window).height();
                        var parentHeight = null;
                        if (typeof p.height == "string" && p.height.indexOf('%') > 0) {
                            var layoutparent = g.layout.parent();
                            if (p.InWindow && (layoutparent[0].tagName.toLowerCase() == "body" || layoutparent[0].tagName.toLowerCase() == "html")) {
                                parentHeight = windowHeight;
                                parentHeight -= parseInt($('body').css('paddingTop'));
                                parentHeight -= parseInt($('body').css('paddingBottom'));
                            } else {
                                parentHeight = layoutparent.height() - 1; //add by cy
                            }
                            var mt = layoutparent.css('marginTop').toLowerCase();
                            parentHeight -= mt == 'auto' ? 0 : parseInt(mt);
                            var mb = layoutparent.css('marginBottom').toLowerCase();
                            parentHeight -= mt == 'auto' ? 0 : parseInt(mb);;

                            h = parentHeight * parseFloat(p.height) * 0.01;

                            if (p.InWindow && (layoutparent[0].tagName.toLowerCase() == "body" || layoutparent[0].tagName.toLowerCase() == "html")) {
                                h -= g.layout.offset().top - parseInt($('body').css('paddingTop'));
                            }
                        } else {
                            h = parseInt(p.height);
                        }

                        h += p.heightDiff;

                        var hPre = 0;
                        //查找border布局的父亲节点下面的所有前置节点，并且不是隐藏的 aolei add
                        $(this.layout, layoutparent).prevAll(":visible").not("#pageloading").each(function () {
                            hPre += $(this).outerHeight(true);
                        });
                        // add by cy 减去本身的 padding  margin border
                        h -= parseFloat(g.layout.css("padding-top")) || 0;
                        h -= parseFloat(g.layout.css("padding-bottom")) || 0;
                        h -= parseFloat(g.layout.css("margin-bottom")) || 0;
                        h -= parseFloat(g.layout.css("margin-top")) || 0;
                        h -= parseFloat(g.layout.css("border-top")) || 0;
                        h -= parseFloat(g.layout.css("border-bottom")) || 0;
                        h -= hPre;
                        g.layout.height(h);
                        g.layoutHeight = g.layout.height();

                        g.middleWidth = g.layout.width();
                        //可能有问题
                        var x = g.layout.siblings("div:visible").addBack();
                        if (x.parent().hasClass("tabs-panels")) {
                            g.layout.height(x.eq(0).height());
                            g.layoutHeight = g.layout.height();
                            g.middleWidth = x.eq(0).width();
                        }

                        ///////////////////////////////////
                        //lly add
                        //                    if(g.middleWidth==0){
                        //                    	g.middleWidth = '100%';
                        //                    }
                        g.middleHeight = g.layout.height();
                        if (g.top) {
                            g.middleHeight -= g.top.height();
                            g.middleHeight -= parseInt(g.top.css('borderTopWidth'));
                            g.middleHeight -= parseInt(g.top.css('borderBottomWidth'));
                            g.middleHeight -= p.space;
                        }
                        if (g.bottom) {
                            g.middleHeight -= g.bottom.height();
                            g.middleHeight -= parseInt(g.bottom.css('borderTopWidth'));
                            g.middleHeight -= parseInt(g.bottom.css('borderBottomWidth'));
                            g.middleHeight -= p.space;
                        }
                        //specific
                        g.middleHeight -= 0; //2 lly

                        if (p.onHeightChanged && g.layoutHeight != oldheight) {
                            p.onHeightChanged({ layoutHeight: g.layoutHeight, diff: g.layoutHeight - oldheight, middleHeight: g.middleHeight });
                        }

                        if (g.center) {
                            g.centerWidth = g.middleWidth;
                            if (g.left) {
                                if (g.isLeftCollapse) {
                                    g.centerWidth -= g.leftCollapse.width();
                                    g.centerWidth -= parseInt(g.leftCollapse.css('borderLeftWidth'));
                                    g.centerWidth -= parseInt(g.leftCollapse.css('borderRightWidth'));
                                    g.centerWidth -= parseInt(g.leftCollapse.css('left'));
                                    g.centerWidth -= p.space;
                                } else {
                                    g.centerWidth -= g.leftWidth;
                                    g.centerWidth -= parseInt(g.left.css('borderLeftWidth'));
                                    g.centerWidth -= parseInt(g.left.css('borderRightWidth'));
                                    g.centerWidth -= parseInt(g.left.css('left'));
                                    g.centerWidth -= p.space;
                                }
                            }
                            if (g.right) {
                                if (g.isRightCollapse) {
                                    g.centerWidth -= g.rightCollapse.width();
                                    g.centerWidth -= parseInt(g.rightCollapse.css('borderLeftWidth'));
                                    g.centerWidth -= parseInt(g.rightCollapse.css('borderRightWidth'));
                                    g.centerWidth -= parseInt(g.rightCollapse.css('right'));
                                    g.centerWidth -= p.space;
                                } else {
                                    g.centerWidth -= g.rightWidth;
                                    g.centerWidth -= parseInt(g.right.css('borderLeftWidth'));
                                    g.centerWidth -= parseInt(g.right.css('borderRightWidth'));

                                    g.centerWidth -= p.space;
                                }
                            }
                            g.centerLeft = 0;
                            if (g.left) {
                                if (g.isLeftCollapse) {
                                    g.centerLeft += g.leftCollapse.width();
                                    g.centerLeft += parseInt(g.leftCollapse.css('borderLeftWidth'));
                                    g.centerLeft += parseInt(g.leftCollapse.css('borderRightWidth'));
                                    g.centerLeft += parseInt(g.leftCollapse.css('left'));
                                    g.centerLeft += p.space;
                                } else {
                                    g.centerLeft += g.left.width();
                                    g.centerLeft += parseInt(g.left.css('borderLeftWidth'));
                                    g.centerLeft += parseInt(g.left.css('borderRightWidth'));
                                    g.centerLeft += p.space;
                                }
                            }
                            g.center.css({ left: g.centerLeft });
                            g.center.width(g.centerWidth - 3); //change by zzb
                            g.center.height(g.middleHeight);
                            var contentHeight = g.middleHeight;
                            if (g.center.header) contentHeight -= g.center.header.height();
                            contentHeight -= parseInt(g.center.content.css("paddingTop")) + parseInt(g.center.content.css("paddingBottom"));
                            g.center.content.height(contentHeight);
                        }
                        if (g.left) {
                            g.leftCollapse.height(g.middleHeight);

                            g.left.height(g.middleHeight);
                            //lly add
                            var contentHeight = g.middleHeight;
                            if (g.left.header) contentHeight -= g.left.header.height();
                            //XXX 减去padding margin
                            contentHeight -= parseInt(g.left.content.css("paddingTop")) + parseInt(g.left.content.css("paddingBottom"));
                            contentHeight -= parseInt(g.left.content.css("marginTop")) + parseInt(g.left.content.css("marginBottom"));
                            g.left.content.height(contentHeight);
                        }
                        if (g.right) {
                            g.rightCollapse.height(g.middleHeight);
                            g.right.height(g.middleHeight);
                            //lly add
                            var contentHeight = g.middleHeight;
                            if (g.right.header) contentHeight -= g.right.header.height();
                            g.right.content.height(contentHeight);

                            //set left
                            g.rightLeft = 0;

                            if (g.left) {
                                if (g.isLeftCollapse) {
                                    g.rightLeft += g.leftCollapse.width();
                                    g.rightLeft += parseInt(g.leftCollapse.css('borderLeftWidth'));
                                    g.rightLeft += parseInt(g.leftCollapse.css('borderRightWidth'));
                                    g.rightLeft += p.space;
                                } else {
                                    g.rightLeft += g.left.width();
                                    g.rightLeft += parseInt(g.left.css('borderLeftWidth'));
                                    g.rightLeft += parseInt(g.left.css('borderRightWidth'));
                                    g.rightLeft += parseInt(g.left.css('left'));
                                    g.rightLeft += p.space;
                                }
                            }
                            if (g.center) {
                                g.rightLeft += g.center.width();
                                g.rightLeft += parseInt(g.center.css('borderLeftWidth'));
                                g.rightLeft += parseInt(g.center.css('borderRightWidth'));
                                g.rightLeft += p.space;
                            }
                            g.right.css({ left: g.rightLeft });
                        }
                        if (g.bottom) {
                            g.bottomTop = g.layoutHeight - g.bottom.height() - 2;
                            g.bottom.css({ top: g.bottomTop });
                        }
                        g.setDropHandlePosition();
                        //对内容进行resize
                        $('>div >div.l-layout-content', g.layout).each(function () {
                            $(this).triggerHandler('_resize');
                        });
                        $('>div.l-layout-left>div[position=left]>div[fit=true]', g.layout).each(function () {
                            $(this).triggerHandler('_resize');
                        });
                        $('>div >div.l-layout-content >div[fit=true],>div >div.l-layout-content >form[fit=true],>div >div.l-layout-content>div.grid[height],>div >div.l-layout-content>div.ez-fl>div.grid[height]', g.layout).each(function () {
                            $(this).triggerHandler('_resize');
                        });
                    },
                    start: function start(dragtype, e) {
                        g.dragtype = dragtype;
                        if (dragtype == 'leftresize' || dragtype == 'rightresize') {
                            g.xresize = { startX: e.pageX };
                            g.draggingyline.css({ left: e.pageX - g.layout.offset().left, height: g.middleHeight, top: g.middleTop }).show();
                            $('body').css('cursor', 'col-resize');
                        } else if (dragtype == 'topresize' || dragtype == 'bottomresize') {
                            g.yresize = { startY: e.pageY };
                            g.draggingxline.css({ top: e.pageY - g.layout.offset().top, width: g.layout.width() }).show();
                            $('body').css('cursor', 'row-resize');
                        } else {
                            return;
                        }

                        g.layout.lock.width(g.layout.width());
                        g.layout.lock.height(g.layout.height());
                        g.layout.lock.show();
                        if ($.browser.msie || $.browser.safari) $('body').bind('selectstart', function () {
                            return false;
                        }); // 不能选择

                        $(document).bind('mouseup', g.stop);
                        $(document).bind('mousemove', g.drag);
                    },
                    drag: function drag(e) {
                        if (g.xresize) {
                            g.xresize.diff = e.pageX - g.xresize.startX;
                            g.draggingyline.css({ left: e.pageX - g.layout.offset().left });
                            $('body').css('cursor', 'col-resize');
                        } else if (g.yresize) {
                            g.yresize.diff = e.pageY - g.yresize.startY;
                            g.draggingxline.css({ top: e.pageY - g.layout.offset().top });
                            $('body').css('cursor', 'row-resize');
                        }
                    },
                    stop: function stop(e) {
                        if (g.xresize && g.xresize.diff != undefined) {
                            if (g.dragtype == 'leftresize') {
                                g.leftWidth += g.xresize.diff;
                                g.left.width(g.leftWidth);
                                if (g.center) g.center.width(g.center.width() - g.xresize.diff).css({ left: parseInt(g.center.css('left')) + g.xresize.diff });else if (g.right) g.right.width(g.left.width() - g.xresize.diff).css({ left: parseInt(g.right.css('left')) + g.xresize.diff });
                            } else if (g.dragtype == 'rightresize') {
                                g.rightWidth -= g.xresize.diff;
                                g.right.width(g.rightWidth).css({ left: parseInt(g.right.css('left')) + g.xresize.diff });
                                if (g.center) {
                                    g.center.width(g.center.width() + g.xresize.diff);
                                } else if (g.left) g.left.width(g.left.width() + g.xresize.diff);
                            }
                        } else if (g.yresize && g.yresize.diff != undefined) {
                            if (g.dragtype == 'topresize') {
                                g.top.height(g.top.height() + g.yresize.diff);
                                g.middleTop += g.yresize.diff;
                                g.middleHeight -= g.yresize.diff;
                                if (g.left) {
                                    g.left.css({ top: g.middleTop }).height(g.middleHeight);
                                    g.leftCollapse.css({ top: g.middleTop }).height(g.middleHeight);
                                }

                                if (g.center) g.center.css({ top: g.middleTop }).height(g.middleHeight);

                                if (g.right) {
                                    g.right.css({ top: g.middleTop }).height(g.middleHeight);
                                    g.rightCollapse.css({ top: g.middleTop }).height(g.middleHeight);
                                }
                                g.top.content.height(g.top.height()); //李从波添加，改变顶部高度的同时修改顶部内容高度
                            } else if (g.dragtype == 'bottomresize') {
                                g.bottom.height(g.bottom.height() - g.yresize.diff);
                                g.middleHeight += g.yresize.diff;
                                g.bottomTop += g.yresize.diff;
                                g.bottom.css({ top: g.bottomTop });
                                if (g.left) {
                                    g.left.height(g.middleHeight);
                                    g.leftCollapse.height(g.middleHeight);
                                }
                                if (g.center) g.center.height(g.middleHeight);
                                if (g.right) {
                                    g.right.height(g.middleHeight);
                                    g.rightCollapse.height(g.middleHeight);
                                }
                                g.bottom.content.height(g.bottom.height()); //李从波添加，改变底部高度的同时修改底部内容高度
                            }
                            //lly add
                            var contentHeight = g.middleHeight;
                            if (g.left && g.left.header) {
                                //李从波修改，添加非空判断，如果左边区域不存在则不修改内容高度
                                contentHeight -= g.left.header.height();
                                g.left.content.height(contentHeight);
                            }
                            contentHeight = g.middleHeight;
                            if (g.center && g.center.header) {
                                //李从波修改，添加非空判断，如果中间区域不存在则不修改内容高度
                                contentHeight -= g.center.header.height();
                                g.center.content.height(contentHeight);
                            }
                            contentHeight = g.middleHeight;
                            if (g.right && g.right.header) {
                                //李从波修改，添加非空判断，如果右侧区域不存在则不修改内容高度
                                contentHeight -= g.right.header.height();
                                g.right.content.height(contentHeight);
                            }
                        }
                        //lly 对子组件进行resize
                        //                    if($.fn.tauicmpresize)
                        //                    	g.layout.tauicmpresize({resizeSelf:false});
                        $('>div >div.l-layout-content', g.layout).each(function () {
                            $(this).triggerHandler('_resize');
                        });
                        $('>div.l-layout-left>div[position=left]>div[fit=true]', g.layout).each(function () {
                            $(this).triggerHandler('_resize');
                        });
                        $('>div >div.l-layout-content >div[fit=true],>div >div.l-layout-content >form[fit=true],>div >div.l-layout-content>div.grid[height],>div >div.l-layout-content>div.ez-fl>div.grid[height]', g.layout).each(function () {
                            $(this).triggerHandler('_resize');
                        });

                        g.setDropHandlePosition();
                        g.draggingxline.hide();
                        g.draggingyline.hide();
                        g.xresize = g.yresize = g.dragtype = false;
                        g.layout.lock.hide();
                        if ($.browser.msie || $.browser.safari) $('body').unbind('selectstart');
                        $(document).unbind('mousemove', g.drag);
                        $(document).unbind('mouseup', g.stop);
                        $('body').css('cursor', '');
                        if (typeof window._borderLayout_mourseup_userDefinedFn == "function") {
                            window._borderLayout_mourseup_userDefinedFn(e, g);
                        }
                    }
                };
                g.layout = $(this);
                if (!g.layout.hasClass("l-layout")) g.layout.addClass("l-layout");
                g.width = g.layout.width();
                //top
                if ($("> div[position=top]", g.layout).length > 0) {
                    //lly add
                    g.top = $("> div[position=top]", g.layout).wrap('<div class="l-layout-top" style="top:0px;' + (p.hasBorder ? '' : 'border:0px') + '"></div>').parent();
                    // g.top = $("> div[position=top]", g.layout).wrap('<div class="l-layout-top" style="top:0px;"></div>').parent();

                    g.top.content = $("> div[position=top]", g.top);
                    if (!g.top.content.hasClass("l-layout-content")) g.top.content.addClass("l-layout-content");
                    g.topHeight = p.topHeight;
                    if (g.topHeight) {
                        g.top.height(g.topHeight);
                        g.top.content.height(g.topHeight); //李从波添加，同时修改顶部内容高度
                    }
                }

                //bottom
                if ($("> div[position=bottom]", g.layout).length > 0) {
                    //lly add
                    g.bottom = $("> div[position=bottom]", g.layout).wrap('<div class="l-layout-bottom" ' + (p.hasBorder ? '' : ' style="border:0px"') + '></div>').parent();
                    //g.bottom = $("> div[position=bottom]", g.layout).wrap('<div class="l-layout-bottom"></div>').parent();
                    g.bottom.content = $("> div[position=bottom]", g.bottom);
                    if (!g.bottom.content.hasClass("l-layout-content")) g.bottom.content.addClass("l-layout-content");

                    g.bottomHeight = p.bottomHeight;
                    if (g.bottomHeight) {
                        g.bottom.height(g.bottomHeight);
                    }
                }
                var leftKey;
                //left
                if ($("> div[position=left]", g.layout).length > 0) {
                    //lly add
                    g.left = $("> div[position=left]", g.layout).wrap('<div class="l-layout-left ' + (p.noLeftCenterBorder ? 'noborder' : '') + '" style="left:0px;' + (p.hasBorder ? '' : 'border:0px') + '"></div>').parent();
                    //g.left = $("> div[position=left]", g.layout).wrap('<div class="l-layout-left" style="left:0px;"></div>').parent();

                    g.left.content = $("> div[position=left]", g.left);
                    if (g.left.content.attr("title") && p.allowLeftCollapse) {
                        g.left.header = $('<div class="l-layout-header"><div class="l-layout-header-toggle"></div><div class="l-layout-header-inner"></div></div>');
                        g.left.prepend(g.left.header);
                        g.left.header.toggle = $(".l-layout-header-toggle", g.left.header);

                        if (!g.left.content.hasClass("l-layout-content")) g.left.content.addClass("l-layout-content");
                        if (!p.allowLeftCollapse) $(".l-layout-header-toggle", g.left.header).remove();

                        //set title
                        var lefttitle = g.left.content.attr("title");
                        leftKey = g.left.content.attr("title");
                        if (lefttitle) {
                            g.left.content.attr("title", "");
                            $(".l-layout-header-inner", g.left.header).html(lefttitle);
                        }

                        var leftTitleIcon = g.left.content.attr('titleIcon');
                        if (leftTitleIcon) g.left.header.addClass(centerTitleIcon);
                    }
                    //set content height
                    //                if(lefttitle &&  p.allowLeftCollapse){
                    //                	g.left.content.css('height',g.middleHeight-50);
                    //                }else if(lefttitle || p.allowLeftCollapse){
                    //               		g.left.content.css('height',g.middleHeight-25);
                    //                }else{
                    //                	g.left.content.css('height','100%');
                    //                }

                    //set width
                    g.leftWidth = p.leftWidth;
                    if (g.leftWidth) g.left.width(g.leftWidth);
                }
                //center
                if ($("> div[position=center]", g.layout).length > 0) {
                    // lly add
                    g.center = $("> div[position=center]", g.layout).wrap('<div class="l-layout-center ' + (p.noLeftCenterBorder ? 'noborder' : '') + '"' + (p.hasBorder ? '' : ' style="border:0px"') + '></div>').parent();
                    // g.center = $("> div[position=center]", g.layout).wrap('<div class="l-layout-center" ></div>').parent();

                    g.center.content = $("> div[position=center]", g.center);
                    g.center.content.addClass("l-layout-content");
                    //set title
                    var centertitle = "<span>" + g.center.content.attr("title") + "</span>";
                    if (g.center.content.attr("title")) {
                        g.center.content.attr("title", "");
                        g.center.header = $('<div class="l-layout-header"></div>');
                        g.center.prepend(g.center.header);

                        var centerTitleIcon = g.center.content.attr('titleIcon');
                        if (centerTitleIcon) {
                            centertitle = "<div class='" + centerTitleIcon + "' style='width:20px;height:20px;float:left;margin-top:3px'></div>" + centertitle;
                        }

                        g.center.header.html(centertitle);
                    }
                    //set width
                    g.centerWidth = p.centerWidth;
                    if (g.centerWidth) g.center.width(g.centerWidth);
                }
                //right
                if ($("> div[position=right]", g.layout).length > 0) {
                    // lly add
                    g.right = $("> div[position=right]", g.layout).wrap('<div class="l-layout-right" ' + (p.hasBorder ? '' : ' style="border:0px"') + '></div>').parent();
                    // g.right = $("> div[position=right]", g.layout).wrap('<div class="l-layout-right"></div>').parent();

                    g.right.header = $('<div class="l-layout-header"><div class="l-layout-header-toggle"></div><div class="l-layout-header-inner"></div></div>');
                    g.right.prepend(g.right.header);
                    g.right.header.toggle = $(".l-layout-header-toggle", g.right.header);
                    if (!p.allowRightCollapse) $(".l-layout-header-toggle", g.right.header).remove();
                    g.right.content = $("> div[position=right]", g.right);
                    if (!g.right.content.hasClass("l-layout-content")) g.right.content.addClass("l-layout-content");

                    //set title
                    var righttitle = g.right.content.attr("title");
                    if (righttitle) {
                        g.right.content.attr("title", "");
                        $(".l-layout-header-inner", g.right.header).html(righttitle);
                    }
                    //set width
                    g.rightWidth = p.rightWidth;
                    if (g.rightWidth) g.right.width(g.rightWidth);
                }
                //lock
                g.layout.lock = $("<div class='l-layout-lock'></div>");
                g.layout.append(g.layout.lock);
                //DropHandle
                g.addDropHandle();

                //Collapse
                g.isLeftCollapse = p.isLeftCollapse;
                g.isRightCollapse = p.isRightCollapse;
                g.leftCollapse = $('<div class="l-layout-collapse-left" style="display: none; " title="' + Base.I18n.getLangText("taface.module.border.collapse.title") + '"><div class="l-layout-collapse-left-toggle"></div><div class="layout-left-inner"></div></div>'); ////国际化修改，原内容："点击按钮打开"
                if (leftKey) {
                    $(".layout-left-inner", g.leftCollapse).html(leftKey);
                }
                g.rightCollapse = $('<div class="l-layout-collapse-right" style="display: none; " title="' + Base.I18n.getLangText("taface.module.border.collapse.title") + '"><div class="l-layout-collapse-right-toggle"></div></div>'); //国际化修改，原内容："点击按钮打开"
                g.layout.append(g.leftCollapse).append(g.rightCollapse);
                g.leftCollapse.toggle = $("> .l-layout-collapse-left-toggle", g.leftCollapse);
                g.rightCollapse.toggle = $("> .l-layout-collapse-right-toggle", g.rightCollapse);
                g.setCollapse();

                //init
                g.init();
                $(g.layout[0]).bind('_resize', function () {
                    g.onResize();
                });
                if (g.layout[0].tagName.toLowerCase() == 'body' || g.layout[0].parentNode.tagName.toLowerCase() == 'body') {
                    $(window).unbind('.ligerLayout').bind('resize.ligerLayout', function () {
                        g.layout.triggerHandler('_resize');
                    });
                }

                if (this.id == undefined) this.id = "LigerUI_" + defaults.idSeed++;
                LigerUIManagers[this.id + "_Layout"] = g;
                this.usedLayout = true;
            });
            if ($Border.length == 0) return null;
            if ($Border.length == 1) return LigerUIManagers[$Border[0].id + "_Layout"];
            var managers = [];
            $Border.each(function () {
                managers.push(LigerUIManagers[this.id + "_Layout"]);
            });
            return managers;
        }
        $.extend(this, { // 为this对象
            "cmptype": 'border', // 将方法注册为公共方法
            "version": "3.13.0",
            "ligerLayout": ligerLayout
        });
    }
});

/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

(function (factory) {
	if (true) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {
		factory(jQuery);
	}
})(function ($) {
	$.extend(true, window, {
		TaAutoPercentHeight: TaAutoPercentHeight
	});

	function TaAutoPercentHeight($target, options) {
		var defaults = {
			height: '100%',
			heightDiff: 0
		};
		if (!$target) {
			$target = $("body");
		}
		function autoPercentHeight() {
			options = options || {};
			return $target.each(function () {
				var o = $(this);
				var opts = $.extend({}, defaults, {
					height: o.attr('height') || '100%',
					heightDiff: o.attr('heightDiff') || 0
				}, options);
				$.data(this, 'autoPercentHeight', {
					options: opts
				});
				fnComputeHeight(this);
				var _this = this;
				o.bind("_resize", function () {
					fnComputeHeight(_this);
				});
				if (this.parentNode.tagName.toLowerCase() == 'body') {
					$(window).unbind('.autoheight').bind('resize.autoheight', function () {
						o.triggerHandler('_resize');
					});
				}
			});
		}

		function fnComputeHeight(target) {
			var opts = $.data(target, 'autoPercentHeight').options;
			var o = $(target);
			var heightDiff = opts.heightDiff;
			var height = opts.height;
			var heightPercent;
			if (height) {
				var heightVal = 0;
				var parent = o.parent();
				if (height.indexOf("%") != -1) {
					heightPercent = parseFloat(height) / 100;
				} else {
					heightPercent = parseFloat(height);
				}
				if (parent[0].tagName.toLowerCase() == "body") {
					var h = $(window).height() - 3 - heightDiff;
					h -= parseInt($('body').css('paddingTop'));
					h -= parseInt($('body').css('paddingBottom'));
					h -= parseInt($('body').css('marginTop'));
					h -= parseInt($('body').css('marginBottom'));
					heightVal = h * heightPercent;
				} else if (parent[0].tagName.toLowerCase() == "div" && parent.hasClass("ez-fl")) {
					heightVal = parent.parent().height() * heightPercent;
				} else {
					heightVal = parent.height() * heightPercent;
				}
				if (heightDiff) heightVal -= heightDiff;
				if (heightVal < 57 && $(">div.panel", o).length > 0) {
					heightVal = 57;
				}
				o.height(heightVal);
				$(">div.panel", o).eq(0).css({ "margin": "0px" });
				$('>div[fit=true],>div.grid[height],>div.ez-fl>div.grid[height]', o).each(function () {
					$(this).triggerHandler('_resize');
				});
			}
		}

		return $.extend(this, { // 为this对象
			"cmptype": 'autoPercentHeight', // 将方法注册为公共方法
			"version": "3.13.0",
			"autoPercentHeight": autoPercentHeight
		});
	}

	//	$.fn.taAutoPercentHeight = function(options, param){
	//		options = options || {};
	//		return this.each(function(){
	//			  var o = $(this);
	//			  var opts= $.extend({}, $.fn.taAutoPercentHeight.defaults, {
	//				    height:(o.attr('height') || '100%'),
	//					heightDiff: (o.attr('heightDiff') || 0)
	//				}, options);
	//			    $.data(this, 'autoPercentHeight', {
	//					options: opts
	//				});
	//				   fnComputeHeight(this);
	//				   var _this=this;
	//				   o.bind("_resize",function(){
	//					   fnComputeHeight(_this);
	//				   });
	//				   if(this.parentNode.tagName.toLowerCase() == 'body'){
	//					   $(window).unbind('.autoheight').bind(
	//							'resize.autoheight', function() {
	//								o.triggerHandler('_resize');
	//					   });
	//				   }		
	//		});
	//	};
	//	$.fn.taAutoPercentHeight.defaults = {
	//		height:'100%',
	//		heightDiff:0
	//	};
});

/***/ }),
/* 222 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * 容器fieldset常用方法，调用方式为Base.xxx();
 * @module Base
 * @class fieldset
 * @static
 */
(function (factory) {
	if (true) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {
		factory(jQuery);
	}
})(function ($) {
	$.extend(true, window, {
		Base: core()
	});

	function core() {

		/**
   * 收起fieldset,与slideDownFieldset执行一样的效果，当展开的时候点击收起，当收起的时候点击展开。
   * @method slideUpFieldset
   * @param {String} fieldsetId fieldset的Id
   */
		function slideUpFieldset(fieldsetId) {
			//TODO 与slideDownFieldset执行一样的效果
			$("#" + fieldsetId + " .tafieldset-body").slideUp();
		}
		/**
   * 拉下Fieldset,与slideUpFieldset执行一样的效果，当展开的时候点击收起，当收起的时候点击展开。
   * @method slideDownFieldset
   * @param {String} fieldsetId fieldset的Id
   */
		function slideDownFieldset(fieldsetId) {
			$("#" + fieldsetId + " .tafieldset-body").slideDown();
		}
		/**
   * 给fieldset设置标题。
   * @method setFieldsetTitle
   * @param {String} fieldsetId fieldset的Id
   * @param {String} title 新标题,可以包含html标签
   */
		function setFieldsetTitle(fieldsetId, title) {
			$("#" + fieldsetId + " h2").html(title);
		}

		return {
			slideUpFieldset: slideUpFieldset,
			slideDownFieldset: slideDownFieldset,
			setFieldsetTitle: setFieldsetTitle
		};
	}
});

/***/ }),
/* 224 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**==================对下拉框的操作==============*/
/**
 * 下拉列表常用操作方法,调用方式为Base.xxx();
 * @class selectinput
 * @module Base
 * @static
 */
(function (factory) {
	if (true) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {
		factory(jQuery);
	}
})(function ($) {
	$.extend(true, window, {
		Base: core()
	});

	function core() {
		return {
			filterSelectInput: filterSelectInput,
			setSelectInputData: setSelectInputData,
			loadSelectInputData: loadSelectInputData,
			clearSelectInputData: clearSelectInputData

			/**
    * 对下拉框的数据呈现进行过滤
    * @method filterSelectInput
    * @param {String} id 下拉列表的id
    * @param {String/Array} values 需要过滤的数组 例如:"01,02" 或["01","02"]
    * @param {Boolean} reverse 默认为false,使得下拉框只能选择values范围内的值,如果为true，那么下拉框就显示除了values以外的哪些值。
    */
		};function filterSelectInput(id, values, reverse) {
			if (Ta.core.TaUIManager) {
				var selectinput = Ta.core.TaUIManager.getCmp(id);
				if (typeof selectinput != "undefined" && selectinput != null && selectinput.cmptype == "TaSelectInput") {
					selectinput.setDisableSelect(values, reverse);
				}
			}
		}
		/**
   * 给下拉框重新设置json数据
   * <br/>数据示例：
   * <br/>[{id : '1', name: "林森", py :"LS"}, {id : '2', name: '你好', py :"NH"}, {id : '3', name: '银海', py :"YH"}]
   * <br/>py为可选字段，设置了即可使用拼音过滤
   * @method setSelectInputData
   * @param {String} id 下拉框的id
   * @param {String} value json格式的字符串，必须满足示例提供的模板
   *
   */
		function setSelectInputData(id, value) {
			if (Ta.core.TaUIManager) {
				var selectinput = Ta.core.TaUIManager.getCmp(id);
				if (typeof selectinput != "undefined" && selectinput != null && selectinput.cmptype == "TaSelectInput") {
					if (typeof value === "string") {
						value = eval(value);
					}
					if ($.isArray(value)) {
						selectinput.setData(value);
					}
				}
			}
		}
		/**
   * 通过url获取下拉框数据
   * @method loadSelectInputData
   * @param {String} id 下拉框的id
   * @param {String} url action地址
   * <br/>action  必须返回json数据
   * <br/>即action方法必须   writeJsonToClient(json);   return null;
   * <br/>返回json数据示例:[{id : '1', name: '你好','py':'NH'}, {id : '2', name: '银海','py':'YH'}]
   * <br/> py为可选字段，设置了即可使用拼音过滤
   * @param {String} parameter 传递的参数   json格式的字符串
   * <br/>例如{"dto['id']":"1","dto['type']":"2"}
   */
		function loadSelectInputData(id, url, parameter) {
			if (Ta.core.TaUIManager) {
				var selectinput = Ta.core.TaUIManager.getCmp(id);
				if (typeof selectinput != "undefined" && selectinput != null && selectinput.cmptype == "TaSelectInput") {
					var data = Base.getJson(url, parameter);
					if ($.isArray(data)) {
						selectinput.setData(data);
					}
				}
			}
		}

		/**
   * 清空下拉框选择范围数据
   * @method clearSelectInputData
   * @param {String} id 下拉框的id
   */
		function clearSelectInputData(id) {
			if (Ta.core.TaUIManager) {
				var selectinput = Ta.core.TaUIManager.getCmp(id);
				if (typeof selectinput != "undefined" && selectinput != null && selectinput.cmptype == "TaSelectInput") {
					selectinput.clearSelectData();
				}
			}
		}
	}
});

/***/ }),
/* 226 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 227 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

(function (factory) {
	if (true) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(102)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {
		factory(jQuery);
	}
})(function ($) {
	$.extend(true, window, {
		tab: TaTab
	});
	function TaTab(id, options) {
		//var self = this;
		var $obj = $("#" + id);
		function init() {}
		//return self;	
		// end init

		init(); // 璋冪敤鍒濆鍖栨柟娉?

		function setEnable(isEnable) {
			var index, $tb, tabAttr;
			if (!$obj) return false;
			index = $obj.index() / 2; // 页面结构 div 后接的是 script
			$tb = $obj.parent().parent().find(".tabs-header ul li").eq(index);
			tabAttr = $tb.data('tabs.tab');
			if (isEnable === false) {
				tabAttr.enable = false;
				$tb.data('tabs.tab', tabAttr);
				$tb.find('a').addClass('disabled');
				TaContainerSupport.setEnable(id, false);
			} else {
				tabAttr.enable = true;
				$tb.data('tabs.tab', tabAttr);
				$tb.find('a').removeClass('disabled');
				TaContainerSupport.setEnable(id, true);
			}
		}

		function setVisible(visiable, isHold) {
			if (!$obj) return false;
			var obj = $obj[0];
			var tabsc = $(obj.parentNode.parentNode);
			if (visiable) {
				if (tabsc.hasClass('tabs-container')) {
					tabsc.tauitabs('showTab', id);
				}
			} else {
				if (tabsc.hasClass('tabs-container')) {
					tabsc.tauitabs('hideTab', id);
				}
			}
		}
		function setReadOnly(isReadOnly) {
			TaContainerSupport.setReadOnly(id, isReadOnly);
		}

		function focus() {
			if (!$obj) return false;
			var index = $obj.index() / 2;
			$obj.parent().parent().find(".tabs-header ul li").eq(index).trigger("click.tabs");
		}

		function setRequired(isRequired) {
			TaContainerSupport.setRequired(options.id, isRequired);
		}

		function resetData() {
			TaContainerSupport.resetData(options.id);
		}
		function clearData() {
			TaContainerSupport.clearData(options.id);
		}
		function doValidate() {
			var result = TaContainerSupport.doValidate(options.id);
			if (typeof result == 'string') {
				return false;
			}
			return result;
		}
		function cleanValidateStyle() {
			TaContainerSupport.cleanValidateStyle(options.id);
		}

		$.extend(this, { // 涓簍his瀵硅薄
			"cmptype": 'tabs', // 灏嗘柟娉曟敞鍐屼负鍏叡鏂规硶
			"version": '3.13.0',
			"setEnable": setEnable,
			"setVisible": setVisible,
			"setFocus": focus,
			"setReadOnly": setReadOnly,
			"setRequired": setRequired,
			"reset": resetData,
			"clearData": clearData,
			"doValidate": doValidate,
			"cleanValidateStyle": cleanValidateStyle
		});
	}
	return TaTab;
});

/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

(function (factory) {
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(102), __webpack_require__(28)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {
        factory(jQuery);
    }
})(function ($) {
    $.extend(true, window, {
        tabs: TaTabs
    });
    function TaTabs(id, options) {
        //var self = this;
        var $obj = $("#" + id);
        //add by chenyao 添加一个一级tabs页样式
        if ($obj.attr("levelStyle") == "level1") {
            $obj.addClass("level1");
        }
        function init() {
            var layoutCfg = $obj.attr('layoutCfg');
            if (layoutCfg && layoutCfg.length > 0) layoutCfg = eval("(" + layoutCfg + ")");
            $obj.tauitabs(layoutCfg || {});
            //return self;
        } // end init

        init(); // 璋冪敤鍒濆鍖栨柟娉?

        function setEnable(isEnable) {
            if (!$obj) return false;
            if (isEnable === false) {
                $obj.find("ul li").each(function () {
                    var tabAttr = $.data(this, 'tabs.tab');
                    tabAttr.enable = false;
                    $.data(this, 'tabs.tab', tabAttr);
                });
                $obj.find("ul li a").addClass('disabled');
            } else {
                $obj.find("ul li").each(function () {
                    var tabAttr = $.data(this, 'tabs.tab');
                    tabAttr.enable = true;
                    $.data(this, 'tabs.tab', tabAttr);
                });
                $obj.find("ul li a").removeClass('disabled');
            }
            TaContainerSupport.setEnable(id, isEnable);
        }
        function setVisible(isVisiable, isHold) {
            TaContainerSupport.setVisible(id, isVisiable, isHold);
        }
        function setReadOnly(isReadOnly) {
            TaContainerSupport.setReadOnly(id, isReadOnly);
        }

        function getValue() {
            if (!$obj) return null;
            var index = $obj.find("ul .tabs-selected").index() * 2;
            var value = $obj.find(".tabs-panels").children().eq(index).attr('id');
            return value;
        }

        function setValue(tabid) {
            if (!$obj) return false;
            var index = $obj.find("#" + tabid).index() / 2;
            if (index >= 0) $obj.find("ul li").eq(index).trigger("click.tabs");
        }

        function setRequired(isRequired) {
            TaContainerSupport.setRequired(options.id, isRequired);
        }

        function resetData() {
            TaContainerSupport.resetData(options.id);
        }
        function clearData() {
            TaContainerSupport.clearData(options.id);
        }
        function doValidate() {
            var result = TaContainerSupport.doValidate(options.id);
            if (typeof result == 'string') {
                return false;
            }
            return result;
        }
        function cleanValidateStyle() {
            TaContainerSupport.cleanValidateStyle(options.id);
        }

        $.extend(this, { // 涓簍his瀵硅薄
            "cmptype": 'tabs', // 灏嗘柟娉曟敞鍐屼负鍏叡鏂规硶
            "version": '3.13.0',
            "setEnable": setEnable,
            "setVisible": setVisible,
            "setReadOnly": setReadOnly,
            "getValue": getValue,
            "setValue": setValue,
            "setRequired": setRequired,
            "reset": resetData,
            "clearData": clearData,
            "doValidate": doValidate,
            "cleanValidateStyle": cleanValidateStyle
        });
    }
    return TaTabs;
});

/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(jQuery) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * tab组件常用方法,调用方式为Base.xxx();
 * @module Base
 * @class tabs
 * @static
 */
(function (factory) {
	if (true) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {
		factory(jQuery);
	}
})(function ($) {
	$.extend(true, window, {
		Base: core()
	});

	function core() {

		return {
			activeTab: activeTab,
			enableTab: enableTab,
			closeTab: closeTab,
			setTabTitle: setTabTitle,
			selectTab: selectTab,
			selectTabs: selectTabs,
			reBuildTabFromHtml: reBuildTabFromHtml
			/**
    * 设置某一个tab页被选中
    * @method activeTab
    * @param {Stirng} tabid tab的id
    */
		};function activeTab(tabid) {
			var tabsc = $("#" + tabid).parent().parent();
			if (tabsc.hasClass('tabs-container')) {
				tabsc.tauitabs('select', { "id": tabid });
			}
		}

		/**
   * 设置某个或某几个tab页可用/不可用
   * @method enableTab
   * @param {String} tabsId
   * @param {String/Array} tabids tab页的id或id数组
   */
		function enableTab(tabids, isEnable) {
			var tabsc;
			if (isEnable === false) {
				var enable = false;
			} else {
				var enable = true;
			}
			if (typeof tabids == 'string') {
				tabsc = $("#" + tabids).parent().parent();
				if (tabsc.hasClass('tabs-container')) {
					tabsc.tauitabs('enableTab', { "tabid": tabids, "enable": enable });
				}
			} else if (jQuery.isArray(tabids)) {
				for (var i = 0; i < tabids.length; i++) {
					tabsc = $("#" + tabids[i]).parent().parent();
					if (tabsc.hasClass('tabs-container')) {
						tabsc.tauitabs('enableTab', { "tabid": tabids[i], "enable": enable });
					}
				}
			}
		}
		/**
   * 关闭某个或某几个tab页
   * @method closeTab
   * @param {String/Array} tabids tab页的id或id数组
   */
		function closeTab(tabids) {
			var tabsc;
			if (typeof tabids == 'string') {
				tabsc = $("#" + tabids).parent().parent();
				if (tabsc.hasClass('tabs-container')) {
					tabsc.tauitabs('close', { "id": tabids });
				}
			} else if (jQuery.isArray(tabids)) {
				for (var i = 0; i < tabids.length; i++) {
					tabsc = $("#" + tabids[i]).parent().parent();
					if (tabsc.hasClass('tabs-container')) {
						tabsc.tauitabs('close', { "id": tabids[i] });
					}
				}
			}
		}
		/**
   * 给某个tab设置标题
   * @method setTabTitle
   * @param {String} tabsId tabs容器的id
   * @param {String} tabid tab的id
   * @param {String} title 新标题
   */
		function setTabTitle(tabid, title) {
			var tabsc = $("#" + tabid).parent().parent();
			if (tabsc.hasClass('tabs-container')) {
				tabsc.tauitabs('setTitle', { "tabid": tabid, "title": title });
			}
		}

		/**
   * 设置多个tab页被选中
   * @method selectTab
   * @param {Array} ids tab的id集合,数组 或 tab的ids ,隔开
   */
		function selectTab(ids) {
			if (typeof ids == "string") ids = ids.split(",");
			for (var i = 0; i < ids.length; i++) {
				Base.activeTab(ids[i]);
			}
		}
		/**
   * 弃用
   * @method selectTab
   * @param String ids tab的ids ,隔开
   */
		function selectTabs(ids) {
			selectTab(ids);
		}

		function reBuildTabFromHtml() {
			var titles = [];
			var divs = [];
			$(".tabs-container").each(function () {
				$(this).find("a span").each(function () {
					titles.push($(this).html());
				});
				$(this).find(".tabs-panels").children().each(function () {
					var tab = {};
					tab.html = $(this).html();
					tab.layout = $(this).attr("layout");
					tab.cols = $(this).attr("cols");
					divs.push(tab);
				});
				$(this).html("");
				for (var i = 0; i < titles.length; i++) {
					var $div = $("<div>").attr("id", "tab_" + i).attr("title", titles[i]).attr("layout", divs[i].layout ? divs[i].layout : "column").html(divs[i].html).appendTo($(this));
					if (i == 0) $div.attr("selected", "true");
				}
			});
		}
	}
});
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * tree组件常用方法,调用方式为Base.xxx();
 * @module Base
 * @class tree
 * @static
 */
(function (factory) {
	if (true) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {
		factory(jQuery);
	}
})(function ($) {
	$.extend(true, window, {
		Base: core()
	});

	function core() {
		return {
			refleshTree: refleshTree,
			expandTree: expandTree,
			collapseTree: collapseTree,
			focusTree: focusTree,
			recreateTree: recreateTree,
			clearTreeData: clearTreeData,
			getTreeNodePathByValue: getTreeNodePathByValue,
			getTreeNodePath: getTreeNodePath
			/**
    * 对树指定节点id的节点进行刷新，主要针对异步树。
    * @method refleshTree
    * @param {String} treeId  树id
    * @param {String} nodeId  节点id
    */
		};function refleshTree(treeId, nodeId) {
			var treeObj = $.fn.zTree.getZTreeObj(treeId);
			var parentNode = treeObj.getNodeByParam(treeObj.setting.data.simpleData.idKey, nodeId);
			parentNode.isParent = true;
			treeObj.reAsyncChildNodes(parentNode, "refresh");
		}

		/**
   * 展开整棵树。
   * @method expandTree
   * @param {String} treeId  树id
   */
		function expandTree(treeId) {
			var treeObj = $.fn.zTree.getZTreeObj(treeId);
			treeObj.expandAll(true);
		}

		/**
   * 折叠整棵树。
   * @method collapseTree
   * @param {String} treeId  树id
   */
		function collapseTree(treeId) {
			var treeObj = $.fn.zTree.getZTreeObj(treeId);
			treeObj.expandAll(false);
		}

		/**
   * 将焦点置于树的根节点上。
   * @method focusTree
   * @param {String} treeId  树id
   */
		function focusTree(treeId) {
			var treeObj = $.fn.zTree.getZTreeObj(treeId);
			treeObj.selectNode(treeObj.getNodeByTId(treeId + "_1"));
		}

		/**
   * 重构现有的树
   * @method recreateTree
   * @param {String} treeId  树id
   * @param {Array} setting  setting 数组,如果使用树原有的setting,设为null
   * @param {Array} treeData  节点数据,如果是异步获取的数据，设为null
   */
		function recreateTree(treeId, setting, treeData) {

			var treeObj = Ta.core.TaUIManager.getCmp(treeId);
			var tree = treeObj.taGetOptions();
			treeObj.taDestroy();
			if (!tree) {
				alert(Base.I18n.getLangText("taface.module.tree.checkInfo.treeisnotexist", treeId)); //i18n:id为"+treeId+"的树不存在!
				return;
			}
			if ($.isPlainObject(setting)) {
				tree.setting = setting;
			}
			tree.nodesData = treeData;
			Ta.core.TaUIManager.unregister(treeId);
			Ta.core.TaUIManager.register(treeId, new TaTree(treeId, tree));
		}
		/**
   * 清空指定树的数据
   * @method clearTreeData
   * @param {String} treeId  树id
   */
		function clearTreeData(treeId) {

			var treeObj = Ta.core.TaUIManager.getCmp(treeId);
			if (!treeObj) {
				alert(Base.I18n.getLangText("taface.module.tree.checkInfo.treeisnotexist", treeId)); //i18n:id为"+treeId+"的树不存在!
				return;
			}
			treeObj.taDestroy();

			var options = {
				setting: treeObj.taGetOptions().setting,
				nodesData: null
			};

			Ta.core.TaUIManager.unregister(treeId);
			Ta.core.TaUIManager.register(treeId, new TaTree(treeId, options));
		}

		/**
   * 按指定值查找node,返回其namekey 的 path 路径
   */
		function getTreeNodePathByValue(treeId, type, value, separatorChar) {
			var treeObj = Ta.core.TaUIManager.getCmp(treeId);
			var node = treeObj.getNodeByParam(type, value);
			return getTreeNodePath(treeId, node, separatorChar);
		}
		/**
   * 返回node节点namekey 的 path 路径
   */
		function getTreeNodePath(treeId, treeNode, separatorChar) {
			if (typeof separatorChar == 'undefined' || separatorChar == null) separatorChar = "/";

			var treeObj = Ta.core.TaUIManager.getCmp(treeId);
			var options = treeObj.taGetOptions();
			var path = treeNode.getPath();
			var spath = "";
			for (var _i in path) {
				spath += (path[_i][options.setting.data.key.name] || "") + separatorChar;
			}
			if (spath.lastIndexOf(separatorChar) > 0) {
				spath = spath.substring(0, spath.lastIndexOf(separatorChar));
			}
			return spath;
		}
	}
});

/***/ }),
/* 232 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(jQuery) {

/*! Copyright (c) 2011 Brandon Aaron (http://brandonaaron.net)
 * Licensed under the MIT License (LICENSE.txt).
 *
 * Thanks to: http://adomas.org/javascript-mouse-wheel/ for some pointers.
 * Thanks to: Mathias Bank(http://www.mathias-bank.de) for a scope bug fix.
 * Thanks to: Seamus Leahy for adding deltaX and deltaY
 *
 * Version: 3.0.6
 * 
 * Requires: 1.2.2+
 */

(function ($) {

    var types = ['DOMMouseScroll', 'mousewheel'];

    if ($.event.fixHooks) {
        for (var i = types.length; i;) {
            $.event.fixHooks[types[--i]] = $.event.mouseHooks;
        }
    }

    $.event.special.mousewheel = {
        setup: function setup() {
            if (this.addEventListener) {
                for (var i = types.length; i;) {
                    this.addEventListener(types[--i], handler, false);
                }
            } else {
                this.onmousewheel = handler;
            }
        },

        teardown: function teardown() {
            if (this.removeEventListener) {
                for (var i = types.length; i;) {
                    this.removeEventListener(types[--i], handler, false);
                }
            } else {
                this.onmousewheel = null;
            }
        }
    };

    $.fn.extend({
        mousewheel: function mousewheel(fn) {
            return fn ? this.bind("mousewheel", fn) : this.trigger("mousewheel");
        },

        unmousewheel: function unmousewheel(fn) {
            return this.unbind("mousewheel", fn);
        }
    });

    function handler(event) {
        var orgEvent = event || window.event,
            args = [].slice.call(arguments, 1),
            delta = 0,
            returnValue = true,
            deltaX = 0,
            deltaY = 0;
        event = $.event.fix(orgEvent);
        event.type = "mousewheel";

        // Old school scrollwheel delta
        if (orgEvent.wheelDelta) {
            delta = orgEvent.wheelDelta / 120;
        }
        if (orgEvent.detail) {
            delta = -orgEvent.detail / 3;
        }

        // New school multidimensional scroll (touchpads) deltas
        deltaY = delta;

        // Gecko
        if (orgEvent.axis !== undefined && orgEvent.axis === orgEvent.HORIZONTAL_AXIS) {
            deltaY = 0;
            deltaX = -1 * delta;
        }

        // Webkit
        if (orgEvent.wheelDeltaY !== undefined) {
            deltaY = orgEvent.wheelDeltaY / 120;
        }
        if (orgEvent.wheelDeltaX !== undefined) {
            deltaX = -1 * orgEvent.wheelDeltaX / 120;
        }

        // Add event and delta to the front of the arguments
        args.unshift(event, delta, deltaX, deltaY);

        return ($.event.dispatch || $.event.handle).apply(this, args);
    }
})(jQuery);
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 234 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 235 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 236 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

(function (factory) {
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(5), __webpack_require__(73), __webpack_require__(41)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {
        factory(jQuery);
    }
})(function ($) {
    /**
     * 查询面板的查询框框中的内容定义
     * @class SlickSearchs
     * @static
     * @constructor
     */
    var SlickSearchs = {
        SearchSelectInput: function SearchSelectInput($con, args) {
            var $input;
            var inputObj;
            var $selectinput_ctr;
            var _defaults = {
                showClear: false
            };
            var _options = $.extend(true, {}, _defaults, args.column.searchOptions);
            var id = args.column.id;
            this.init = function () {
                $input = $("<div id='" + id + "_search' class='slick-searchSelectInput' />").appendTo($con);

                _options.onSelect = function (hid, inp) {
                    args.grid.getSearch().commitFilter();
                };
                _options.onClear = function (oldInpVal, oldHdnVal) {
                    //args.grid.getSearch().commitFilter();
                };
                var data = _options.searchSelectData;
                if (data === undefined) {
                    data = args.grid.getCollectionsDataArrayObject()[id];
                }

                inputObj = $input.flexbox(data, _options);

                inputObj[0].getInput().keydown(function (e) {
                    if (e.keyCode === 13) {
                        args.grid.getSearch().commitFilter();
                        e.stopImmediatePropagation();
                    } else if (e.keyCode === 9) {
                        args.grid.getSearch().hideSearchPanel();
                        e.stopImmediatePropagation();
                    }
                });
                $selectinput_ctr = $("#" + id + "_search_ctr");
                $("#" + id + "_search_arrow").css({ "display": "none" });
                inputObj[0].setFocus();
            };

            this.setValue = function (val) {
                inputObj[0].setValue(val);
            };
            this.getValue = function () {
                //必须
                return inputObj[0].getValue(0);
            };
            this.destroy = function () {
                //必须
                //销毁输入框和 弹出的selectinput的那个panel
                Bubble.hideInfo();
                $con.empty();
                $selectinput_ctr.remove();
            };
            this.validate = function () {
                //TODO 可以自定义验证
                return {
                    valid: true,
                    msg: null
                };
            };
            this.init();
        },
        SearchInput: function SearchInput($con, args, data) {
            var $input;
            var id = args.column.id;
            var _defaults = {};
            var _options = $.extend(true, {}, _defaults, args.column.searchOptions);
            var _search_ops = $.extend({}, args.column.searchOptions);
            var validObj = null;
            this.init = function () {
                $input = $("<input type='text' id='" + id + "_search' class='slick-searchInput'>").appendTo($con);
                $input.bind("keydown", function (e) {
                    if (e.keyCode === 13) {
                        args.grid.getSearch().commitFilter();
                        e.stopImmediatePropagation();
                    } else if (e.keyCode === 9) {
                        args.grid.getSearch().hideSearchPanel();
                        e.stopImmediatePropagation();
                    }
                });
                this.focus();
                if (_options.validType) {
                    validObj = new validateObj(id, $input, _search_ops);
                }
            };

            this.focus = function () {
                $input.focus();
            };

            this.setValue = function (val) {
                $input.val(val);
            };
            this.getValue = function () {
                return $input.val();
            };
            this.destroy = function () {
                Bubble.hideInfo();
                $con.empty();
            };
            this.validate = function () {
                var rs = true;
                if (validObj) {
                    rs = validObj.executeValidate();
                }
                return {
                    valid: rs,
                    msg: null
                };
            };

            this.init();
        },
        SearchDate: function SearchDate($con, args, data) {
            $con.addClass("slick-searchDate-con");
            var $inputS, $inputE;
            var validateS, validateE;
            var _defaults = {
                showSelectPanel: true
            };
            var _options = $.extend(true, {}, _defaults, args.column.searchOptions);
            var validObjS = null,
                validObjE = null;
            var id = args.column.id;
            this.init = function () {
                $inputS = $(" <input type='text' id='" + id + "_search_S' class='slick-searchDate'  maxlength='10' >").appendTo($con);
                $con.append("<span class='slick-searchDate-separator'></span>");
                $inputE = $(" <input type='text' id='" + id + "_search_E' class='slick-searchDate'  maxlength='10' >").appendTo($con);
                $inputS.bind("keydown", function (e) {
                    if (e.keyCode === 39 || e.keyCode === 40) {
                        //如果是右和下//下一个输入框选中
                        $dp.hide();
                        $inputE.focus();
                    } else if (e.keyCode === 13) {
                        //如果是enter 判定为选中跳出选择
                        if (_options.showSelectPanel != undefined && _options.showSelectPanel == true) {
                            $dp.hide();
                            args.grid.getSearch().commitFilter();
                            e.stopImmediatePropagation();
                        }
                    }
                }).focus(function () {
                    if (typeof $dp != "undefined" && $dp) $dp.hide();
                    if (_options.showSelectPanel != undefined && _options.showSelectPanel == true) {
                        WdatePicker({
                            isShowWeek: false,
                            el: $inputS[0],
                            errDealMode: 1,
                            maxDate: "#F{$dp.$D(\'" + id + "_search_E\')}",
                            onpicked: function onpicked() {
                                $inputE[0].focus();
                            },
                            lang: "zh_CN" || "auto",
                            defineConfig: {
                                $lang: {
                                    "en_US": { todayStr: "Today" },
                                    "zh_CN": { todayStr: "\u4ECA\u5929" }, //今天
                                    "zh_TW": { todayStr: "\u4ECA\u5929" }
                                }

                            },
                            skin: Base.globvar.FaceSkin || "shebaoBlue"

                        });
                    }
                });

                $inputE.bind("keydown", function (e) {
                    if (e.keyCode === 37 || e.keyCode === 38) {
                        //如果是左和上开始时间获得焦点
                        $dp.hide();
                        $inputS.focus();
                    } else if (e.keyCode === 13) {
                        //如果是enter//判定为输入
                        if (_options.showSelectPanel != undefined && _options.showSelectPanel == true) {
                            $dp.hide();
                            args.grid.getSearch().commitFilter();
                            e.stopImmediatePropagation();
                        }
                    } else if (e.keyCode == 9) {
                        //如果是tab那么就跳出选择
                        args.grid.getSearch().hideSearchPanel();
                        e.stopImmediatePropagation();
                    }
                }).focus(function () {
                    if (typeof $dp != "undefined" && $dp) $dp.hide();
                    if (_options.showSelectPanel != undefined && _options.showSelectPanel == true) {
                        WdatePicker({
                            isShowWeek: false,
                            el: $inputE[0],
                            minDate: "#F{$dp.$D(\'" + id + "_search_S\')}",
                            errDealMode: 1,
                            lang: "zh_CN" || "auto",
                            defineConfig: {
                                $lang: {
                                    "en_US": { todayStr: "Today" },
                                    "zh_CN": { todayStr: "\u4ECA\u5929" }, //今天
                                    "zh_TW": { todayStr: "\u4ECA\u5929" }
                                }
                            },
                            skin: Base.globvar.FaceSkin || "shebaoBlue"
                        });
                    }
                });

                new TaDatetimeMask($inputS).datetimeMask(1);
                new TaDatetimeMask($inputE).datetimeMask(1);
                var _timeop = {
                    validType: [{ type: "date" }]
                };
                validObjS = new validateObj(id, $inputS, _timeop);
                validObjE = new validateObj(id, $inputS, _timeop);
                $inputS.focus();
            };

            this.focus = function () {
                //$inputS.focus();
            };

            this.setValue = function (valS, valE) {
                $inputS.val(valS);
                $inputE.val(valE);
            };

            this.getValue = function () {
                if ($inputS.hasClass('failvalidate')) {
                    $inputS.val("");
                }
                if ($inputE.hasClass('failvalidate')) {
                    $inputE.val("");
                }

                if ($inputS.val() == "" && $inputE.val() != "") {
                    return "．．．" + "~" + $inputE.val();
                }
                if ($inputS.val() != "" && $inputE.val() == "") {
                    return $inputS.val() + "~" + "．．．";
                }

                if ($inputS.val() != "" && $inputE.val() != "") {
                    if (Ta.util.dateDiff($inputS.val(), $inputE.val()) < 0 || Ta.util.dateDiff($inputE.val(), $inputE.val()) === false) {
                        $inputE.val($inputS.val());
                    }
                    return $inputS.val() + "~" + $inputE.val();
                }
                return "";
            };
            this.validate = function () {
                //TODO 可以自定义验证
                return {
                    valid: true,
                    msg: null
                };
            };
            this.destroy = function () {
                $dp.hide();
                Bubble.hideInfo();
                $inputE.unbind("focus");
                $inputS.unbind("focus");
                $inputS.remove();
                $inputE.remove();
                $con.removeClass("slick-searchDate-con");
                $con.empty();
            };
            this.init();
        },
        SearchNumber: function SearchNumber($con, args, data) {
            $con.addClass("slick-searchNumber-con");
            var $inputS, $inputE;
            var validObjS, validObjE;
            var _defaults = {};
            var _options = $.extend(true, {}, _defaults, args.column.searchOptions);
            var id = args.column.id;
            this.init = function () {
                $inputS = $(" <input type='text' id='" + id + "_search_S' class='slick-searchNumber'>").appendTo($con);
                $con.append("<span class='slick-searchNumber-separator'></span>");
                $inputE = $(" <input type='text' id='" + id + "_search_E' class='slick-searchNumber'>").appendTo($con);
                $inputS.bind("keydown", function (e) {
                    if (e.keyCode === 39 || e.keyCode === 40) {
                        //如果是右和下//下一个输入框选中
                        $inputE.focus();
                    } else if (e.keyCode === 13) {
                        //如果是enter 判定为选中跳出选择
                        args.grid.getSearch().commitFilter();
                        e.stopImmediatePropagation();
                    }
                });
                $inputE.bind("keydown", function (e) {
                    if (e.keyCode === 37 || e.keyCode === 38) {
                        //如果是左和上开始时间获得焦点
                        $inputS.focus();
                    } else if (e.keyCode === 13) {
                        //如果是enter//判定为输入
                        args.grid.getSearch().commitFilter();
                        e.stopImmediatePropagation();
                    } else if (e.keyCode == 9) {
                        //如果是tab那么就跳出选择
                        args.grid.getSearch().hideSearchPanel();
                        e.stopImmediatePropagation();
                    }
                });
                var _op = $.extend({}, args.column.searchOptions);
                validObjS = new validateObj(null, $inputS, _op);
                validObjE = new validateObj(null, $inputE, _op);
                $inputS.focus();
            };

            this.focus = function () {
                //$inputS.focus();
            };
            this.setValue = function (valS, valE) {
                $inputS.val(valS);
                $inputE.val(valE);
            };
            this.getValue = function () {
                if ($inputS.hasClass('failvalidate') || isNaN($inputS.val())) {
                    $inputS.val("");
                }
                if ($inputE.hasClass('failvalidate') || isNaN($inputE.val())) {
                    $inputE.val("");
                }

                if ($inputS.val() == "" && $inputE.val() != "") {
                    return "．．．" + "~" + Number($inputE.val());
                }
                if ($inputS.val() != "" && $inputE.val() == "") {
                    return Number($inputS.val()) + "~" + "．．．";
                }

                if ($inputS.val() != "" && $inputE.val() != "") {
                    if (Ta.util.floatAdd(Number($inputE.val()), -Number($inputS.val())) < 0) {
                        $inputE.val($inputS.val());
                    }
                    return Number($inputS.val()) + "~" + Number($inputE.val());
                }
                return "";
            };
            this.validate = function () {
                //TODO 可以自定义验证
                return {
                    valid: true,
                    msg: null
                };
            };
            this.destroy = function () {
                Bubble.hideInfo();
                $inputE.unbind("focus");
                $inputS.unbind("focus");
                $inputS.remove();
                $inputE.remove();
                $con.removeClass("slick-searchNumber-con");
                $con.empty();
            };
            this.init();
        },
        SearchTree: function SearchTree($con, args, data) {
            var $input;
            var $secon;
            var id = args.column.id;
            var searchtree = null;
            var $searchPanel = null;
            var $add = null; //确认添加按钮

            var _defaults = {
                url: null,
                treeId: "searchTreeId",
                targetDESC: "searchTreename",
                targetId: "searchTreeid",
                nameKey: 'name',
                idKey: 'id',
                parentKey: 'pId',
                selectTreeBeforeClick: "selectTreeBeforeClick"
            };
            var _options = $.extend(true, {}, _defaults, args.column.searchOptions);

            this.init = function () {
                $secon = $("<div class='selectTree-layout-Container'><div class='selectTree-input-Container' style='margin-left: 0px'><input type='text' id='" + _options.targetDESC + "'  class='slick-searchTree'/></div></div>").appendTo($con);

                $input = $("#" + _options.targetDESC);

                $add = $("<span class='slick-searchTree-add' id='" + id + "_add'>添加</span>").appendTo($con);
                $add.bind("click", function (e) {
                    args.grid.getSearch().commitFilter();
                    e.stopImmediatePropagation();
                });
                $input.keydown(function (e) {
                    if (e.keyCode === 9) {
                        args.grid.getSearch().hideSearchPanel();
                        e.stopImmediatePropagation();
                    }
                });
                _options.check = {
                    enable: true,
                    chkStyle: "checkbox",
                    autoCheckTrigger: true
                };
                searchtree = new (__webpack_require__(152))("dropdownTreeBackground_" + _options.treeId, _options);
                $searchPanel = $("#dropdownTreeBackground_" + _options.treeId);
                searchtree.setFocus();
                //调整下拉panel的样式
                $searchPanel.css({
                    //width:$input.width(),
                    "box-shadow": "none",
                    //border: "1px solid #ccc",
                    "border-top": "none",
                    "box-sizing": "border-box",
                    "border-radius": "0px"
                });
            };
            this.setValue = function () {};
            this.getValue = function () {
                var nodelist = searchtree.getCheckedNodes(),
                    list = [];
                for (var i = 0; i < nodelist.length; i++) {
                    if (!nodelist[i].hasOwnProperty("children")) {
                        list.push(nodelist[i][_options.nameKey]);
                    }
                }
                return list.length == 0 ? "" : list;
            };
            this.beforeDestroy = function (target) {
                if ($searchPanel && ($searchPanel[0] == target || $.contains($searchPanel[0], target))) {
                    return false;
                }
                return true;
            };
            this.validate = function () {
                //TODO 可以自定义验证
                return {
                    valid: true,
                    msg: null
                };
            };
            this.destroy = function () {
                $searchPanel.remove();
                Ta.core.TaUIManager.unregister(_options.targetDESC);
                $input.remove();
                searchtree = null;
                $con.empty();
            };

            this.init();
        }

    };

    $.extend(window, SlickSearchs);
});

/***/ }),
/* 237 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * Created by cy on 2017/7/20.
 * 添加表格搜索功能
 */
(function (factory) {
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {
        factory(jQuery);
    }
})(function ($) {
    $.extend(true, window, {
        "Slick": {
            "Plugins": {
                "HeaderSearch": HeaderSearch
            }
        }
    });
    function HeaderSearch(options) {
        var _grid;
        var _self = this;
        var _handler = new Slick.EventHandler();
        var _defaults = {};
        var nowSearch = null;
        var $panel = null;
        var columnFilters = {};
        var nowSearchColumn = null;
        var headerSearchTopPanel = null;
        var _options = $.extend(true, {}, _defaults, options);

        function init(grid) {
            _grid = grid;
            //初始化顶部的展示框
            headerSearchTopPanel = new HeaderSearchTopPanel($(_grid.getHeaderSearchTopPanelNode()));
            //调用 gridview 的setFilter(filterfn)执行过滤显示
            _grid.getDataView().setFilter(searchfilter);
            _grid.onHeaderClick.subscribe(handleShowSearchPanel);
            //隐藏弹出搜索框
            $(document.body).bind("mousedown", handleBodyMouseDown);
        }

        function HeaderSearchTopPanel($con) {
            var cols = [],
                columns = _grid.getColumns();
            for (var i = 0; i < columns.length; i++) {
                if (columns[i].field != "_row_" && columns[i].id != "_checkbox_selector") {
                    cols.push("<div data-id='" + columns[i].id + "'><label><span class='remove-search-all faceIcon icon-close2'/>" + columns[i].name + ":</label></div>");
                }
            }
            ;
            var clearAll = $("<span class='remove-all-searchs' >清除全部</span>");
            $con.append(clearAll);
            $con.append(cols.join(""));
            $con.bind("click", function (e) {
                var $target = $(e.srcElement || e.target);
                if ($target.hasClass("remove-search-all")) {
                    clearColumnFilter($target.parents("div:first").attr("data-id"), null, true);
                } else if ($target.hasClass("remove-search-item")) {
                    clearColumnFilter($target.parents("div:first").attr("data-id"), $target.parent().text());
                } else if ($target.hasClass("remove-all-searchs")) {
                    clearAllColumnsFilter();
                }
            });
            function addSearchItem(colid, value) {
                $con.find("div[data-id='" + colid + "']").css("display", "inline-block").append("<span data-value='" + value + "'>" + value + "<span class='remove-search-item faceIcon icon-close'></span></span>");
                controlClearDisplay();
                _grid.resizeViewortHeight();
            }

            function removeSearchItem(colid, value) {
                $con.find("div[data-id='" + colid + "']>span[data-value='" + value + "']").remove();
                _grid.resizeViewortHeight();
            }

            function removeSearchItemAll(colid) {
                $con.find("div[data-id='" + colid + "']").css("display", "none").find(">span").remove();
                controlClearDisplay();
                _grid.resizeViewortHeight();
            }

            function removeAllSearchs() {
                //clearAllColumnsFilter();
                $con.find("div").css("display", "none").find(">span").remove();
                controlClearDisplay();
                _grid.resizeViewortHeight();
            }

            function controlClearDisplay() {
                if ($con.find("div:visible").length > 0) {
                    clearAll.show();
                } else {
                    clearAll.hide();
                }
            }

            $.extend(this, {
                "addSearchItem": addSearchItem,
                "removeSearchItem": removeSearchItem,
                "removeSearchItemAll": removeSearchItemAll,
                "removeAllSearchs": removeAllSearchs
            });
        }

        function destroy() {
            hideSearchPanel();
            $(document.body).unbind("mousedown", handleBodyMouseDown);
        }

        function handleBodyMouseDown(e) {
            if (nowSearch && typeof nowSearch.beforeDestroy == "function") {
                if (!nowSearch.beforeDestroy(e.target)) {
                    return;
                }
                ; //在关闭之前验证是否是真的需要关闭,主要用来阻止点击树弹出框也被关闭的情况
            }
            if ($panel && $panel[0] != e.target && !$.contains($panel[0], e.target)) {
                hideSearchPanel();
            }
        }

        function ShowSearchPanel(target) {
            if ($panel !== null) {
                $panel.show();
                return;
            } else {
                $panel = $("<div class='slick-search-panel'></div>");
                $panel.appendTo(_grid.getContainer());
                //panel定位以及设置宽度
                $panel.offset({ top: $(target).parent().offset().top, left: $(target).parent().offset().left });
                $panel.width($(target).parent().outerWidth() - 2);
            }
        }

        function handleShowSearchPanel(e, args) {
            var target = e.srcElement || e.target;
            if (args.column && args.column.id) {
                if (_grid.getEditorLock().isActive() && !_grid.getEditorLock().commitCurrentEdit()) {
                    e.preventDefault();
                    e.stopImmediatePropagation();
                    return;
                }
                if ($(target).hasClass("slick-header-search")) {
                    ShowSearchPanel(target);
                    initSearchPanelContent(args);
                }
                e.stopPropagation();
                e.stopImmediatePropagation();
            }
        }

        //初始化搜索对象
        function initSearchPanelContent(args) {
            nowSearchColumn = args.column.id;
            switch (args.column.searchType) {
                case "default":
                    //如果是一般的搜索框
                    nowSearch = new SearchInput($panel, args);
                    break;
                case "collection":
                    //如果是码表
                    nowSearch = new SearchSelectInput($panel, args);
                    break;
                case "date":
                    //如果是日期区间选择
                    nowSearch = new SearchDate($panel, args);
                    break;
                case "number":
                    //如果是数字区间选择
                    nowSearch = new SearchNumber($panel, args);
                    break;
                case "tree":
                    //如果是树
                    nowSearch = new SearchTree($panel, args);
                    break;
                default:
                    break;
            }
        }

        //提交搜索搜索对象返回的值刷新
        function commitFilter() {
            //如果验证通过才 执行设置ColumnFilter
            if (nowSearch.validate().valid == true) {
                setColumnFilter(nowSearchColumn, nowSearch.getValue());
            }
            //隐藏搜索框
            hideSearchPanel();
        }

        //根据value设置列的ColumnFilter
        function setColumnFilter(colid, value) {
            if (value === null || value === undefined || value === "") {
                return;
            }
            //区分value是否是数组
            if (value instanceof Array) {
                //如果是数组循环添添加columnFilters
                for (var i = 0; i < value.length; i++) {
                    addcolumnFilterItem(colid, value[i]);
                }
                _grid.getDataView().refresh();
            } else {
                if (addcolumnFilterItem(colid, value)) {
                    _grid.getDataView().refresh();
                }
            }
        }

        //添加一个addcolumnFilter过滤标签,如果没有这个标签添加,并返回true,否则返回false
        function addcolumnFilterItem(colid, value) {
            var flag = false;
            //如果这项过滤没有那么就添加 否则 查找对应项有木有重复的
            if (columnFilters[colid] === null || columnFilters[colid] === undefined || columnFilters[colid] === "") {
                columnFilters[colid] = [];
                columnFilters[colid].push(value);
                headerSearchTopPanel.addSearchItem(colid, value);
                flag = true;
            } else {
                //如果存在那么返回
                if ($.inArray(value, columnFilters[colid]) > -1) {} else {
                    columnFilters[colid].push(value);
                    headerSearchTopPanel.addSearchItem(colid, value);
                    flag = true;
                }
            }
            return flag;
        }

        /**
         * 清除指定列的 指定值的 ColumnFilter
         * @method clearColumnFilter
         * @param {string}  colid 列名
         * @param {string/Array} value 需要清除的过滤值  可以是字符串如:"条件",也可以是 数组["条件1","条件2",...]
         * @param {bool}  isAll  是否清除该列的全部过滤条件 可选项
         * @author cy
         */
        function clearColumnFilter(colid, value, isAll) {
            if (!columnFilters.hasOwnProperty(colid)) return;
            if (isAll) {
                delete columnFilters[colid];
                headerSearchTopPanel.removeSearchItemAll(colid);
            } else {
                if (value instanceof Array) {
                    for (var i = 0; i < value.length; i++) {
                        for (var j = 0; j < columnFilters[colid].length; j++) {
                            if (columnFilters[colid][j].toString() == value[i].toString()) {
                                columnFilters[colid].splice(j, 1);
                                headerSearchTopPanel.removeSearchItem(colid, value[i]);
                                break;
                            }
                        }
                    }
                    if (columnFilters[colid].length <= 0) {
                        delete columnFilters[colid];
                        headerSearchTopPanel.removeSearchItemAll(colid);
                    }
                } else {
                    for (var i = 0; i < columnFilters[colid].length; i++) {
                        if (columnFilters[colid][i].toString() == value.toString()) {
                            columnFilters[colid].splice(i, 1);
                            headerSearchTopPanel.removeSearchItem(colid, value); //清除对应节点;
                            break;
                        }
                    }
                    if (columnFilters[colid].length <= 0) {
                        delete columnFilters[colid];
                        headerSearchTopPanel.removeSearchItemAll(colid);
                    }
                }
            }
            _grid.getDataView().refresh();
        }

        //清除所有列的filter
        function clearAllColumnsFilter() {
            columnFilters = {};
            headerSearchTopPanel.removeAllSearchs();
            _grid.getDataView().refresh();
        }

        function searchfilter(item) {
            for (var columnId in columnFilters) {
                // 判断
                if (columnId !== undefined && columnFilters[columnId] !== "") {
                    var c = _grid.getColumns()[_grid.getColumnIndex(columnId)];
                    // var zz = new RegExp("^" + columnFilters[columnId]);
                    if (item[c.field] || item[c.field] === 0) {
                        if (_grid.getCollectionsDataArrayObject()) {
                            // 从码表里面判断
                            var collection = _grid.getCollectionsDataArrayObject()[c.field]; //
                            if (collection) {
                                for (var i = 0; i < collection.length; i++) {
                                    if (collection[i].id == item[c.field].toString()) {
                                        var field = collection[i].name;
                                        var flag = false;
                                        for (var k = 0; k < columnFilters[columnId].length; k++) {
                                            if (field.indexOf(columnFilters[columnId][k]) != -1) {
                                                flag = true;
                                            }
                                        }
                                        if (!flag) return flag;
                                    }
                                }
                            } else if (c.searchType && c.searchType == "date") {
                                //如果是日期段

                                var flag = false;
                                var field = item[c.field];
                                for (var k = 0; k < columnFilters[columnId].length; k++) {

                                    var datelist, dateS, dateE;
                                    datelist = columnFilters[columnId][k].split("~");
                                    dateS = datelist[0];
                                    dateE = datelist[1];
                                    dateS = dateS == "．．．" ? null : dateS;
                                    dateE = dateE == "．．．" ? null : dateE;
                                    if (dateS && dateE) {
                                        if (Ta.util.dateDiff(dateS, field) >= 0 && Ta.util.dateDiff(field, dateE) >= 0) {
                                            flag = true;
                                        }
                                    }
                                    if (dateS && dateE === null) {
                                        if (Ta.util.dateDiff(dateS, field) >= 0) {
                                            flag = true;
                                        }
                                    }
                                    if (dateE && dateS === null) {
                                        if (Ta.util.dateDiff(field, dateE) >= 0) {
                                            flag = true;
                                        }
                                    }
                                }
                                if (!flag) return flag;
                            } else if (c.searchType && c.searchType == "number") {
                                //如果是数字段
                                var flag = false;
                                var field = item[c.field];
                                for (var k = 0; k < columnFilters[columnId].length; k++) {

                                    var numlist, numS, numE;
                                    numlist = columnFilters[columnId][k].split("~");
                                    numS = numlist[0];
                                    numE = numlist[1];
                                    numS = numS == "．．．" ? null : numS;
                                    numE = numE == "．．．" ? null : numE;
                                    if (numS && numE) {
                                        if (Ta.util.floatAdd(Number(field), -Number(numS)) >= 0 && Ta.util.floatAdd(Number(numE), -Number(field)) >= 0) {
                                            flag = true;
                                        }
                                    }
                                    if (numS && numE === null) {
                                        if (Ta.util.floatAdd(Number(field), -Number(numS)) >= 0) {
                                            flag = true;
                                        }
                                    }
                                    if (numE && numS === null) {
                                        if (Ta.util.floatAdd(Number(numE), -Number(field)) >= 0) {
                                            flag = true;
                                        }
                                    }
                                }
                                if (!flag) return flag;
                            } else {
                                var field = item[c.field].toString();
                                var flag = false;
                                for (var k = 0; k < columnFilters[columnId].length; k++) {
                                    if (field.indexOf(columnFilters[columnId][k]) != -1) {
                                        flag = true;
                                    }
                                }
                                if (!flag) return flag;
                            }
                        }
                    } else return false;
                }
            }
            return true;
        }

        function hideSearchPanel() {
            if ($panel) {
                $panel.remove();
                $panel = null;
                if (nowSearch) {
                    nowSearch.destroy();
                }
            }
        }

        $.extend(this, {
            "init": init,
            "destroy": destroy,
            "commitFilter": commitFilter,
            "hideSearchPanel": hideSearchPanel,
            "setColumnFilter": setColumnFilter,
            "clearColumnFilter": clearColumnFilter,
            "clearAllColumnsFilter": clearAllColumnsFilter
        });
    }
});

/***/ }),
/* 239 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(jQuery) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*******************************************************************************
 * 表格基本功能
 * @module Grid
 * @namespace Slick
 */
(function(factory){
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0),
            __webpack_require__(13),
            __webpack_require__(144),
            __webpack_require__(145),
            __webpack_require__(104),
            __webpack_require__(146),
            __webpack_require__(147),
            __webpack_require__(148),
            __webpack_require__(150),
            __webpack_require__(104),
            __webpack_require__(151),
            __webpack_require__(153),
            __webpack_require__(133),
            __webpack_require__(134),
            __webpack_require__(137),
            __webpack_require__(135),
            __webpack_require__(33)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {
        factory(jQuery);
    }
}(function($) {
    $.extend(true, window, {
        Slick: {
            Grid: SlickGrid
        }
    });

    var scrollbarDimensions;
    /**
     * @class SlickGrid
     * @static
     * @constructor
     * @param {Object} container 页面上div的id
     * @param {Array,Object} data 数据对象
     * @param {Array} columns 列对象
     * @param {Object} options 参数
     */
    function SlickGrid(container,data,columns,options) {
        var defaults = {
            headerHeight: 0,// 表格主体离底边的距离
            rowHeight: 25,// 行高
            defaultColumnWidth: 80,// 默认
            enableAddRow: false,// 不忙用
            leaveSpaceForNewRows: false,
            editable: false,
            autoEdit: true,
            enableCellNavigation: true,// 原为true
            enableCellRangeSelection: true,
            enableColumnReorder: false,// 原为true
            asyncEditorLoading: true,
            asyncEditorLoadDelay: 100,//
            forceFitColumns: false,
            // 添加
            columnsWidthsOverView: false,
            enableAsyncPostRender: false,
            asyncPostRenderDelay: 60,
            autoHeight: false,
            editorLock: Slick.GlobalEditorLock,
            showHeaderRow: false,
            headerRowHeight: 25,
            showHeaderSearch:true,//add by cy 表头搜索功能
            showColumnControl:false,//add by cy 表格列显示控制
            showTopPanel: false,
            topPanelHeight: 26,
            formatterFactory: null,
            editorFactory: null,
            cellFlashingCssClass: "flashing",
            selectedCellCssClass: "selected",
            multiSelect: true,
            enableTextSelectionOnCells: true,
            // TODO 林森添加
            selectType : false, // 是否为checkbox选择模式,
            columnFilter : false,
            showToolpaging : false,
            onSelectChange : null,
            haveSn : false, // 显示可变序列号
            groupingExpression : null,
            serverCvtCode : true,
            groupingBy: false,
            snWidth: 37,
            border : false,
            clickActiveStyle : true,
            headerColumnsRows :1,
            moveRows:false,  //add by zzb 默认是否可以拖动行
            frozenColumn: -1//add by cy 冻结列的列数
        };

        // 默认Column的属性
        var columnDefaults = {
            name: "",
            resizable: true,
            sortable: false,
            minWidth: 30,
            rerenderOnResize: false,
            headerCssClass: null,
            align : "center",
            dataAlign : "left"
            // ,
            // TODO 林森
            // cls : "",
            // clsClick : false
        };

        var maxSupportedCssHeight;      // browser's breaking point
        var th;                         // virtual height
        var h;                          // real scrollable height
        var ph;                         // page height
        var n;                          // number of pages
        var cj;                         // "jumpiness" coefficient

        var page = 0;                   // current page
        var offset = 0;                 // current page offset
        var scrollDir = 1;

        // private
        var $container;
        var uid = "slickgrid_" + Math.round(1000000 * Math.random());
        var self = this;
        var $headerScroller;
        var $headerSearchTopPanel;
        var $columnControl;
        var $headers, $headerRowScroller;
        var $headerRow;
        var $topPanelScroller;
        var $topPanel;
        var $viewport;
        var $canvas;
        var $style;
        var stylesheet, columnCssRulesL, columnCssRulesR;
        var viewportH, viewportW;
        var canvasWidth,canvasWidthL, canvasWidthR;
        var headersWidth,headersWidthL, headersWidthR;
        var viewportHasHScroll;
        var headerColumnWidthDiff, headerColumnHeightDiff, cellWidthDiff, cellHeightDiff;  // padding+border
        var absoluteColumnMinWidth;

        var activePosX;
        var activeRow, activeCell;
        var activeCellNode = null;
        var currentEditor = null;
        var serializedEditorValue;
        var editController;

        var rowsCache = {};
        var renderedRows = 0;
        var numVisibleRows;
        var prevScrollTop = 0;
        var scrollTop = 0;
        var scrollLeft = 0;
        var lastRenderedScrollTop = 0;
        var prevScrollLeft = 0;
        var avgRowRenderTime = 10;

        var selectionModel;
        var selectedRows = [];

        var plugins = [];
        var cellCssClasses = {};

        var columnsById = {};
        var sortColumnId;
        var columnPosLeft = [];// add by cy 表格左侧的列
        var columnPosRight = [];// add by cy 表格右侧的列
        var sortAsc = true;

        // async call handles
        var h_editorLoader = null;
        var h_render = null;
        var h_postrender = null;
        var postProcessedRows = {};
        var postProcessToRow = null;
        var postProcessFromRow = null;

        // perf counters
        var counter_rows_rendered = 0;
        var counter_rows_removed = 0;

        // TODO 林森添加数据视图
        var dataView = null;
        var selectorTpye = null;
        var columnFilters = {};
        var selectedRowIds = [];
        var editorItems = []; // 用于保存编辑数据
        var delrows = []; // 用于保存删除数据
        var addrows = []; // 用于保存添加数据
        var operationGridMark = true;//是否需要重新计算操作痕迹数据
        var hiddenColumns = [];
        var pager = null;
        var search=null;//表头搜索功能
        var pId = "__id___";//行数据唯一性ID，跟数据绑定不会变化
        var rowId = "_row_";//渲染行行号（是将分组，统计行计算在内后，数据所在的行号）
        // var rowSn = "_rowSn_";//数据行序号,暂不暴露，对开发者无意义，序号列field 暂以rowId（不影响排序结果）
        var defaultWidth = 0;
        var defaultHeight = 0;
        var hastotals = false;//pxs添加，用于标识表格是否有合计列
        var columnPropertyKey = [];
        var sortcol = 0;

        //add  by  cy 列冻结相关

        //表头
        var $paneHeadersL;
        var $paneHeadersR;
        var $headerScrollerL;
        var $headerScrollerR;
        var $headersL;
        var $headersR;
        var $headerScrollContainer;

        //表头下一行 (合计啥的)
        var $topPanelScrollerL;
        var $topPanelScrollerR;
        var $topPanelL;
        var $topPanelR;
        var $topPanelScrollerContainer;


        //表格过滤行(老式的那种)
        var $headerRowScrollerL;
        var $headerRowScrollerR;
        var $headerRowL;
        var $headerRowR;
        var $headerRowScrollContainer;

        //表格主体部分
        var $paneL;//容器
        var $paneR;
        var $viewportL;//显示部分
        var $viewportR;
        var $canvasL;//画布所有数据装载部分
        var $canvasR;
        var $viewportScrollContainerX;
        var $viewportScrollContainerY;




        // ////////////////////////////////////////////////////////////////////////////////////////////
        // Initialization

        function init() {
            $container = $(container); // 将传入id的标签转换成JQuery对象
            maxSupportedCssHeight  = getMaxSupportedCssHeight();
            scrollbarDimensions = {width:24, height:24};
            if(!options.rowHeight){
                options.rowHeight = 30;
            }
            options = $.extend({},defaults,options); // 默认option和自订opetion结合
            columnDefaults.width = options.defaultColumnWidth;//默认列宽80
            if(options.moveRows){//add by zzb  移动行
                columnDefaults.behavior="selectAndMove";
            }


            editController = {//编辑操作
                "commitCurrentEdit": commitCurrentEdit,//提交当前编辑内容
                "cancelCurrentEdit": cancelCurrentEdit//取消当前编辑内容
            };

            $container.addClass(uid);

            if(options.border == true) {//表格容器边框
                $container.css("border", "1px solid #d5d7d8");
            }

            //add by cy 表头搜索功能上面的框
            if(options.showHeaderSeach){
                $headerSearchTopPanel=$("<div class='slick-headerSearchTopPanel'></div>").appendTo($container);
            }
            //表格中的表头左右,表格身体容器左右
            $paneHeadersL = $("<div class='slick-pane slick-pane-header slick-pane-left' tabIndex='0' />").appendTo($container);
            $paneHeadersR = $("<div class='slick-pane slick-pane-header slick-pane-right' tabIndex='0' />").appendTo($container);
            $paneL = $("<div class='slick-pane slick-pane-left' tabIndex='0' />").appendTo($container);
            $paneR = $("<div class='slick-pane  slick-pane-right' tabIndex='0' />").appendTo($container);
            //表的head
            $headerScrollerL = $("<div class='ui-state-default slick-header slick-header-left' />").appendTo($paneHeadersL);
            $headerScrollerR = $("<div class='ui-state-default slick-header slick-header-right' />").appendTo($paneHeadersR);
            $headerScroller = $().add($headerScrollerL).add($headerScrollerR);
            $headersL = $("<div class='slick-header-columns slick-header-columns-left' style='left:-1000px' />").appendTo($headerScrollerL);
            $headersR = $("<div class='slick-header-columns slick-header-columns-right' style='left:-1000px' />").appendTo($headerScrollerR);
            $headers = $().add($headersL).add($headersR);

            //$headerScroller = $("<div class='slick-header' style='overflow:hidden;position:relative;' />").appendTo($container);
            // 用于装head的超长容器	//change by zzb 解决表格列过多引起的水平滚动条
            //$headers = $("<div class='slick-header-columns' style='width:20000px; left:-1000px' />").appendTo($headerScroller);
/*            if (options.showHeaderRow) {
            //表头下的一行 用作老式列简单过滤的.
            $headerRowScrollerL = $("<div class='ui-state-default slick-headerrow' />").appendTo($paneL);
            $headerRowScrollerR = $("<div class='ui-state-default slick-headerrow' />").appendTo($paneR);
            $headerRowScroller = $().add($headerRowScrollerL).add($headerRowScrollerR);
            $headerRowL = $("<div class='slick-headerrow-columns slick-headerrow-columns-left' />").appendTo($headerRowScrollerL);
            $headerRowR = $("<div class='slick-headerrow-columns slick-headerrow-columns-right' />").appendTo($headerRowScrollerR);
            $headerRow = $().add($headerRowL).add($headerRowR);

            }*/


            //表头下的一行 留作备用(统计啥的)
            $topPanelScrollerL = $("<div class='ui-state-default slick-top-panel-scroller' />").appendTo($paneL);
            $topPanelScrollerR = $("<div class='ui-state-default slick-top-panel-scroller' />").appendTo($paneR);
            $topPanelScroller = $().add($topPanelScrollerL).add($topPanelScrollerR);
            $topPanelL = $("<div class='slick-top-panel' style='width:10000px' />").appendTo($topPanelScrollerL);
            $topPanelR = $("<div class='slick-top-panel' style='width:10000px' />").appendTo($topPanelScrollerR);
            $topPanel = $().add($topPanelL).add($topPanelR);
            //$topPanelScroller = $("<div class='slick-top-panel-scroller' style='overflow:hidden;position:relative;' />").appendTo($container);
            //$topPanel = $("<div class='slick-top-panel' style='width:10000px' />").appendTo($topPanelScroller);
            if (options.showTopPanel &&  options.hasTotals && options.groupingBy === "_onlyTotals") {
                $topPanelScroller.show();
            }else {
                $topPanelScroller.hide();
            }


            // 表主体,表格显示的部分
            $viewportL = $("<div class='slick-viewport  slick-viewport-left' tabIndex='0' hideFocus />").appendTo($paneL);
            $viewportR = $("<div class='slick-viewport  slick-viewport-right' tabIndex='0' hideFocus />").appendTo($paneR);
            $viewport = $().add($viewportL).add($viewportR);
            $canvasL = $("<div class='grid-canvas grid-canvas-left' tabIndex='0' hideFocus />").appendTo($viewportL);
            $canvasR = $("<div class='grid-canvas grid-canvas-right' tabIndex='0' hideFocus />").appendTo($viewportR);
            $canvas = $().add($canvasL).add($canvasR);

            //$viewport = $("<div class='slick-viewport' tabIndex='0' hideFocus>").appendTo($container);
            //$canvas = $("<div class='slick-grid-canvas' tabIndex='0' hideFocus />").appendTo($viewport);

            // header columns and cells may have different padding/border
            // skewing width calculations (box-sizing, hello?)
            // calculate the diff so we can set consistent sizes
            measureCellPaddingAndBorder();// 设置单元格的padding和border
            // for usability reasons, all text selection in SlickGrid is
            // disabled
            // with the exception of input and textarea elements (selection must
            // be enabled there so that editors work as expected); note that
            // selection in grid cells (grid body) is already unavailable in
            // all browsers except IE
            //disableSelection($headers); // 禁止选择头的字 disable all text selection in
            // header (including input and textarea)

            if (!options.enableTextSelectionOnCells) {
                // disable text selection in grid cells except in input and
                // textarea elements
                // (this is IE-specific, because selectstart event will only
                // fire in IE)
                $viewport.bind("selectstart.ui", function (event) {
                    return $(event.target).is("input,textarea");
                });
            }

            viewportW = parseFloat($.css($container[0], "width", false));// 设置相同宽度
            // ****************TODO 林森添加


            // 设置为何种选择框
            if (options.selectType == "checkbox") {
                selectorTpye = new Slick.CheckboxSelectColumn({
                    // cssClass: "slick-cell-checkboxsel",
                    onChecked : options.onChecked,
                    onRowSelect : options.onRowSelect
                });
                columns.unshift(selectorTpye.getColumnDefinition());
                registerPlugin(selectorTpye);
            } else if (options.selectType == "radio") {
                selectorTpye = new Slick.RadioSelectColumn({
                    // cssClass: "slick-cell-checkboxsel"
                    onRowSelect : options.onRowSelect
                });
                columns.unshift(selectorTpye.getColumnDefinition());
                registerPlugin(selectorTpye);
            }

            // 设置选择模型为行选择模型
            setSelectionModel(new Slick.RowSelectionModel({selectActiveRow:true}));

            if (options.haveSn) {
                columns.unshift({
                    dataType: "number",
                    id: "__no",
                    resizable: false,
                    selectable: true,
                    sortable: "true",
                    cssClass: "slick-cell-selection",
                    field: rowId,
                    width: options.snWidth
                });
            }// 添加设置于数据内部的序号

            setFrozenOptions();
            setPaneVisibility();
            setScroller();
            setOverflow();
            updateColumnCaches();

            // //////////////////////////////////////////////////////////////
            // 数据处理, 由于构造方法中传入的数据有可能是Array,也可能是pageBean;
            // data.list or data
            var tmp = null;
            if(!jQuery.isArray(data)){
                tmp = data.list || [];
            } else {
                tmp = data;
            }
            dataView = new Slick.Data.DataView(null,self);
            if (tmp && typeof tmp == "object" && tmp.length > 0) {
                dataView.beginUpdate();
                dataView.setItems(data);
                dataView.endUpdate();
                data = dataView;
            } else {
                data = dataView;
            }
            createColumnHeaders();// 对表头进行初始化，包括resize
            setupColumnSort(); // 初始化列排序
            createCssRules();
            resizeAndRender();
            //add zzb隐藏显示

            if (!options.columnFilter) {
                hideHeaderRowColumns();//初始化隐藏过滤条
            }else {
                dataView.setFilter(filter);
            }
//            columnsFilterShowOrHide();


            bindAncestorScrollEvents();
            $viewport.bind("scroll.slickgrid", handleScroll);
            if (jQuery.fn.mousewheel && options.frozenColumn > -1 ) {
                $viewport.bind("mousewheel", handleMouseWheel);
            }
            $container.bind("_resize.slickgrid", resizeAndRender);
            $headerScroller
                .bind("contextmenu.slickgrid", handleHeaderContextMenu)
                .bind("click.slickgrid", handleHeaderClick);

            $canvas
                .bind("keydown.slickgrid", handleKeyDown)
                .bind("click.slickgrid", handleClick)
                .bind("dblclick.slickgrid", handleDblClick)
                .bind("contextmenu.slickgrid", handleContextMenu)
                .bind("draginit", handleDragInit)
                .bind("dragstart", handleDragStart)
                .bind("drag", handleDrag)
                .bind("dragend", handleDragEnd);

            $canvas.delegate(".slick-row", "mouseenter", handleMouseEnter);
            $canvas.delegate(".slick-row", "mouseleave", handleMouseLeave);
            //添加单元格mouseenter以及mouseleave事件  add by cy
            $canvas.delegate(".slick-cell", "mouseenter", handleCellMouseEnter);
            $canvas.delegate(".slick-cell", "mouseleave", handleCellMouseLeave);

            // 添加列过滤
            if (options.columnFilter) {
                $(getHeaderRow()).delegate(":input", "change keyup", function (e) {
                    columnFilters[$(this).data("columnId")] = $.trim($(this).val());
                    if (columnFilters.undefined)
                        delete columnFilters.undefined;
                    dataView.refresh();
                });
                // 注册当列改变及大小变化是调用更新列头方法
                self.onColumnsReordered.subscribe(function (e, args) {
                    updateHeaderRow();
                });
                self.onColumnsResized.subscribe(function (e, args) {
                    updateHeaderRow();
                });
                updateHeaderRow();
            }
            //add by cy 表头添加控制哪些列显示的按钮
            if (options.showColumnControl) {
                $columnControl = $("<div class='slick-column-control faceIcon icon-dot'></div>").appendTo($container);
                var $columnControlPanel = $("<div class='slick-column-control-panel'></div>").appendTo($columnControl);
                $(document.body).bind("mousedown", function(e){
                    if ($columnControlPanel && $columnControlPanel.hasClass("active") && $columnControl && $columnControl[0] != e.target && !$.contains($columnControl[0], e.target)) {
                        $columnControlPanel.removeClass("active").empty();
                    }
                });
                $columnControl.bind("click", function (event) {
                    if( $columnControlPanel.hasClass("active")){
                        $columnControlPanel.removeClass("active").empty();
                    }else {
                        $columnControlPanel.addClass("active");
                        var str = "";
                        for (var i = 0; i < columns.length; i++) {
                            if (columns[i]["id"] !== "__no" &&　columns[i]["id"] !== "_checkbox_selector"　&&  columns[i]["id"] !== "_radio_selector") {
                                str=str+"<div data-id='"+columns[i]["id"]+"'><span>" + columns[i]["name"] + "</span><span class='column-Sh-control faceIcon icon-show'></span></div>";
                            }
                        }
                        for (var j = 0; j < hiddenColumns.length; j++) {
                            str=str+"<div data-id='"+hiddenColumns[j]["id"]+"'><span>" + hiddenColumns[j]["name"] + "</span><span class='column-Sh-control faceIcon icon-hide'></span></div>";
                        }
                        $columnControlPanel.append(str);
                    }
                    return false;

                });
                $columnControlPanel.bind("click",function(event){
                    var event = event || window.event;
                    var $target =$(event.srcElement ? event.srcElement : event.target);
                    if($target.hasClass("column-Sh-control") && $target.hasClass("icon-hide") ){
                        setColumnShow($target.parent().attr("data-id"));
                        $target.removeClass("icon-hide").addClass("icon-show");
                        return false;
                    }
                    if($target.hasClass("column-Sh-control") && $target.hasClass("icon-show") ){
                        setColumnHidden($target.parent().attr("data-id"));
                        $target.removeClass("icon-show").addClass("icon-hide");
                        return false;
                    }
                    return false;
                })

            }

            //add by cy 把工具条功能和分页条功能分开,支持可以独立分页也可以独立导出
            if (options.showToolpaging) {
                // 添加工具条
                var $toolBar = $("<div id='" + container.toString().replace('#',"") + "_paper_'  class='slick-bottom-toolbar' ></div>").appendTo($container);
               //如果有有分页条添加分页条
                if(options.showPagingBar){
                    pager = new Slick.Controls.Pager(dataView, self, $toolBar, options.pagingOptions);
                    pager.setStatus(dataView.getTotal());
                }

                //如果显示导出
                if (options.showExcel) {
                    var defaultExpOption = {
                        expKeyOrName: true,                      //导出时是导出码值还是描述值,默认是码值
                        exportFileName: "export",
                        exportWithHead:true,
                        isXlsx:false,
                        exportBean:'dao'
                    }
                    options.exportOptions = $.extend(true, {}, defaultExpOption, options.exportOptions);//导出配置
                    var $exportDefaultExcel = $('<div class="slick-export-toolbar faceIcon icon-export" >'+Base.I18n.getLangText('taface.general.export')+'</div>').appendTo($toolBar);

                    var c_id = getGridId() + 'mm';
                    var $c = $('<div id="' + c_id + '" class="slick-export-content"></div>');
                    var _dangqian_ = getGridId() + '_dangqian_';
                    var _xuanze_ = getGridId() + '_xuanze_';
                    var _quanbu_ = getGridId() + '_quanbu_';
                    var expButtonsArray = [], expButtonsStr = "";
                    if (options.exportOptions.selectExpButtons) {
                        expButtonsArray = options.exportOptions.selectExpButtons.split(",");
                        for (var i = 0; i < expButtonsArray.length; i++) {
                            if (expButtonsArray[i] == 1) {
                                expButtonsStr += '<div id="' + _dangqian_ + '" class="slick-export-item faceIcon icon-excel" title="' + Base.I18n.getLangText('taface.module.grid.exportcurrentpage') + '">' + Base.I18n.getLangText("taface.module.grid.exportcurrentpage") + '</div>';//导出当前页
                            } else if (expButtonsArray[i] == 2) {
                                expButtonsStr += '<div id="' + _xuanze_ + '" class="slick-export-item faceIcon icon-excel" title="' + Base.I18n.getLangText('taface.module.grid.exportselecteddata') + '">' + Base.I18n.getLangText("taface.module.grid.exportselecteddata") + '</div>';//导出选择数据
                            } else if (expButtonsArray[i] == 3) {
                                expButtonsStr += '<div id="' + _quanbu_ + '" class="slick-export-item faceIcon icon-excel" title="' + Base.I18n.getLangText('taface.module.grid.exportalldata') + '">' + Base.I18n.getLangText("taface.module.grid.exportalldata") + '</div>';//导出全部数据
                            }
                        }
                    } else {
                        expButtonsStr += '<div id="' + _dangqian_ + '" class="slick-export-item faceIcon icon-excel" title="' + Base.I18n.getLangText('taface.module.grid.exportcurrentpage') + '">' + Base.I18n.getLangText('taface.module.grid.exportcurrentpage') + '</div>' +
                            '<div id="' + _xuanze_ + '" class="slick-export-item faceIcon icon-excel" title="' + Base.I18n.getLangText('taface.module.grid.exportselecteddata') + '">' + Base.I18n.getLangText("taface.module.grid.exportselecteddata") + '</div>' +
                            '<div id="' + _quanbu_ + '" class="slick-export-item faceIcon icon-excel" title="' + Base.I18n.getLangText('taface.module.grid.exportalldata') + '">' + Base.I18n.getLangText("taface.module.grid.exportalldata") + '</div>';
                    }

                    $c.append(expButtonsStr);
                    $exportDefaultExcel.append($c).click(function (e) {
                        $c.show();
                        $exportDefaultExcel.addClass("active");
                    });
                    $('#' + _dangqian_).click(function () {
                        exportDefaultGridData("dangqian",options.exportOptions);
                        $exportDefaultExcel.removeClass("active");
                        $c.hide();
                    });
                    $('#' + _xuanze_).click(function () {
                        exportDefaultGridData("xuanze",options.exportOptions);
                        $exportDefaultExcel.removeClass("active");
                        $c.hide();
                    });
                    $('#' + _quanbu_).click(function () {
                        exportDefaultGridDataAll(options.exportOptions);
                        $exportDefaultExcel.removeClass("active");
                        $c.hide();
                    });
                    $(document.body).bind("mousedown", function(e){
                        if ($exportDefaultExcel && $exportDefaultExcel.hasClass("active") && $exportDefaultExcel && $exportDefaultExcel[0] != e.target && !$.contains($exportDefaultExcel[0], e.target)) {
                            $exportDefaultExcel.removeClass("active");
                            $c.hide();
                        }
                    });
                }
                //如果显示最大化按钮
                if (options.showToFull) {
                    var $defaultCanvas = $('<div class="faceIcon icon-gridmin slick-full-control" title="' + Base.I18n.getLangText('taface.module.grid.minimize') + '"></div>')
                        .appendTo($toolBar).css("display", "none").click(defaultCanvas);
                    var $fullCanvas = $('<div class="faceIcon icon-gridmax slick-full-control" title="' + Base.I18n.getLangText('taface.module.grid.maximization') + '" />')
                        .appendTo($toolBar).click(fullCanvas);
                }
                function fullCanvas() {
                    $defaultCanvas.show();
                    $fullCanvas.hide();
                    var $borderContainer = $("body").find("div.l-layout-left,div.l-layout-right,div.l-layout-center,div.l-layout-top,div.l-layout-bottom");//border布局下的区域
                    var $handler = $("body").find("div.l-layout-drophandle-left,div.l-layout-drophandle-right,div.l-layout-drophandle-top,div.l-layout-drophandle-bottom,div.l-layout-collapse-left,div.l-layout-collapse-right").not(":hidden");
                    if ($borderContainer.length > 0 || $handler.length > 0) {
                        $container.width($(window).width() - 2);
                        $container.height($(window).height() - 2);
                        $container.addClass("slick-full-canvas-fixed");
                        resizeCanvas(true);
                        $handler.hide();//隐藏border布局下的工具条
                        $borderContainer.css({position: "static"});//设置所有的boder容器position 为static
                    } else {
                        $container.width($(window).width() - 2);
                        $container.height($(window).height() - 2);
                        $container.addClass("slick-full-canvas");
                        //grid.getContainer().addClass("slick-full-canvas-fixed");
                        //grid.resizeCanvas(true);
                        resizeCanvas(true);
                    }
                }

                function defaultCanvas() {
                    $defaultCanvas.hide();
                    $fullCanvas.show();
                    var box = getDefaultBox();
                    var $borderContainer = $("body").find("div.l-layout-left,div.l-layout-right,div.l-layout-center,div.l-layout-top,div.l-layout-bottom");//border布局下的区域
                    var $handler = $("body").find("div.l-layout-drophandle-left,div.l-layout-drophandle-right,div.l-layout-drophandle-top,div.l-layout-drophandle-bottom,div.l-layout-collapse-left,div.l-layout-collapse-right").not(":hidden");
                    if ($borderContainer.length > 0 || $handler.length > 0) {
                        $container.width("100%").height(box.height).removeClass("slick-full-canvas-fixed");
                        resizeCanvas(true);
                        $borderContainer.css({position: "absolute"});//恢复原有的设置
                        $handler.show();//显示border布局下的工具条
                    } else {
                        $container.width("100%").height(box.height).removeClass("slick-full-canvas");
                        resizeCanvas(true);
                    }
                }



            }


            // add by cy 添加表头搜索
            if(options.showHeaderSeach){
                search = new Slick.Plugins.HeaderSearch({});
                registerPlugin(search);
            }

            // 添加排序
            self.onSort.subscribe(function(e, args) {
                var sortdir = args.sortAsc ? 1 : -1;
                sortcol = args.sortCol.field;
                var type = args.sortCol.dataType ? args.sortCol.dataType: "string";

                if (type == "number")// 数字
                    dataView.sort(comparerNum, args.sortAsc);
                else if (type == "date")// 日期
                    dataView.sort(comparerDate, args.sortAsc);
                else if (type == "dateTime")// 全日期
                    dataView.sort(comparerDate, args.sortAsc);
                else
                    dataView.sort(comparer, args.sortAsc);

            });
            // //////-------------------------------------
            dataView.onRowCountChanged.subscribe(function(e,args) {
                updateRowCount();
                render();
            });

            dataView.onRowsChanged.subscribe(function(e,args) {
                // invalidateAllRows();
                render();
            });
            self.onSelectedRowsChanged.subscribe(function(e,a,b,c) {
                selectedRowIds = [];
                var rows = self.getSelectedRows();
                for (var i = 0, l = rows.length; i < l; i++) {
                    var item = dataView.getItem(rows[i]);
                    if (item) {
                        if (item.__group) continue;
                        selectedRowIds.push(item[pId]);
                    }
                }
            });
            // 注册通过id来选择行
            dataView.onRowsChanged.subscribe(function(e,args) {
                self.invalidateRows(args.rows);
                self.render();

                if (selectedRowIds.length > 0) {
                    var selRows = [];
                    for (var i = 0; i < selectedRowIds.length; i++){
                        var idx = dataView.getRowById(selectedRowIds[i]);
                        if (idx != undefined)
                            selRows.push(idx);
                    }

                    self.setSelectedRows(selRows);
                }
            });
            // 如果有分组
            if (options.groupingBy) {
                if (options.groupingBy == "_onlyTotals"){
                    dataView.groupBy(
                        options.groupingBy,
                        function (g) {
                            // return   "<span style='color:green'>(共" + g.count + " 项)</span>";
                            return   "<span  class='slick-group-warn-word'>("+Base.I18n.getLangText('taface.module.grid.totalandcount',g.count)+")</span>";

                        },
                        function (a, b) {
                            return a.value - b.value;
                        }
                    );
                } else {
                    dataView.groupBy(
                        options.groupingBy,
                        function (g) {
                            var value = "";
                            for (var i = 0; i < columns.length; i ++) {
                                if (columns[i].id == options.groupingBy) {
                                    value = columns[i].name
                                    break;
                                }
                            }
                            var trueCollection  = (!getCollectionsDataArrayObject() || getCollectionsDataArrayObject()[options.groupingBy] == undefined) ? []:getCollectionsDataArrayObject()[options.groupingBy];
                            var trueValue = g.value;
                            for (var i = 0; i < trueCollection.length; i ++) {
                                if (trueCollection[i].id == g.value) {
                                    if (trueCollection[i].name != null) {
                                        trueValue = trueCollection[i].name;
                                        break;
                                    }
                                }
                            }
                            // return value + ":  " + trueValue + "  <span style='color:green'>(共" + g.count + " 项)</span>";
                            return value + ":  " + trueValue + "  <span class='slick-group-warn-word'>("+Base.I18n.getLangText('taface.module.grid.totalandcount',g.count)+")</span>";

                        },
                        function (a, b) {
                            return a.value - b.value;
                        }
                    );
                }

                var totals = [];
                for (var i = 0; i < columns.length; i ++) {
                    if (columns[i].totals != undefined) {
                        switch (columns[i].totals) {
                            case "avg" :
                                if(typeof columns[i].totalsFormatter == "function"){
                                    totals.push(new Slick.Data.Aggregators.Avg(columns[i].id,columns[i].totalsFormatter));
                                }else{
                                    totals.push(new Slick.Data.Aggregators.Avg(columns[i].id));
                                }
                                break;
                            case "max" :
                                if(typeof columns[i].totalsFormatter == "function"){
                                    totals.push(new Slick.Data.Aggregators.Max(columns[i].id,columns[i].totalsFormatter));
                                }else{
                                    totals.push(new Slick.Data.Aggregators.Max(columns[i].id));
                                }
                                break;
                            case "min" :
                                if(typeof columns[i].totalsFormatter == "function"){
                                    totals.push(new Slick.Data.Aggregators.Min(columns[i].id,columns[i].totalsFormatter));
                                }else{
                                    totals.push(new Slick.Data.Aggregators.Min(columns[i].id));
                                }
                                break;
                            case "sum" :
                                if(typeof columns[i].totalsFormatter == "function"){
                                    totals.push(new Slick.Data.Aggregators.Sum(columns[i].id,columns[i].totalsFormatter));
                                }else{
                                    totals.push(new Slick.Data.Aggregators.Sum(columns[i].id));
                                }
                                break;
                        }
                    }
                };
                dataView.setAggregators(totals, true);
                dataView.endUpdate();
            }
            // 提示框
            initTip();

            // 默认选择行
            if (typeof options.defaultRows == "function") {// defaultRows为function
                var str = options.defaultRows();
                setSelectRowsByData(str);
            } else if (options.defaultRows != undefined && options.defaultRows.length > 0) {// defaultRows为json数组
                setSelectRowsByData(options.defaultRows);
            }
            //初始化event
            if (options.defaultEvent != null && options.defaultEvent.length >0){
                var defaultEvent = options.defaultEvent;
                for (var i = 0; i < defaultEvent.length; i ++) {
                    var eventName = defaultEvent[i].name;
                    var handler = defaultEvent[i].handler;
                    if (options.eventHandler != null && options.eventHandler[handler] != null)
                        self[eventName].subscribe(options.eventHandler[handler]);
                    else
                        self[eventName].subscribe(self[handler]);
                }
            }

            if(options.moveRows){//add by zzb行拖动
                setSelectionModel(new Slick.RowSelectionModel());
                var moveRowsPlugin = new Slick.RowMoveManager({
                    cancelEditOnDrag: true
                });
                moveRowsPlugin.onBeforeMoveRows.subscribe(function (e, data) {
                    for (var i = 0; i < data.rows.length; i++) {
                        // no point in moving before or after itself
                        if (data.rows[i] == data.insertBefore || data.rows[i] == data.insertBefore - 1) {
                            e.stopPropagation();
                            return false;
                        }
                    }
                    return true;
                });
                moveRowsPlugin.onMoveRows.subscribe(function (e, args) {
                    var extractedRows = [], left, right;
                    var rows = args.rows;
                    var insertBefore = args.insertBefore;
                    left = data.getItems().slice(0, insertBefore);
                    right = data.getItems().slice(insertBefore, data.getItems().length);
                    rows.sort(function(a,b) { return a-b; });
                    for (var i = 0; i < rows.length; i++) {
                        extractedRows.push(data.getItems()[rows[i]]);
                    }
                    rows.reverse();
                    for (var i = 0; i < rows.length; i++) {
                        var row = rows[i];
                        if (row < insertBefore) {
                            left.splice(row, 1);
                        } else {
                            right.splice(row - insertBefore, 1);
                        }
                    }
                    var dataI = left.concat(extractedRows.concat(right));
                    var selectedRows = [];
                    for (var i = 0; i < rows.length; i++)
                        selectedRows.push(left.length + i);

                    resetActiveCell();
                    getDataView().setItems(dataI);
                    setSelectedRows(selectedRows);
                    render();
                });
                registerPlugin(moveRowsPlugin);
            }
            /*
             * 添加表格hover 行样式改变
             * @author cy
             * */
            self.onMouseEnter.subscribe(function(e){
               var cell= getCellFromEvent(e);
               $canvas.find(".slick-row[row="+cell.row+"]>div").addClass("slick-row-hover");
            });
            self.onMouseLeave.subscribe(function(e){
                $canvas.find(".slick-row>div.slick-row-hover").removeClass("slick-row-hover");
            });

        }// init

        //add by cy 验证列冻结数
        function setFrozenOptions() {
            options.frozenColumn = ( options.frozenColumn >= 0 && options.frozenColumn < columns.length) ? parseInt(options.frozenColumn) : -1;
        }
        //add by cy 是否列冻结对应的左右两部分显示情况设置
        function setPaneVisibility() {
            if (options.frozenColumn > -1) {
                $paneHeadersR.show();//表头
                $paneR.show();
            } else {
                $paneHeadersR.hide();
                $paneR.hide();
            }
        }
        //add by cy 是否列冻结 滚动部分的容器
        function setScroller() {
            if (options.frozenColumn > -1) {
                $headerScrollContainer = $headerScrollerR;//表头
                //$headerRowScrollContainer = $headerRowScrollerR;//表头老式搜索不要了
                $viewportScrollContainerX = $viewportScrollContainerY = $viewportR;//表格画布
                $topPanelScrollerContainer=$topPanelScrollerR;

            } else {
                $headerScrollContainer = $headerScrollerL;
                //$headerRowScrollContainer = $headerRowScrollerL;//表头老式搜索不要了
                $viewportScrollContainerX = $viewportScrollContainerY = $viewportL;
                $topPanelScrollerContainer=$topPanelScrollerL;


            }
        }
        //add by cy 表格画布显示部分设置
        function setOverflow() {    /* overflow-x: scroll; */
            $viewportL.css({
                'overflow-x': ( options.frozenColumn > -1 ) ? 'scroll' : 'auto',
                'overflow-y': ( options.frozenColumn > -1 ) ?  'hidden' : 'auto'
            });

            $viewportR.css({
                'overflow-x': ( options.frozenColumn > -1 ) ? 'scroll' : 'auto',
                'overflow-y': ( options.frozenColumn > -1 ) ? 'auto' : 'auto'
            });
        }

        //add by cy 重新设置表格列信息 (主要是冻结列提出来)
        function updateColumnCaches() {
            columnPosLeft = [];
            columnPosRight = [];
            var x = 0;
            for (var i = 0, ii = columns.length; i < ii; i++) {
                columnPosLeft[i] = x;
                columnPosRight[i] = x + columns[i].width;
                if (options.frozenColumn == i) {
                    x = 0;
                } else {
                    x += columns[i].width;
                }
            }
        }
        //获取表头宽度
        function getHeadersWidth() {
            headersWidth = headersWidthL = headersWidthR = 0;

            for (var i = 0, ii = columns.length; i < ii; i++) {
                var width = columns[i].width? columns[i].width : options.defaultColumnWidth;

                if (( options.frozenColumn ) > -1 && ( i > options.frozenColumn )) {
                    headersWidthR += width;
                } else {
                    headersWidthL += width;
                }
            }

            if (options.frozenColumn > -1) {
                headersWidthL = headersWidthL + 1000;

                headersWidthR = Math.max(headersWidthR, viewportW) + headersWidthL;
                headersWidthR += scrollbarDimensions.width;
            } else {
                headersWidthL += scrollbarDimensions.width;
                headersWidthL = Math.max(headersWidthL, viewportW) + 1000;
            }

            headersWidth = headersWidthL + headersWidthR;
        }

        //获取画布宽度
        function getCanvasWidth() {
            var availableWidth = viewportHasHScroll ? viewportW - scrollbarDimensions.width : viewportW;

            var i = columns.length;

            canvasWidthL = canvasWidthR = 0;

            while (i--) {
                if ((options.frozenColumn > -1) && (i > options.frozenColumn)) {
                    canvasWidthR += columns[i].width;
                } else {
                    canvasWidthL += columns[i].width;
                }
            }

            var totalRowWidth = canvasWidthL + canvasWidthR;

            return options.fullWidthRows ? Math.max(totalRowWidth, availableWidth) : totalRowWidth;
        }
        //add by cy 更新画布的宽度
        function updateCanvasWidth(forceColumnWidthsUpdate) {
            var oldCanvasWidth = canvasWidth;
            var oldCanvasWidthL = canvasWidthL;
            var oldCanvasWidthR = canvasWidthR;
            var widthChanged;
            canvasWidth = getCanvasWidth();

            widthChanged = canvasWidth !== oldCanvasWidth || canvasWidthL !== oldCanvasWidthL || canvasWidthR !== oldCanvasWidthR;

            if (widthChanged || options.frozenColumn > -1 ) {
                $canvasL.width(canvasWidthL);

                getHeadersWidth();

                $headersL.width(headersWidthL);
                $headersR.width(headersWidthR);

                if (options.frozenColumn > -1) {
                    $canvasR.width(canvasWidthR);

                    $paneHeadersL.width(canvasWidthL);
                    $paneHeadersR.css('left', canvasWidthL);
                    $paneHeadersR.css('width', viewportW - canvasWidthL);

                    $paneL.width(canvasWidthL);
                    $paneR.css('left', canvasWidthL);
                    $paneR.css('width', viewportW - canvasWidthL);

                    //$headerRowScrollerL.width(canvasWidthL);
                    //$headerRowScrollerR.width(viewportW - canvasWidthL);
                    //
                    //$headerRowL.width(canvasWidthL);
                    //$headerRowR.width(canvasWidthR);

                    $viewportL.width(canvasWidthL);
                    $viewportR.width(viewportW - canvasWidthL);


                } else {
                    $paneHeadersL.width('100%');

                    $paneL.width('100%');

                    //$headerRowScrollerL.width('100%');
                    //
                    //$headerRowL.width(canvasWidth);

                    $viewportL.width('100%');


                }

                viewportHasHScroll = (canvasWidth > viewportW - scrollbarDimensions.width);
            }

            //$headerRowSpacerL.width(canvasWidth + (viewportHasVScroll ? scrollbarDimensions.width : 0));
            //$headerRowSpacerR.width(canvasWidth + (viewportHasVScroll ? scrollbarDimensions.width : 0));

            if (widthChanged || forceColumnWidthsUpdate) {
                applyColumnWidths();
            }
        }


        //控制过滤条的显示隐藏 add by zzb
        function columnsFilterShowOrHide(){
            $container.find(".slick-filter").bind("click", function(e) {
                var display = $container.find(".slick-headerrow").css("display");
                if (display == "none") {
                    showHeaderRowColumns();
                } else {
                    hideHeaderRowColumns();
                }
            });
        }

        /**
         * 数据全选
         */
        function selectAllData(){
            var defaultData = self.getDataView().getItems();
            var checkedRowsData = [];
            if(defaultData){
                for(var i = 0 ; i < defaultData.length ; i++){
                    checkedRowsData.push(dataView.getRowById(defaultData[i][pId]));
                }
            }

            setSelectedRows(checkedRowsData);
        }
        /**
         * 取消全选
         */
        function cancelSelectedAllData(){
            setSelectedRows([]);
        }

        /**
         * 根据数据匹配行
         * @param matchDataAry 校验数据 [{},{}...]
         * @param field 校验结果，可以是相应的字段值或整个行数据
         * @return 对应的校验结果
         */
        function _matchRowsByData(matchDataAry,field){
            // 所有数据寻找匹配项
            var matchedRowsData = [];
            var defaultData = dataView.getItems();
            if(defaultData){
                for(var i = 0;i<defaultData.length;i++){
                    var d = defaultData[i];
                    for(var j = 0;j<matchDataAry.length;j++){
                        var checkedRow = matchDataAry[j];
                        // l为json对象里的属性个数,yy为需要相等的列个数
                        var l = 0,yy = 0;
                        for(var x in checkedRow){
                            l++;
                            if(d[x] == checkedRow[x]){
                                yy++;
                            }
                        }
                        // 当json对象都满足条件时,将该行压入需要选择的行数组中
                        if(yy == l){
                            if(typeof field == "undefined"){
                                matchedRowsData.push(d);
                            }else{
                                matchedRowsData.push(d[field]);
                            }

                        }
                    }
                }
            }
            return matchedRowsData;
        }


        /*
         * 根据数组设置表格选择
         */
        function setSelectRowsByData(data){
            var checkedRows = eval(data);
            if(checkedRows){
                // if(options.selectType == "checkbox" || options.selectType == "radio"){
                    // 选中匹配数据
                    setSelectedRows(_matchRowsByData(checkedRows,rowId));
                // }
            }
        }
        /*
         * 根据数组取消某些选择
         */
        function cancelSelectRowByData(data) {
            var data = eval(data);
            if(data){
                // if(options.selectType == "checkbox" || options.selectType == "radio"){
                    var s = getSelectRowsDataToObj();
                    if(s){
                        var select = [], flag = true;
                        for (var j = 0; j < s.length; j ++) {
                            for (var i = 0; i < data.length; i ++) {
                                var l = 0,yy = 0;
                                for (var obj in data[i]) {
                                    l++;
                                    if (s[j][obj] == data[i][obj]) {
                                        yy++;
                                    }
                                }
                                // 当json对象都满足条件时,将该行压入需要选择的行数组中
                                if(yy == l){
                                    flag = false;
                                    break;
                                }
                            }
                            if (flag) select.push(dataView.getRowById(s[j][pId]));
                            flag = true;
                        }
                        setSelectedRows(select);
                    }
                // }
            }
        }
        /*
         * 根据数组追加选择
         */
        function addSelectRowsByData(data) {
            var checkedRows = eval(data);
            var selectRowIds = getSelectedRowsById();
            var checkedRowsData = [];
            var defaultData = self.getDataView().getItems();
            for(var i = 0; i < defaultData.length; i++){
                var d = defaultData[i];
                for(var j = 0; j < checkedRows.length; j++){
                    var checkedRow = checkedRows[j];
                    // l为json对象里的属性个数,yy为需要相等的列个数
                    var l = 0,yy = 0;
                    for(var x in checkedRow){
                        l++;
                        if(d[x] == checkedRow[x]){
                            yy++;
                        }
                    }
                    // 当json对象都满足条件时,将该行压入需要选择的行数组中
                    if(yy == l){
                        var flag = false;
                        for (var selectIds = 0 ; selectIds < selectRowIds.length; selectIds ++) {
                            if (d[pId] == selectRowIds[selectIds]) {
                                flag = true;
                            }
                        }
                        if (!flag)
                            checkedRowsData.push(dataView.getRowById(d[pId]));
                    }
                }
            }
            var selectedRows = getSelectedRows().concat(checkedRowsData);
            setSelectedRows(selectedRows);
        }

        function initTip() {
            function context(e,o){
                e.preventDefault();
                var columns =  self.getColumns();
                var cellInfo = self.getCellFromEvent(e);
                if(!cellInfo)return;
                var rowData = self.getDataItem(cellInfo.row);
                /* var cellData = rowData[self.getColumns()[cellInfo.cell].field];
                 var collectionData = self.getCollectionsDataArrayObject();
                 if(collectionData){
                 var collectionCell = collectionData[self.getColumns()[cellInfo.cell].field];
                 if(collectionCell){
                 for(var i = 0 ; i < collectionCell.length ; i++){
                 if(collectionCell[i].id == cellData){
                 cellData = collectionCell[i].name;
                 }
                 }
                 }
                 }
                 cellData = cellData == undefined ? "" : cellData;
                 */
                var column = self.getColumns()[cellInfo.cell];
                var columnName = column.name;
                columnName = columnName == undefined ? "": columnName;

                //change by xp showDetail 展示formatter后的值
                var innerHTML = getFormatter(cellInfo.row, column)(cellInfo.row, cellInfo.cell, rowData[column.field], column, rowData);
                if (column.dataType == "date"){
                    innerHTML = innerHTML.substring(0,10);
                }


                var columnId = self.getColumns()[cellInfo.cell].id;
                for (var i = 0 ; i < columns.length; i ++) {
                    if (columns[i].showDetailed == true) {
                        if (columnId == columns[i].id) {
                            if ($("#" + self.getGridId() + "_tips").length == 0 ) {
                                $("<div id='" + self.getGridId() + "_tips'  class='slick-showdetail'/>")
                                    .html("<span style='word-break:break-all'><div style='font-weight:bolder'>" +columnName + ":</div>"+innerHTML + "</span>")
                                    .appendTo($container);
                            } else {
                                $("#" + self.getGridId() + "_tips").find("span").html("<div style='font-weight:bolder'>" +columnName + ":</div>"+innerHTML);
                            }
                            $("#" + self.getGridId() + "_tips").css({"left":e.clientX+4,"top":e.clientY+4,"position":"fixed"});
                            $("#" + self.getGridId() + "_tips").show();
                            break;
                        } else {
                            $("#" + self.getGridId() + "_tips").hide();
                        }
                    }
                }
            }
            self.onCellMouseEnter.subscribe(context);
            function over() {
                $("#" + self.getGridId() + "_tips").hide();
            }
            self.onCellMouseLeave.subscribe(over);
        }
        /**
         * 控制列的显示和隐藏
         */
        function columnsHideOrShow(){
            // add by sun
            var $headerColumns = $headers.children();
            if($headerColumns){
                for(var i=0;i < $headerColumns.length; i++){
                    var columnObj = $headerColumns[i];
                    if($(columnObj).attr("field") === "__no" || $(columnObj).attr("field") === "_checkbox_selector"
                        || $(columnObj).attr("field") === "_radio_selector"){
                    }else{
                        $("<div class='slick-hideshow-handle'></div>")
                            .appendTo(columnObj)
                            .bind("click",function(e){
                                var target = (e.target ? e.target : e.srcElement);
                                var divObj = $("#"+$container[0].id+"_showhidehandle");
                                if(divObj.length){
                                }else{
                                    createBox();
                                }
                                showHeaderDiv($container[0].id+"_showhidehandle",target);
                                $(document).mousedown(function(e){
                                    var target = e.target || e.srcElement;
                                    if(!$(target).parents().is(".slick-boxComponent")){
                                        $(".slick-boxComponent").hide();
                                    }
                                });
                            });
                    }
                }
            }
        }
        //判断是否只有一列数据,如果只有一列数据,不隐藏;
        function isLastColumn(checkbox,div){
            var selected = div.find("input[type='checkbox']:checked");
            if(selected.length >= 1){
                setColumnHidden(checkbox.value);
            }else{
                checkbox.checked = true;
            }
        }
        //创建控制隐藏的弹出框
        function createBox(){
            var $div = $("<div id='"+$container[0].id+"_showhidehandle' class='slick-boxComponent'></div>");
            var $divCheckbox = $("<div class='slick-boxComponent_1'></div>").appendTo($div);
            $div.appendTo("body");

            var $headerColumns = $headers.children();

            for(var i=0;i < $headerColumns.length; i++){
                var columnObj = $headerColumns[i];
                //过滤掉 单选/复选框 和没有id以及序号列
                if($(columnObj).attr("field") === "__no" || $(columnObj).attr("field") === "_checkbox_selector"
                    || $(columnObj).attr("field") === "_radio_selector"){
                }else{
                    var $input = ["<div style='white-space: nowrap;'><input style='margin-top: 7px;' type='checkbox' checked='checked' value='"];
                    $input.push($(columnObj).attr("field"));
                    $input.push("' />");
                    $input.push($(columnObj).text());
                    $input.push("</div>");
                    $($input.join(""))
                        .appendTo($divCheckbox)
                        .bind("click",function(e){
                            var obj = (e.target ? e.target : e.srcElement);
                            var checkbox = $(this).children()[0];
                            if(obj.tagName.toUpperCase() == 'INPUT'){
                                if(checkbox.checked){
                                    setColumnShow(checkbox.value);
                                }else{
                                    isLastColumn(checkbox,$divCheckbox);
                                }
                            }else{
                                if(checkbox.checked){
                                    checkbox.checked = false;
                                    isLastColumn(checkbox,$divCheckbox);
                                }else{
                                    checkbox.checked = true;
                                    setColumnShow(checkbox.value);
                                }
                            }
                            $div.hide();
                        });
                }
            }
            var hiddenCols = getHiddenColumns();
            if(hiddenCols){
                for(var j=0;j < hiddenCols.length; j++){
                    var hideColumnObj = hiddenCols[j];
                    if($(hideColumnObj).attr("field") === "__no" || $(hideColumnObj).attr("field") === "_checkbox_selector"
                        || $(hideColumnObj).attr("field") === "_radio_selector"){
                    }else{
                        var $input = ["<div style='white-space: nowrap;'><input style='margin-top: 7px;' type='checkbox' value='"];
                        $input.push($(hideColumnObj).attr("field"));
                        $input.push("' />");
                        $input.push($(hideColumnObj).attr("name"));
                        $input.push("</div>");
                        $($input.join("")).appendTo($divCheckbox)
                            .bind("click",function(e){
                                var obj = (e.target ? e.target : e.srcElement);
                                var checkbox = $(this).children()[0];
                                if(obj.tagName.toUpperCase() == 'INPUT'){
                                    if(checkbox.checked){
                                        setColumnShow(checkbox.value);
                                    }else{
                                        isLastColumn(checkbox,$divCheckbox);
                                    }
                                }else{
                                    if(checkbox.checked){
                                        checkbox.checked = false;
                                        isLastColumn(checkbox,$divCheckbox);
                                    }else{
                                        checkbox.checked = true;
                                        setColumnShow(checkbox.value);
                                    }
                                }
                                $div.hide();
                            });
                    }
                }
            }
        }
        //显示弹出来标题框
        function showHeaderDiv(id,target,columnObj){
            var $target = $(target);
            var $id = $("#"+id);
            var bodyHeight = $(document.body).outerHeight(true);
            var bodyWidth = $(document.body).outerWidth(true);
            var boxHeight = $id.outerHeight(true);
            var boxWidth = $id.outerWidth(true);
            if($target && $target.length == 1) {
                var targetOffset = $target.offset();
                if(targetOffset) {
                    var targetTop = targetOffset.top;
                    var targetLeft = targetOffset.left;
                    var targetHeight = $target.innerHeight();
                    var targetWidth = $target.innerWidth();
                    var heightDifference = bodyHeight-targetHeight-targetTop;
                    var widthDifference = bodyWidth-targetLeft;
                    if(heightDifference >= boxHeight) {
                        $id.css("top",(targetTop - targetHeight + 40));
                    } else {
                        $id.css("top",(targetTop - boxHeight - targetHeight + 10));
                    }
                    if(widthDifference >= boxWidth) {
                        $id.css("left",(targetLeft - targetWidth));
                    } else {
                        $id.css("left",(targetLeft - boxWidth - targetWidth + 20));
                    }
                }
            }
            $id.show();
        }
        /**
         * 汉字排序
         *
         * @author 林森
         */
        function comparer(a,b) {
            var x = a[sortcol] != undefined ? a[sortcol] : "" , y = b[sortcol] != undefined ? b[sortcol]: "";
            x=x.toString();y=y.toString();//add by cy 解决数字情况下使用字符排序出错的问题
            // if (typeof x == "number" && typeof y == "number")
            // return (x == y ? 0 :(x > y ? 1 : -1));
            // if (typeof x == "string" && typeof x == "string" )
            // x.substring(0,1).localeCompare(y.substring(0,1))
            // var i = x.localeCompare(y);
            // if (i > 0 ) return 1;
            // else if(i< 0) return -1;
            // else return 1;
            // alert(navigator.userAgent)
            if (navigator.userAgent.indexOf("Chrome") != -1) {
                var gb2312=new TaGB2312();
                var xx = gb2312.getSpell(x);
                var yy = gb2312.getSpell(y);
                return (xx == yy ? 0 :(xx > yy ? 1 : -1));
            }
            return x.localeCompare(y);

        }
        /**
         * 数字排序
         *
         * @author 林森
         */
        function comparerNum(a,b) {
            var x = Number(a[sortcol]) ? Number(a[sortcol]): -999999999999, y = Number(b[sortcol]) ? Number(b[sortcol]): -999999999999;
            return (x == y ? 0 : (x > y ? 1 : -1));

        }
        function comparerDate(a,b) {
            var dataX = a[sortcol];
            var dataY = b[sortcol];

            var x = dataX ? Number(dataX.replaceAll("-","").replaceAll(":","").replaceAll(" ","")): -999999999999,
                y = dataY ? Number(dataY.replaceAll("-","").replaceAll(":","").replaceAll(" ","")): -999999999999;
            // alert("x :" + x + " data:" + dataX + " y :" + y);
            return (x == y ? 0 : (x > y ? 1 : -1));

        }
        // *****************/
        function registerPlugin(plugin) {
            plugins.unshift(plugin);
            plugin.init(self);
        }
        /**
         * 撤销插件，通过调用插件的 destroy(self)方法 self为当前grid
         *
         * @method
         */
        function unregisterPlugin(plugin) {
            for (var i = plugins.length; i >= 0; i--) {
                if (plugins[i] === plugin) {
                    if (plugins[i].destroy) {
                        plugins[i].destroy();
                    }
                    plugins.splice(i, 1);
                    break;
                }
            }
        }
        /**
         * 通过设置选择模式
         */
        function setSelectionModel(model) {
            if (selectionModel) {
                selectionModel.onSelectedRangesChanged.unsubscribe(handleSelectedRangesChanged);
                if (selectionModel.destroy) {
                    selectionModel.destroy();
                }
            }

            selectionModel = model;
            if (selectionModel) {
                selectionModel.init(self);
                selectionModel.onSelectedRangesChanged.subscribe(handleSelectedRangesChanged);
            }
        }

        function getSelectionModel() {
            return selectionModel;
        }

        function getCanvasNode() {
            return $canvas[0];
        }
        /**
         * 测量scrollbar的width和height 暂时不知道其用途
         */
        function measureScrollbar() {
            // / <summary>
            // / Measure width of a vertical scrollbar
            // / and height of a horizontal scrollbar.
            // / </summary
            // / <returns>
            // / { width: pixelWidth, height: pixelHeight }
            // / </returns>
            var $c = $("<div style='position:absolute; top:-10000px; left:-10000px; width:100px; height:100px; overflow:scroll;'></div>").appendTo("body");
            var dim = { width: $c.width() - $c[0].clientWidth, height: $c.height() - $c[0].clientHeight };
            $c.remove();
            return dim;
        }

        /**
         * 得到Columns的width
         */
        function getRowWidth() {
            var rowWidth = 0;
            var len = columns.length;
            while (i--) {
                rowWidth += (columns[i].width || columnDefaults.width);
            }
            for(var i=0;i<len;i++){

            }

            return rowWidth;
        }

        function setCanvasWidth(width) {
            //$canvas.width(width);
            //
            //viewportHasHScroll = (width > viewportW - scrollbarDimensions.width);
          //updateCanvasWidth(false);



        }

        function disableSelection($target) {
            // / <summary>
            // / Disable text selection (using mouse) in
            // / the specified target.
            // / </summary
            if ($target && $target.jquery) {
                $target
                    .attr('unselectable', 'on')
                    .css('MozUserSelect', 'none')
                    .bind('selectstart.ui', function() { return false; }); // from
                // jquery:ui.core.js
                // 1.7.2
            }
        }
        /**
         * 通过div测试得到最大css高度
         */
        function getMaxSupportedCssHeight() {
            /*var increment = 10000;
             var supportedHeight = increment;
             // FF reports the height back but still renders blank after ~6M px
             var testUpTo =  100000;
             var div = $("<div style='display:none' />").appendTo(document.body);

             while (supportedHeight <= testUpTo) {
             div.css("height", supportedHeight + increment);
             if (div.height() !== supportedHeight + increment)
             break;
             else
             supportedHeight += increment;
             }

             div.remove();
             return supportedHeight;*/

            //modidy by xp 动态调整最大页高度，解决表格数据量大后的滚动条数据拖动问题

            var defaultval = 100000;
            if(typeof getDataLength() === undefined || getDataLength()==0){
                return defaultval;
            }
            /* 保留代码，表格数据变动是否应该重新设置maxSupportedCssHeight
             if(maxSupportedCssHeight != defaultval){
             defaultval = maxSupportedCssHeight;
             }else{*/
            if(getDataLength()>1000000){
                defaultval = parseInt(getDataLength()/10);
            }
            /*}*/

            return defaultval;
        }

        // TODO: this is static. need to handle page mutation.
        function bindAncestorScrollEvents() {
            var elem = $canvas[0];

            while ((elem = elem.parentNode) != document.body) {
                // bind to scroll containers only
                if (elem == $viewport[0] || elem.scrollWidth != elem.clientWidth || elem.scrollHeight != elem.clientHeight)
                    $(elem).bind("scroll.slickgrid", handleActiveCellPositionChange);
            }
        }

        function unbindAncestorScrollEvents() {
            $canvas.parents().unbind("scroll.slickgrid");
        }
        /**
         * 更新ColumnHeadr
         *
         * @param
         */
        function updateColumnHeader(columnId, title, toolTip) {
            var idx = getColumnIndex(columnId);
            if(idx === undefined) return;
            var $header = $headers.children().eq(idx);
            if ($header) {
                columns[idx].name = title;
                columns[idx].toolTip = toolTip;
                $header
                    .attr("title", toolTip || title || "")
                    .children().eq(0).html(title);
            }
        }

        function getHeaderRow() {
            //return (options.frozenColumn > -1) ? $headerRow : $headerRow[0];//老式表头搜索不要了
        }

        function getHeaderRowColumn(columnId) {
            var idx = getColumnIndex(columnId);

            var $headerRowTarget;

            if (options.frozenColumn > -1) {
                if (idx <= options.frozenColumn) {
                    $headerRowTarget = $headerRowL;
                } else {
                    $headerRowTarget = $headerRowR;

                    idx -= options.frozenColumn + 1;
                }
            } else {
                $headerRowTarget = $headerRowL;
            }

            var $header = $headerRowTarget.children().eq(idx);
            return $header && $header[0];
        }
        /**
         * 创建Column头
         */
        function createColumnHeaders(reorder) {
            var opt = options;
            var i;
            var $tableTrs;
            function hoverBegin() {
                $(this).addClass("slick-header-column-hover");// 鼠标进入显示
            }
            function hoverEnd() {
                $(this).removeClass("slick-header-column-hover");// 鼠标离开显示
            }

            //$headers.empty(); // 移除所有header容器的子节点
            $headersL.empty();
            $headersR.empty();
            getHeadersWidth();

            $headersL.width(headersWidthL);
            $headersR.width(headersWidthR);

            //$headerRow.empty();//老式过滤表头不要了
            columnsById = {};
            //if (reorder == true)

            for (var j = 0 ; j < columns.length; j ++) {
                if (columns[j].possation == undefined) {
                    columns[j].possation = j;
                }
            }
            columns = columns.sort(
                function(a,b){
                    if (a.possation != undefined && b.possation != undefined)
                        return a.possation - b.possation
                    else return -1;
                });
            for (i = 0; i < columns.length; i++) {

                if (columns[i].propertyKey == true) {
                    columnPropertyKey.push(columns[i].field);
                }

                var m = columns[i] = $.extend({},columnDefaults,columns[i]);// 将每一个column和默认的取继承

                var $headerTarget = (options.frozenColumn > -1) ? ((i <= options.frozenColumn) ? $headersL : $headersR) : $headersL;

                //var $headerRowTarget = (options.frozenColumn > -1) ? ((i <= options.frozenColumn) ? $headerRowL : $headerRowR) : $headerRowL;


                columnsById[m.id] = i;
                var headerStr = ["<div class='ui-state-default slick-header-column"];
                if (m.field == "sel") headerStr.push(" slick-cell-checkbox ");
                headerStr.push(m.headerCssClass || "");
                headerStr.push("' id='");
                headerStr.push(uid);
                headerStr.push(m.id);
                headerStr.push("' title='");
                headerStr.push(m.toolTip || formatHeaderTitle(m.name) || "");
                headerStr.push("' field='");
                headerStr.push(m.id);
                headerStr.push("' style='width:");
                headerStr.push(m.width - headerColumnWidthDiff);
                headerStr.push("px;");
                if(m.headerBackgroundColor){
                    headerStr.push("background:")
                    headerStr.push(m.headerBackgroundColor);
                    headerStr.push(";");
                }
                if (m.align){
                    headerStr.push("text-align:")
                    headerStr.push(m.align);
                    headerStr.push(";");
                }

                if(opt.headerColumnsRows){
                    headerStr.push("height:");
                    headerStr.push(22 * opt.headerColumnsRows);
                    headerStr.push("px;");
                }
                headerStr.push("'>");
                if(m.editor){
                    headerStr.push("<span class='faceIcon icon-edit slick-icon-edit'></span>");
                }
                if(opt.headerColumnsRows && opt.headerColumnsRows != 1){
                    headerStr.push("<span class='slick-column-name' style='white-space:normal;word-break:break-all;'>")
                    headerStr.push(m.name);
                    headerStr.push("</span>");
                }else{
                    headerStr.push("<span class='slick-column-name'>");
                    headerStr.push(m.name);
                    headerStr.push("</span>");
                }
                if (m.sortable && m.id!="__no") {
                    headerStr.push("<span class='slick-sort-indicator' />"); // 添加用于排序的小span
                }
                //add by cy
                if (m.searchType) {
                    headerStr.push("<span class='slick-header-search faceIcon icon-funnel' />"); // 添加用于表头搜索的按钮
                }
                if(m.id=="__no"){
                    headerStr.push("<span class='slick-filter' />");
                }
                if (m.collection && opt.serverCvtCode) {
                    headerStr.push('<input type="hidden"  name="gridInfo[\'');
                    headerStr.push(self.getGridId());
                    headerStr.push('_displayCode\']" value="');
                    headerStr.push(m.id);
                    headerStr.push('`');
                    headerStr.push(m.collection);
                    headerStr.push('" />');
                }
                headerStr.push("</div>");

                var header = $(headerStr.join("")).data("fieldId", m.id);

                //if (opt.enableColumnReorder || m.sortable) {
                header.hover(hoverBegin, hoverEnd);
                //}

                if(opt.headerColumnsRows && opt.headerColumnsRows != 1){
                    var span = header.find("span");
                    var text = span[0].innerHTML;
                    if(text.indexOf("<br>") > -1 || text.indexOf("<BR>") > -1){
                    }else{
                        header.css("line-height",(22 * opt.headerColumnsRows)+"px");
                    }
                }
              if (opt.showHeaderRow) {
                //$("<div class='ui-state-default slick-headerrow-column c" + i + "'></div>").appendTo($headerRowTarget);
              }

                header.appendTo($headerTarget);
            }
            //控制columns的显示隐藏
            columnsHideOrShow();

            //绑定事件   过滤图标点击事件 add by zzb
            columnsFilterShowOrHide();

            setSortColumn(sortColumnId, sortAsc);
            setTimeout(function(){setupColumnResize();},1500);
            if (opt.enableColumnReorder) {
                setupColumnReorder();
            }
        }

        function setupColumnSort() {
            $headers.click(function(e) {
                //modify by cy
                var target = e.srcElement||e.target;
                if ($(target).hasClass("slick-resizable-handle") || $(target).hasClass("slick-hideshow-handle")||$(target).hasClass("slick-filter")||$(target).hasClass("slick-header-search")) {
                    return;
                }

                var $col = $(target).closest(".slick-header-column");
                if (!$col.length)
                    return;

                var column = columns[getColumnIndex($col.data("fieldId"))];
                if (column.sortable) {
                    if (!getEditorLock().commitCurrentEdit())
                        return;

                    if (column.id === sortColumnId) {
                        sortAsc = !sortAsc;
                    }
                    else {
                        sortColumnId = column.id;
                        sortAsc = true;
                    }

                    setSortColumn(sortColumnId,sortAsc);

                    /*
                     * 排序时触发事件
                     */
                    trigger(self.onSort, {sortCol:column,sortAsc:sortAsc});
                    // 如果排序时,有选择行,则去除掉选择的行;
                    cancelSelectedAllData();
                }
            });
        }

        function setupColumnReorder() {
            $headers.sortable({
                containment: "parent",
                axis: "x",
                cursor: "default",
                tolerance: "intersection",
                helper: "clone",
                placeholder: "slick-sortable-placeholder ui-state-default slick-header-column",
                forcePlaceholderSize: true,
                start: function(e, ui) { $(ui.helper).addClass("slick-header-column-active"); },
                beforeStop: function(e, ui) { $(ui.helper).removeClass("slick-header-column-active"); },
                stop: function(e) {
                    if (!getEditorLock().commitCurrentEdit()) {
                        $(this).sortable("cancel");
                        return;
                    }

                    var reorderedIds = $headers.sortable("toArray");
                    var reorderedColumns = [];
                    //var p = null;
                    var index = 0;
                    for (var i = 0; i < reorderedIds.length; i++) {
                        var column = columns[getColumnIndex(reorderedIds[i].replace(uid,""))];
                        for (var j = 0; j < hiddenColumns.length ; j ++){
                            if (hiddenColumns[j] && hiddenColumns[j].possation == index){
                                index = hiddenColumns[j].possation + 1;
                            }
                        }
                        column.possation = index;
                        reorderedColumns.push(column);
                        index ++;
//                        if (prePossation > column.possation && p == null) {
//                    		p = reorderedColumns[i].possation;
//                    	}
//                        var prePossation = column.possation;
                    }

                    setColumns(reorderedColumns, true);

                    trigger(self.onColumnsReordered, {});
                    e.stopPropagation();
                    setupColumnResize();
                }
            });
        }
        /**
         * 设置并渲染表格
         */
        function setupColumnResize() {
            var $col, j, c, pageX, columnElements, minPageX, maxPageX, firstResizable, lastResizable, originalCanvasWidth;
            columnElements = $headers.children();

            columnElements.find(".slick-resizable-handle").remove();
            columnElements.each(function(i,e) {
                if (columns[i] && columns[i].resizable) {
                    if (firstResizable === undefined) { firstResizable = i; }
                    lastResizable = i;
                }
            });
            if (firstResizable === undefined) {
                return;
            }
            columnElements.each(function(i,e) {
                if (i < firstResizable || (options.forceFitColumns && i >= lastResizable)) { return; }
                $col = $(e);
                $("<div class='slick-resizable-handle' />")
                    .appendTo(e)
                    .bind("dragstart", function(e,dd) {
                        if (!getEditorLock().commitCurrentEdit()) { return false; }
                        pageX = e.pageX;
                        $(this).parent().addClass("slick-header-column-active");
                        var shrinkLeewayOnRight = null, stretchLeewayOnRight = null;
                        // lock each column's width option to current width
                        columnElements.each(function(i,e) { columns[i].previousWidth = $(e).outerWidth(true); });
                        if (options.forceFitColumns) {
                            shrinkLeewayOnRight = 0;
                            stretchLeewayOnRight = 0;
                            // colums on right affect maxPageX/minPageX
                            for (j = i + 1; j < columnElements.length; j++) {
                                c = columns[j];
                                // TODO
                                if (c.resizable) {
                                    if (stretchLeewayOnRight !== null) {
                                        if (c.maxWidth) {
                                            stretchLeewayOnRight += c.maxWidth - c.previousWidth;
                                        }
                                        else {
                                            stretchLeewayOnRight = null;
                                        }
                                    }
                                    shrinkLeewayOnRight += c.previousWidth - Math.max(c.minWidth || 0, absoluteColumnMinWidth);
                                }
                            }
                        }
                        var shrinkLeewayOnLeft = 0, stretchLeewayOnLeft = 0;
                        for (j = 0; j <= i; j++) {
                            // columns on left only affect minPageX
                            c = columns[j];
                            if (c.resizable) {
                                if (stretchLeewayOnLeft !== null) {
                                    if (c.maxWidth) {
                                        stretchLeewayOnLeft += c.maxWidth - c.previousWidth;
                                    }
                                    else {
                                        stretchLeewayOnLeft = null;
                                    }
                                }
                                shrinkLeewayOnLeft += c.previousWidth - Math.max(c.minWidth || 0, absoluteColumnMinWidth);
                            }
                        }
                        if (shrinkLeewayOnRight === null) { shrinkLeewayOnRight = 100000; }
                        if (shrinkLeewayOnLeft === null) { shrinkLeewayOnLeft = 100000; }
                        if (stretchLeewayOnRight === null) { stretchLeewayOnRight = 100000; }
                        if (stretchLeewayOnLeft === null) { stretchLeewayOnLeft = 100000; }
                        maxPageX = pageX + Math.min(shrinkLeewayOnRight, stretchLeewayOnLeft);
                        minPageX = pageX - Math.min(shrinkLeewayOnLeft, stretchLeewayOnRight);
                        originalCanvasWidth = $canvas.width();
                    })
                    .bind("drag", function(e,dd) {
                        var actualMinWidth, d = Math.min(maxPageX, Math.max(minPageX, e.pageX)) - pageX, x, ci;
                        if (d < 0) { // shrink column
                            x = d;
                            var newCanvasWidthL = 0, newCanvasWidthR = 0;
                            for (j = i; j >= 0; j--) {
                                c = columns[j];
                                if (c.resizable) {
                                    actualMinWidth = Math.max(c.minWidth || 0, absoluteColumnMinWidth);
                                    if (x && c.previousWidth + x < actualMinWidth) {
                                        x += c.previousWidth - actualMinWidth;
                                        c.width = actualMinWidth;
                                    } else {
                                        c.width = c.previousWidth + x;
                                        x = 0;
                                    }
                                }
                            }

                            for (k = 0; k <= i; k++) {
                                c = columns[k];

                                if ((options.frozenColumn > -1) && (k > options.frozenColumn)) {
                                    newCanvasWidthR += c.width;
                                } else {
                                    newCanvasWidthL += c.width;
                                }
                            }

                            if (options.forceFitColumns) {
                                x = -d;
                                for (j = i + 1; j < columnElements.length; j++) {
                                    c = columns[j];
                                    if (c.resizable) {
                                        if (x && c.maxWidth && (c.maxWidth - c.previousWidth < x)) {
                                            x -= c.maxWidth - c.previousWidth;
                                            c.width = c.maxWidth;
                                        } else {
                                            c.width =  c.previousWidth + x;
                                            x = 0;
                                        }
                                        if ((options.frozenColumn > -1) && (j > options.frozenColumn)) {
                                            newCanvasWidthR += c.width;
                                        } else {
                                            newCanvasWidthL += c.width;
                                        }
                                    }
                                }
                            } else if (options.syncColumnCellResize) {
                                setCanvasWidth(originalCanvasWidth + d);
                            }
                        } else { // stretch column
                            x = d;
                            var newCanvasWidthL = 0, newCanvasWidthR = 0;
                            for (j = i; j >= 0; j--) {
                                c = columns[j];
                                if (c.resizable) {
                                    if (x && c.maxWidth && (c.maxWidth - c.previousWidth < x)) {
                                        x -= c.maxWidth - c.previousWidth;
                                        c.width = c.maxWidth;
                                    } else {
                                        c.width = c.previousWidth + x;
                                        x = 0;
                                    }
                                }

                            }
                            for (k = 0; k <= i; k++) {
                                c = columns[k];

                                if ((options.frozenColumn > -1) && (k > options.frozenColumn)) {
                                    newCanvasWidthR += c.width;
                                } else {
                                    newCanvasWidthL += c.width;
                                }
                            }


                            if (options.forceFitColumns) {
                                x = -d;
                                for (j = i + 1; j < columnElements.length; j++) {
                                    c = columns[j];
                                    if (c.resizable) {
                                        actualMinWidth = Math.max(c.minWidth || 0, absoluteColumnMinWidth);
                                        if (x && c.previousWidth + x < actualMinWidth) {
                                            x += c.previousWidth - actualMinWidth;
                                            c.width = actualMinWidth;
                                        } else {
                                            c.width = c.previousWidth + x;
                                            x = 0;
                                        }

                                        if ((options.frozenColumn > -1) && (j > options.frozenColumn)) {
                                            newCanvasWidthR += c.width;
                                        } else {
                                            newCanvasWidthL += c.width;
                                        }
                                    }
                                }
                            } else if (options.syncColumnCellResize) {
                                setCanvasWidth(originalCanvasWidth + d);
                            }
                        }
                        applyColumnHeaderWidths();
                        if (options.syncColumnCellResize) {
                            applyColumnWidths();
                        }
                    })
                    .bind("dragend", function(e,dd) {
                        var newWidth;
                        $(this).parent().removeClass("slick-header-column-active");
                        for (j = 0; j < columnElements.length; j++) {
                            c = columns[j];
                            newWidth = $(columnElements[j]).outerWidth(true);

                            if (c.previousWidth !== newWidth && c.rerenderOnResize) {
                                invalidateAllRows();
                            }
                        }
                        applyColumnWidths();
                        resizeCanvas();
                        trigger(self.onColumnsResized, {});
                    });
            });
        }

        function getVBoxDelta($el) {
            var p = ["borderTopWidth", "borderBottomWidth", "paddingTop", "paddingBottom"];
            var delta = 0;
            $.each(p, function(n,val) { delta += parseFloat($el.css(val)) || 0; });
            return delta;
        }
        /**
         * 测量单元格padding&&border 设置absoluteColumnMinWidth
         */
        // TODO HEADERS lins
        function measureCellPaddingAndBorder() {
            //var r = $("<div class='slick-row'/>").appendTo($canvas);
            var h = ["borderLeftWidth", "borderRightWidth", "paddingLeft", "paddingRight"];
            var v = ["borderTopWidth", "borderBottomWidth", "paddingTop", "paddingBottom"];
            //var el = $("<div class='ui-state-default slick-header-column'>-</div>").appendTo($headers);
            var e2 = $("<div class='slick-cell'></div>").appendTo($canvas);
            headerColumnWidthDiff = headerColumnHeightDiff = 9;
            cellWidthDiff = cellHeightDiff = 0;
            for (var i  = 0; i < h.length ; i ++) {
                //headerColumnWidthDiff += parseFloat(el.css(h[i])) || 0;
                //headerColumnHeightDiff += parseFloat(el.css(v[i])) || 0;
                cellWidthDiff += parseFloat(e2.css(h[i])) || 0;
                cellHeightDiff += parseFloat(e2.css(v[i])) || 0;
            }
            // el.remove();
            e2.remove();
            // r.remove();
            absoluteColumnMinWidth = headerColumnWidthDiff > cellWidthDiff ?headerColumnWidthDiff:cellWidthDiff;
        }
        /**
         * 在head部分添加css样式
         */
        function createCssRules() {
            $style = $("<style type='text/css' rel='stylesheet' />").appendTo($("head"));
            var rowHeight = (options.rowHeight - cellHeightDiff);

            var rules = [
                "." + uid + " .slick-header-column { left: 1000px; }",
                "." + uid + " .slick-top-panel { height:" + options.topPanelHeight + "px; }",
                "." + uid + " .slick-headerrow-columns { height:" + options.headerRowHeight + "px; }",
                "." + uid + " .slick-cell { height:" + rowHeight + "px; }",
                "." + uid + " .slick-row { width:" + getRowWidth() + "px; height:" + options.rowHeight + "px; }",
                "." + uid + " .lr { float:none; position:absolute; }"
            ];

            var rowWidth = getRowWidth();
            var x = 0, w;
            for (var i=0; i<columns.length; i++) {
                w = columns[i].width;
                rules.push("." + uid + " .l" + i + " { left: " + x + "px; }");
                rules.push("." + uid + " .r" + i + " { right: " + (rowWidth - x - w) + "px; }");
                rules.push("." + uid + " .c" + i + " { width:" + (w - cellWidthDiff) + "px; }");
                if (options.frozenColumn == i) {
                    x = 0;
                } else {
                    x += columns[i].width;
                }
            }


            if ($style[0].styleSheet) { // IE
                $style[0].styleSheet.cssText = rules.join(" ");
            }
            else {
                $style[0].appendChild(document.createTextNode(rules.join(" ")));
            }

            var sheets = document.styleSheets;
            for (var i=0; i<sheets.length; i++) {
                if ((sheets[i].ownerNode || sheets[i].owningElement) == $style[0]) {
                    stylesheet = sheets[i];
                    break;
                }
            }
        }
        function findCssRule(selector) {
            var rules = (stylesheet.cssRules || stylesheet.rules);

            for (var i=0; i<rules.length; i++) {
                if (rules[i].selectorText == selector)
                    return rules[i];
            }

            return null;
        }

        function removeCssRules() {
            $style.remove();
            stylesheet = null;
        }

        function destroy() {
            getEditorLock().cancelCurrentEdit();

            trigger(self.onBeforeDestroy, {});

            for (var i = 0; i < plugins.length; i++) {
                unregisterPlugin(plugins[i]);
            }

            if (options.enableColumnReorder && $headers.sortable)
                $headers.sortable("destroy");

            unbindAncestorScrollEvents();
            $container.unbind(".slickgrid");
            removeCssRules();

            $canvas.unbind("draginit dragstart dragend drag");
            $container.empty().removeClass(uid);
        }


        // ////////////////////////////////////////////////////////////////////////////////////////////
        // General

        function trigger(evt, args, e) {
            e = e || new Slick.EventData();
            args = args || {};
            args.grid = self;
            return evt.notify(args, e, self);
        }

        function getEditorLock() {
            return options.editorLock;
        }

        function getEditController() {
            return editController;
        }

        function getColumnIndex(id) {
            return columnsById[id];
        }

        function autosizeColumns() {
            if (viewportW <= 0 ) resizeCanvas();
            //bug，最大化表格自适应
            viewportW = parseFloat($.css($container[0], "width", false));
            if(viewportW == 0){
                if($container.parent().width() != 0 && $container.parent().width() < 10000){
                    viewportW = $container.parent().width();
                }else if($container.parents("div.tabs-panels").length > 0){
                    if($container.parents(".ez-fl").size()>0){
                        viewportW = $container.parents("div.tabs-panels").eq(0).width()*$container.parents(".ez-fl").width()/100;
                    }else{
                        viewportW = $container.parents("div.tabs-panels").eq(0).width()-12;
                    }
                }
            }
            var i, c,
                widths = [],
                shrinkLeeway = 0,
                availWidth = (options.autoHeight ? viewportW : viewportW - scrollbarDimensions.width), // with
            // AutoHeight,
            // we
            // do
            // not
            // need
            // to
            // accomodate
            // the
            // vertical
            // scroll
            // bar
                total = 0,
                existingTotal = 0;

            for (i = 0; i < columns.length; i++) {
                c = columns[i];
                c.width = Math.floor(c.width);
                widths.push(c.width);
                existingTotal += c.width;
                shrinkLeeway += c.width - Math.max(c.minWidth || 0, absoluteColumnMinWidth);
            }

            total = existingTotal;
            invalidateAllRows();
            // shrink
            while (total > availWidth) {
                if (!shrinkLeeway) { return; }
                var shrinkProportion = (total - availWidth) / shrinkLeeway;
                for (i = 0; i < columns.length && total > availWidth; i++) {
                    c = columns[i];
                    if (!c.resizable || c.minWidth === c.width || c.width === absoluteColumnMinWidth) { continue; }
                    var shrinkSize = Math.floor(shrinkProportion * (c.width - Math.max(c.minWidth || 0, absoluteColumnMinWidth))) || 1;
                    total -= shrinkSize;
                    widths[i] -= shrinkSize;
                }
            }
            if (total <= 0) return;
            // grow
            var previousTotal = total;
            while (total < availWidth) {
                var growProportion = availWidth / total;
                for (i = 0; i < columns.length && total < availWidth; i++) {
                    c = columns[i];
                    if (!c.resizable || c.maxWidth <= c.width) { continue; }
                    var growSize = Math.min(Math.floor(growProportion * c.width) - c.width, (c.maxWidth - c.width) || 1000000) || 1;
                    total += growSize;
                    widths[i] += growSize;
                }
                if (previousTotal == total) break; // if total is not changing,
                // will result in infinite
                // loop
                previousTotal = total;
            }

            for (i=0; i<columns.length; i++) {
                columns[i].width = widths[i];
            }

            applyColumnHeaderWidths();
            applyColumnWidths();
            resizeCanvas();
            //过滤框的resize
            updateHeaderRow();
        }

        function applyColumnHeaderWidths() {
            var h;
            for (var i = 0, headers = $headers.children(), ii = headers.length; i < ii; i++) {
                h = $(headers[i]);
                if (h.width() !== columns[i].width - headerColumnWidthDiff) {
                    h.width(columns[i].width - headerColumnWidthDiff);
                }
            }
        }

        function applyColumnWidths() {
            var rowWidth = getRowWidth();
            var x = 0, w, rule;
            for (var i = 0; i < columns.length; i++) {
                w = columns[i].width;

                rule = findCssRule("." + uid + " .c" + i);
                rule.style.width = (w - cellWidthDiff) + "px";

                rule = findCssRule("." + uid + " .l" + i);
                rule.style.left = x + "px";

                rule = findCssRule("." + uid + " .r" + i);
                rule.style.right = (rowWidth - x - w) + "px";
                //rule.style.right = (((options.frozenColumn != -1 && i > options.frozenColumn) ? canvasWidthR : canvasWidthL) - x - w) + "px";

                if (options.frozenColumn == i) {
                    x = 0;
                } else {
                    x += columns[i].width;
                }
            }

            rule = findCssRule("." + uid + " .slick-row");
            rule.style.width = (rowWidth > 0?rowWidth : 0 )+ "px";
        }
        // TODO SETSORT
        /**
         * 添加一些排序样式
         */
        function setSortColumn(columnId, ascending) {
            sortColumnId = columnId;
            sortAsc = ascending;
            var columnIndex = getColumnIndex(sortColumnId);// 得到此id的列序号

            $headers.children().removeClass("slick-header-column-sorted");
            $headers.find(".slick-sort-indicator").removeClass("slick-sort-indicator-asc slick-sort-indicator-desc");

            if (columnIndex != null) {
                $headers.children().eq(columnIndex)
                    .addClass("slick-header-column-sorted")
                    .find(".slick-sort-indicator")
                    .addClass(sortAsc ? "slick-sort-indicator-asc" : "slick-sort-indicator-desc");
            }
        }

        function handleSelectedRangesChanged(e, ranges) {
            selectedRows = [];
            var hash = {};
            for (var i = 0; i < ranges.length; i++) {
                for (var j = ranges[i].fromRow; j <= ranges[i].toRow; j++) {
                    if(isDataRow(j)){
                        if (!hash[j]) {  // prevent duplicates
                            selectedRows.push(j);
                        }
                        hash[j] = {};
                        for (var k = ranges[i].fromCell; k <= ranges[i].toCell; k++) {
                            if (canCellBeSelected(j, k)) {
                                hash[j][columns[k].id] = options.selectedCellCssClass;
                            }
                        }
                    }
                }
            }

            setCellCssStyles(options.selectedCellCssClass, hash);

            if (typeof options.onSelectChange == "function") { // lins添加onselectchange
                options.onSelectChange(getSelectRowsDataToObj(), getSelectedRows().length);
            }
            trigger(self.onSelectedRowsChanged, {rows:getSelectedRows(), data:getSelectRowsDataToObj()}, e);
        }

        /**
         * 判断是否是正常数据行
         * @param row
         * @returns {boolean}
         */
        function isDataRow(row){
            return !dataView.getItem(row).__nonDataRow;
        }

        function getColumns() {
            return columns;
        }
        function getHiddenColumns(){
            return hiddenColumns;
        }

        function setColumns(columnDefinitions, reorder) {
            columns = columnDefinitions;
            invalidateAllRows();
            createColumnHeaders(reorder);
            removeCssRules();
            createCssRules();
            resizeAndRender();
            handleScroll();
            if (options.columnFilter) {
                $(getHeaderRow()).delegate(":input", "change keyup", function (e) {
                    columnFilters[$(this).data("columnId")] = $.trim($(this).val());
                    dataView.refresh();
                });
                updateHeaderRow();
            }

        }

        function getOptions() {
            return options;
        }

        function setOptions(args) {
            if (!getEditorLock().commitCurrentEdit()) {
                return;
            }

            makeActiveCellNormal();

            if (options.enableAddRow !== args.enableAddRow) {
                invalidateRow(getDataLength());
            }

            options = $.extend(options,args);

            render();
        }

        function setData(newData,scrollToTop) {
            invalidateAllRows();
            var tmp = [];
            if(!jQuery.isArray(newData)){
                tmp = newData.list || [];
            }
            for(var i=0;i<tmp.length;i++){
                tmp[i][pId] = i;
            }
            data = tmp;
            if (scrollToTop)
                scrollTo(0);
            return tmp;
        }

        function getData() {
            return data;
        }

        function getDataLength() {
            if (data.getLength) {
                return data.getLength();
            }
            else {
                return data.length;
            }
        }
        /**
         * 获得数据内容
         */
        function getDataItem(i) {
            if (data.getItem) {
                return data.getItem(i);
            } else if (data.getData) {
                return data.getData(i);
            }
            else {
                return data[i];
            }
        }

        function getTopPanel() {
            return $topPanel[0];
        }

        function showTopPanel() {
            options.showTopPanel = true;
            $topPanelScroller.slideDown("fast", resizeCanvas);
        }

        function hideTopPanel() {
            options.showTopPanel = false;
            $topPanelScroller.slideUp("fast", resizeCanvas);
        }

        function showHeaderRowColumns() {
            options.showHeaderRow = true;
            //$headerRowScroller.slideDown("fast", resizeCanvas);//表头老式搜索不要了
        }

        function hideHeaderRowColumns() {
            options.showHeaderRow = false;
            //$headerRowScroller.slideUp("fast", resizeCanvas);//表头老式搜索不要了
        }

        // ////////////////////////////////////////////////////////////////////////////////////////////
        // Rendering / Scrolling
        // TODO SCROLLTO
        function scrollTo(y) {
            y = Math.max(y, 0);
            y = Math.min(y, th - $viewportScrollContainerY.height() + ((viewportHasHScroll || options.frozenColumn > -1) ? scrollbarDimensions.height : 0));

            var oldOffset = offset;

            page = Math.min(n-1, Math.floor(y / ph)) || 0;//解决数据量多时，鼠标滚动第一页跳的情况
            offset = Math.round(page * cj);
            var newScrollTop = y - offset;

            if (offset != oldOffset) {
                var range = getVisibleRange(newScrollTop);// 获取可渲染区域
                //cleanupRows(range.top,range.bottom);
                cleanupRows(range);
                updateRowPositions();
            }
                //change by cy 解决表格初始化有数据的时候render不完全的情况
            if (!isNaN(newScrollTop) && prevScrollTop != newScrollTop) {
                scrollDir = (prevScrollTop + oldOffset < newScrollTop + offset) ? 1 : -1;
                lastRenderedScrollTop = (scrollTop = prevScrollTop = newScrollTop);

                if (options.frozenColumn > -1) {
                    $viewportL[0].scrollTop = newScrollTop;
                }
                $viewportScrollContainerY[0].scrollTop = newScrollTop;

                trigger(self.onViewportChanged, {});
            }
        }

        function defaultFormatter(row, cell, value, columnDef, dataContext) {
            return (value === null || value === undefined) ? "" : value;
        }

        function getFormatter(row, column) {
            var rowMetadata = data.getItemMetadata && data.getItemMetadata(row);

            // look up by id, then index
            var columnOverrides = rowMetadata &&
                rowMetadata.columns &&
                (rowMetadata.columns[column.id] || rowMetadata.columns[getColumnIndex(column.id)]);

            return (columnOverrides && columnOverrides.formatter) ||
                (rowMetadata && rowMetadata.formatter) ||
                column.formatter ||
                (options.formatterFactory && options.formatterFactory.getFormatter(column)) ||
                defaultFormatter;
        }

        function getEditor(row, cell) {
            var column = columns[cell];
            var rowMetadata = data.getItemMetadata && data.getItemMetadata(row);
            var columnMetadata = rowMetadata && rowMetadata.columns;

            if (columnMetadata && columnMetadata[column.id] && columnMetadata[column.id].editor !== undefined) {
                return columnMetadata[column.id].editor;
            }
            if (columnMetadata && columnMetadata[cell] && columnMetadata[cell].editor !== undefined) {
                return columnMetadata[cell].editor;
            }

            return column.editor || (options.editorFactory && options.editorFactory.getEditor(column));
        }
        /**
         * important !!!!!!!!!!!!!!!!!!!!!!!!!!!!! 不要随意修改
         *
         * @author lins
         */
        function appendRowHtml(stringArrayL, stringArrayR, row) {
            var d = getDataItem(row);
            var dataLoading = row < getDataLength() && !d;
            var cellCss;
            var rowCss = "slick-row odd" ;

            var metadata = data.getItemMetadata && data.getItemMetadata(row);

            if (metadata && metadata.cssClasses) {
                rowCss += " " + metadata.cssClasses;
            }
            var rowHtml;
            if (typeof options.rowColorfn == "function") {
                var datColor = options.rowColorfn(data.getItem(row));
                if (datColor) {
                    rowHtml="<div class='ui-widget-content " + rowCss + "' row='" + row + "' style='color:" + datColor + ";top:" + (options.rowHeight*row-offset) + "px'>";
                } else {
                    rowHtml="<div class='ui-widget-content " + rowCss + "' row='" + row + "' style='top:" + (options.rowHeight*row-offset) + "px'>";
                }
            } else {
                rowHtml="<div class='ui-widget-content " + rowCss + "' row='" + row + "' style='top:" + (options.rowHeight*row-offset) + "px'>";
            }
            stringArrayL.push(rowHtml);
            if (options.frozenColumn > -1) {
                stringArrayR.push(rowHtml);
            }


            var colspan,m;
            // var rowHasColumnData = metadata && metadata.columns;

            for (var i=0, cols=columns.length; i<cols; i++) {
                 m = columns[i];
                var groupColumn;
                if (metadata && metadata.columns){groupColumn = metadata.columns[columns[i].id] || metadata.columns[i];}
                colspan = getColspan(row, i);
                // Do not render cells outside of the viewport.
                    if (( options.frozenColumn > -1 ) && ( i > options.frozenColumn )) {
                        appendCellHtml(stringArrayR, row, i, colspan, d,groupColumn);
                    } else {
                        appendCellHtml(stringArrayL, row, i, colspan, d,groupColumn);
                    }
                if (colspan)
                    i += (colspan - 1);
            }

            stringArrayL.push("</div>");
            if (options.frozenColumn > -1) {
                stringArrayR.push("</div>");
            }
        }


        function appendCellHtml(stringArray, row, cell, colspan, d,groupColumn){
            var m = columns[cell];
            var cellCss;
            if (d.__group != true) {
                cellCss = "slick-cell lr l" + cell + " r" + Math.min(columns.length -1, cell + colspan - 1) + (m.cssClass ? " " + m.cssClass : "");
            } else{
                cellCss = "slick-cell lr l" + cell + " r" + Math.min( ((options.frozenColumn>-1)?options.frozenColumn:columns.length -1), cell + colspan - 1) + (groupColumn.cssClass ? " " + groupColumn.cssClass : "");
            }

            if (row === activeRow && cell === activeCell) {
                cellCss += (" active");
            }

            for (var key in cellCssClasses) {
                if (cellCssClasses[key][row] && cellCssClasses[key][row][m.id]) {
                    cellCss += (" " + cellCssClasses[key][row][m.id]);
                }
            }
            if ((m.dataType == "number" || m.dataType == "date") && d.__group != true && d.__groupTotals != true) {
                if (m.dataAlign != undefined)
                    stringArray.push("<div class='" + cellCss + "' style='text-align:" + m.dataAlign + "'>");
                else
                    stringArray.push("<div class='" + cellCss + "' style='text-align:right'>");
            } else if(m.dataAlign != undefined && d.__group != true && d.__groupTotals != true) {
                stringArray.push("<div class='" + cellCss + "' style='text-align:" + m.dataAlign + "'>");
            } else if(m.totalsAlign !=undefined && d.__groupTotals == true){
                stringArray.push("<div class='" + cellCss + "' style='text-align:"+m.totalsAlign+"'>");
            } else{
                stringArray.push("<div class='" + cellCss + "'>");
            }
            if (d) {
                var htmlData = getFormatter(row, m)(row, cell, d[m.field], m, d);
                if (m.dataType == "date"){
                    htmlData = htmlData.substring(0,10);
                }
                if (m.id === "__no" && d.__group != true && d.__groupTotals != true) {
                    htmlData = dataView.getRowSnById(d[pId]);
                } else
                    htmlData = htmlData;
                stringArray.push(htmlData);
            }
            //modify by cy 图标改为字体图标
            if (m.icon && !d.__groupTotals) {
                var center = "<center>",iconStyle= m.iconStyle?m.iconStyle:"";
                center +=  "<div title='单击' class=' faceIcon "+ m.icon +" ' style='cursor:pointer;color: #999;"+iconStyle+"'></div>";
                center += "</center>";
                stringArray.push(center);
            }
            stringArray.push("</div>");
        }

        function cleanupRows(rangeToKeep) {
            for (var i in rowsCache) {
                if (((i = parseInt(i, 10)) !== activeRow) && (i < rangeToKeep.top || i > rangeToKeep.bottom)) {
                    removeRowFromCache(i);
                }
            }
        }

        function invalidate() {
            updateRowCount();
            invalidateAllRows();
            render();
        }

        function invalidateAllRows() {
            if (currentEditor) {
                makeActiveCellNormal();
            }
            for (var row in rowsCache) {
                removeRowFromCache(row);
            }
        }

        function removeRowFromCache(row) {
            var node = rowsCache[row];
            if (!node) { return; }
            $canvasL[0].removeChild(node[0]);
            if(node[1]){
                $canvasR[0].removeChild(node[1]);
            }


            delete rowsCache[row];
            delete postProcessedRows[row];
            renderedRows--;
            counter_rows_removed++;
        }

        function invalidateRows(rows) {
            var i, rl;
            if (!rows || !rows.length) { return; }
            scrollDir = 0;
            for (i=0, rl=rows.length; i<rl; i++) {
                if (currentEditor && activeRow === i) {
                    makeActiveCellNormal();
                }

                if (rowsCache[rows[i]]) {
                    removeRowFromCache(rows[i]);
                }
            }
        }

        function invalidateRow(row) {
            invalidateRows([row]);
        }

        function updateCell(row,cell) {
            var cellNode = getCellNode(row,cell);
            if (!cellNode) {
                return;
            }

            var m = columns[cell], d = getDataItem(row);
            if (currentEditor && activeRow === row && activeCell === cell) {
                currentEditor.loadValue(d);
            }
            else {
                cellNode.innerHTML = d ? getFormatter(row, m)(row, cell, d[m.field], m, d) : "";
                invalidatePostProcessingResults(row);
            }
        }

        function updateRow(row) {
            if (!rowsCache[row]) { return; }

            $(rowsCache[row]).children().each(function(i) {
                var m = columns[i];
                if (row === activeRow && i === activeCell && currentEditor) {
                    currentEditor.loadValue(getDataItem(activeRow));
                }
                else if (getDataItem(row)) {
                    if(m.id == "__no"){
                        this.innerHTML = getFormatter(row, m)(row, i, getDataItem(row)[m.field] + 1, m, getDataItem(row));
                    }else if(m.icon){// liys修改，编辑表格后，icon列图标消失
                        // this.innerHTML = "<center><div title='单击' class='" + m.icon + "' style='cursor:pointer;height:16px;width:16px;margin-top:3px'></div></center>"
                        this.innerHTML = "<center><div title='"+Base.I18n.getLangText('taface.module.grid.click')+"'  class='" + m.icon + "' style='cursor:pointer;height:16px;width:16px;margin-top:3px'></div></center>"

                    } else {
                        if(m.operate){
                           //先这样改  如果有操作就不渲染这一个格子  这个解决版本显然不是最好的,之后做调整 cy
                        }else {
                            this.innerHTML = getFormatter(row, m)(row, i, getDataItem(row)[m.field], m, getDataItem(row));
                            //change by zzb 编辑框关闭后二次渲染的问题
                            if (m.dataType == "date"){
                                this.innerHTML = this.innerHTML.substring(0,10);
                            }
                        }

                    }
                }
                else {
                    innerHTML = "";
                }
            });

            invalidatePostProcessingResults(row);
        }

        function getViewportHeight() {
            var off = 31;//liys修改，datagrid高度问题，以前为25   change by zzb 以前为37
            if (options.showToolpaging) off = 64;
            return parseFloat($.css($container[0], "height", false)) -
                options.headerHeight -
                getVBoxDelta($headers) -
                (options.showTopPanel ? options.topPanelHeight + getVBoxDelta($topPanelScroller) : 0) -
                // (options.showHeaderRow ? options.headerRowHeight + getVBoxDelta($headerRowScroller) : 0)-
                (options.showHeaderSeach ? $headerSearchTopPanel.outerHeight()  : 0)-//add by cy 减去头部搜索框高度
                off;
        }



        //重置表格内容可见区域高度
        function resizeViewortHeight(){
            // modify by xp 非分组表格统计数据时，需要减去头部的统计条高度

            if(options.hasTotals && self.getDataView().getItems().length!=0  && options.groupingBy === "_onlyTotals"){
                options.showTopPanel = true;

            }

            if (options.autoHeight) {
                viewportH = options.rowHeight * (getDataLength() + (options.enableAddRow ? 1 : 0) + (options.leaveSpaceForNewRows? numVisibleRows - 1 : 0));
            }
            else {
                viewportH = getViewportHeight();
            }

            // liys,如果存在表头换行,则重新计算高度
            if(options.headerColumnsRows && !isNaN(options.headerColumnsRows) && options.headerColumnsRows > 1){
                viewportH = viewportH - 22*(options.headerColumnsRows-1);
            }

            $viewport.height(viewportH);

            //add by cy canva位置
            var toph= options.headerHeight + $headerScroller.outerHeight() +
                //(options.showHeaderRow ? options.headerRowHeight + getVBoxDelta($headerRowScroller) : 0)+
                (options.showHeaderSeach ? $headerSearchTopPanel.outerHeight()  : 0);
            $paneL.css("top",toph);
            $paneR.css("top",toph);
        }

        function resizeCanvas(isNotDefault) {

            resizeViewortHeight();
            numVisibleRows = Math.ceil(viewportH / options.rowHeight);
            viewportW = parseFloat($.css($container[0], "width", false));


            if(viewportW == 0){
                if($container.parent().width() != 0 && $container.parent().width() < 10000){
                    viewportW = $container.parent().width();
                }else if($container.parents("div.tabs-panels").length > 0){
                    if($container.parents(".ez-fl").size()>0){
                        viewportW = $container.parents("div.tabs-panels").eq(0).width()*$container.parents(".ez-fl").width()/100;
                    }else{
                        viewportW = $container.parents("div.tabs-panels").eq(0).width()-12;
                    }
                }
            }


            updateRowCount();
            render();
            if (!isNotDefault) {
                var box = absBox($container[0]).width;
                defaultWidth = absBox($container[0]).width;
                defaultHeight = absBox($container[0]).height;
            }


        }


        function resizeAndRender() {
            if (options.forceFitColumns) {
                // majie,判断datagriditem的宽度是否缩减显示
                if(!Base.globvar.columnsWidthsOverView){
                    autosizeColumns();
                }else{
                    if(Base.globvar.columnsWidthsOverView){
                        var totalWidth=0
                        for (i = 0; i < columns.length; i++) {
                            c = columns[i];
                            totalWidth += c.width;
                        }
                        if(totalWidth>viewportW && viewportW > 0){
                            resizeCanvas();
                        }else{
                            autosizeColumns();
                        }
                    }
                }

            } else {
                resizeCanvas();
            }
        }

        function updateRowCount() {
            var newRowCount = getDataLength() + (options.enableAddRow?1:0) + (options.leaveSpaceForNewRows?numVisibleRows-1:0);
            var oldH = h;

            // remove the rows that are now outside of the data range
            // this helps avoid redundant calls to .removeRow() when the size of
            // the data decreased by thousands of rows
            var l = options.enableAddRow ? getDataLength() : getDataLength() - 1;
            for (var i in rowsCache) {
                if (i >= l) {
                    removeRowFromCache(i);
                }
            }
            th = Math.max(options.rowHeight * newRowCount, viewportH - scrollbarDimensions.height);
            if (th < getMaxSupportedCssHeight()) {
                // just one page
                h = ph = th;
                n = 1;
                cj = 0;
            }
            else {
                // break into pages
                h = getMaxSupportedCssHeight();
                ph = h / 100;
                n = Math.floor(th / ph);
                cj = (th - h) / (n - 1);
            }

            if (h !== oldH) {
                // TODO 林森添加
                // liys,如果存在表头换行,则重新计算高度
                if(options.headerColumnsRows && !isNaN(options.headerColumnsRows) && options.headerColumnsRows > 1){
                    h = h - 22*(options.headerColumnsRows-1);
                }
                if (options.showToolpaging){
                    // h = h - 10;
                    $canvas.css("height", h-2);
                } else
                    $canvas.css("height", h-2);//change by zzb
                scrollTop = $viewport[0].scrollTop;
            }

            var oldScrollTopInRange = (scrollTop + offset <= th - viewportH);

            if (th == 0 || scrollTop == 0) {
                page = offset = 0;
            }
            else if (oldScrollTopInRange) {
                // maintain virtual position
                scrollTo(scrollTop+offset);
            }
            else {
                // scroll to bottom
                scrollTo(th-viewportH);
            }

            if (h != oldH && options.autoHeight) {
                resizeCanvas();
            }

            updateCanvasWidth(false);
        }


        function getVisibleRange(viewportTop,viewportLeft) {
            if (viewportTop == null) {
                viewportTop = scrollTop;
            }
            if (viewportLeft == null) {
                viewportLeft = scrollLeft;
            }
            return {
                top: Math.floor((scrollTop+offset)/options.rowHeight),
                bottom: Math.ceil((scrollTop+offset+viewportH)/options.rowHeight),
                leftPx: viewportLeft,
                rightPx: viewportLeft + viewportW
            };
        }

        function getRenderedRange(viewportTop,viewportLeft) {
            var range = getVisibleRange(viewportTop,viewportLeft);
            var buffer = Math.round(viewportH/options.rowHeight);
            var minBuffer = 3;

            if (scrollDir == -1) {
                range.top -= buffer;
                range.bottom += minBuffer;
            }
            else if (scrollDir == 1) {
                range.top -= minBuffer;
                range.bottom += buffer;
            }
            else {
                range.top -= minBuffer;
                range.bottom += minBuffer;
            }

            range.top = Math.max(0,range.top);
            range.bottom = Math.min(options.enableAddRow ? getDataLength() : getDataLength() - 1,range.bottom);
            range.leftPx = Math.max(0, range.leftPx);
            range.rightPx = Math.min(canvasWidth, range.rightPx);

            return range;
        }
        /**
         * 渲染行
         */
        function renderRows(range) {
            var i, l,
                parentNodeL = $canvas[0],
                parentNodeR = $canvas[1],
                rowsBefore = renderedRows,
                stringArray = [],
                stringArrayL=[],
                stringArrayR=[],
                rows = [],
                startTimestamp = new Date(),
                needToReselectCell = false;

            for (i = range.top; i <= range.bottom; i++) {
                if (rowsCache[i]) { continue; }
                renderedRows++;
                rows.push(i);
                //var sn = i; // lins添加用于计算sn号
                //appendRowHtml(stringArray, i, sn);
                appendRowHtml(stringArrayL, stringArrayR, i);
                if (activeCellNode && activeRow === i) {
                    needToReselectCell = true;
                }
                counter_rows_rendered++;
            }

            var x = document.createElement("div"),
                xRight = document.createElement("div");

            x.innerHTML = stringArrayL.join("");
            xRight.innerHTML = stringArrayR.join("");

            for (i = 0, l = x.childNodes.length; i < l; i++) {
                //rowsCache[rows[i]] = parentNode.appendChild(x.firstChild);
                if(options.frozenColumn > -1){
                    //rowsCache[rows[i]]=parentNodeL.appendChild(x.firstChild);
                    //rowsCache[rows[i]]= rowsCache[rows[i]]+""+ parentNodeR.appendChild(xRight.firstChild);

                    var node=$()
                        .add($(x.firstChild).appendTo($canvasL))
                        .add($(xRight.firstChild).appendTo($canvasR));
                    rowsCache[rows[i]]=node;

                }else {
                    rowsCache[rows[i]]=$().add($(x.firstChild).appendTo($canvasL));
                }
            }

            if (needToReselectCell) {
                activeCellNode = getCellNode(activeRow,activeCell);
            }

            if (renderedRows - rowsBefore > 5) {
                avgRowRenderTime = (new Date() - startTimestamp) / (renderedRows - rowsBefore);
            }

        }

        function startPostProcessing() {
            if (!options.enableAsyncPostRender) { return; }
            clearTimeout(h_postrender);
            h_postrender = setTimeout(asyncPostProcessRows, options.asyncPostRenderDelay);
        }

        function invalidatePostProcessingResults(row) {
            delete postProcessedRows[row];
            postProcessFromRow = Math.min(postProcessFromRow,row);
            postProcessToRow = Math.max(postProcessToRow,row);
            startPostProcessing();
        }

        function updateRowPositions() {
            for (var row in rowsCache) {
                //rowsCache[row].css("top",(row*options.rowHeight-offset) + "px");
                rowsCache[row][0].style.top = (row*options.rowHeight-offset) + "px";
            }
        }
        /**
         * 渲染合计行 change  by cy
         */
        function  renderTotalsRow(){

            var stringArrayL = [];
            var stringArrayR = [];

            var row = dataView.getItems().length;
            var d = getDataItem(row);
            var dataLoading = row < getDataLength() && !d;
            var cellCss;
            var rowCss = "slick-row odd" ;

            var metadata = data.getItemMetadata && data.getItemMetadata(row);

            if (metadata && metadata.cssClasses) {
                rowCss += " " + metadata.cssClasses;
            }
            var rowHtml="<div class='ui-widget-content " + rowCss + "' row='" + row + "'>";
            stringArrayL.push(rowHtml);
            if (options.frozenColumn > -1) {
                stringArrayR.push(rowHtml);
            }
            var colspan;
            // var rowHasColumnData = metadata && metadata.columns;

            for (var i=0, cols=columns.length; i<cols; i++) {
                var stringArray = [];
                var m = columns[i];
                colspan = getColspan(row, i);
                if (d.__group != true) {
                    cellCss = "slick-cell lr l" + i + " r" + Math.min(columns.length -1, i + colspan - 1) + (m.cssClass ? " " + m.cssClass : "");
                } else
                    cellCss = "slick-cell lr l" + i + " r" + Math.min(columns.length -1, i + colspan - 1);


                if (row === activeRow && i === activeCell) {
                    cellCss += (" active");
                }

                for (var key in cellCssClasses) {
                    if (cellCssClasses[key][row] && cellCssClasses[key][row][m.id]) {
                        cellCss += (" " + cellCssClasses[key][row][m.id]);
                    }
                }
                if(m.totalsAlign !=undefined && d.__groupTotals == true){
                    stringArray.push("<div class='" + cellCss + "' style='text-align:"+m.totalsAlign+"'>");
                } else{
                    stringArray.push("<div class='" + cellCss + "'>");
                }
                if (d) {
                    var htmlData = getFormatter(row, m)(row, i, d[m.field], m, d);
                    if (m.dataType == "date"){
                        htmlData = htmlData.substring(0,10);
                    }
                    if (m.id === "__no" && d.__group != true && d.__groupTotals != true) {
                        htmlData = Number(row) + 1;
                    } else
                        htmlData = htmlData;
                    stringArray.push(htmlData);
                }
                stringArray.push("</div>");
                if (( options.frozenColumn > -1 ) && ( i > options.frozenColumn )) {
                    stringArrayR.push(stringArray.join(""))
                } else {
                    stringArrayL.push(stringArray.join(""))
                }
                if (colspan)
                    i += (colspan - 1);
            }

            stringArrayL.push("</div>");
            if (options.frozenColumn > -1) {
                stringArrayR.push("</div>");
            }

                $topPanelR.html(stringArrayR.join(""));
                $topPanelL.html(stringArrayL.join(""));
                $topPanelScroller.show();
                options.showTopPanel = true;
                resizeViewortHeight();

        }
        /**
         * 渲染
         */
        function render() {

            var visible = getVisibleRange();
            var rendered = getRenderedRange();

            var row = dataView.getItems().length;
            var d = getDataItem(row);

            if (d && options.hasTotals && options.groupingBy === "_onlyTotals") {
                renderTotalsRow();
            }
            // remove rows no longer in the viewport
            cleanupRows(rendered);

            // add new rows
            renderRows(rendered);

            postProcessFromRow = visible.top;
            postProcessToRow = Math.min(options.enableAddRow ? getDataLength() : getDataLength() - 1, visible.bottom);
            startPostProcessing();

            lastRenderedScrollTop = scrollTop;
            h_render = null;

        }
        function handleMouseWheel(event, delta, deltaX, deltaY) {
            scrollTop = Math.max(0, $viewportScrollContainerY[0].scrollTop - (deltaY * options.rowHeight));
            scrollLeft = $viewportScrollContainerX[0].scrollLeft + (deltaX * 10);
            _handleScroll(true);
            event.preventDefault();
        }

        function handleScroll(){
            scrollTop = $viewportScrollContainerY[0].scrollTop;
            scrollLeft = $viewportScrollContainerX[0].scrollLeft;
            _handleScroll(false);
        }

        function _handleScroll(isMouseWheel) {
            //    scrollTop = $viewport[0].scrollTop;
            //var scrollLeft = $viewport[0].scrollLeft;

            //scrollTop = $viewportScrollContainerY[0].scrollTop;
            //scrollLeft = $viewportScrollContainerX[0].scrollLeft;
            var maxScrollDistanceY = $viewportScrollContainerY[0].scrollHeight - $viewportScrollContainerY[0].clientHeight;
            var maxScrollDistanceX = $viewportScrollContainerY[0].scrollWidth - $viewportScrollContainerY[0].clientWidth;

            // Ceiling the max scroll values
            if (scrollTop > maxScrollDistanceY) {
                scrollTop = maxScrollDistanceY;
            }
            if (scrollLeft > maxScrollDistanceX) {
                scrollLeft = maxScrollDistanceX;
            }

            var scrollDist = Math.abs(scrollTop - prevScrollTop);

            if (scrollLeft !== prevScrollLeft)  {
                prevScrollLeft = scrollLeft;
                $headerScrollContainer[0].scrollLeft = scrollLeft;
                $topPanelScrollerContainer[0].scrollLeft = scrollLeft;
                //$headerRowScrollContainer[0].scrollLeft = scrollLeft;
            }

            if (scrollDist) {
                scrollDir = prevScrollTop < scrollTop ? 1 : -1;
                prevScrollTop = scrollTop;

                if (isMouseWheel) {
                    $viewportScrollContainerY[0].scrollTop = scrollTop;
                }
                if (options.frozenColumn > -1) {
                        $viewportL[0].scrollTop = scrollTop;

                }
                // switch virtual pages if needed
                if (scrollDist < viewportH) {
                    scrollTo(scrollTop + offset);
                }

                else {
                    var oldOffset = offset;
                    page = Math.min(n - 1, Math.floor(scrollTop * ((th - viewportH) / (h - viewportH)) * (1 / ph)));
                    offset = Math.round(page * cj);
                    if (oldOffset != offset)
                        invalidateAllRows();
                }

                if (h_render)
                    clearTimeout(h_render);
                // 重绘
                if (Math.abs(lastRenderedScrollTop - scrollTop) < viewportH)
                    render();
                else
                    h_render = setTimeout(render, 50);

                trigger(self.onViewportChanged, {});
            }
            /*
             * 如果注册了onscroll在这里调用
             */
            trigger(self.onScroll, {scrollLeft:scrollLeft, scrollTop:scrollTop});
        }

        function asyncPostProcessRows() {
            while (postProcessFromRow <= postProcessToRow) {
                var row = (scrollDir >= 0) ? postProcessFromRow++ : postProcessToRow--;
                var rowNode = rowsCache[row];
                if (!rowNode || postProcessedRows[row] || row>=getDataLength()) { continue; }

                var d = getDataItem(row), cellNodes = rowNode.childNodes;
                for (var i=0, j=0, l=columns.length; i<l; ++i) {
                    var m = columns[i];
                    if (m.asyncPostRender) { m.asyncPostRender(cellNodes[j], postProcessFromRow, d, m); }
                    ++j;
                }

                postProcessedRows[row] = true;
                h_postrender = setTimeout(asyncPostProcessRows, options.asyncPostRenderDelay);
                return;
            }
        }

        function addCellCssStyles(key,hash) {
            if (cellCssClasses[key]) {
                throw "addCellCssStyles: cell CSS hash with key '" + key + "' already exists.";
            }

            cellCssClasses[key] = hash;

            var node;
            for (var row in rowsCache) {
                if (hash[row]) {
                    for (var columnId in hash[row]) {
                        node = getCellNode(row, getColumnIndex(columnId));
                        if (node) {
                            $(node).addClass(hash[row][columnId]);
                        }
                    }
                }
            }
        }

        function removeCellCssStyles(key) {
            if (!cellCssClasses[key]) {
                return;
            }

            var node;
            for (var row in rowsCache) {
                if (cellCssClasses[key][row]) {
                    for (var columnId in cellCssClasses[key][row]) {
                        node = getCellNode(row, getColumnIndex(columnId));
                        if (node) {
                            $(node).removeClass(cellCssClasses[key][row][columnId]);
                        }
                    }
                }
            }

            delete cellCssClasses[key];
        }

        function setCellCssStyles(key,hash) {
            removeCellCssStyles(key);
            addCellCssStyles(key,hash);
        }

        function flashCell(row, cell, speed) {
            row = Number(row);
            cell = Number(cell);
            speed = Number(speed) || 100;
            if (rowsCache[row]) {
                var $cell = $(getCellNode(row,cell));

                function toggleCellClass(times) {
                    if (!times) return;
                    setTimeout(function() {
                            $cell.queue(function() {
                                $cell.toggleClass(options.cellFlashingCssClass).dequeue();
                                toggleCellClass(times-1);
                            });
                        },
                        speed);
                }

                toggleCellClass(6);
            }
        }

        // ////////////////////////////////////////////////////////////////////////////////////////////
        // Interactivity

        function handleDragInit(e,dd) {
            var cell = getCellFromEvent(e);
            if (!cell || !cellExists(cell.row, cell.cell)) {
                return false;
            }

            var retval = trigger(self.onDragInit, dd, e);
            if (e.isImmediatePropagationStopped()) {
                return retval;
            }

            // if nobody claims to be handling drag'n'drop by stopping immediate
            // propagation,
            // cancel out of it
            return false;
        }

        function handleDragStart(e,dd) {
            var cell = getCellFromEvent(e);
            if (!cell || !cellExists(cell.row, cell.cell)) {
                return false;
            }

            var retval = trigger(self.onDragStart, dd, e);
            if (e.isImmediatePropagationStopped()) {
                return retval;
            }

            return false;
        }

        function handleDrag(e,dd) {
            return trigger(self.onDrag, dd, e);
        }

        function handleDragEnd(e,dd) {
            trigger(self.onDragEnd, dd, e);
        }

        function handleKeyDown(e) {
            trigger(self.onKeyDown, {}, e);
            var handled = e.isImmediatePropagationStopped();

            if (!handled) {
                if (!e.shiftKey && !e.altKey && !e.ctrlKey) {
                    if (e.which == 27) {
                        if (!getEditorLock().isActive()) {
                            return; // no editing mode to cancel, allow bubbling
                                    // and default processing (exit without
                                    // cancelling the event)
                        }
                        cancelEditAndSetFocus();
                    }
                    else if (e.which == 37) {
                        navigateLeft();
                    }
                    else if (e.which == 39) {
                        navigateRight();
                    }
                    else if (e.which == 38) {
                        navigateUp();
                    }
                    else if (e.which == 40) {
                        navigateDown();
                    }
                    else if (e.which == 9) {
                        navigateNext();
                    }
                    else if (e.which == 13) {
                        if (options.editable) {
                            if (currentEditor) {
                                // adding new row
                                if (activeRow === getDataLength()) {
                                    navigateDown();
                                }
                                else {
                                    commitEditAndSetFocus();
                                }
                            } else {
                                if (getEditorLock().commitCurrentEdit()) {
                                    // 林森修改20120905 只支持编辑框回车焦点
                                    var i = activeCell;
                                    for (;i < columns.length; i ++) {
                                        if (makeActiveCellEditable() == false) {
                                            navigateNext();
                                        } else break;
                                    }
                                    // makeActiveCellEditable(); 原版本
                                }
                            }
                        }
                    }
                    else
                        return;
                }
                else if (e.which == 9 && e.shiftKey && !e.ctrlKey && !e.altKey) {
                    navigatePrev();
                }
                else
                    return;
            }

            // the event has been handled so don't let parent element
            // (bubbling/propagation) or browser (default) handle it
            e.stopPropagation();
            e.preventDefault();
            try {
                e.originalEvent.keyCode = 0; // prevent default behaviour for
                // special keys in IE browsers
                // (F3, F5, etc.)
            }
            catch (error) {} // ignore exceptions - setting the original
            // event's keycode throws access denied
            // exception for "Ctrl" (hitting control key
            // only, nothing else), "Shift" (maybe others)
        }
        // TODO
        function handleClick(e) {
            if ($outDiv) $outDiv.remove();
            var cell = getCellFromEvent(e);
            if (!cell || (currentEditor !== null && activeRow == cell.row && activeCell == cell.cell)) {
                return;
            }
            var datac = $.extend({},getDataItem(cell.row),{row:cell.row, cell:cell.cell, _gridId :getGridId()} );

            var click = columns[cell.cell].click;

            if (click) {
                columns[getCellFromEvent(e).cell].click(datac,e);
                e.stopImmediatePropagation();
            }

            var operate = columns[cell.cell].operate;
            if (operate) {
                //if( columns[cell.cell].operateMenus.length==1){
                //    columns[cell.cell].operateMenus[0].click(datac, e)
                //}
              //modify by cy 添加第一个选项的事件和点击弹出更多兼容
                if($(e.target).hasClass("slick-item-operate-ele")){
                    var _index = Number($(e.target).attr("_index"));
                    columns[cell.cell].operateMenus[_index].click(datac, e);
                }else if($(e.target).hasClass("slick-item-operate-button")) {
                    //add by Selina 通过行数据控制操作按钮的显示
                    var showNum = columns[cell.cell].showNum
                    if(columns[cell.cell].setShowMenu){
                        var operateMenus = columns[cell.cell].operateMenus,showMenus = [];
                        for(var i=0; i<operateMenus.length; i++){
                            if(columns[cell.cell].setShowMenu(operateMenus[i],datac)){
                                showMenus.push(operateMenus[i]);
                            }
                        }
                        showOperateItem(showMenus.slice(showNum), datac, e);
                    }else {
                        showOperateItem(columns[cell.cell].operateMenus.slice(showNum), datac, e);
                    }
                }
                e.stopImmediatePropagation();
            }

            var returnValue = trigger(self.onClick, datac, e); // 行单击事件触发
            // alert(returnValue);
            // if ( returnValue === false) return ;
            if (options.onChecked)
                if (!options.onChecked(getDataItem(cell.row))) return;
            if (e.isImmediatePropagationStopped()) {
                return;
            }
            // edit
            if (canCellBeActive(cell.row, cell.cell)) {
                if (!getEditorLock().isActive() || getEditorLock().commitCurrentEdit()) {
                    scrollRowIntoView(cell.row,false);
                    if(options.clickActiveStyle){
                        setActiveCellInternal(getCellNode(cell.row,cell.cell), (cell.row === getDataLength()) || options.autoEdit);
                    }
                }
            }
        }
        var $outDiv = null;//用于显示操作面板
        function showOperateItem(menus, datac ,e){
            var $target = $(e.target);
            if ($target.hasClass("slick-cell") || $target.is("center")) return;
            var offset = {};
            offset = $target.closest(".slick-item-operate-button").offset();
            if (!offset || offset.top == 0 || offset.left == 0) return;
            if ($outDiv) {$outDiv.remove()}
            var innerMenu = [];
            innerMenu.push("<div class='slick-operate-item-content'  style=''>");

            $outDiv = $(innerMenu.join("")).appendTo($viewportScrollContainerX);
            $outDiv.bind("mouseleave", function(event){
                $outDiv.remove();
                return false;
            });
            for (var i = 0; i < menus.length; i ++){
                var item = [];
                item.push("<div class='slick-operate-item faceIcon "+menus[i].icon+"' >"+menus[i].name+"</div>");
                var click = menus[i].click;
                function outClick(datac, e){
                    var innerClick = click;
                    return function (){innerClick(datac, e);$outDiv.remove();}
                }
                var $item = $(item.join("")).bind("click", outClick(datac, e));
                $item.appendTo($outDiv);
            }
            var offsetParent = $viewportScrollContainerX.offset();

            // add by zzb 添加弹出方向位置计算
            var top;
            if($viewport.height() - (offset.top - offsetParent.top)  > (16 + 30* menus.length)){
                top = offset.top - offsetParent.top + 17 + $viewport[0].scrollTop
            }else{
                top = offset.top - offsetParent.top + 5 + $viewport[0].scrollTop - (16 + 30* menus.length)
            }
            $outDiv.css("top", top);
            $outDiv.css("left", offset.left - offsetParent.left - $outDiv.width() + $viewportScrollContainerX[0].scrollLeft+ $target.width());
            $("body").bind("click.showOperateItemBody",
                function(e) {
                    var srcobj;
                    if ($.browser.msie) {
                        srcobj = e.srcElement;
                    } else {
                        srcobj = e.target;
                    }
                    if (srcobj && srcobj === $outDiv  ) {
                        return;
                    }
                    $outDiv.remove();
                    $("body").unbind(".showOperateItemBody");
                    return false;
                });
        }

        function handleContextMenu(e) {
            var $cell = $(e.target).closest(".slick-cell", $canvas);
            if ($cell.length === 0) { return; }

            // are we editing this cell?
            if (activeCellNode === $cell[0] && currentEditor !== null) { return; }

            trigger(self.onContextMenu, {}, e);
        }
        // TODO 单元格双击事件
        function handleDblClick(e) {
            // alert("aa")
            var cell = getCellFromEvent(e);
            if (!cell || (currentEditor !== null && activeRow == cell.row && activeCell == cell.cell)) {
                return;
            }
            var datac = $.extend({},getDataItem(cell.row),{row:cell.row, cell:cell.cell} );
            trigger(self.onDblClick, datac, e);
            if (e.isImmediatePropagationStopped()) {
                return;
            }
            // 如果支持修改
            if (options.editable) {
                gotoCell(cell.row, cell.cell, true);
            }
            if(options.clickActiveStyle){
            }else{
                // 表格双击去掉选择单元格样式
                if(activeCellNode){
                    makeActiveCellNormal();
                    $(activeCellNode).removeClass("active");
                }
            }

        }

        function handleHeaderContextMenu(e) {
            var $header = $(e.target).closest(".slick-header-column", ".slick-header-columns");
            var column = $header && columns[self.getColumnIndex($header.data("fieldId"))];
            trigger(self.onHeaderContextMenu, {column: column}, e);
        }

        function handleHeaderClick(e) {
            var $header = $(e.target).closest(".slick-header-column", ".slick-header-columns");
            var column = $header && columns[self.getColumnIndex($header.data("fieldId"))];
            trigger(self.onHeaderClick, {column: column}, e);

            //表头点击事件  yanglq //change by cy
            if (column["headClick"]) {
                column.headClick(column,e);
                e.stopImmediatePropagation();
            }
        }

        function handleMouseEnter(e) {
            trigger(self.onMouseEnter, {}, e);
        }

        function handleMouseLeave(e) {
            trigger(self.onMouseLeave, {}, e);
        }


        function handleCellMouseEnter(e) {
            trigger(self.onCellMouseEnter, {}, e);
        }

        function handleCellMouseLeave(e) {
            trigger(self.onCellMouseLeave, {}, e);
        }

        function cellExists(row,cell) {
            return !(row < 0 || row >= getDataLength() || cell < 0 || cell >= columns.length);
        }

        function getCellFromPoint(x,y) {
            var row = Math.floor((y+offset)/options.rowHeight);
            var cell = 0;

            var w = 0;
            for (var i=0; i<columns.length && w<x; i++) {
                w += columns[i].width;
                cell++;
            }

            if (cell < 0) {
                cell = 0;
            }

            return {row:row,cell:cell-1};
        }

        function getCellFromNode(node) {
            // read column number from .l1 or .c1 CSS classes
            var cls = /l\d+/.exec(node.className) || /c\d+/.exec(node.className);
            if (!cls)
                throw "getCellFromNode: cannot get cell - " + node.className;
            return parseInt(cls[0].substr(1, cls[0].length-1), 10);
        }

        function getCellFromEvent(e) {
            var target = e.target || e.srcElement;
            var $cell = $(target).closest(".slick-cell", $canvas);
            if (!$cell.length)
                return null;

            return {
                row: $cell.parent().attr("row") || 0,
                cell: getCellFromNode($cell[0])
            };
        }

        function getCellNodeBox(row,cell) {
            if (!cellExists(row,cell))
                return null;

            var y1 = row * options.rowHeight - offset;
            var y2 = y1 + options.rowHeight - 1;
            var x1 = 0;
            for (var i=0; i<cell; i++) {
                x1 += columns[i].width;
            }
            var x2 = x1 + columns[cell].width;

            return {
                top: y1,
                left: x1,
                bottom: y2,
                right: x2
            };
        }

        // ////////////////////////////////////////////////////////////////////////////////////////////
        // Cell switching

        function resetActiveCell() {
            setActiveCellInternal(null,false);
        }

        function setFocus() {
            // IE tries to scroll the viewport so that the item being focused is
            // aligned to the left border
            // IE-specific .setActive() sets the focus, but doesn't scroll
            if ($.browser.msie) {
                $canvas[0].setActive();
            }
            else {
                $canvas[0].focus();
            }
        }

        function scrollActiveCellIntoView() {
            if (activeCellNode) {
                var left = $(activeCellNode).position().left,
                    right = left + $(activeCellNode).outerWidth(true),
                    scrollLeft = $viewport.scrollLeft(),
                    scrollRight = scrollLeft + $viewport.width();

                if (left < scrollLeft)
                    $viewport.scrollLeft(left);
                else if (right > scrollRight)
                    $viewport.scrollLeft(Math.min(left, right - $viewport[0].clientWidth));
            }
        }

        function setActiveCellInternal(newCell, editMode) {
            if (activeCellNode !== null) {
                makeActiveCellNormal();
                $(activeCellNode).removeClass("active");
            }

            var activeCellChanged = (activeCellNode !== newCell);
            activeCellNode = newCell;

            if (activeCellNode != null) {
                activeRow = parseInt($(activeCellNode).parent().attr("row"));
                activeCell = activePosX = getCellFromNode(activeCellNode);

                $(activeCellNode).addClass("active");

                if (options.editable && editMode && isCellPotentiallyEditable(activeRow,activeCell)) {
                    clearTimeout(h_editorLoader);

                    if (options.asyncEditorLoading) {
                        h_editorLoader = setTimeout(function() { makeActiveCellEditable(); }, options.asyncEditorLoadDelay);
                    }
                    else {
                        makeActiveCellEditable();
                    }
                }
                else {
                    setFocus();
                }
            }
            else {
                activeRow = activeCell = null;
            }

            if (activeCellChanged) {
                scrollActiveCellIntoView();
                trigger(self.onActiveCellChanged, getActiveCell());
            }
        }

        function clearTextSelection() {
            if (document.selection && document.selection.empty) {
                document.selection.empty();
            }
            else if (window.getSelection) {
                var sel = window.getSelection();
                if (sel && sel.removeAllRanges) {
                    sel.removeAllRanges();
                }
            }
        }

        function isCellPotentiallyEditable(row, cell) {
            // is the data for this row loaded?
            if (row < getDataLength() && !getDataItem(row)) {
                return false;
            }

            // are we in the Add New row? can we create new from this cell?
            if (columns[cell].cannotTriggerInsert && row >= getDataLength()) {
                return false;
            }

            // does this cell have an editor?
            if (!getEditor(row, cell)) {
                return false;
            }

            return true;
        }

        function makeActiveCellNormal() {
            if (!currentEditor) { return; }
            trigger(self.onBeforeCellEditorDestroy, {editor:currentEditor});
            currentEditor.destroy();
            currentEditor = null;

            if (activeCellNode) {
                $(activeCellNode).removeClass("editable invalid");

                if (getDataItem(activeRow)) {
                    var column = columns[activeCell];
                    activeCellNode.innerHTML = getFormatter(activeRow, column)(activeRow, activeCell, getDataItem(activeRow)[column.field], column, getDataItem(activeRow));
                    invalidatePostProcessingResults(activeRow);
                }
            }

            // if there previously was text selected on a page (such as selected
            // text in the edit cell just removed),
            // IE can't set focus to anything else correctly
            if ($.browser.msie) { clearTextSelection(); }

            getEditorLock().deactivate(editController);
        }

        function makeActiveCellEditable(editor) {
            if (!activeCellNode) { return; }
            if (!options.editable) {
                throw "Grid : makeActiveCellEditable : should never get called when options.editable is false";
            }

            // cancel pending async call if there is one
            clearTimeout(h_editorLoader);
            // 林森修改20120905 只支持编辑框回车焦点
            var isEditor = isCellPotentiallyEditable(activeRow,activeCell);
            if (!isEditor) {
                return isEditor;
            }
            // if (!isCellPotentiallyEditable(activeRow,activeCell)) {
            // return;
            // }*
            var columnDef = columns[activeCell];
            var item = getDataItem(activeRow);

            if (trigger(self.onBeforeEditCell, {row:activeRow, cell:activeCell, item:item, column:columnDef}) === false) {
                setFocus();
                return;
            }

            getEditorLock().activate(editController);
            $(activeCellNode).addClass("editable");

            // don't clear the cell if a custom editor is passed through
            if (!editor) {
                activeCellNode.innerHTML = "";
            }

            currentEditor = new (editor || getEditor(activeRow, activeCell))({
                grid: self,
                gridPosition: absBox($container[0]),
                position: absBox(activeCellNode),
                container: activeCellNode,
                column: columnDef,
                item: item || {},
                commitChanges: commitEditAndSetFocus,
                cancelChanges: cancelEditAndSetFocus
            }, columns[activeCell].editordata, columns[activeCell]);

            if (item)
                currentEditor.loadValue(item);

            serializedEditorValue = currentEditor.serializeValue();

            if (currentEditor.position)
                handleActiveCellPositionChange();
        }

        function commitEditAndSetFocus() {
            // if the commit fails, it would do so due to a validation error
            // if so, do not steal the focus from the editor
            if (getEditorLock().commitCurrentEdit()) {
                setFocus();

// if (options.autoEdit) {
// navigateDown();
// }
            }
        }

        function cancelEditAndSetFocus() {
            if (getEditorLock().cancelCurrentEdit()) {
                setFocus();
            }
        }

        function absBox(elem) {
            var box = {top:elem.offsetTop, left:elem.offsetLeft, bottom:0, right:0, width:$(elem).outerWidth(true), height:$(elem).outerHeight(true), visible:true};
            box.bottom = box.top + box.height;
            box.right = box.left + box.width;

            // walk up the tree
            var offsetParent = elem.offsetParent;
            while (elem.parentNode != null && (elem = elem.parentNode) != document.body) {
                if (box.visible && elem.scrollHeight != elem.offsetHeight && $(elem).css("overflowY") != "visible")
                    box.visible = box.bottom > elem.scrollTop && box.top < elem.scrollTop + elem.clientHeight;

                if (box.visible && elem.scrollWidth != elem.offsetWidth && $(elem).css("overflowX") != "visible")
                    box.visible = box.right > elem.scrollLeft && box.left < elem.scrollLeft + elem.clientWidth;

                box.left -= elem.scrollLeft;
                box.top -= elem.scrollTop;

                if (elem === offsetParent) {
                    box.left += elem.offsetLeft;
                    box.top += elem.offsetTop;
                    offsetParent = elem.offsetParent;
                }

                box.bottom = box.top + box.height;
                box.right = box.left + box.width;
            }

            //留存真实偏移量，相对于body
            box.bodyLeft = box.left;
            box.bodyTop = box.top;
            box.bodyRight = elem.offsetWidth - box.bodyLeft - box.width;
            box.bodyBottom = elem.offsetHeight - box.bodyTop - box.height ;
            return box;
        }

        function getActiveCellPosition(){
            return absBox(activeCellNode);
        }

        function getGridPosition(){
            return absBox($container[0]);
        }

        function handleActiveCellPositionChange() {
            if (!activeCellNode) return;
            var cellBox;

            trigger(self.onActiveCellPositionChanged, {});

            if (currentEditor) {
                cellBox = getActiveCellPosition();
                if (currentEditor.show && currentEditor.hide) {
                    if (!cellBox.visible)
                        currentEditor.hide();
                    else
                        currentEditor.show();
                }

                if (currentEditor.position)
                    currentEditor.position(cellBox);
            }
        }

        function getCellEditor() {
            return currentEditor;
        }

        function getActiveCell() {
            if (!activeCellNode)
                return null;
            else
                return {row: activeRow, cell: activeCell};
        }

        function getActiveCellNode() {
            return activeCellNode;
        }

        function scrollRowIntoView(row, doPaging) {
            // row --; //因为编号从1开始，故加1
            var rowInt = parseInt(row);

            var viewportScrollH = $viewportScrollContainerY.height();

            var rowAtTop = rowInt * options.rowHeight;
            var rowAtBottom = (rowInt + 1) * options.rowHeight - viewportScrollH + (viewportHasHScroll?scrollbarDimensions.height:0);

            // need to page down?
            if ((rowInt + 1) * options.rowHeight > scrollTop + viewportScrollH + offset) {
                scrollTo(doPaging ? rowAtTop : rowAtBottom);
                render();
            }

            // or page up?
            else if (rowInt * options.rowHeight < scrollTop + offset) {
                scrollTo(doPaging ? rowAtBottom : rowAtTop);
                render();
            }
        }

        function getColspan(row, cell) {
            var metadata = data.getItemMetadata && data.getItemMetadata(row);
            if (!metadata || !metadata.columns) {
                return 1;
            }

            var columnData = metadata.columns[columns[cell].id] || metadata.columns[cell];
            var colspan = (columnData && columnData.colspan);
            if (colspan === "*") {
                colspan = columns.length - cell;
            }
            return (colspan || 1);
        }

        function findFirstFocusableCell(row) {
            var cell = 0;
            while (cell < columns.length) {
                if (canCellBeActive(row, cell)) {
                    return cell;
                }
                cell += getColspan(row, cell);
            }
            return null;
        }

        function findLastFocusableCell(row) {
            var cell = 0;
            var lastFocusableCell = null;
            while (cell < columns.length) {
                if (canCellBeActive(row, cell)) {
                    lastFocusableCell = cell;
                }
                cell += getColspan(row, cell);
            }
            return lastFocusableCell;
        }

        function gotoRight(row, cell, posX) {
            if (cell >= columns.length -1) {
                row ++;
                cell = -1;
                // return null;
            }
            // alert(row+ " ：" +cell)
            do {
                cell += getColspan(row, cell);
            }
            while (cell < columns.length && !canCellBeActive(row, cell));

            if (cell < columns.length) {
                return {
                    "row": row,
                    "cell": cell,
                    "posX": cell
                };
            }
            return null;
        }

        function gotoLeft(row, cell, posX) {
            if (cell <= 0) {
                return null;
            }

            var firstFocusableCell = findFirstFocusableCell(row);
            if (firstFocusableCell === null || firstFocusableCell >= cell) {
                return null;
            }

            var prev = {
                "row": row,
                "cell": firstFocusableCell,
                "posX": firstFocusableCell
            };
            var pos;
            while (true) {
                pos = gotoRight(prev.row, prev.cell, prev.posX);
                if (!pos) {
                    return null;
                }
                if (pos.cell >= cell) {
                    return prev;
                }
                prev = pos;
            }
        }

        function gotoDown(row, cell, posX) {
            var prevCell;
            while (true) {
                if (++row >= getDataLength() + (options.enableAddRow ? 1 : 0)) {
                    return null;
                }

                prevCell = cell = 0;
                while (cell <= posX) {
                    prevCell = cell;
                    cell += getColspan(row, cell);
                }

                if (canCellBeActive(row, prevCell)) {
                    return {
                        "row": row,
                        "cell": prevCell,
                        "posX": posX
                    };
                }
            }
        }

        function gotoUp(row, cell, posX) {
            var prevCell;
            while (true) {
                if (--row < 0) {
                    return null;
                }

                prevCell = cell = 0;
                while (cell <= posX) {
                    prevCell = cell;
                    cell += getColspan(row, cell);
                }

                if (canCellBeActive(row, prevCell)) {
                    return {
                        "row": row,
                        "cell": prevCell,
                        "posX": posX
                    };
                }
            }
        }

        function gotoNext(row, cell, posX) {
            var pos = gotoRight(row, cell, posX);
            if (pos) {
                return pos;
            }

            var firstFocusableCell = null;
            while (++row < getDataLength() + (options.enableAddRow ? 1 : 0)) {
                firstFocusableCell = findFirstFocusableCell(row);
                if (firstFocusableCell !== null) {
                    return {
                        "row": row,
                        "cell": firstFocusableCell,
                        "posX": firstFocusableCell
                    };
                }
            }
            return null;
        }

        function gotoPrev(row, cell, posX) {
            var pos;
            var lastSelectableCell;
            while (!pos) {
                pos = gotoLeft(row, cell, posX);
                if (pos) {
                    break;
                }
                if (--row < 0) {
                    return null;
                }

                cell = 0;
                lastSelectableCell = findLastFocusableCell(row);
                if (lastSelectableCell !== null) {
                    pos = {
                        "row": row,
                        "cell": lastSelectableCell,
                        "posX": lastSelectableCell
                    };
                }
            }
            return pos;
        }

        function navigateRight() {
            navigate("right");
        }

        function navigateLeft() {
            navigate("left");
        }

        function navigateDown(commitEditor) {
            navigate("down",commitEditor);
        }

        function navigateUp(commitEditor) {
            navigate("up",commitEditor);
        }

        function navigateNext() {
            navigate("next");
        }

        function navigatePrev() {
            navigate("prev");
        }

        function navigate(dir,commitEditor) {
            if (!activeCellNode || !options.enableCellNavigation) { return; }
            if (commitEditor != true)
                if (!getEditorLock().commitCurrentEdit()) { return; }

            var stepFunctions = {
                "up":       gotoUp,
                "down":     gotoDown,
                "left":     gotoLeft,
                "right":    gotoRight,
                "prev":     gotoPrev,
                "next":     gotoNext
            };
            var stepFn = stepFunctions[dir];
            var pos = stepFn(activeRow, activeCell, activePosX);
            if (pos) {
                var isAddNewRow = (pos.row == getDataLength());
                scrollRowIntoView(pos.row, !isAddNewRow);
                setActiveCellInternal(getCellNode(pos.row, pos.cell), isAddNewRow || options.autoEdit);
                activePosX = pos.posX;
            }
        }

        function getCellNode(row, cell) {
            if (rowsCache[row]) {
                var cells = $(rowsCache[row]).children();
                var nodeCell;
                for (var i = 0; i < cells.length; i++) {
                    nodeCell = getCellFromNode(cells[i]);
                    if (nodeCell === cell) {
                        return cells[i];
                    }
                    else if (nodeCell > cell) {
                        return null;
                    }

                }
            }
            return null;
        }

        function setActiveCell(row, cell) {
            if (row > getDataLength() || row < 0 || cell >= columns.length || cell < 0) {
                return;
            }

            if (!options.enableCellNavigation) {
                return;
            }

            scrollRowIntoView(row,false);
            setActiveCellInternal(getCellNode(row,cell),false);
        }

        function canCellBeActive(row, cell) {
            if (!options.enableCellNavigation || row >= getDataLength() + (options.enableAddRow ? 1 : 0) || row < 0 || cell >= columns.length || cell < 0) {
                return false;
            }

            var rowMetadata = data.getItemMetadata && data.getItemMetadata(row);
            if (rowMetadata && typeof rowMetadata.focusable === "boolean") {
                return rowMetadata.focusable;
            }

            var columnMetadata = rowMetadata && rowMetadata.columns;
            if (columnMetadata && columnMetadata[columns[cell].id] && typeof columnMetadata[columns[cell].id].focusable === "boolean") {
                return columnMetadata[columns[cell].id].focusable;
            }
            if (columnMetadata && columnMetadata[cell] && typeof columnMetadata[cell].focusable === "boolean") {
                return columnMetadata[cell].focusable;
            }

            if (typeof columns[cell].focusable === "boolean") {
                return columns[cell].focusable;
            }

            return true;
        }
        /**
         * 判断单元格是否能被选中
         */
        function canCellBeSelected(row, cell) {
            if (row >= getDataLength() || row < 0 || cell >= columns.length || cell < 0) {
                return false;
            }

            var rowMetadata = data.getItemMetadata && data.getItemMetadata(row);
            if (rowMetadata && typeof rowMetadata.selectable === "boolean") {
                return rowMetadata.selectable;
            }

            var columnMetadata = rowMetadata && rowMetadata.columns && (rowMetadata.columns[columns[cell].id] || rowMetadata.columns[cell]);
            if (columnMetadata && typeof columnMetadata.selectable === "boolean") {
                return columnMetadata.selectable;
            }

            if (typeof columns[cell].selectable === "boolean") {
                return columns[cell].selectable;
            }

            return true;
        }

        function gotoCell(row, cell, forceEdit) {
            if (!canCellBeActive(row, cell)) {
                return;
            }

            if (!getEditorLock().commitCurrentEdit()) { return; }

            scrollRowIntoView(row,false);

            var newCell = getCellNode(row, cell);

            // if selecting the 'add new' row, start editing right away
            setActiveCellInternal(newCell, forceEdit || (row === getDataLength()) || options.autoEdit);

            // if no editor was created, set the focus back on the grid
            if (!currentEditor) {
                setFocus();
            }
        }


        // ////////////////////////////////////////////////////////////////////////////////////////////
        // IEditor implementation for the editor lock

        function commitCurrentEdit() {
            var item = getDataItem(activeRow);
            var column = columns[activeCell];
            var cellNode = getActiveCellNode();
            if (currentEditor) {
                var defaultValue = currentEditor.defaultValue;
                if (currentEditor.isValueChanged()) {
                    var validationResults = currentEditor.validate();
                    if (validationResults.valid) {
                        if (activeRow < getDataLength()) {
                            var editCommand = {
                                row: activeRow,
                                cell: activeCell,
                                editor: currentEditor,
                                serializedValue: currentEditor.serializeValue(),
                                prevSerializedValue: serializedEditorValue,
                                execute: function() {
                                    this.editor.applyValue(item,this.serializedValue);
                                    updateRow(this.row);
                                },
                                undo: function() {
                                    this.editor.applyValue(item,this.prevSerializedValue);
                                    updateRow(this.row);
                                }
                            };
                            if (options.editCommandHandler) {
                                makeActiveCellNormal();
                                options.editCommandHandler(item,column,editCommand);

                            }
                            else {
                                editCommand.execute();
                                makeActiveCellNormal();
                            }

                            markEditorItems(item);//标记为编辑行

                            if (editCommand.serializedValue != serializedEditorValue) {
                                $(cellNode).addClass("slick-icon-edit-column");
                            }
                            var  column = getColumns()[activeCell];
                            if (column != undefined && typeof column.onChange == "function") {
                                column.onChange({row: activeRow,cell: activeCell,item: item},item[column.id],defaultValue);
                            }
                            trigger(self.onCellChange, {
                                row: activeRow,
                                cell: activeCell,
                                item: item
                            });

                            //表格数据变动，渲染当前行
                            removeRowFromCache(activeRow);
                            render();
                        }
                        else {
                            var newItem = {};
                            currentEditor.applyValue(newItem,currentEditor.serializeValue());
                            makeActiveCellNormal();
                            trigger(self.onAddNewRow, {item:newItem, column:column});
                        }
                        // refreshGrid();
                        // getDataView().refresh(true);//用于刷新合计20121203 lins
                        // TODO 图标列问题
                        // render();
                        // check whether the lock has been re-acquired by event
                        // handlers
                        return !getEditorLock().isActive();
                    }
                    else {
                        // TODO: remove and put in onValidationError handlers in
                        // examples
                        $(activeCellNode).addClass("invalid");
                        // $(activeCellNode).stop(true,true).effect("highlight",
                        // {color:"red"}, 300);

                        trigger(self.onValidationError, {
                            editor: currentEditor,
                            cellNode: activeCellNode,
                            validationResults: validationResults,
                            row: activeRow,
                            cell: activeCell,
                            column: column
                        });

                        currentEditor.focus();
                        return validateFaild();
                    }
                }

                makeActiveCellNormal();
            }
            // getDataView().refresh();
            return true;
        }
        function validateFaild() {
            var item = getDataItem(activeRow);
            var column = columns[activeCell];
            var cellNode = getActiveCellNode();
            $(activeCellNode).addClass("invalid");
            $(activeCellNode).stop(true,true);// .effect("highlight",
            // {color:"red"}, 300);
            var validationResults = currentEditor.validate();
            trigger(self.onValidationError, {
                editor: currentEditor,
                validationResults: validationResults,
                row: activeRow,
                cell: activeCell,
                column: column
            });

            currentEditor.focus();
            return false;
        }
        function cancelCurrentEdit() {
            makeActiveCellNormal();
            return true;
        }

        function rowsToRanges(rows) {
            var ranges = [];
            var lastCell = columns.length - 1;
            for (var i = 0; i < rows.length; i++) {
                ranges.push(new Slick.Range(rows[i], 0, rows[i], lastCell));
            }
            return ranges;
        }

        function getSelectedRows() {
            if (!selectionModel) {
                throw "Selection model is not set";
            }
            return selectedRows;
        }

        function getSelectedRowsById() {
            if (!selectionModel)
                throw "";
            return selectedRowIds;
        }
        function setSelectedRows(rows) {
            // var dataItems = data.getItems();
            if (!selectionModel) {
                throw "Selection model is not set";
            }
            selectionModel.setSelectedRanges(rowsToRanges(rows));
        }

        // TODO 林森自定以方法
        /**
         * 过滤数据
         */
        function filter(item) {
            for (var columnId in columnFilters) { // 判断
                if (columnId !== undefined && columnFilters[columnId] !== "") {
                    var c = getColumns()[getColumnIndex(columnId)];
                    // var zz = new RegExp("^" + columnFilters[columnId]);
                    if (item[c.field]|| item[c.field] === 0) {
                        if (options.collectionsDataArrayObject) {// 从码表里面判断
                            var collection = options.collectionsDataArrayObject[c.field]; //
                            if (collection) {
                                for (var i = 0; i < collection.length; i ++) {
                                    if (collection[i].id == item[c.field].toString()) {
                                        var field = collection[i].name
                                        if (field.indexOf(columnFilters[columnId]) == -1) { // zz.test(field);
                                            return false;
                                        }
                                    }
                                }
                            } else {
                                var field = item[c.field].toString();
                                if (field.indexOf(columnFilters[columnId]) == -1) {// zz.test(field);
                                    return false;
                                }
                            }
                        }
                    } else return false;
                }
            }
            return true;
        }
        /**
         * 获得码表数组
         */
        function getCollectionsDataArrayObject() {
            return options.collectionsDataArrayObject;
        }
        function getColumnById(columnId) {
            for (var i = 0; i < columns.length; i ++) {
                if (columns[i].field == columnId) {
                    return columns[i];
                }
            }
            return null;
        }

        /**
         * 添加用于过滤的列框
         */
        function updateHeaderRow() {
            //不使用老式的过滤框了
/*                for (var i = 0; i < columns.length; i++) {
                    var column = columns[i];
                    if (column.id !== "_checkbox_selector" && column.id !== "_radio_selector" && column.id !== "__no" && !column.icon && column.operate != true) {
                        var header = getHeaderRowColumn(column.id);
                        $(header).empty();
                        $("<input type='text' title='" + Base.I18n.getLangText('taface.module.grid.filterbox') + "' class='slick-grid-filter-input'>")
                            .data("columnId", columns[i].id)
                            .width($(header).width() - 14)
                            .val(columnFilters[columns[i].id])
                            .css("margin-top", "3px")
                            .css("border", "1px solid #7F9DB9")
                            .appendTo(header);
                    }
                }*/

        }

        /**
         * 取得其中选择的行的数据，以JSON格式返回
         *
         * @param {ARRAY}
         *            columns 指定选择的列
         * @return {String} str The JSON string
         * @author 林森
         */
        function getSelectRowsDataToJSON(columns) {
            var c = [], str = "";
            c = getSelectedRows();
            if (c.length === 0) {
                c = data;
            }// 待修改
            str = columnToJSON(c,columns);
            return str;
        }
        /**
         * 返回
         * @param WithAsKey 是否启用askey 属性过滤，默认启用
         */
        function getSelectRowsDataToObj(withAsKey) {
            var select = [], objs = [];
            select = getSelectedRows();
            for (var i = 0; i< select.length; i ++) {
                var objNew = getDataItem(select[i]);
                //先判断取得的数据是否存在;
                if(objNew){
                    if (withAsKey != false && columnPropertyKey.length != 0) {
                        var rowObj = {};
                        for (var j in objNew) {
                            for (var jj = 0; jj < columnPropertyKey.length; jj ++) {
                                if (j == columnPropertyKey[jj]) {
                                    rowObj[j] = objNew[j];
                                }
                            }
                        }
                        objs.push(rowObj);
                    } else {
                        objs.push(objNew);
                    }
                }
            }
            return objs;
        }
        // function columnToObj(select)
        /**
         * 将行数据转换为JSON
         *
         * @param {array}
         *            select 选择的行
         * @param {array]
		 *            columns 保留列
         * @return {string} str JSON
         */
        function columnToJSON(select, columns) {
            var str = "[";
            for (var i = 0; i < select.length; i ++) {
                str += "{ ";
                var obj = getDataItem(select[i]);
                for (j in obj) {
                    if (columns && columns.length > 0) {
                        for (var k = 0; k < columns.length; k ++) {
                            if (columns[k] == j) {
                                str += j + ":\"" + obj[j] + "\",";
                            }
                        }
                    } else str += j + ":\"" + obj[j] + "\",";
                }
                str = str.slice(0,-1);
                str += "}";
                if (i != select.length - 1) {
                    str += ",";
                }
            }
            str +="]";
            return str;
        }
        function itemToJSON(item, columns) {
            var str = "[";
            for (var i = 0; i < item.length; i ++) {
                str += "{ ";
                var obj = item[i];
                for (j in obj) {
                    if (columns && columns.length > 0) {
                        for (var k = 0; k < columns.length; k ++) {
                            if (columns[k] == j) {
                                str += j + ":\"" + obj[j] + "\",";
                            }
                        }
                    } else str += j + ":\"" + obj[j] + "\",";
                }
                str = str.slice(0,-1);
                str += "}";
                if (i != item.length - 1) {
                    str += ",";
                }
            }
            str +="]";
            return str;
        }
        /**
         * 得到dataView
         *
         * @return {object} dataView 数据视图对象
         * @author 林森
         */
        function getDataView() {
            return dataView;
        }

        /**
         * 得到data
         *
         * @return {array}
         */
        function getDataByDataView() {
            if (dataView) {
                var reData = dataView.getItems();
                return reData;
            } else {
                return {};
            }
        }
        function getDataByDataViewWithoutId() {
            if (dataView) {
                var reData = dataView.getItems();
                for (var i = 0; i < reData.length; i ++) {
                    delete reData[i][pId];
                }
                return reData;
            } else {
                return {};
            }
        }


        function getPager() {
            return pager;
        }

        function getSearch() {
            return search;
        }
        function getHeaderSearchTopPanelNode(){
            return  $headerSearchTopPanel[0];
        }


        /**
         * 刷新表格数据重新渲染
         *
         * @param
         * @author 林森
         */
        function refreshGrid(param) {
            getDataView().refresh();
            updateRowCount();
            invalidateAllRows();
            render();
            if(getDataView().getItems().length==0){//add by zzb
                options.showTopPanel = false;
                $topPanelScroller.hide();
            }
            resizeAndRender();//重新渲染表格 add by cy
            scrollTo(0);
            //modify by xp 表格暂无数据的样式
            if(getDataView().getItems()){
                if(getDataView().getItems().length){
                    $canvas.removeClass("noData");
                }else{
                    $canvas.addClass("noData");
                }
            }else{
                $canvas.addClass("noData");
            }
        }


        /**
         * 删除选中行
         * @author 林森  modify by xp
         */
        function deleteSelectedRows() {
            var c = [], d = [];
            c = getSelectedRows();
            d = getSelectedRowsById();
            var dataView = getDataView();
            for (var i = 0, l = c.length; i < l; i ++) {
                var data = dataView.getItemById(d[i]);
                dataView.deleteItem(data[pId]);
                removeRowFromCache(c[i]);
                if (options.selectType == "checkbox"){
                    if (selectorTpye)
                        selectorTpye.delete_selectedRowsLookup(c[i]);
                }

                delrows.push(data);
                operationGridMark = true;
            }

            setSelectedRows([]);
            refreshGrid();
        }

        /**
         * 通过rownum（对应表格的渲染行号row）删除一行数据
         */
        function deleteRow(rownum) {
            if (typeof rownum == "undefined") return false;

            var data = dataView.getItem(rownum);
            if(data){

                dataView.deleteItem(data[pId]);
                removeRowFromCache(rownum);
                if (options.selectType == "checkbox"){
                    if (selectorTpye)
                        selectorTpye.delete_selectedRowsLookup(rownum);
                }

                delrows.push(data);
                operationGridMark = true;
                setSelectedRows([]);
                refreshGrid();
            }
        }

        /**
         * 删除匹配条件数组的行
         */
        function deleteRowsByData(data){
            var data = eval(data);
            var matchedRows = _matchRowsByData(data,pId);
            for(var i = 0;i < matchedRows.length;i++){
                dataView.deleteItem(matchedRows[i]);


                var rownum = dataView.getRowById(matchedRows[i]);
                removeRowFromCache(rownum);
                if (options.selectType == "checkbox"){
                    if (selectorTpye)
                        selectorTpye.delete_selectedRowsLookup(rownum);
                }

                delrows.push(data);
                operationGridMark = true;
            }

            setSelectedRows([]);
            refreshGrid();
        }

        function _addNewRow(columnValue,idx){
            var object = {}
            for (var j in columnValue) {
                object[j] = columnValue[j];
            }
            object[pId] = getDataView().getNextIdPropertyValue();

            getDataView().beginUpdate();
            if(isNaN(idx)){
                getDataView().addItem(object);
            }else{
                getDataView().insertItem(idx,object);
            }

            getDataView().ensureIdUniqueness();
            getDataView().endUpdate();

            addrows.push(object);

            operationGridMark = true;
            refreshGrid();
        }
        /**
         * 新增一行改进版
         *
         * @param columnValue
         *            默认数据，如下所示：{"aac001":"1100012","aac002":"01"}
         */
        function addNewRow(columnValue) {
            _addNewRow(columnValue,0);
            scrollRowIntoView(0);
        }


        /**
         * 通过rownum（对应表格的渲染行号row）添加一行数据
         */
        function addNewRowTo(columnValue,rownum) {
            if (typeof rownum == "undefined") rownum = 0;
            var data = dataView.getItem(rownum);
            if(data){
                var idx = dataView.getIdxById(data[pId]);
                _addNewRow(columnValue,idx);

                scrollRowIntoView(rownum);
            }else if (rownum >= getDataView().getLength()){
                _addNewRow(columnValue);
            }else{
                addNewRow(columnValue);
            }
        }
        function addNewRowDown(columnValue) {
            _addNewRow(columnValue);
            scrollRowIntoView(getDataView().getItems().length);//TODO xiep 逻辑待完善
        }


        /**
         * @public
         * @description 更新行数据
         * @author xiep
         * @param row 行号（渲染行）
         * @param rowData 行数据（可以是部分数据）
         */
        function updateRowData(row, rowData){
            rowData = rowData||{};
            delete rowData[pId];
            delete rowData[rowId];
            try{
                var oldRowData = dataView.getItem(row);
            }catch(error){
                alert(Base.I18n.getLangText('taface.module.datagrid.checkInfo.rownumiswrong'));//i18n:输入的行号有误！
                return ;
            }

            var newRowData = $.extend({},oldRowData,rowData);
            dataView.updateItem(oldRowData[pId],newRowData);
            markEditorItems(newRowData);
            refreshGrid();
        }

        /**
         * @public
         * @description 根据条件数组更新行数据
         * @author xiep
         * @param data 条件数据
         * @param rowData 行数据（可以是部分数据）
         */
        function updateRowDataByData(data,rowData){
            rowData = rowData||{};
            delete rowData[pId];
            delete rowData[rowId];
            var matchedRows = _matchRowsByData(data,pId);
            for(var i = 0;i < matchedRows.length;i++){
                var oldRowData = dataView.getItemById(matchedRows[i]);
                var newRowData = $.extend({},oldRowData,rowData);
                dataView.updateItem(matchedRows[i],newRowData);
                markEditorItems(newRowData);
            }


            refreshGrid();
        }

        /**
         * @public
         * @description 更新单元格数据
         * @author xiep
         *
         * @param row 行号（渲染行）
         * @param rowData 行数据（可以是部分数据）
         */
        function updateCellData(row, cell, cellData){
            try{
                var oldRowData = dataView.getItem(row);
            }catch(error){
                alert(Base.I18n.getLangText('taface.module.datagrid.checkInfo.rownumiswrong'));//i18n:输入的行号有误！
                return ;
            }

            var rowDataIdx = dataView.getIdxById(oldRowData[pId]);
            var dataAryAll = dataView.getItems();
            var columns = getColumns();

            dataAryAll[rowDataIdx][columns[cell].id] = cellData;

            markEditorItems(dataAryAll[rowDataIdx]);
            refreshGrid();
        }

        /**
         * 动态更新数据 针对数组
         *
         * @param data
         *            修改内容
         * @param row
         *            修改的行号
         * @param name
         *            修改的列名
         */
        function updataData(data, row, name) {
            var currentData = this.getData();
            var currentName;
            if (row < 0 || row > this.getDataLength()) {
                return;
            } else {
                var d = currentData[row];
                for (currentName in d) {
                    if (currentName == name.toLowerCase())
                        d[currentName] = data;
                }
                updateRow(row);
            }
        }


        /**
         * @private
         * @description 标记为编辑状态数据
         * 注：不同于添加和删除，编辑对一行数据来讲，是可以重复发生的行为；
         * @author xiep
         * @param item 需要标记的行数据
         */
        function markEditorItems(item){
            var isDurty = false;
            operationGridMark = true;
            for (var ie = 0 ;ie < editorItems.length; ie ++) {
                if (editorItems[ie][pId] == item[pId]) {
                    editorItems.splice(ie,1,item);
                    isDurty = true;
                    break;
                }
            }
            if (!isDurty)editorItems.push(item);
        }


        /**
         * @private
         * @description 表格操作有效痕迹计算
         * @author xiep
         */
        function toOperationGridMark(){
            if(operationGridMark){
                //编辑、添加数据处理
                el:for (var i =0; i < editorItems.length; i ++) {
                    var flag = false;
                    //添加的不算编辑
                    for (var j = 0; j < addrows.length; j ++) {
                        if (editorItems[i][pId] == addrows[j][pId]) {
                            addrows.splice(j,1,editorItems[i]);//编辑时的数据更新新增的数据
                            flag = true;
                            break;
                        }
                    }
                    //删除的不算编辑
                    for (var j = 0; j < delrows.length; j ++) {
                        if (editorItems[i][pId] == delrows[j][pId]) {
                            flag = true;
                            break;
                        }
                    }

                    if(flag){
                        editorItems.splice(i,1);
                        if (editorItems.length == 0) {
                            break el;
                        } else {
                            i--;
                        }
                    }
                }


                //添加、删除数据处理
                adl:for (var j = 0; j < addrows.length; j ++) {
                    //删除的不算添加,添加的不算删除
                    for (var i =0; i < delrows.length; i ++) {
                        if (delrows[i][pId] == addrows[j][pId]) {
                            addrows.splice(j,1);
                            delrows.splice(i,1);
                            if (addrows.length == 0) {
                                break adl;
                            } else {
                                j--;
                                break;
                            }
                        }
                    }
                }
                operationGridMark = false;
            }
        }

        //获取添加行数据，删除的不算添加
        function getAddRow() {
            toOperationGridMark();
            return addrows;
        }

        //获取编辑行数据，添加的不算编辑，删除的不算编辑
        function getEditorItems() {
            toOperationGridMark();
            return editorItems;
        }

        //获取删除行数据，添加的不算删除
        function getRemovedRows() {
            toOperationGridMark();
            return delrows;
        }


        function getGridId() {
            if (typeof container == 'string')
                return container.replace("#","");
            else
                return container;
        }

        function clearDirty() {
            activeRow = null;
            activeCell = null;
            setSelectedRows([]);
            editorItems = [];
            addrows = [];
            delrows = [];
            columnFilters = {};
            if (pager && pager != undefined)
                pager.clearDirty();
            // columnFilters = {};
            // $headerRow.find("input").each(function(i){$(this).val("")});
            // if (getPager() != null ) getPager().constructPagerUI();
            trigger(self.onSelectedRowsChanged, {rows:getSelectedRows(), data:getSelectRowsDataToObj()},null);
            // if (selectorTpye) {
            // selectorTpye.setNull();
            // }
        }
        function clearDirtyWidthOutPager() {

            setSelectedRows([]);
            editorItems = [];
            addrows = [];
            delrows = [];
            columnFilters = {};
//        	 pager.clearDirty();
            // columnFilters = {};
            //$headerRow.find("input").each(function(i){$(this).val("")});
            // if (getPager() != null ) getPager().constructPagerUI();
            trigger(self.onSelectedRowsChanged, {rows:getSelectedRows(), data:getSelectRowsDataToObj()},null);


        }
        function getContainer() {
            return $container;
        }
        function getDefaultBox() {
            return {width:defaultWidth, height:defaultHeight};
        }
        /**
         * 设置隐藏
         */
        function setColumnHidden(id) {
            if (id == null || id.length == 0) return;
            var columnNew = []
            if (id instanceof Array) {
                loop : for (var j = 0; j < columns.length; j ++) {
                    for (var i = 0; i < id.length; i ++) {
                        if (columns[j].id == id[i]) {
                            hiddenColumns.push(columns[j]);
                            continue loop;
                        }
                    }
                    columnNew.push(columns[j]);
                }
            } else {
                for (var i = 0; i < columns.length; i ++) {
                    if (columns[i].id == id) {
                        hiddenColumns.push(columns[i]);
                        continue;
                    }
                    columnNew.push(columns[i]);
                }
            }
            setColumns(columnNew);
        }
        /**
         * 设置显示
         */
        function setColumnShow(id) {
            var columnNew = getColumns();
            for (var i = 0; i < hiddenColumns.length; i ++) {
                if (hiddenColumns[i].id == id) {
                    columnNew.push(hiddenColumns[i]);
                    // columnNew.splice(hiddenColumns[i].columnPossation, 0,
                    // hiddenColumns[i]);
                    hiddenColumns.splice(i,1);
                    break;
                }
            }
            setColumns(columnNew);
        }


        function showGridItemOperate(e, options){
            e.preventDefault();
            var columns =  self.getColumns();
            var cellInfo = self.getCellFromEvent(e);
            $("#operation" + cellInfo.row).show();
        }

        function hideGridItemOperate(e, options){
            e.preventDefault();
            var columns =  self.getColumns();
            var cellInfo = self.getCellFromEvent(e);
        }

        /**
         * 格式化表头，用于表头提示信息展示和表格导出，过滤元素标签
         * @author xiep
         * @private
         * @param title
         * @return 格式化后的表头
         */
        function formatHeaderTitle(name){
            return String(name).replace(/<[^<>]*>/g,"");
        }

        /**
         * 比较列的序号进行排序
         * @param col1
         * @param col2
         */
        function compareColumns(col1,col2){
            var val1 = col1.possation;
            var val2 = col2.possation;
            if(val1 < val2){
                return -1;
            }else if(val1 > val2){
                return 1;
            }else{
                return 0;
            }
        }
        /**
         * 表格默认导出方法	//change by zzb
         */
        function exportDefaultGridData(args,options) {
            var a=[],b=[],c=getHiddenColumns();
            if(args == "dangqian"){//导出当前页
                a = getColumns();
                b = getDataView().getItems();
                if(b.length==0){
                    Base.alert(Base.I18n.getLangText('taface.module.grid.datarequired'));//i18n:数据不能为空
                    return;
                }
            }else if(args == "xuanze"){//导出选择数据
                a = getColumns();
                b = getSelectRowsDataToObj();
                b = $.extend(true, [], b);
                if(b.length < 1){
                    // Base.alert('请至少选择一条数据');
                    Base.alert(Base.I18n.getLangText('taface.module.grid.selectatleastonedata'));
                    return;
                }
            }
            var collection  = getOptions().collectionsDataArrayObject;
            var row = [];
            var cell = [];
            var head =[];
            var headDataType = [];
            var headDataFormat = [];

            var exportColumns = [];
            for (var i = 0; i < a.length; i ++ ) {
                if (a[i].id != "_checkbox_selector" && a[i].id != "__no" && !a[i].icon && a[i].exportColumn) {
                    exportColumns.push(a[i]);
                }
            }
            for (var j = 0; j < c.length; j++) {
                if (c[j].id != "_checkbox_selector" && c[j].id != "__no" && !c[j].icon && c[j].exportColumn) {
                    exportColumns.push(c[j]);
                }
            }
            exportColumns.sort(compareColumns);
            for (var k = 0; k<exportColumns.length;k++){
                cell.push("\"" + exportColumns[k].id + "\"");
                head.push("\"" + formatHeaderTitle(exportColumns[k].name) + "\"");//处理表头存在HTML元素的情况
                var expDataType = exportColumns[k].expDataType?exportColumns[k].expDataType:"string";
                if(['string','number'].indexOf(expDataType) >= 0){
                    headDataType.push("\"" +expDataType + "\"");
                }else{
                    Base.alert(Base.I18n.getLangText('taface.module.grid.exporterrordatetype'));//i18n:指定的数据格式不支持
                }
                headDataFormat.push("\"" + (exportColumns[k].expDataFormat?exportColumns[k].expDataFormat:"") + "\"")
            }
            row.push(head);
            // row.push(headDataType);
            // row.push(headDataFormat);
            for (var i = 0; i < b.length; i ++) {
                var cells=[];
                for (var j = 0; j < cell.length; j ++) {
                    var cData = b[i][cell[j].replaceAll("\"","")];
                    if(cData == undefined || cData === ""){
                        cData = "";
                    }else{
                        //处理转义字符
                        cData = JSON.stringify(cData.toString());
                        cData = cData.substring(1, cData.length-1);
                    }
                    //var cData = b[i][cell[j].replaceAll("\"","")] == undefined?"":b[i][cell[j].replaceAll("\"","")].replaceAll("\"","\\\"");
                    var b_collected = false;
                    if (options.expKeyOrName == false && collection != undefined) {
                        var collectcell = collection[cell[j].replaceAll("\"","")];
                        if (collectcell && collectcell.length > 0) {
                            for (var c = 0; c < collectcell.length ; c ++) {
                                if (collectcell[c].id == cData) {
                                    //处理转义字符
                                    var collData = collectcell[c].name;
                                    collData = JSON.stringify(collData.toString());
                                    cells.push(collData);
                                    b_collected = true;
                                    break;
                                }
                            }
                        }
                    }
                    if (!b_collected) {
                        cells.push("\"" + cData + "\"");
                    }
                }
                row.push(cells);
            }

            var $isXlsx = $("<input/>").attr("display", "none").val(options.isXlsx).attr("name", "_grid__export_isXlsx");
            var $withHead = $("<input/>").attr("display", "none").val(options.exportWithHead).attr("name", "_grid__export_withHead");
            var $input = $("<textarea/>").attr("display", "none").val(Ta.util.obj2string(row)).attr("name", "_grid__export_data");
            var $inputExpDao = $("<textarea/>").attr("display", "none").val(options.exportBean).attr("name", "_grid__export_dao");
            var $inputFileName = $("<textarea/>").attr("display", "none").val(options.exportFileName).attr("name", "_grid__export_excelName");
            var $suffix = $("<textarea/>").attr("display", "none").val(options.suffix).attr("name", "_grid__export_suffix");
            var $form = $("<form/>")//.attr("enctype","multipart/form-data")//.attr("accept-charset", "GBK")
                .append($isXlsx).append($suffix).append($withHead).append($inputExpDao).append($input).append($inputFileName).attr("method", "post")
                .attr("display", "none")
                .appendTo("body")
                .attr("action", Base.globvar.contextPath + "/docio/exportGridExcel.do")
                .submit()
                .remove();
        }
        /**
         * 表格导出全部数据方法	//change by zzb
         */
        function exportDefaultGridDataAll(options){
            if (getDataView().getItems().length == 0) {
                Base.alert(Base.I18n.getLangText('taface.module.grid.datarequired'));//i18n:数据不能为空
                return;
            }
            var a = getColumns();
            var b = getHiddenColumns();
            var collection = [];
            var obj = getCollectionsDataArrayObject();
            var row = [];
            var cell = [];
            var head = [];
            var headDataType = [];
            var headDataFormat = [];

            var exportColumns = [];
            for (var i = 0; i < a.length; i++) {
                if (a[i].id != "_checkbox_selector" && a[i].id != "__no" && !a[i].icon && a[i].exportColumn) {
                    exportColumns.push(a[i]);
                }
            }
            for (var j = 0; j < b.length; j++) {
                if (b[j].id != "_checkbox_selector" && b[j].id != "__no" && !b[j].icon && b[j].exportColumn) {
                    exportColumns.push(b[j]);
                }
            }
            exportColumns.sort(compareColumns);
            for (var k = 0; k<exportColumns.length;k++){
                cell.push("\"" + exportColumns[k].id + "\"");
                head.push("\"" + formatHeaderTitle(exportColumns[k].name) + "\"");//处理表头存在HTML元素的情况
                var expDataType = exportColumns[k].expDataType?exportColumns[k].expDataType:"string";
                if(['string','number'].indexOf(expDataType) >= 0){
                    headDataType.push("\"" +expDataType + "\"");
                }else{
                    Base.alert(Base.I18n.getLangText('taface.module.grid.exporterrordatetype'));//i18n:指定的数据格式不支持
                }
                headDataFormat.push("\"" + (exportColumns[k].expDataFormat?exportColumns[k].expDataFormat:"") + "\"")
            }
            row.push(head);
            row.push(cell);
            // row.push(headDataType);
            // row.push(headDataFormat);
            if (options.sqlStatementName && options.resultType) {
                var sql = [], result = [];
                sql.push("\"" + options.sqlStatementName + "\"");
                result.push("\"" + options.resultType + "\"");
                row.push(sql);
                row.push(result);
            } else {
                // Base.alert("导出全部数据必须设置sqlStatementName和resultType属性");
                Base.alert(Base.I18n.getLangText('taface.module.grid.exportalldataalarm'));
                return;
            }
            row.push(obj);
            var $input = $("<textarea id='_grid__export_data_'/>").css("display", "none").val(Ta.util.obj2string(row)).attr("name", "_grid__export_data");
            toQuery(getOptions().pagingOptions.submitIds, Base.globvar.contextPath + "/docio/exportGridAllExcel.do", $input,options);
        }
        /**
         * 通用查询
         */
        function toQuery(submitIds, url, $input,options) {
            submitIds = submitIds ? submitIds : "";
            var aids = submitIds.split(',');
            //根据ids拼接传递的条件字符串
            var queryStr = "";
            for (var j = 0; j < aids.length; j++) {//对ids进行校验，不能父子嵌套
                if (aids[j] == null || aids[j] == '')continue;
                var obj2 = Base.getObj(aids[j]);
                if (obj2.cmptype == 'flexbox')obj2 = $("#" + aids[j]);
                if (i != j && obj2.cmptype != 'datagrid') {//找到其他对象
                    if ($(obj).has($(obj2)).length > 0) {
                        // alert(aids[j]+"对象在"+aids[i]+"对象里面，指定提交的元素id不能有包含与被包含关系");
                        alert(Base.I18n.getLangText('taface.module.general.checkInfo.IdMutexCheck', aids[j], aids[i]));
                        return false;
                    }
                    if ($(obj2).has($(obj)).length > 0) {
                        // alert(aids[i]+"对象在"+aids[j]+"对象里面，指定提交的元素id不能有包含与被包含关系");
                        alert(Base.I18n.getLangText('taface.module.general.checkInfo.IdMutexCheck', aids[i], aids[j]));
                        return false;
                    }
                }
            }
            if (aids) {
                for (var i = 0; i < aids.length; i++) {
                    if (aids[i] == null || aids[i] == '')continue;
                    var obj = Base.getObj(aids[i]);
                    if (obj == undefined) continue;
                    if ("newSerialize" in obj) {
                        if (queryStr == "")
                            queryStr += obj.newSerialize(aids[i], null);
                        else
                            queryStr += "&" + obj.newSerialize(aids[i], null);
                    } else {
                        if (queryStr == "")
                            queryStr += $("#" + aids[i]).taserialize(null);
                        else
                            queryStr += "&" + $("#" + aids[i]).taserialize(null);
                    }
                }
            }
            //传表格隐藏信息
            $("div.datagrid").each(function () {
                for (var i = 0; i < aids.length; i++) {
                    if (aids[i] && aids[i] != '' && $("#" + aids[i]).has($(this)).length == 0) {//不在adis包含的datagrid
                        if (queryStr == "")
                            queryStr = $("input:hidden[name^=gridInfo]", $(this)).taserialize(null);
                        else
                            queryStr += "&" + $("input:hidden[name^=gridInfo]", $(this)).taserialize(null);
                    }
                    break;// for 循环无用
                }
            });
            //对queryStr处理
            if (options.param) {
                var parameterOld = Base.compareOldData(aids);
                var parameter = $.extend(options.param, parameterOld);
                if (parameter) {
                    if (queryStr == "") {
                        queryStr = jQuery.param(parameter);
                    } else {
                        queryStr += "&" + jQuery.param(parameter);
                    }
                }
            }

            //访问Action并提交参数
            var $withHead = $("<input/>").attr("display", "none").val(options.exportWithHead).attr("name", "_grid__export_withHead");
            var $inputExpDao = $("<textarea/>").attr("display", "none").val(options.exportBean).attr("name", "_grid__export_dao");
            var $isXlsx = $("<input/>").attr("display", "none").val(options.isXlsx).attr("name", "_grid__export_isXlsx");
            var $suffix = $("<textarea/>").attr("display", "none").val(options.suffix).attr("name", "_grid__export_suffix");
            var $inputFileName = $("<textarea/>").attr("display", "none").val(options.exportFileName).attr("name", "_grid__export_excelName");
            var $form = $("<form/>")//.attr("enctype","multipart/form-data")//.attr("accept-charset", "GBK")
                .append($isXlsx).append($withHead).append($inputExpDao).append($input).append($inputFileName).append($suffix).attr("method", "post")
                .attr("display", "none")
                .appendTo("body")
                .attr("action", url + "?" + queryStr)
                .submit()
                .remove();
        }
        /**
         * 序列化方法,用于提交时对数据的处理	add by zzb
         */
        function newSerialize(id,isIncludeNullFields){
            var str="";
            str=$("#"+id).taserialize(isIncludeNullFields);
            var p = {};
            p["gridInfo['"+id+"_selected']"] = Ta.util.obj2string(Base.getGridSelectedRows(id));
            p["gridInfo['"+id+"_modified']"] = Ta.util.obj2string(Base.getGridModifiedRows(id));
            p["gridInfo['"+id+"_removed']"] = Ta.util.obj2string(Base.getGridRemovedRows(id));
            p["gridInfo['"+id+"_added']"] = Ta.util.obj2string(Base.getGridAddedRows(id));
            if(str==""){
                str +=jQuery.param(p);
            }else{
                str += "&"+jQuery.param(p);
            }
            return str;
        }





        // ////////////////////////////////////////////////////////////////////////////////////////////
        // Public API

        $.extend(this, {
            "cmptype":'datagrid',
            "slickGridVersion": "2.0a1",
            "newSerialize":newSerialize,
            /**
             * 表格默认导出方法
             */
            "exportDefaultGridData":exportDefaultGridData,
            /**
             * 表格全部导出方法
             */
            "exportDefaultGridDataAll":exportDefaultGridDataAll,
            // Events
            /**
             * 滚动sroll触发事件
             * @event onScroll
             * @param {object} obj
             *            {scrollLeft:scrollLeft, scrollTop:scrollTop} 入参对象
             */
            "onScroll":                     new Slick.Event(),
            /**
             * 排序时触发事件，传人如下对象
             * @event onSort
             * @param {object} obj
             *            {sortCol:column,sortAsc:sortAsc} 入参对象
             */
            "onSort":                       new Slick.Event(),
            /**
             * 点击列head右键时触发事件
             * @event onHeaderContextMenu
             * @param {object} obj
             *            {column: column} 入参对象
             */
            "onHeaderContextMenu":          new Slick.Event(),

            /**
             * 单击列头时触发
             * @event onHeaderClick
             * @param {object} obj
             *            {column: column} 入参对象
             */
            "onHeaderClick":                new Slick.Event(),
            /**
             * 鼠标进入事件
             * @event onMouseEnter
             */
            "onMouseEnter":                 new Slick.Event(),
            /**
             * 鼠标离开事件
             * @event onMouseLeave
             */
            "onMouseLeave":                 new Slick.Event(),
            /**
             * cell鼠标进入/离开事件
             */
            "onCellMouseEnter":            new Slick.Event(),
            "onCellMouseLeave":            new Slick.Event(),

            /**
             * 单击表格事件
             * @event onClick
             * @param {Object} obj
             *            {row:cell.row, cell:cell.cell} 入参
             */
            "onClick":                     		 new Slick.Event(),
            /**
             * 双击表格事件
             *
             * @event onDblClick
             * @param {Object} obj
             *            {row:cell.row, cell:cell.cell} 入参
             */
            "onDblClick":                  	 new Slick.Event(),
            /**
             * 右键单击事件
             *
             * @event onContextMenu
             */
            "onContextMenu":               new Slick.Event(),
            /**
             * 键盘事件，如需屏蔽自带事件需下设置 e.stopImmediatePropagation()
             *
             * @event onKeyDown
             */
            "onKeyDown":                     new Slick.Event(),

            "onAddNewRow":                  new Slick.Event(),
            /**
             * 数据验证错误时触发
             *
             * @event onValidationError
             * @param {object} obj {
			 *            editor: currentEditor, cellNode: activeCellNode,
			 *            validationResults: validationResults, row: activeRow,
			 *            cell: activeCell, column: column } 默认传参
             */
            "onValidationError":            new Slick.Event(),

            "onViewportChanged":            new Slick.Event(),

            /**
             * 表头渲染时触发
             *
             * @event onColumnsReordered
             */
            "onColumnsReordered":           new Slick.Event(),

            /**
             * 表头发生resize时触发
             *
             * @event onColumnsResized
             */
            "onColumnsResized":             new Slick.Event(),
            /**
             * 表头发生resize时触发
             *
             * @event onColumnsResized
             */
            "onCellChange":                 new Slick.Event(),
            /**
             * 修改前触发
             *
             * @event onBeforeEditCell
             * @param {Object} obj
             *            {row:activeRow, cell:activeCell, item:item,
			 *            column:columnDef} 入参
             */
            "onBeforeEditCell":             new Slick.Event(),
            /**
             * 编辑完成时调用
             *
             * @event onBeforeCellEditorDestroy
             * @param {object} obj
             *            {editor:currentEditor} 默认入参
             */
            "onBeforeCellEditorDestroy":    new Slick.Event(),
            /**
             * 表格销毁触发
             *
             * @event onBeforeDestroy
             */
            "onBeforeDestroy":              new Slick.Event(),
            /**
             * 活动单元格改变时调用
             *
             * @event onActiveCellChanged getActiveCell()
             */
            "onActiveCellChanged":          new Slick.Event(),
            /**
             * 选中单元格位置变化时触发
             *
             * @event onActiveCellPositionChanged
             */
            "onActiveCellPositionChanged":  new Slick.Event(),
            /**
             * 拖动初始化
             */
            "onDragInit":                   new Slick.Event(),
            "onDragStart":                  new Slick.Event(),
            "onDrag":                       new Slick.Event(),
            "onDragEnd":                    new Slick.Event(),
            /**
             * {rows:getSelectedRows()}
             */
            "onSelectedRowsChanged":        new Slick.Event(),
            "onCellClick":					new Slick.Event(),
            // Methods
            /**
             * 注册插件，通过调用插件的 init(self)方法 self为当前grid
             *
             * @method registerPlugin
             * @param plugin
             *            {object} 插件对象
             */
            "registerPlugin":               registerPlugin,

            /**
             * 撤销插件，通过调用插件的 destroy(self)方法 self为当前grid
             *
             * @method unregisterPlugin
             * @param plugin
             *            {object} 插件对象
             */
            "unregisterPlugin":             unregisterPlugin,

            /**
             * 得到当前的列对象
             *
             * @method getColumns
             */
            "getColumns":                   getColumns,
            /**
             * 得到当前的隐藏列对象
             * @method getHiddenColumns
             */
            "getHiddenColumns":              getHiddenColumns,

            /**
             * 设置新的表头对象，并重构表格
             *
             * @method setColumns
             * @param {object}
             *            columnDefinitions 表格列对象
             */
            "setColumns":                   setColumns,

            /**
             * 通过ID得到列索引号，就是第几列 columnsById[column.id] = i;
             *
             * @method getColumnIndex
             * @private
             * @param {String}
             *            ID 列id
             */
            "getColumnIndex":               getColumnIndex,

            /**
             * 动态设置ColumHeader的名称和提示
             *
             * @method updateColumnHeader
             * @param {String}
             *            columnId 列id
             * @param {String}
             *            title 列标题
             * @param {String}
             *            toolTip 鼠标移动到列上时的提示内容
             */
            "updateColumnHeader":           updateColumnHeader,

            /**
             * 设置升降序列样式
             *
             * @method setSortColumn
             * @private
             * @param columnId
             *            列Id
             * @param ascending
             *            升降序
             */
            "setSortColumn":                setSortColumn,

            /**
             * 自动设置列宽度
             *
             * @method autosizeColumns
             */
            "autosizeColumns":              autosizeColumns,

            /**
             * 获取表格的所有参数对象
             *
             * @method getOptions
             * @return {Object} options 参数对象
             */
            "getOptions":                   getOptions,

            /**
             * 设置表格参数
             *
             * @method setOptions
             * @param {Object}
             *            options 参数对象
             */
            "setOptions":                   setOptions,

            /**
             * 得到整个data
             *
             * @method getData
             * @return {Array} data 表格所有数据，如果是dataview对，则获取dataview
             */
            "getData":                      getData,

            /**
             * 得到数据长度
             *
             * @method getDataLength
             * @return {int} length数据长度
             */
            "getDataLength":                getDataLength,

            /**
             * 通过id获取某行数据
             *
             * @method getDataItem
             * @param {String}
             *            id 行数据的唯一id
             */
            "getDataItem":                  getDataItem,

            /**
             * 设置整行数据
             *
             * @method setData
             * @param {Array}
             *            data 表格数据
             */
            "setData":                      setData,

            /**
             * 获得selectmodel
             *
             * @method getSelectionModel
             * @private
             */
            "getSelectionModel":            getSelectionModel,

            /**
             * 自定义选择模式，通过调用自定义选择模式中init方法初始化 并为 onSelectedRangesChanged
             * 事件申明handleSelectedRangesChanged方法
             *
             * @param model
             * @private
             * @method setSelectionModel
             */
            "setSelectionModel":            setSelectionModel,

            /**
             * 得到当前选中的行号，若要使用此方法，必须设置selectionModel
             *
             * @method getSelectedRows
             * @return {Array} data返回选择行的数据对象
             */
            "getSelectedRows":              getSelectedRows,
            /**
             * 通过行号选择数据列
             *
             * @method setSelectedRows
             * @return {Array} 需要选中的行，如[1,2,3]
             */
            "setSelectedRows":              setSelectedRows,

            /**
             * 渲染表格
             *
             * @method render
             * @private
             */
            "render":                       render,

            /**
             * 使所有行无效
             *
             * @method invalidate
             * @private
             */
            "invalidate":                   invalidate,

            /**
             * 使row行无效
             *
             * @method invalidateRow
             * @param {int} row 第几行
             * @private
             */
            "invalidateRow":                invalidateRow,

            /**
             * 使一些行无效
             *
             * @method invalidateRows
             * @param {Array} rows 行号
             */
            "invalidateRows":               invalidateRows,

            /**
             * 使所以行无效，但重新渲染
             *
             * @method invalidateAllRows
             */
            "invalidateAllRows":            invalidateAllRows,

            /**
             * 更新row行的cell个单元格
             * @method updateCell
             * @param row
             *            第几行从0开始
             * @param cell
             *            第几列从0开始
             */
            "updateCell":                   updateCell,

            /**
             * 更新row行整条数据
             * @method updateRow
             * @param row 第几行从0开始
             */
            "updateRow":                    updateRow,

            /**
             * 得到当前显示区域
             *
             * @return {top:
			 *         Math.floor((scrollTop+offset)/options.rowHeight),bottom:
			 *         Math.ceil((scrollTop+offset+viewportH)/options.rowHeight)}
             * @method getViewport
             */
            "getViewport":                  getVisibleRange,
            /**
             * @method resizeCanvas
             * @private
             */
            "resizeCanvas":                 resizeCanvas,
            "resizeAndRender":resizeAndRender,
            /**
             * @method updateRowCount
             * @private
             */
            "updateRowCount":               updateRowCount,
            /**
             * 滚动到row行
             *
             * @param {boolean} doPaging true/false
             * @method scrollRowIntoView
             */
            "scrollRowIntoView":            scrollRowIntoView,
            /**
             * 得到数据显示区域
             *
             * @return canvas[0]
             * @method getCanvasNode
             */
            "getCanvasNode":                getCanvasNode,

            /**
             * 通过X,Y坐标得到单元格
             *
             * @method getCellFromPoint
             * @param {int} x
             *            x坐标
             * @param {int} y
             *            y坐标
             * @return {Object} {row:row,cell:cell}
             */
            "getCellFromPoint":             getCellFromPoint,

            /**
             * 通过event来得到单元格
             *
             * @method getCellFromEvent
             * @param e
             *            事件对象
             * @return
             */

            "getCellFromEvent":             getCellFromEvent,
            /**
             * 得到活动的单元格
             *
             * @method getActiveCell
             * @return {object} cell 第几行第几列，如 { row: row cell: cell }
             */
            "getActiveCell":                getActiveCell,
            /**
             * 设置活动单元格选中
             *
             * @method getActiveCell
             * @param row
             * @param cell
             */
            "setActiveCell":                setActiveCell,
            /**
             * 获取当前活动的单元格div对象
             *
             * @method getActiveCellNode
             * @return {DOM} activeCellNode
             */
            "getActiveCellNode":            getActiveCellNode,

            /**
             * 获取当前活动的单元格盒子模型
             *
             * @method getActiveCellPosition
             * @return {Object} box 包含box.top,box.bottom,box.left,box.right
             */
            "getActiveCellPosition":        getActiveCellPosition,
            "resetActiveCell":              resetActiveCell,
            /**
             * 使单元格可编辑
             *
             * @method makeActiveCellEditable
             * @param {Object}
             *            editor 编辑器
             */
            "editActiveCell":               makeActiveCellEditable,
            /**
             * 获取当前默认编辑器
             *
             * @method getCellEditor
             * @return {Object} editor 编辑器
             */
            "getCellEditor":                getCellEditor,
            "getCellNode":                  getCellNode,
            "getCellNodeBox":               getCellNodeBox,
            /**
             * 判断当前单元格是否被选中
             *
             * @method canCellBeSelected
             * @return {Boolean} true/false true为选中，false为未选中
             */
            "canCellBeSelected":            canCellBeSelected,
            /**
             * 判断当前单元格是否被选中（单元格选中）
             *
             * @method canCellBeActive
             * @return {Boolean} true/false true为选中，false为未选中
             */
            "canCellBeActive":              canCellBeActive,
            /**
             * 向前一个单元格定位
             *
             * @method navigatePrev
             */
            "navigatePrev":                 navigatePrev,
            /**
             * 定位到下一个单元格
             *
             * @method navigateNext
             */
            "navigateNext":                 navigateNext,
            /**
             * 向上定位一个单元格
             *
             * @method navigateUp
             */
            "navigateUp":                   navigateUp,
            /**
             * 向下定位一个单元格
             *
             * @method navigateDown
             */
            "navigateDown":                 navigateDown,
            /**
             * 向左定位一个单元格
             *
             * @method navigateLeft
             */
            "navigateLeft":                 navigateLeft,
            /**
             * 向右定位一个单元格
             *
             * @method navigateRight
             */
            "navigateRight":                navigateRight,
            /**
             * 通过行号和列号定位到单元格
             *
             * @method gotoCell
             * @param {int}
             *            row 第几行
             * @param {int}
             *            cell 第几列
             */
            "gotoCell":                     gotoCell,

            /**
             * 通过行号和列号定位到单元格
             *
             * @method getTopPanel
             * @return {$} 返回topPanel的jquery对象
             */
            "getTopPanel":                  getTopPanel,

            /**
             * 显示顶部panel
             *
             * @method showTopPanel
             */
            "showTopPanel":                 showTopPanel,

            /**
             * 隐藏顶部panel
             *
             * @method hideTopPanel
             */
            "hideTopPanel":                 hideTopPanel,

            /**
             * 显示顶部列panel
             *
             * @method showHeaderRowColumns
             */
            "showHeaderRowColumns":         showHeaderRowColumns,
            /**
             * 隐藏顶部列panel
             *
             * @method showHeaderRowColumns
             */
            "hideHeaderRowColumns":         hideHeaderRowColumns,

            /**
             * 通过行号和列号定位到单元格
             *
             * @method getHeaderRow
             * @return {$} 返回HeaderRow的jquery对象
             */
            "getHeaderRow":                 getHeaderRow,
            "getHeaderRowColumn":           getHeaderRowColumn,
            "getGridPosition":              getGridPosition,
            /**
             * 单元格红框闪烁
             *
             * @method getHeaderRow
             * @param {int}
             *            row 行
             * @param {int}
             *            cell 列
             * @param {int}
             *            speed 闪烁速度
             */
            "flashCell":                    flashCell,
            "addCellCssStyles":             addCellCssStyles,
            "setCellCssStyles":             setCellCssStyles,
            "removeCellCssStyles":          removeCellCssStyles,
            "updataData" : 					updataData, // lins
            "destroy":                      destroy,

            // IEditor implementation
            "getEditorLock":                getEditorLock,
            "getEditController":            getEditController,
            // TODO 林森添加
            "getDataView":					getDataView,
            "getDataByDataView":			getDataByDataView,


            /**
             * 获取当前表格的id
             *
             * @method getGridId
             * @return {String} id 表格id
             */
            "getGridId":					getGridId,
            /**
             * 刷新表格
             *
             * @method refreshGrid
             */
            "refreshGrid":					refreshGrid,
            "clearDirty":					clearDirty,
            /**
             * 更新表格可见区域的高度
             *
             * @method resizeViewortHeight
             */
            "resizeViewortHeight":          resizeViewortHeight,




            "setColumnHidden":				setColumnHidden,
            "setColumnShow":				setColumnShow,
            "getPager":						getPager,
            "getSearch":                    getSearch,
            "getHeaderSearchTopPanelNode":  getHeaderSearchTopPanelNode,
            "getColumnById":				getColumnById ,
            "getCollectionsDataArrayObject":getCollectionsDataArrayObject,
            "clearDirtyWidthOutPager" :clearDirtyWidthOutPager,

            "getContainer" : getContainer,
            "getDefaultBox" : getDefaultBox,

            "deleteRow":					deleteRow,
            "deleteSelectedRows":			deleteSelectedRows,
            "deleteRowsByData":             deleteRowsByData,
            "addNewRow":					addNewRow,
            "addNewRowTo":				    addNewRowTo,
            "addNewRowDown":				addNewRowDown,
            "updateRowData":                updateRowData,
            "updateRowDataByData":          updateRowDataByData,
            "updateCellData":               updateCellData,

            "getAddRow" : 					getAddRow,
            "getEditorItems":				getEditorItems,
            "getRemovedRows":				getRemovedRows,

            "getSelectedRowsById":			getSelectedRowsById,
            "getSelectRowsDataToObj":		getSelectRowsDataToObj,
            "getSelectRowsDataToJSON":		getSelectRowsDataToJSON,

            "setSelectRowsByData" 	: setSelectRowsByData,
            "addSelectRowsByData":addSelectRowsByData,
            "cancelSelectRowByData": cancelSelectRowByData,
            "selectAllData" : selectAllData,
            "cancelSelectedAllData":cancelSelectedAllData,

            "showGridItemOperate" : showGridItemOperate,
            "hideGridItemOperate" : hideGridItemOperate,

            "formatHeaderTitle" : formatHeaderTitle
        });

        init();
    }
    //修改表格对象的原型,继承 表单组件
    SlickGrid.prototype=new TaFieldComponent();
    SlickGrid.prototype.constructor = SlickGrid;
    return SlickGrid;
}));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 240 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * datagrid表格常用操作方法,调用方式为Base.xxx();
 * @module Base
 * @class datagrid
 * @static
 */
(function (factory) {
	if (true) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {
		factory(jQuery);
	}
})(function ($) {
	$.extend(true, window, {
		Base: core()
	});

	function core() {

		return {
			getGridSelectedRows: getGridSelectedRows,
			getGridModifiedRows: getGridModifiedRows,
			refreshGrid: refreshGrid,
			getGridData: getGridData,
			_setGridData: _setGridData,
			deleteGridSelectedRows: deleteGridSelectedRows,
			deleteGridRow: deleteGridRow,
			deleteGridRowsByData: deleteGridRowsByData,
			addGridRow: addGridRow,
			addGridRowDown: addGridRowDown,
			addGridRowTo: addGridRowTo,
			updateGridRowData: updateGridRowData,
			updateGridRowDataByData: updateGridRowDataByData,
			updateGridCellData: updateGridCellData,
			getGridRemovedRows: getGridRemovedRows,
			getGridAddedRows: getGridAddedRows,
			clearGridData: clearGridData,
			getGridColumnById: getGridColumnById,
			setGridColumnFormat: setGridColumnFormat,
			setGridColumnHidden: setGridColumnHidden,
			setGridColumnShow: setGridColumnShow,
			gotoGridRow: gotoGridRow,
			setGridPagerUrl: setGridPagerUrl,
			clearGridDirty: clearGridDirty,
			submitGridAllData: submitGridAllData,
			setSelectRowsByData: setSelectRowsByData,
			cancelCheckedRowsByArray: cancelCheckedRowsByArray,
			checkedAllData: checkedAllData,
			cancelSelectedAllData: cancelSelectedAllData,
			addGridColumns: addGridColumns,
			expGridExcel: expGridExcel,
			rebuildGridFromHtml: rebuildGridFromHtml,
			closeMediaGridColumns: closeMediaGridColumns,
			setColumnFilter: setColumnFilter,
			clearColumnFilter: clearColumnFilter,
			clearAllColumnsFilter: clearAllColumnsFilter

			/**
    * 设置指定列的 指定值的 过滤条件
    * @method setColumnFilter
    * @param {string}  gridiId 表格id
    * @param {string}  colid 列名
    * @param {string/Array} value 需要设置的过滤值  可以是字符串如:"条件",也可以是 数组["条件1","条件2",...]
    * @author cy
    */
		};function setColumnFilter(gridId, colid, value) {
			var grid = Ta.core.TaUIManager.getCmp(gridId);
			if (grid) {
				var search = grid.getSearch();
				if (search) {
					search.setColumnFilter(colid, value);
				}
			}
		}

		/**
   * 清除指定列的 指定值的 过滤条件
   * @method clearColumnFilter
         * @param {string}  gridId 表格id
   * @param {string}  colid 列名
   * @param {string/Array} value 需要清除的过滤值  可以是字符串如:"条件",也可以是 数组["条件1","条件2",...]
   * @param {bool}  isAll  是否清除该列的全部过滤条件 可选项
   * @author cy
   */
		function clearColumnFilter(gridId, colid, value, isAll) {
			var grid = Ta.core.TaUIManager.getCmp(gridId);
			if (grid) {
				var search = grid.getSearch();
				if (search) {
					search.clearColumnFilter(colid, value, isAll);
				}
			}
		}
		/**
   * 清空 过滤条件
   * @method clearColumnFilter
   * @param {string}  gridId 表格id
   * @author cy
   */
		function clearAllColumnsFilter(gridId) {
			var grid = Ta.core.TaUIManager.getCmp(gridId);
			if (grid) {
				var search = grid.getSearch();
				if (search) {
					search.clearAllColumnsFilter();
				}
			}
		}
		/**
   *  获取表格选中行的json对象，如无数据返回null。
   *  <br/>例如:
   *  <br/>function() {
   *  <br/>     var rowData = Base.getGridSelectedRows("grid"); //获得表格选中行的JSON数组
   *  <br/>     for (var i = 0; i < rowData.length; i ++ ) {
   *  <br/>     	alert(rowData[i].aac001); //弹出第i行数据的aac001字段内容。
   *  <br/>     }
   *  <br/>     var dataStr = Ta.util.obj2string(rowData); //如果要把得到的数据传到后台，必须把json数组转换成字符串。
   *  <br/>     var param = {};
   *  <br/>     param["dto['gridselect']"] = dataStr; //定义一个参数对象
   *  <br/>     Base.submit("xxx", "xxx", param); //通过submit异步提交
   * @method getGridSelectedRows
   * @param {String} gridId 列表ID
   * @return {Object} 返回JSON 对象，类型如下:
   * <br/>   [{"aac001":"0001","aac002":"01"},{"aac001":"0002","aac002":"02"}];
   */
		function getGridSelectedRows(gridId) {
			//TODO
			var grid = Ta.core.TaUIManager.getCmp(gridId);
			if (grid) {
				var data = grid.getSelectRowsDataToObj();
				var newData = $.extend(true, [], data);
				return newData;
			} else {
				return $("#" + gridId).datagrid("getChecked");
			}
			return null;
		};
		/**
   * 获取表格修改行的json对象，此方法只要修改了的数据行都会被返回，如无数据，返回null。
   * <br/>例如:
   * <br/> function() {
   * <br/>   var rowData = Base.getGridModifiedRows("grid"); //获得表格修改行的JSON数组
   * <br/>   for (var i = 0; i < rowData.length; i ++ ) {
   * <br/>       alert(rowData[i].aac001); //弹出第i行数据的aac001字段内容。
   * <br/>   }
   * <br/>   var dataStr = Ta.util.obj2string(rowData); //如果要把得到的数据传到后台，必须把json数组转换成字符串。
   * <br/>   var param = {};
   * <br/>   param["dto['gridselect']"] = dataStr; //定义一个参数对象
   * <br/>   Base.submit("xxx", "xxx", param); //通过submit异步提交
   * <br/> }
   * @method getGridModifiedRows
   * @param {String} gridId 列表ID
   * @return {Object} 返回JSON 对象，类型如下:
   * <br/>  [{"aac001":"0001","aac002":"01"},{"aac001":"0002","aac002":"02"}];
   */
		function getGridModifiedRows(gridId) {
			var grid = Ta.core.TaUIManager.getCmp(gridId);
			if (grid) {
				grid.getEditorLock().commitCurrentEdit();
				return grid.getEditorItems();
			}
			return null;
		}

		/**
   * 刷新表格数据。
   * @method refreshGrid
   * @param {String} gridId 表格id
   */
		function refreshGrid(gridId) {
			var grid = Ta.core.TaUIManager.getCmp(gridId);
			if (grid) {
				grid.getDataView().refresh();
				grid.refreshGrid();
			}
			return true;
		}
		/**
   * 获取表格所有数据以json数组对象形式返回,如无数据返回空数组。
   * <br/>例如:
   * <br/> function() {
   * <br/>    var rowData = Base.getGridData("grid"); //获得表格选中行的JSON数组
   * <br/>    for (var i = 0; i < rowData.length; i ++ ) {
   * <br/>       	alert(rowData[i].aac001); //弹出第i行数据的aac001字段内容。
   * <br/>    }
   * <br/>    var dataStr = Ta.util.obj2string(rowData); //如果要把得到的数据传到后台，必须把json数组转换成字符串。
   * <br/>    var param = {};
   * <br/>    param["dto['gridselect']"] = dataStr; //定义一个参数对象
   * <br/>    Base.submit("xxx", "xxx", param); //通过submit异步提交
   * <br/> }
   * @method getGridData
   * @param {String} gridId 表格id
   */
		function getGridData(gridId) {
			var grid = Ta.core.TaUIManager.getCmp(gridId);
			if (grid) {
				return grid.getDataView().getItems();
			}
			return [];
		}

		/**
   * 设置表格数据。
   * <br/>例如:data为json对象如：[{"aac001":"0001","aac002":"01"},{"aac001":"0002","aac002":"02"}]
   * <br/> function setGridData() {
   * <br/>   var data = [];
   * <br/>   var row = {};
   * <br/>   row.aac001 = '0001';
   * <br/>   row.aac002 = '01';
   * <br/>   ....
   * <br/>   data.push(row);
   * <br/>   var row2  {};
   * <br/>   row2.aac001 = '0001';
   * <br/>   row2.aac002 = '01';
   * <br/>   ....
   * <br/>   data.push(row2);
   * <br/>   ....
   * <br/>   Base._setGridData(data);
   * <br/> }
   * @method _setGridData
   * @param {String}  gridId 表格id
   * @param {Object} data 给表格设置的数据，json格式
   * @return {Object} data
   */
		function _setGridData(gridId, data) {
			if ($("#" + gridId).is("table")) {
				var $mediaColumn = $("#" + gridId + "_mediaColumn");
				$mediaColumn.appendTo("body").hide(false);
				data.rows = data.list;
				$("#" + gridId).datagrid('loadData', data);
			}
			var grid = Ta.core.TaUIManager.getCmp(gridId);
			if (grid) {
				//阻止默认选择行被clearDirty()覆盖
				grid.clearDirtyWidthOutPager();
				grid.getDataView().setItems(data);
				grid.getDataView().refresh();
				grid.refreshGrid();
			}
			return data;
		}
		/**
   * 前台删除表格选择的行，使用场景:提交选择行数据到后台，后台执行删除，成功回调方法，删除界面上数据，而不用重新查一遍数据。
   * @method deleteGridSelectedRows
   * @param {String} gridId 表格id
   */
		function deleteGridSelectedRows(gridId) {
			var grid = Ta.core.TaUIManager.getCmp(gridId);
			if (grid) {
				grid.deleteSelectedRows();
				//grid.clearDirty();
			}
		}
		/**
   * 根据row行号来删除表格选择的行
   * <br/>例如:
   * <br/>function delrow() {
   * <br/>  Base.deleteGridRow('myGrid', 10);//界面删除第10条数据。
   * <br/>  Base.submit('myGrid', "xxxxx"); //将删除列异步提交到后台，后台通过getDelete()方法获取。
   * <br/>}
   * @method deleteGridRow
   * @param {String} gridId 表格id
   * @param {Number} row 要删除数据的行号(渲染行行号)
   * @return {Boolean} 删除成功返回true,失败返回false
   */
		function deleteGridRow(gridId, row) {
			var grid = Ta.core.TaUIManager.getCmp(gridId);
			if (grid) {
				grid.deleteRow(row);
				return true;
			} else if ($("#" + gridId).is("table")) {
				$("#" + gridId).datagrid("deleteRow", row);
			}
			return false;
		}
		/**
   * 根据数据来删除表格行
   * @method deleteGridRowsByData
   * @param {String} gridId 表格id
  * @param {Array} array 数组，例如[{aac001:'aaa'}, {aac004: 1}]
   */
		function deleteGridRowsByData(gridId, data) {
			var grid = Ta.core.TaUIManager.getCmp(gridId);
			if (grid) {
				grid.deleteRowsByData(data);
				//grid.clearDirty();
			}
		}

		/**
   * 在表格顶部增加一行，主要用于可编辑表格增加一行编辑，也可以直接添加一行非空数据。
   * <br/>例如：
   * <br/>function addrow() {
   * <br/>      var row = {};
   * <br/>      row.aac001 = '0001';
   * <br/>      row.aac002 = '01';
   * <br/>      row.aac003 = '02';
   * <br/>      ....
   * <br/>      Base.addGridRow(gridId,row);
   * <br/>}
   * @method addGridRow
   * @param {String} gridId 表格id
   * @param {Object} columnValue 行数据对象及值例如{"aac001":"1100012","aac002":"01"}
   *
   */
		function addGridRow(gridId, columnValue) {
			var grid = Ta.core.TaUIManager.getCmp(gridId);
			if (grid) {
				grid.addNewRow(columnValue);
			}
			return false;
		}
		/**
   * 在表格底部增加一行，主要用于可编辑表格增加一行编辑，也可以直接添加一行非空数据。
   * <br/>例如：
   * <br/>function addrow() {
   * <br/>    var row = {};
   * <br/>    row.aac001 = '0001';
   * <br/>    row.aac002 = '01';
   * <br/>    row.aac003 = '02';
   * <br/>    ....
   * <br/>    addGridRowDown(gridId,row);
   * <br/>}
   * @method addGridRowDown
   * @param {String} gridId 表格id
   * @param {Object} columnValue 行数据对象例如{"aac001":"1100012","aac002":"01"}
   */
		function addGridRowDown(gridId, columnValue) {
			// columnValue = {"title":"aaaa","start":"01"}
			var grid = Ta.core.TaUIManager.getCmp(gridId);
			if (grid) {
				grid.addNewRowDown(columnValue);
			}
			return false;
		}

		/**
   * 在表格指定位置增加一行，主要用于可编辑表格增加一行编辑，也可以直接添加一行非空数据。
   * <br/>例如：
   * <br/>function addrow() {
   * <br/>    var row = {};
   * <br/>    row.aac001 = '0001';
   * <br/>    row.aac002 = '01';
   * <br/>    row.aac003 = '02';
   * <br/>    ....
   * <br/>    addGridRowTo(gridId,row);
   * <br/>}
   * @method addGridRowTo
   * @param {String} gridId 表格id
   * @param {Object} columnValue 行数据对象例如{"aac001":"1100012","aac002":"01"}
   * @param {Number} rownum 表格行号
   */
		function addGridRowTo(gridId, columnValue, rownum) {
			var grid = Ta.core.TaUIManager.getCmp(gridId);
			if (grid) {
				grid.addNewRowTo(columnValue, parseInt(rownum));
			}
			return false;
		}

		/**
   * 获取表格删除的行json数组对象，如无数据返回null。
   * <br/>例如：
   * <br/>function() {
   * <br/> 	var rowData = Base.getGridRemovedRows("grid"); //获得表格选中行的JSON数组
   * <br/> 	for (var i = 0; i < rowData.length; i ++ ) {
   * <br/> 		alert(rowData[i].aac001); //弹出第i行数据的aac001字段内容。
   * <br/> 	}
   * <br/> 	var dataStr = Ta.util.obj2string(rowData); //如果要把得到的数据传到后台，必须把json数组转换成字符串。
   * <br/> 	var param = {};
   * <br/> 	param["dto['gridselect']"] = dataStr; //定义一个参数对象
   * <br/> 	Base.submit("xxx", "xxx", param); //通过submit异步提交
   * <br/>}
   * @method getGridRemovedRows
   * @param {string} gridId 表格id
   * @return {Object} json 行数组对象，如[{"aac001":"0001","aac002":"01"},{"aac001":"0002","aac002":"02"}]
   */
		function getGridRemovedRows(gridId) {
			var grid = Ta.core.TaUIManager.getCmp(gridId);
			if (grid) {
				return grid.getRemovedRows();
			}
			return null;
		}
		/**
   * 获取表格删除的行json数组对象，如无数据返回null。
   * <br/>例如：
   * <br/>function() {
   * <br/> 	var rowData = Base.getGridAddedRows("grid"); //获得表格选中行的JSON数组
   * <br/> 	for (var i = 0; i < rowData.length; i ++ ) {
   * <br/> 		alert(rowData[i].aac001); //弹出第i行数据的aac001字段内容。
   * <br/> 	}
   * <br/> 	var dataStr = Ta.util.obj2string(rowData); //如果要把得到的数据传到后台，必须把json数组转换成字符串。
   * <br/> 	var param = {};
   * <br/> 	param["dto['gridselect']"] = dataStr; //定义一个参数对象
   * <br/> 	Base.submit("xxx", "xxx", param); //通过submit异步提交
   * <br/>}
   * @method getGridAddedRows
   * @param {string} gridId 表格id
   * @return {Object}  json 行数组对象，如[{"aac001":"0001","aac002":"01"},{"aac001":"0002","aac002":"02"}]
   */
		function getGridAddedRows(gridId) {
			var grid = Ta.core.TaUIManager.getCmp(gridId);
			if (grid) {
				return grid.getAddRow();
			}
			return null;
		}
		/**
   * 清除表格数据。
   * @method clearGridData
   * @param {String} gridId 表格id
   */
		function clearGridData(gridId) {
			var grid = Ta.core.TaUIManager.getCmp(gridId);
			if (grid) {
				Base._setGridData(gridId, []);
				grid.clearDirty();
			}
		}

		/**
   * 通过列id获取列信息，无数据返回null。
   * <br/>例如：
   * <br/>function() {
   * <br/>		var column = Base.getGridColumnById("grid", "name"); //获得表格选中行的JSON数组
   * <br/>		alert(column.name); //弹出列数据的表头信息内容：如姓名。
   * <br/>		alert(column.width); //弹出列宽度：如200。
   * <br/>		//其它属性参照标签定义时的列属性。
   * <br/>		//或者通过console.log(column);方法在控制台中，或者调试方法查看column对象的其它属性。
   * <br/>}
   * @method getGridColumnById
   * @param {String} gridId 表格id
   * @param {String} columnId 列id
   * @return 列的json对象，如：{id: "AAC001", name: "姓名", field: "name", width: 80, resizable: false, formatter: Slick.Formatters.PercentCompleteBar}
   */
		function getGridColumnById(gridId, columnId) {
			var grid = Ta.core.TaUIManager.getCmp(gridId);
			if (grid) {
				return grid.getColumnById(columnId);
			}
			return null;
		}
		/**
   * 动态设置表格某一列的formatter回调渲染方法。
   * <br/>例如：
   * <br/>function colformatter(row, cell, value, columnDef, dataContext) {
   * <br/>     if (row == 1 && cell == 2) {  //如果是第一行第二列
   * <br/>          return "<span style='color:red'>*</span>" + value;  //列表显示的值前面加了个红*；
   * <br/>     }
   * <br/>     if (dataContext.name == "lins") {
   * <br/>           	return "<span style='color:red'>*</span>" + value; //如果当列所在的行中name那个字段的数据为"lins"，则在此列添加小红星。
   * <br/>     }
   * <br/>}
   * <br/>Base.setGridColumnFormat("grid1","aaa100",colformatter);
   * @method setGridColumnFormat
   * @param {String} gridId 表格id
   * @param {String} columnId 列id
   * @param {Object} formatter 回调函数,默认传参row, cell, value, columnDef, dataContext分别是行号，列号，当前值，列定义，整行数据
   */
		function setGridColumnFormat(gridId, columnId, formatter) {
			var grid = Ta.core.TaUIManager.getCmp(gridId);
			if (grid) {
				var column = grid.getColumnById(columnId);
				column.formatter = formatter;
				grid.getDataView().refresh();
				grid.refreshGrid();
			}
		}

		/**
   * 设置隐藏某一列
   * @method setGridColumnHidden
   * @param {String} gridId 表格id
   * @param {String} columnId 列id
   */
		function setGridColumnHidden(gridId, columnId) {
			var grid = Ta.core.TaUIManager.getCmp(gridId);
			if (grid) {
				grid.setColumnHidden(columnId);
			} else {
				$('#' + gridId).datagrid('hideColumn', { field: columnId });
			}
		}
		/**
   * 设置显示某一列
   * @method setGridColumnShow
   * @param {String} gridId 表格id
   * @param {String} columnId 列id
   */
		function setGridColumnShow(gridId, columnId) {
			var grid = Ta.core.TaUIManager.getCmp(gridId);
			if (grid) {
				grid.setColumnShow(columnId);
			} else {
				$('#' + gridId).datagrid('showColumn', { field: columnId });
			}
		}
		/**
   * 前往表格某一行并选中。
   * @method gotoGridRow
   * @param {String} gridId 表格id
   * @param {Number} row 第几行(渲染行行号，从0开始)
   * @param {Boolean} dopaging 定位行位于页面上方还是下方
   * @param {Boolean} isSelect 是否选中
   */
		function gotoGridRow(gridId, row, doPaging, isSelect) {
			var grid = Ta.core.TaUIManager.getCmp(gridId);
			if (grid) {
				grid.scrollRowIntoView(row, doPaging);
				if (isSelect != false) grid.setSelectedRows([row]);
			}
		}

		/**
   * 更改表格分页url。
   * @method setGridPagerUrl
   * @param {String} gridId 表格id
   * @param {String} url 分页url
   */
		function setGridPagerUrl(gridId, url) {
			var grid = Ta.core.TaUIManager.getCmp(gridId);
			if (grid) {
				grid.getPager().setPagerUrl(url);
			}
		}

		/**
   * 清空表格脏数据，包括之前选择行数据，修改行数据，添加行数据，并初始化分页数据,通常表格的查询方法中需要在查询数据后调用此方法。
   * @method clearGridDirty
   * @param {String} gridId 表格id
   */
		function clearGridDirty(gridId) {
			var grid = Ta.core.TaUIManager.getCmp(gridId);
			if (grid) {
				grid.clearDirty();
			}
		}

		/**
   * 更新指定行数据
   * @method updateGridRowData
  * @param {String} gridId  表格id
   * @param {Number} row 指定行(渲染行行号，从0开始)
   * @param {Object} data  行数据，必须符合json格式，可以只设定你要改变的值，例如{"empid":"122121","empname":"杨天","empsex":"1"}
   * @example
   * function example() {
  *   Base.updateGridRowData('grid',0,{"empid":"122121","empname":"杨天"});//把grid表格第1行的数据中empid字段修改为'122121',empname字段修改为'杨天'
  * }
   */
		function updateGridRowData(gridId, row, data) {
			var grid = Ta.core.TaUIManager.getCmp(gridId);
			if (grid) {
				grid.updateRowData(row, data);
			} else if ($("#" + gridId).is("table")) {
				$("#" + gridId).datagrid('updateRow', {
					index: row,
					row: data
				});
			} else {
				alert(Base.I18n.getLangText('taface.module.datagrid.checkInfo.grididiswrong')); //i18n:输入的gridId 错误！
			}
		}

		/**
   * 根据数据更新指定行数据
   * @method updateGridRowDataByData
   * @param {String} gridId  表格id
   * @param [{Object},{Object}...] checkData 校验数据组
   * @param {Object} data  行数据，必须符合json格式，可以只设定你要改变的值，例如{"empid":"122121","empname":"杨天","empsex":"1"}
   * @example
   * function example() {
  *   Base.updateGridRowDataByData('grid',[{'ywid':''}],{"empid":"122121","empname":"杨天"});//把grid表格匹配条件数组任意条件的数据中empid字段修改为'122121',empname字段修改为'杨天'
  * }
   */
		function updateGridRowDataByData(gridId, checkData, data) {
			var grid = Ta.core.TaUIManager.getCmp(gridId);
			if (grid) {
				grid.updateRowDataByData(checkData, data);
			} else {
				alert(Base.I18n.getLangText('taface.module.datagrid.checkInfo.grididiswrong')); //i18n:输入的gridId 错误！
			}
		}

		/**
   * 更新指定单元格
   * @method updateGridCellData
   * @param {String} gridId 表格id
   * @param {Number} row 指定行(渲染行行号，从0开始)
   * @param {Number} cell 指定列(从0开始，注意：序号、选择框都会占用一列)
   * @param {Object} data 要修改的数据
   * @example
   * function setFormat() {
  *   Base.updateGridCellData('grid1',0,0,"aaa");//把grid1里1行1列的数据修改为aaa
  * }
   */
		function updateGridCellData(gridId, row, cell, data) {
			var grid = Ta.core.TaUIManager.getCmp(gridId);
			if (grid) {
				grid.updateCellData(row, cell, data);
			}
		}

		/**
   * 提交表格当前页全部数据。
   * @method submitGridAllData
   * @param {String} gridId 表格id
   * @param {String} url action地址
   * @param {Object} submitIds 其它条件
   */
		function submitGridAllData(gridId, url, submitIds, _succCallback) {
			var data = Base.getGridData(gridId);
			if (data && data.length > 40000) {
				Base.alert(Base.I18n.getLangText('taface.module.datagrid.checkInfo.dataistoobig')); //i18n:数据量过大！
				return;
			}
			var param = {};
			param[gridId] = Ta.util.obj2string(data);
			Base.submit(submitIds, url, param, null, false, _succCallback);
		}
		/**
   * 通过指定数据选择表格行。
   * @method setSelectRowsByData
   * @param {String} gridId 表格id
   * @param {Array} array 数组，例如[{aac001:'aaa'}, {aac004: 1}]
   * @param {boolean} isAppend 是否追加选择，默认false
         */
		function setSelectRowsByData(gridId, array, isAppend) {
			var grid = Ta.core.TaUIManager.getCmp(gridId);
			if (grid) {
				if (isAppend) {
					grid.addSelectRowsByData(array);
				} else {
					grid.setSelectRowsByData(array);
				}
			}
		}

		/**
   * 通过指定数据取消选择表格行。
   * @method cancelCheckedRowsByArray
   * @param {String} gridId 表格id
   * @param {Array} array 数组，例如[{aac001:'aaa'}, {aac004: 1}]
   */
		function cancelCheckedRowsByArray(gridId, array) {
			var grid = Ta.core.TaUIManager.getCmp(gridId);
			if (grid) {
				grid.cancelSelectRowByData(array);
			}
		}

		/**
   * 全选，相当于点击全选按钮。
   * @method checkedAllData
   * @param {String} gridId 表格id
   */
		function checkedAllData(gridId) {
			var grid = Ta.core.TaUIManager.getCmp(gridId);
			if (grid) {
				if (grid.getOptions().selectType == "radio") return; //add by cy 修改单选框被全选
				grid.selectAllData();
			}
		}

		/**
   * 取消，相当于点击全选/取消按钮。
   * @method cancelSelectedAllData
   * @param {String} gridId 表格id
   */
		function cancelSelectedAllData(gridId) {
			var grid = Ta.core.TaUIManager.getCmp(gridId);
			if (grid) {
				grid.cancelSelectedAllData();
			}
		}
		/**
   * 添加表格列
   * @method addGridColumns
   * @param {String} gridId
   * @param {Object} columns json对象{name:'', field:'', id:'': formatter:''}
   */
		function addGridColumns(gridId, column) {
			var grid = Ta.core.TaUIManager.getCmp(gridId);
			if (grid) {
				if (column.name == undefined || column.id == undefined) return;
				if (column.field == undefined) column.field = column.id;
				var columnsOld = grid.getColumns();
				columnsOld.push(column);
				grid.setColumns(columnsOld);
			}
		}

		function expGridExcel(gridId, opt) {
			var grid = Ta.core.TaUIManager.getCmp(gridId);
			if (grid) {
				var options = grid.getOptions() || {};
				var o = options.exportOptions || {};
				o.suffix = "xls";
				var _o = $.extend({}, o, opt);
				grid.exportDefaultGridData("dangqian", _o);
			}
		}
		//没用了face1.0.0版本都没用了
		function rebuildGridFromHtml() {
			var grid = $(".datagrid");
			grid.each(function () {
				var gridId = $(this).attr("id");
				var columns = [];
				var options = {};
				$(this).find(".slick-header-column").each(function () {
					var column = {};
					column.id = column.field = $(this).attr("field");
					if (column.id == "__no") {
						options.haveSn = "true";
					} else if (column.id == "_checkbox_selector") {
						options.selectType = "checkbox";
					} else {
						column.name = $(this).attr("title");
						var width = $(this).css("width");
						width = width.replace("px", "");
						column.width = Number(width);
						columns.push(column);
					}
				});
				options.onChecked = function () {
					return false;
				};
				var $p = $("#" + gridId).parent();
				$("#" + gridId).remove();
				$("<div/>").attr("id", gridId).css("height", $p.height() + "px").addClass("datagrid").attr("fit", "true").appendTo($p);
				var grid_ = new Slick.Grid("#" + gridId, [], columns, options);
				Ta.core.TaUIManager.register(gridId, grid_);
			});
		}

		/**
   * 关闭列下拉面版
   * @method closeMediaGridColumns
   * @param {String} gridId 表格id
   */
		//没用了face1.0.0版本都没用了
		function closeMediaGridColumns(gridId) {
			var $mediaColumn = $("#" + gridId + "_mediaColumn");
			$("#" + gridId).find(".datagrid-row-collapse").each(function () {
				$(this).trigger('click', this);
			});
			$mediaColumn.appendTo("body").show(false);
		}
	}
});

/***/ }),
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

(function (factory) {
	if (true) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(5), __webpack_require__(105)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {
		factory(jQuery);
	}
})(function (m) {
	var p,
	    q,
	    r,
	    n = { event: { CHECK: "ztree_check" }, id: { CHECK: "_check" }, checkbox: { STYLE: "checkbox", DEFAULT: "chk", DISABLED: "disable", FALSE: "false", TRUE: "true", FULL: "full", PART: "part", FOCUS: "focus" }, radio: { STYLE: "radio", TYPE_ALL: "all", TYPE_LEVEL: "level" } },
	    v = { check: { enable: !1, autoCheckTrigger: !1, chkStyle: n.checkbox.STYLE, nocheckInherit: !1, radioType: n.radio.TYPE_LEVEL, chkboxType: { Y: "ps", N: "ps" } }, data: { key: { checked: "checked" } }, callback: { beforeCheck: null, onCheck: null } };p = function p(c, a) {
		if (a.chkDisabled === !0) return !1;var b = f.getSetting(c.data.treeId),
		    d = b.data.key.checked;if (k.apply(b.callback.beforeCheck, [b.treeId, a], !0) == !1) return !0;a[d] = !a[d];e.checkNodeRelation(b, a);d = m("#" + a.tId + j.id.CHECK);e.setChkClass(b, d, a);e.repairParentChkClassWithSelf(b, a);b.treeObj.trigger(j.event.CHECK, [b.treeId, a]);return !0;
	};q = function q(c, a) {
		if (a.chkDisabled === !0) return !1;var b = f.getSetting(c.data.treeId),
		    d = m("#" + a.tId + j.id.CHECK);a.check_Focus = !0;e.setChkClass(b, d, a);return !0;
	};r = function r(c, a) {
		if (a.chkDisabled === !0) return !1;
		var b = f.getSetting(c.data.treeId),
		    d = m("#" + a.tId + j.id.CHECK);a.check_Focus = !1;e.setChkClass(b, d, a);return !0;
	};m.extend(!0, m.fn.zTree.consts, n);m.extend(!0, m.fn.zTree._z, { tools: {}, view: { checkNodeRelation: function checkNodeRelation(c, a) {
				var b,
				    d,
				    g,
				    l = c.data.key.children,
				    h = c.data.key.checked;b = j.radio;if (c.check.chkStyle == b.STYLE) {
					var i = f.getRadioCheckedList(c);if (a[h]) {
						if (c.check.radioType == b.TYPE_ALL) {
							for (d = i.length - 1; d >= 0; d--) {
								b = i[d], b[h] = !1, i.splice(d, 1), e.setChkClass(c, m("#" + b.tId + j.id.CHECK), b), b.parentTId != a.parentTId && e.repairParentChkClassWithSelf(c, b);
							}i.push(a);
						} else {
							i = a.parentTId ? a.getParentNode() : f.getRoot(c);for (d = 0, g = i[l].length; d < g; d++) {
								b = i[l][d], b[h] && b != a && (b[h] = !1, e.setChkClass(c, m("#" + b.tId + j.id.CHECK), b));
							}
						}
					} else if (c.check.radioType == b.TYPE_ALL) for (d = 0, g = i.length; d < g; d++) {
						if (a == i[d]) {
							i.splice(d, 1);break;
						}
					}
				} else a[h] && (!a[l] || a[l].length == 0 || c.check.chkboxType.Y.indexOf("s") > -1) && e.setSonNodeCheckBox(c, a, !0), !a[h] && (!a[l] || a[l].length == 0 || c.check.chkboxType.N.indexOf("s") > -1) && e.setSonNodeCheckBox(c, a, !1), a[h] && c.check.chkboxType.Y.indexOf("p") > -1 && e.setParentNodeCheckBox(c, a, !0), !a[h] && c.check.chkboxType.N.indexOf("p") > -1 && e.setParentNodeCheckBox(c, a, !1);
			}, makeChkClass: function makeChkClass(c, a) {
				var b = c.data.key.checked,
				    d = j.checkbox,
				    g = j.radio,
				    e = "",
				    e = a.chkDisabled === !0 ? d.DISABLED : a.halfCheck ? d.PART : c.check.chkStyle == g.STYLE ? a.check_Child_State < 1 ? d.FULL : d.PART : a[b] ? a.check_Child_State === 2 || a.check_Child_State === -1 ? d.FULL : d.PART : a.check_Child_State < 1 ? d.FULL : d.PART,
				    b = c.check.chkStyle + "_" + (a[b] ? d.TRUE : d.FALSE) + "_" + e,
				    b = a.check_Focus && a.chkDisabled !== !0 ? b + "_" + d.FOCUS : b;return "button " + d.DEFAULT + " " + b;
			}, repairAllChk: function repairAllChk(c, a) {
				if (c.check.enable && c.check.chkStyle === j.checkbox.STYLE) for (var b = c.data.key.checked, d = c.data.key.children, g = f.getRoot(c), l = 0, h = g[d].length; l < h; l++) {
					var i = g[d][l];i.nocheck !== !0 && (i[b] = a);e.setSonNodeCheckBox(c, i, a);
				}
			}, repairChkClass: function repairChkClass(c, a) {
				if (a) {
					f.makeChkFlag(c, a);var b = m("#" + a.tId + j.id.CHECK);e.setChkClass(c, b, a);
				}
			}, repairParentChkClass: function repairParentChkClass(c, a) {
				if (a && a.parentTId) {
					var b = a.getParentNode();
					e.repairChkClass(c, b);e.repairParentChkClass(c, b);
				}
			}, repairParentChkClassWithSelf: function repairParentChkClassWithSelf(c, a) {
				if (a) {
					var b = c.data.key.children;a[b] && a[b].length > 0 ? e.repairParentChkClass(c, a[b][0]) : e.repairParentChkClass(c, a);
				}
			}, repairSonChkDisabled: function repairSonChkDisabled(c, a, b) {
				if (a) {
					var d = c.data.key.children;if (a.chkDisabled != b) a.chkDisabled = b, a.nocheck !== !0 && e.repairChkClass(c, a);if (a[d]) for (var g = 0, l = a[d].length; g < l; g++) {
						e.repairSonChkDisabled(c, a[d][g], b);
					}
				}
			}, repairParentChkDisabled: function repairParentChkDisabled(c, a, b) {
				if (a) {
					if (a.chkDisabled != b) a.chkDisabled = b, a.nocheck !== !0 && e.repairChkClass(c, a);e.repairParentChkDisabled(c, a.getParentNode(), b);
				}
			}, setChkClass: function setChkClass(c, a, b) {
				a && (b.nocheck === !0 ? a.hide() : a.show(), a.removeClass(), a.addClass(e.makeChkClass(c, b)));
			}, setParentNodeCheckBox: function setParentNodeCheckBox(c, a, b, d) {
				var g = c.data.key.children,
				    l = c.data.key.checked,
				    h = m("#" + a.tId + j.id.CHECK);d || (d = a);f.makeChkFlag(c, a);a.nocheck !== !0 && a.chkDisabled !== !0 && (a[l] = b, e.setChkClass(c, h, a), c.check.autoCheckTrigger && a != d && a.nocheck !== !0 && c.treeObj.trigger(j.event.CHECK, [c.treeId, a]));if (a.parentTId) {
					h = !0;if (!b) for (var g = a.getParentNode()[g], i = 0, o = g.length; i < o; i++) {
						if (g[i].nocheck !== !0 && g[i][l] || g[i].nocheck === !0 && g[i].check_Child_State > 0) {
							h = !1;break;
						}
					}h && e.setParentNodeCheckBox(c, a.getParentNode(), b, d);
				}
			}, setSonNodeCheckBox: function setSonNodeCheckBox(c, a, b, d) {
				if (a) {
					var g = c.data.key.children,
					    l = c.data.key.checked,
					    h = m("#" + a.tId + j.id.CHECK);d || (d = a);var i = !1;if (a[g]) for (var o = 0, k = a[g].length; o < k && a.chkDisabled !== !0; o++) {
						var n = a[g][o];e.setSonNodeCheckBox(c, n, b, d);n.chkDisabled === !0 && (i = !0);
					}if (a != f.getRoot(c) && a.chkDisabled !== !0) {
						i && a.nocheck !== !0 && f.makeChkFlag(c, a);if (a.nocheck !== !0) {
							if (a[l] = b, !i) a.check_Child_State = a[g] && a[g].length > 0 ? b ? 2 : 0 : -1;
						} else a.check_Child_State = -1;e.setChkClass(c, h, a);c.check.autoCheckTrigger && a != d && a.nocheck !== !0 && c.treeObj.trigger(j.event.CHECK, [c.treeId, a]);
					}
				}
			} }, event: {}, data: { getRadioCheckedList: function getRadioCheckedList(c) {
				for (var a = f.getRoot(c).radioCheckedList, b = 0, d = a.length; b < d; b++) {
					f.getNodeCache(c, a[b].tId) || (a.splice(b, 1), b--, d--);
				}return a;
			}, getCheckStatus: function getCheckStatus(c, a) {
				if (!c.check.enable || a.nocheck) return null;var b = c.data.key.checked;return { checked: a[b], half: a.halfCheck ? a.halfCheck : c.check.chkStyle == j.radio.STYLE ? a.check_Child_State === 2 : a[b] ? a.check_Child_State > -1 && a.check_Child_State < 2 : a.check_Child_State > 0 };
			}, getTreeCheckedNodes: function getTreeCheckedNodes(c, a, b, d) {
				if (!a) return [];for (var g = c.data.key.children, e = c.data.key.checked, h = b && c.check.chkStyle == j.radio.STYLE && c.check.radioType == j.radio.TYPE_ALL, d = !d ? [] : d, i = 0, o = a.length; i < o; i++) {
					if (a[i].nocheck !== !0 && a[i][e] == b && (d.push(a[i]), h)) break;f.getTreeCheckedNodes(c, a[i][g], b, d);if (h && d.length > 0) break;
				}return d;
			}, getTreeChangeCheckedNodes: function getTreeChangeCheckedNodes(c, a, b) {
				if (!a) return [];for (var d = c.data.key.children, g = c.data.key.checked, b = !b ? [] : b, e = 0, h = a.length; e < h; e++) {
					a[e].nocheck !== !0 && a[e][g] != a[e].checkedOld && b.push(a[e]), f.getTreeChangeCheckedNodes(c, a[e][d], b);
				}return b;
			}, makeChkFlag: function makeChkFlag(c, a) {
				if (a) {
					var b = c.data.key.children,
					    d = c.data.key.checked,
					    g = -1;if (a[b]) for (var e = !1, h = 0, i = a[b].length; h < i; h++) {
						var f = a[b][h],
						    k = -1;if (c.check.chkStyle == j.radio.STYLE) {
							if (k = f.nocheck === !0 ? f.check_Child_State : f.halfCheck === !0 ? 2 : f.nocheck !== !0 && f[d] ? 2 : f.check_Child_State > 0 ? 2 : 0, k == 2) {
								g = 2;break;
							} else k == 0 && (g = 0);
						} else if (c.check.chkStyle == j.checkbox.STYLE) {
							k = f.nocheck === !0 ? f.check_Child_State : f.halfCheck === !0 ? 1 : f.nocheck !== !0 && f[d] ? f.check_Child_State === -1 || f.check_Child_State === 2 ? 2 : 1 : f.check_Child_State > 0 ? 1 : 0;if (k === 1) {
								g = 1;break;
							} else if (k === 2 && e && k !== g) {
								g = 1;break;
							} else if (g === 2 && k > -1 && k < 2) {
								g = 1;break;
							} else k > -1 && (g = k);e || (e = f.nocheck !== !0);
						}
					}a.check_Child_State = g;
				}
			} } });var n = m.fn.zTree,
	    k = n._z.tools,
	    j = n.consts,
	    e = n._z.view,
	    f = n._z.data;f.exSetting(v);f.addInitBind(function (c) {
		c.treeObj.bind(j.event.CHECK, function (a, b, d) {
			k.apply(c.callback.onCheck, [a, b, d]);
		});
	});f.addInitUnBind(function (c) {
		c.treeObj.unbind(j.event.CHECK);
	});f.addInitCache(function () {});f.addInitNode(function (c, a, b, d) {
		if (b) {
			a = c.data.key.checked;typeof b[a] == "string" && (b[a] = k.eqs(b[a], "true"));b[a] = !!b[a];b.checkedOld = b[a];if (typeof b.nocheck == "string") b.nocheck = k.eqs(b.nocheck, "true");b.nocheck = !!b.nocheck || c.check.nocheckInherit && d && !!d.nocheck;if (typeof b.chkDisabled == "string") b.chkDisabled = k.eqs(b.chkDisabled, "true");b.chkDisabled = !!b.chkDisabled || d && !!d.chkDisabled;if (typeof b.halfCheck == "string") b.halfCheck = k.eqs(b.halfCheck, "true");b.halfCheck = !!b.halfCheck;b.check_Child_State = -1;b.check_Focus = !1;b.getCheckStatus = function () {
				return f.getCheckStatus(c, b);
			};
		}
	});f.addInitProxy(function (c) {
		var a = c.target,
		    b = f.getSetting(c.data.treeId),
		    d = "",
		    e = null,
		    l = "",
		    h = null;if (k.eqs(c.type, "mouseover")) {
			if (b.check.enable && k.eqs(a.tagName, "span") && a.getAttribute("treeNode" + j.id.CHECK) !== null) d = a.parentNode.id, l = "mouseoverCheck";
		} else if (k.eqs(c.type, "mouseout")) {
			if (b.check.enable && k.eqs(a.tagName, "span") && a.getAttribute("treeNode" + j.id.CHECK) !== null) d = a.parentNode.id, l = "mouseoutCheck";
		} else if (k.eqs(c.type, "click") && b.check.enable && k.eqs(a.tagName, "span") && a.getAttribute("treeNode" + j.id.CHECK) !== null) d = a.parentNode.id, l = "checkNode";if (d.length > 0) switch (e = f.getNodeCache(b, d), l) {case "checkNode":
				h = p;break;case "mouseoverCheck":
				h = q;break;case "mouseoutCheck":
				h = r;}return { stop: !1, node: e, nodeEventType: l, nodeEventCallback: h, treeEventType: "", treeEventCallback: null };
	});f.addInitRoot(function (c) {
		f.getRoot(c).radioCheckedList = [];
	});f.addBeforeA(function (c, a, b) {
		var d = c.data.key.checked;c.check.enable && (f.makeChkFlag(c, a), c.check.chkStyle == j.radio.STYLE && c.check.radioType == j.radio.TYPE_ALL && a[d] && f.getRoot(c).radioCheckedList.push(a), b.push("<span ID='", a.tId, j.id.CHECK, "' class='", e.makeChkClass(c, a), "' treeNode", j.id.CHECK, a.nocheck === !0 ? " style='display:none;'" : "", "></span>"));
	});f.addZTreeTools(function (c, a) {
		a.checkNode = function (a, b, f, h) {
			var i = this.setting.data.key.checked;if (a.chkDisabled !== !0 && (b !== !0 && b !== !1 && (b = !a[i]), h = !!h, (a[i] !== b || f) && !(h && k.apply(this.setting.callback.beforeCheck, [this.setting.treeId, a], !0) == !1) && k.uCanDo(this.setting) && this.setting.check.enable && a.nocheck !== !0)) a[i] = b, b = m("#" + a.tId + j.id.CHECK), (f || this.setting.check.chkStyle === j.radio.STYLE) && e.checkNodeRelation(this.setting, a), e.setChkClass(this.setting, b, a), e.repairParentChkClassWithSelf(this.setting, a), h && c.treeObj.trigger(j.event.CHECK, [c.treeId, a]);
		};a.checkAllNodes = function (a) {
			e.repairAllChk(this.setting, !!a);
		};a.getCheckedNodes = function (a) {
			var b = this.setting.data.key.children;return f.getTreeCheckedNodes(this.setting, f.getRoot(c)[b], a !== !1);
		};a.getChangeCheckedNodes = function () {
			var a = this.setting.data.key.children;return f.getTreeChangeCheckedNodes(this.setting, f.getRoot(c)[a]);
		};a.setChkDisabled = function (a, b) {
			b = !!b;e.repairSonChkDisabled(this.setting, a, b);b || e.repairParentChkDisabled(this.setting, a, b);
		};var b = a.updateNode;a.updateNode = function (c, f) {
			b && b.apply(a, arguments);if (c && this.setting.check.enable && m("#" + c.tId).get(0) && k.uCanDo(this.setting)) {
				var l = m("#" + c.tId + j.id.CHECK);(f == !0 || this.setting.check.chkStyle === j.radio.STYLE) && e.checkNodeRelation(this.setting, c);e.setChkClass(this.setting, l, c);e.repairParentChkClassWithSelf(this.setting, c);
			}
		};
	});var s = e.createNodes;e.createNodes = function (c, a, b, d) {
		s && s.apply(e, arguments);b && e.repairParentChkClassWithSelf(c, d);
	};var t = e.removeNode;e.removeNode = function (c, a) {
		var b = a.getParentNode();t && t.apply(e, arguments);a && b && (e.repairChkClass(c, b), e.repairParentChkClass(c, b));
	};var u = e.appendNodes;e.appendNodes = function (c, a, b, d, g, j) {
		var h = "";u && (h = u.apply(e, arguments));d && f.makeChkFlag(c, d);return h;
	};
});

/***/ }),
/* 242 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

(function (factory) {
	if (true) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(5), __webpack_require__(105)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {
		factory(jQuery);
	}
})(function ($) {
	var _consts = {
		event: {
			DRAG: "ztree_drag",
			DROP: "ztree_drop",
			REMOVE: "ztree_remove",
			RENAME: "ztree_rename",
			ADD: "ztree_add",
			ACCEPT: "ztree_accept"
		},
		id: {
			EDIT: "_edit",
			INPUT: "_input",
			REMOVE: "_remove",
			ADD: "_add",
			ACCEPT: "_accept"
		},
		move: {
			TYPE_INNER: "inner",
			TYPE_PREV: "prev",
			TYPE_NEXT: "next"
		},
		node: {
			CURSELECTED_EDIT: "curSelectedNode_Edit",
			TMPTARGET_TREE: "tmpTargetzTree",
			TMPTARGET_NODE: "tmpTargetNode"
		}
	},

	//default setting of exedit
	_setting = {
		edit: {
			enable: false,
			editNameSelectAll: false,
			showRemoveBtn: true,
			showRenameBtn: true,
			showAddBtn: false,
			showAcceptBtn: false,
			removeTitle: "remove",
			renameTitle: "rename",
			addTitle: "add",
			acceptTitle: "accept",
			drag: {
				autoExpandTrigger: false,
				isCopy: true,
				isMove: true,
				prev: true,
				next: true,
				inner: true,
				minMoveSize: 5,
				borderMax: 10,
				borderMin: -5,
				maxShowNodeNum: 5,
				autoOpenTime: 500
			}
		},
		view: {
			addHoverDom: null,
			removeHoverDom: null
		},
		callback: {
			beforeDrag: null,
			beforeDragOpen: null,
			beforeDrop: null,
			beforeEditName: null,
			beforeRename: null,
			beforeAdd: null,
			beforeAccept: null,
			onDrag: null,
			onDrop: null,
			onRename: null,
			onAdd: null,
			onAccept: null
		}
	},

	//default root of exedit
	_initRoot = function _initRoot(setting) {
		var r = data.getRoot(setting);
		r.curEditNode = null;
		r.curEditInput = null;
		r.curHoverNode = null;
		r.dragFlag = 0;
		r.dragNodeShowBefore = [];
		r.dragMaskList = new Array();
		r.showHoverDom = true;
	},

	//default cache of exedit
	_initCache = function _initCache(treeId) {},

	//default bind event of exedit
	_bindEvent = function _bindEvent(setting) {
		var o = setting.treeObj;
		var c = consts.event;
		o.bind(c.RENAME, function (event, treeId, treeNode) {
			tools.apply(setting.callback.onRename, [event, treeId, treeNode]);
		});

		o.bind(c.REMOVE, function (event, treeId, treeNode) {
			tools.apply(setting.callback.onRemove, [event, treeId, treeNode]);
		});

		o.bind(c.ADD, function (event, treeId, treeNode) {
			tools.apply(setting.callback.onAdd, [event, treeId, treeNode]);
		});

		o.bind(c.ACCEPT, function (event, treeId, treeNode) {
			tools.apply(setting.callback.onAccept, [event, treeId, treeNode]);
		});

		o.bind(c.DRAG, function (event, srcEvent, treeId, treeNodes) {
			tools.apply(setting.callback.onDrag, [srcEvent, treeId, treeNodes]);
		});

		o.bind(c.DROP, function (event, srcEvent, treeId, treeNodes, targetNode, moveType, isCopy) {
			tools.apply(setting.callback.onDrop, [srcEvent, treeId, treeNodes, targetNode, moveType, isCopy]);
		});
	},
	    _unbindEvent = function _unbindEvent(setting) {
		var o = setting.treeObj;
		var c = consts.event;
		o.unbind(c.RENAME);
		o.unbind(c.REMOVE);
		o.unbind(c.DRAG);
		o.unbind(c.DROP);
		o.unbind(c.ADD);
		o.unbind(c.ACCEPT);
	},

	//default event proxy of exedit
	_eventProxy = function _eventProxy(e) {
		var target = e.target,
		    setting = data.getSetting(e.data.treeId),
		    relatedTarget = e.relatedTarget,
		    tId = "",
		    node = null,
		    nodeEventType = "",
		    treeEventType = "",
		    nodeEventCallback = null,
		    treeEventCallback = null,
		    tmp = null;

		if (tools.eqs(e.type, "mouseover")) {
			tmp = tools.getMDom(setting, target, [{ tagName: "a", attrName: "treeNode" + consts.id.A }]);
			if (tmp) {
				tId = tmp.parentNode.id;
				nodeEventType = "hoverOverNode";
			}
		} else if (tools.eqs(e.type, "mouseout")) {
			tmp = tools.getMDom(setting, relatedTarget, [{ tagName: "a", attrName: "treeNode" + consts.id.A }]);
			if (!tmp) {
				tId = "remove";
				nodeEventType = "hoverOutNode";
			}
		} else if (tools.eqs(e.type, "mousedown")) {
			tmp = tools.getMDom(setting, target, [{ tagName: "a", attrName: "treeNode" + consts.id.A }]);
			if (tmp) {
				tId = tmp.parentNode.id;
				nodeEventType = "mousedownNode";
			}
		}
		if (tId.length > 0) {
			node = data.getNodeCache(setting, tId);
			switch (nodeEventType) {
				case "mousedownNode":
					nodeEventCallback = _handler.onMousedownNode;
					break;
				case "hoverOverNode":
					nodeEventCallback = _handler.onHoverOverNode;
					break;
				case "hoverOutNode":
					nodeEventCallback = _handler.onHoverOutNode;
					break;
			}
		}
		var proxyResult = {
			stop: false,
			node: node,
			nodeEventType: nodeEventType,
			nodeEventCallback: nodeEventCallback,
			treeEventType: treeEventType,
			treeEventCallback: treeEventCallback
		};
		return proxyResult;
	},

	//default init node of exedit
	_initNode = function _initNode(setting, level, n, parentNode, isFirstNode, isLastNode, openFlag) {
		if (!n) return;
		n.isHover = false;
		n.editNameFlag = false;
	},

	//update zTreeObj, add method of edit
	_zTreeTools = function _zTreeTools(setting, zTreeTools) {
		zTreeTools.cancelEditName = function (newName) {
			var root = data.getRoot(setting),
			    nameKey = setting.data.key.name,
			    node = root.curEditNode;
			if (!root.curEditNode) return;
			view.cancelCurEditNode(setting, newName ? newName : node[nameKey]);
		};
		zTreeTools.copyNode = function (targetNode, node, moveType, isSilent) {
			if (!node) return null;
			if (targetNode && !targetNode.isParent && setting.data.keep.leaf && moveType === consts.move.TYPE_INNER) return null;
			var newNode = tools.clone(node);
			if (!targetNode) {
				targetNode = null;
				moveType = consts.move.TYPE_INNER;
			}
			if (moveType == consts.move.TYPE_INNER) {
				var copyCallback = function copyCallback() {
					view.addNodes(setting, targetNode, [newNode], isSilent);
				};

				if (tools.canAsync(setting, targetNode)) {
					view.asyncNode(setting, targetNode, isSilent, copyCallback);
				} else {
					copyCallback();
				}
			} else {
				view.addNodes(setting, targetNode.parentNode, [newNode], isSilent);
				view.moveNode(setting, targetNode, newNode, moveType, false, isSilent);
			}
			return newNode;
		};
		zTreeTools.editName = function (node) {
			if (!node || !node.tId || node !== data.getNodeCache(setting, node.tId)) return;
			if (node.parentTId) view.expandCollapseParentNode(setting, node.getParentNode(), true);
			view.editNode(setting, node);
		};
		zTreeTools.moveNode = function (targetNode, node, moveType, isSilent) {
			if (!node) return node;
			if (targetNode && !targetNode.isParent && setting.data.keep.leaf && moveType === consts.move.TYPE_INNER) {
				return null;
			} else if (targetNode && (node.parentTId == targetNode.tId && moveType == consts.move.TYPE_INNER || $("#" + node.tId).find("#" + targetNode.tId).length > 0)) {
				return null;
			} else if (!targetNode) {
				targetNode = null;
			}
			function moveCallback() {
				view.moveNode(setting, targetNode, node, moveType, false, isSilent);
			}
			if (tools.canAsync(setting, targetNode)) {
				view.asyncNode(setting, targetNode, isSilent, moveCallback);
			} else {
				moveCallback();
			}
			return node;
		};
		zTreeTools.setEditable = function (editable) {
			setting.edit.enable = editable;
			return this.refresh();
		};
	},

	//method of operate data
	_data = {
		setSonNodeLevel: function setSonNodeLevel(setting, parentNode, node) {
			if (!node) return;
			var childKey = setting.data.key.children;
			node.level = parentNode ? parentNode.level + 1 : 0;
			if (!node[childKey]) return;
			for (var i = 0, l = node[childKey].length; i < l; i++) {
				if (node[childKey][i]) data.setSonNodeLevel(setting, node, node[childKey][i]);
			}
		}
	},

	//method of event proxy
	_event = {},

	//method of event handler
	_handler = {
		onHoverOverNode: function onHoverOverNode(event, node) {
			var setting = data.getSetting(event.data.treeId),
			    root = data.getRoot(setting);
			if (root.curHoverNode != node) {
				_handler.onHoverOutNode(event);
			}
			root.curHoverNode = node;
			view.addHoverDom(setting, node);
		},
		onHoverOutNode: function onHoverOutNode(event, node) {
			var setting = data.getSetting(event.data.treeId),
			    root = data.getRoot(setting);
			if (root.curHoverNode && !data.isSelectedNode(setting, root.curHoverNode)) {
				view.removeTreeDom(setting, root.curHoverNode);
				root.curHoverNode = null;
			}
		},
		onMousedownNode: function onMousedownNode(eventMouseDown, _node) {
			var i,
			    l,
			    setting = data.getSetting(eventMouseDown.data.treeId),
			    root = data.getRoot(setting);
			//right click can't drag & drop
			if (eventMouseDown.button == 2 || !setting.edit.enable || !setting.edit.drag.isCopy && !setting.edit.drag.isMove) return true;

			//input of edit node name can't drag & drop
			var target = eventMouseDown.target,
			    _nodes = data.getRoot(setting).curSelectedList,
			    nodes = [];
			if (!data.isSelectedNode(setting, _node)) {
				nodes = [_node];
			} else {
				for (i = 0, l = _nodes.length; i < l; i++) {
					if (_nodes[i].editNameFlag && tools.eqs(target.tagName, "input") && target.getAttribute("treeNode" + consts.id.INPUT) !== null) {
						return true;
					}
					nodes.push(_nodes[i]);
					if (nodes[0].parentTId !== _nodes[i].parentTId) {
						nodes = [_node];
						break;
					}
				}
			}

			view.editNodeBlur = true;
			view.cancelCurEditNode(setting, null, true);

			var doc = $(document),
			    curNode,
			    tmpArrow,
			    tmpTarget,
			    isOtherTree = false,
			    targetSetting = setting,
			    preNode,
			    nextNode,
			    preTmpTargetNodeId = null,
			    preTmpMoveType = null,
			    tmpTargetNodeId = null,
			    moveType = consts.move.TYPE_INNER,
			    mouseDownX = eventMouseDown.clientX,
			    mouseDownY = eventMouseDown.clientY,
			    startTime = new Date().getTime();

			if (tools.uCanDo(setting)) {
				doc.bind("mousemove", _docMouseMove);
			}
			function _docMouseMove(event) {
				//avoid start drag after click node
				if (root.dragFlag == 0 && Math.abs(mouseDownX - event.clientX) < setting.edit.drag.minMoveSize && Math.abs(mouseDownY - event.clientY) < setting.edit.drag.minMoveSize) {
					return true;
				}
				var i,
				    l,
				    tmpNode,
				    tmpDom,
				    tmpNodes,
				    childKey = setting.data.key.children;
				tools.noSel(setting);
				$("body").css("cursor", "pointer");

				if (root.dragFlag == 0) {
					if (tools.apply(setting.callback.beforeDrag, [setting.treeId, nodes], true) == false) {
						_docMouseUp(event);
						return true;
					}

					for (i = 0, l = nodes.length; i < l; i++) {
						if (i == 0) {
							root.dragNodeShowBefore = [];
						}
						tmpNode = nodes[i];
						if (tmpNode.isParent && tmpNode.open) {
							view.expandCollapseNode(setting, tmpNode, !tmpNode.open);
							root.dragNodeShowBefore[tmpNode.tId] = true;
						} else {
							root.dragNodeShowBefore[tmpNode.tId] = false;
						}
					}

					root.dragFlag = 1;
					root.showHoverDom = false;
					tools.showIfameMask(setting, true);

					//sort
					var isOrder = true,
					    lastIndex = -1;
					if (nodes.length > 1) {
						var pNodes = nodes[0].parentTId ? nodes[0].getParentNode()[childKey] : data.getNodes(setting);
						tmpNodes = [];
						for (i = 0, l = pNodes.length; i < l; i++) {
							if (root.dragNodeShowBefore[pNodes[i].tId] !== undefined) {
								if (isOrder && lastIndex > -1 && lastIndex + 1 !== i) {
									isOrder = false;
								}
								tmpNodes.push(pNodes[i]);
								lastIndex = i;
							}
							if (nodes.length === tmpNodes.length) {
								nodes = tmpNodes;
								break;
							}
						}
					}
					if (isOrder) {
						preNode = nodes[0].getPreNode();
						nextNode = nodes[nodes.length - 1].getNextNode();
					}

					//set node in selected
					curNode = $("<ul class='zTreeDragUL'></ul>");
					for (i = 0, l = nodes.length; i < l; i++) {
						tmpNode = nodes[i];
						tmpNode.editNameFlag = false;
						view.selectNode(setting, tmpNode, i > 0);
						view.removeTreeDom(setting, tmpNode);

						tmpDom = $("<li id='" + tmpNode.tId + "_tmp'></li>");
						tmpDom.append($("#" + tmpNode.tId + consts.id.A).clone());
						tmpDom.css("padding", "0");
						tmpDom.children("#" + tmpNode.tId + consts.id.A).removeClass(consts.node.CURSELECTED);
						curNode.append(tmpDom);
						if (i == setting.edit.drag.maxShowNodeNum - 1) {
							tmpDom = $("<li id='" + tmpNode.tId + "_moretmp'><a>  ...  </a></li>");
							curNode.append(tmpDom);
							break;
						}
					}
					curNode.attr("id", nodes[0].tId + consts.id.UL + "_tmp");
					curNode.addClass(setting.treeObj.attr("class"));
					curNode.appendTo("body");

					tmpArrow = $("<span class='tmpzTreeMove_arrow'></span>");
					tmpArrow.attr("id", "zTreeMove_arrow_tmp");
					tmpArrow.appendTo("body");

					setting.treeObj.trigger(consts.event.DRAG, [event, setting.treeId, nodes]);
				}

				if (root.dragFlag == 1) {
					if (tmpTarget && tmpArrow.attr("id") == event.target.id && tmpTargetNodeId && event.clientX + doc.scrollLeft() + 2 > $("#" + tmpTargetNodeId + consts.id.A, tmpTarget).offset().left) {
						var xT = $("#" + tmpTargetNodeId + consts.id.A, tmpTarget);
						event.target = xT.length > 0 ? xT.get(0) : event.target;
					} else if (tmpTarget) {
						tmpTarget.removeClass(consts.node.TMPTARGET_TREE);
						if (tmpTargetNodeId) $("#" + tmpTargetNodeId + consts.id.A, tmpTarget).removeClass(consts.node.TMPTARGET_NODE + "_" + consts.move.TYPE_PREV).removeClass(consts.node.TMPTARGET_NODE + "_" + _consts.move.TYPE_NEXT).removeClass(consts.node.TMPTARGET_NODE + "_" + _consts.move.TYPE_INNER);
					}
					tmpTarget = null;
					tmpTargetNodeId = null;

					//judge drag & drop in multi ztree
					isOtherTree = false;
					targetSetting = setting;
					var settings = data.getSettings();
					for (var s in settings) {
						if (settings[s].treeId && settings[s].edit.enable && settings[s].treeId != setting.treeId && (event.target.id == settings[s].treeId || $(event.target).parents("#" + settings[s].treeId).length > 0)) {
							isOtherTree = true;
							targetSetting = settings[s];
						}
					}

					var docScrollTop = doc.scrollTop(),
					    docScrollLeft = doc.scrollLeft(),
					    treeOffset = targetSetting.treeObj.offset(),
					    scrollHeight = targetSetting.treeObj.get(0).scrollHeight,
					    scrollWidth = targetSetting.treeObj.get(0).scrollWidth,
					    dTop = event.clientY + docScrollTop - treeOffset.top,
					    dBottom = targetSetting.treeObj.height() + treeOffset.top - event.clientY - docScrollTop,
					    dLeft = event.clientX + docScrollLeft - treeOffset.left,
					    dRight = targetSetting.treeObj.width() + treeOffset.left - event.clientX - docScrollLeft,
					    isTop = dTop < setting.edit.drag.borderMax && dTop > setting.edit.drag.borderMin,
					    isBottom = dBottom < setting.edit.drag.borderMax && dBottom > setting.edit.drag.borderMin,
					    isLeft = dLeft < setting.edit.drag.borderMax && dLeft > setting.edit.drag.borderMin,
					    isRight = dRight < setting.edit.drag.borderMax && dRight > setting.edit.drag.borderMin,
					    isTreeInner = dTop > setting.edit.drag.borderMin && dBottom > setting.edit.drag.borderMin && dLeft > setting.edit.drag.borderMin && dRight > setting.edit.drag.borderMin,
					    isTreeTop = isTop && targetSetting.treeObj.scrollTop() <= 0,
					    isTreeBottom = isBottom && targetSetting.treeObj.scrollTop() + targetSetting.treeObj.height() + 10 >= scrollHeight,
					    isTreeLeft = isLeft && targetSetting.treeObj.scrollLeft() <= 0,
					    isTreeRight = isRight && targetSetting.treeObj.scrollLeft() + targetSetting.treeObj.width() + 10 >= scrollWidth;

					if (event.target.id && targetSetting.treeObj.find("#" + event.target.id).length > 0) {
						//get node <li> dom
						var targetObj = event.target;
						while (targetObj && targetObj.tagName && !tools.eqs(targetObj.tagName, "li") && targetObj.id != targetSetting.treeId) {
							targetObj = targetObj.parentNode;
						}

						var canMove = true;
						//don't move to self or children of self
						for (i = 0, l = nodes.length; i < l; i++) {
							tmpNode = nodes[i];
							if (targetObj.id === tmpNode.tId) {
								canMove = false;
								break;
							} else if ($("#" + tmpNode.tId).find("#" + targetObj.id).length > 0) {
								canMove = false;
								break;
							}
						}
						if (canMove) {
							if (event.target.id && (event.target.id == targetObj.id + consts.id.A || $(event.target).parents("#" + targetObj.id + consts.id.A).length > 0)) {
								tmpTarget = $(targetObj);
								tmpTargetNodeId = targetObj.id;
							}
						}
					}

					//the mouse must be in zTree
					tmpNode = nodes[0];
					if (isTreeInner && (event.target.id == targetSetting.treeId || $(event.target).parents("#" + targetSetting.treeId).length > 0)) {
						//judge mouse move in root of ztree
						if (!tmpTarget && (event.target.id == targetSetting.treeId || isTreeTop || isTreeBottom || isTreeLeft || isTreeRight) && (isOtherTree || !isOtherTree && tmpNode.parentTId)) {
							tmpTarget = targetSetting.treeObj;
						}
						//auto scroll top
						if (isTop) {
							targetSetting.treeObj.scrollTop(targetSetting.treeObj.scrollTop() - 10);
						} else if (isBottom) {
							targetSetting.treeObj.scrollTop(targetSetting.treeObj.scrollTop() + 10);
						}
						if (isLeft) {
							targetSetting.treeObj.scrollLeft(targetSetting.treeObj.scrollLeft() - 10);
						} else if (isRight) {
							targetSetting.treeObj.scrollLeft(targetSetting.treeObj.scrollLeft() + 10);
						}
						//auto scroll left
						if (tmpTarget && tmpTarget != targetSetting.treeObj && tmpTarget.offset().left < targetSetting.treeObj.offset().left) {
							targetSetting.treeObj.scrollLeft(targetSetting.treeObj.scrollLeft() + tmpTarget.offset().left - targetSetting.treeObj.offset().left);
						}
					}

					curNode.css({
						"top": event.clientY + docScrollTop + 3 + "px",
						"left": event.clientX + docScrollLeft + 3 + "px"
					});

					var dX = 0;
					var dY = 0;
					if (tmpTarget && tmpTarget.attr("id") != targetSetting.treeId) {
						var tmpTargetNode = tmpTargetNodeId == null ? null : data.getNodeCache(targetSetting, tmpTargetNodeId),
						    isCopy = event.ctrlKey && setting.edit.drag.isMove && setting.edit.drag.isCopy || !setting.edit.drag.isMove && setting.edit.drag.isCopy,
						    isPrev = !!(preNode && tmpTargetNodeId === preNode.tId),
						    isNext = !!(nextNode && tmpTargetNodeId === nextNode.tId),
						    isInner = tmpNode.parentTId && tmpNode.parentTId == tmpTargetNodeId,
						    canPrev = (isCopy || !isNext) && tools.apply(targetSetting.edit.drag.prev, [targetSetting.treeId, nodes, tmpTargetNode], !!targetSetting.edit.drag.prev),
						    canNext = (isCopy || !isPrev) && tools.apply(targetSetting.edit.drag.next, [targetSetting.treeId, nodes, tmpTargetNode], !!targetSetting.edit.drag.next),
						    canInner = (isCopy || !isInner) && !(targetSetting.data.keep.leaf && !tmpTargetNode.isParent) && tools.apply(targetSetting.edit.drag.inner, [targetSetting.treeId, nodes, tmpTargetNode], !!targetSetting.edit.drag.inner);
						if (!canPrev && !canNext && !canInner) {
							tmpTarget = null;
							tmpTargetNodeId = "";
							moveType = consts.move.TYPE_INNER;
							tmpArrow.css({
								"display": "none"
							});
							if (window.zTreeMoveTimer) {
								clearTimeout(window.zTreeMoveTimer);
								window.zTreeMoveTargetNodeTId = null;
							}
						} else {
							var tmpTargetA = $("#" + tmpTargetNodeId + consts.id.A, tmpTarget),
							    tmpNextA = tmpTargetNode.isLastNode ? null : $("#" + tmpTargetNode.getNextNode().tId + consts.id.A, tmpTarget.next()),
							    tmpTop = tmpTargetA.offset().top,
							    tmpLeft = tmpTargetA.offset().left,
							    prevPercent = canPrev ? canInner ? 0.25 : canNext ? 0.5 : 1 : -1,
							    nextPercent = canNext ? canInner ? 0.75 : canPrev ? 0.5 : 0 : -1,
							    dY_percent = (event.clientY + docScrollTop - tmpTop) / tmpTargetA.height();
							if ((prevPercent == 1 || dY_percent <= prevPercent && dY_percent >= -.2) && canPrev) {
								dX = 1 - tmpArrow.width();
								dY = tmpTop - tmpArrow.height() / 2;
								moveType = consts.move.TYPE_PREV;
							} else if ((nextPercent == 0 || dY_percent >= nextPercent && dY_percent <= 1.2) && canNext) {
								dX = 1 - tmpArrow.width();
								dY = tmpNextA == null || tmpTargetNode.isParent && tmpTargetNode.open ? tmpTop + tmpTargetA.height() - tmpArrow.height() / 2 : tmpNextA.offset().top - tmpArrow.height() / 2;
								moveType = consts.move.TYPE_NEXT;
							} else {
								dX = 5 - tmpArrow.width();
								dY = tmpTop;
								moveType = consts.move.TYPE_INNER;
							}
							tmpArrow.css({
								"display": "block",
								"top": dY + "px",
								"left": tmpLeft + dX + "px"
							});
							tmpTargetA.addClass(consts.node.TMPTARGET_NODE + "_" + moveType);

							if (preTmpTargetNodeId != tmpTargetNodeId || preTmpMoveType != moveType) {
								startTime = new Date().getTime();
							}
							if (tmpTargetNode && tmpTargetNode.isParent && moveType == consts.move.TYPE_INNER) {
								var startTimer = true;
								if (window.zTreeMoveTimer && window.zTreeMoveTargetNodeTId !== tmpTargetNode.tId) {
									clearTimeout(window.zTreeMoveTimer);
									window.zTreeMoveTargetNodeTId = null;
								} else if (window.zTreeMoveTimer && window.zTreeMoveTargetNodeTId === tmpTargetNode.tId) {
									startTimer = false;
								}
								if (startTimer) {
									window.zTreeMoveTimer = setTimeout(function () {
										if (moveType != consts.move.TYPE_INNER) return;
										if (tmpTargetNode && tmpTargetNode.isParent && !tmpTargetNode.open && new Date().getTime() - startTime > targetSetting.edit.drag.autoOpenTime && tools.apply(targetSetting.callback.beforeDragOpen, [targetSetting.treeId, tmpTargetNode], true)) {
											view.switchNode(targetSetting, tmpTargetNode);
											if (targetSetting.edit.drag.autoExpandTrigger) {
												targetSetting.treeObj.trigger(consts.event.EXPAND, [targetSetting.treeId, tmpTargetNode]);
											}
										}
									}, targetSetting.edit.drag.autoOpenTime + 50);
									window.zTreeMoveTargetNodeTId = tmpTargetNode.tId;
								}
							}
						}
					} else {
						moveType = consts.move.TYPE_INNER;
						if (tmpTarget && tools.apply(targetSetting.edit.drag.inner, [targetSetting.treeId, nodes, null], !!targetSetting.edit.drag.inner)) {
							tmpTarget.addClass(consts.node.TMPTARGET_TREE);
						} else {
							tmpTarget = null;
						}
						tmpArrow.css({
							"display": "none"
						});
						if (window.zTreeMoveTimer) {
							clearTimeout(window.zTreeMoveTimer);
							window.zTreeMoveTargetNodeTId = null;
						}
					}
					preTmpTargetNodeId = tmpTargetNodeId;
					preTmpMoveType = moveType;
				}
				return false;
			}

			doc.bind("mouseup", _docMouseUp);
			function _docMouseUp(event) {
				if (window.zTreeMoveTimer) {
					clearTimeout(window.zTreeMoveTimer);
					window.zTreeMoveTargetNodeTId = null;
				}
				preTmpTargetNodeId = null;
				preTmpMoveType = null;
				doc.unbind("mousemove", _docMouseMove);
				doc.unbind("mouseup", _docMouseUp);
				doc.unbind("selectstart", _docSelect);
				$("body").css("cursor", "auto");
				if (tmpTarget) {
					tmpTarget.removeClass(consts.node.TMPTARGET_TREE);
					if (tmpTargetNodeId) $("#" + tmpTargetNodeId + consts.id.A, tmpTarget).removeClass(consts.node.TMPTARGET_NODE + "_" + consts.move.TYPE_PREV).removeClass(consts.node.TMPTARGET_NODE + "_" + _consts.move.TYPE_NEXT).removeClass(consts.node.TMPTARGET_NODE + "_" + _consts.move.TYPE_INNER);
				}
				tools.showIfameMask(setting, false);

				root.showHoverDom = true;
				if (root.dragFlag == 0) return;
				root.dragFlag = 0;

				var i, l, tmpNode;
				for (i = 0, l = nodes.length; i < l; i++) {
					tmpNode = nodes[i];
					if (tmpNode.isParent && root.dragNodeShowBefore[tmpNode.tId] && !tmpNode.open) {
						view.expandCollapseNode(setting, tmpNode, !tmpNode.open);
						delete root.dragNodeShowBefore[tmpNode.tId];
					}
				}

				if (curNode) curNode.remove();
				if (tmpArrow) tmpArrow.remove();

				var isCopy = event.ctrlKey && setting.edit.drag.isMove && setting.edit.drag.isCopy || !setting.edit.drag.isMove && setting.edit.drag.isCopy;
				if (!isCopy && tmpTarget && tmpTargetNodeId && nodes[0].parentTId && tmpTargetNodeId == nodes[0].parentTId && moveType == consts.move.TYPE_INNER) {
					tmpTarget = null;
				}
				if (tmpTarget) {
					var dropCallback = function dropCallback() {
						if (isOtherTree) {
							if (!isCopy) {
								for (var i = 0, l = nodes.length; i < l; i++) {
									view.removeNode(setting, nodes[i]);
								}
							}
							if (moveType == consts.move.TYPE_INNER) {
								view.addNodes(targetSetting, dragTargetNode, newNodes);
							} else {
								view.addNodes(targetSetting, dragTargetNode.getParentNode(), newNodes);
								if (moveType == consts.move.TYPE_PREV) {
									for (i = 0, l = newNodes.length; i < l; i++) {
										view.moveNode(targetSetting, dragTargetNode, newNodes[i], moveType, false);
									}
								} else {
									for (i = -1, l = newNodes.length - 1; i < l; l--) {
										view.moveNode(targetSetting, dragTargetNode, newNodes[l], moveType, false);
									}
								}
							}
						} else {
							if (isCopy && moveType == consts.move.TYPE_INNER) {
								view.addNodes(targetSetting, dragTargetNode, newNodes);
							} else {
								if (isCopy) {
									view.addNodes(targetSetting, dragTargetNode.getParentNode(), newNodes);
								}
								if (moveType == consts.move.TYPE_PREV) {
									for (i = 0, l = newNodes.length; i < l; i++) {
										view.moveNode(targetSetting, dragTargetNode, newNodes[i], moveType, false);
									}
								} else {
									for (i = -1, l = newNodes.length - 1; i < l; l--) {
										view.moveNode(targetSetting, dragTargetNode, newNodes[l], moveType, false);
									}
								}
							}
						}
						for (i = 0, l = newNodes.length; i < l; i++) {
							view.selectNode(targetSetting, newNodes[i], i > 0);
						}
						$("#" + newNodes[0].tId).focus().blur();
					};

					var dragTargetNode = tmpTargetNodeId == null ? null : data.getNodeCache(targetSetting, tmpTargetNodeId);
					if (tools.apply(setting.callback.beforeDrop, [targetSetting.treeId, nodes, dragTargetNode, moveType, isCopy], true) == false) return;
					var newNodes = isCopy ? tools.clone(nodes) : nodes;

					if (moveType == consts.move.TYPE_INNER && tools.canAsync(targetSetting, dragTargetNode)) {
						view.asyncNode(targetSetting, dragTargetNode, false, dropCallback);
					} else {
						dropCallback();
					}

					setting.treeObj.trigger(consts.event.DROP, [event, targetSetting.treeId, newNodes, dragTargetNode, moveType, isCopy]);
				} else {
					for (i = 0, l = nodes.length; i < l; i++) {
						view.selectNode(targetSetting, nodes[i], i > 0);
					}
					setting.treeObj.trigger(consts.event.DROP, [event, setting.treeId, nodes, null, null, null]);
				}
			}

			doc.bind("selectstart", _docSelect);
			function _docSelect() {
				return false;
			}

			//Avoid FireFox's Bug
			//If zTree Div CSS set 'overflow', so drag node outside of zTree, and event.target is error.
			if (eventMouseDown.preventDefault) {
				eventMouseDown.preventDefault();
			}
			return true;
		}
	},

	//method of tools for zTree
	_tools = {
		getAbs: function getAbs(obj) {
			var oRect = obj.getBoundingClientRect();
			return [oRect.left, oRect.top];
		},
		inputFocus: function inputFocus(inputObj) {
			if (inputObj.get(0)) {
				inputObj.focus();
				tools.setCursorPosition(inputObj.get(0), inputObj.val().length);
			}
		},
		inputSelect: function inputSelect(inputObj) {
			if (inputObj.get(0)) {
				inputObj.focus();
				inputObj.select();
			}
		},
		setCursorPosition: function setCursorPosition(obj, pos) {
			if (obj.setSelectionRange) {
				obj.focus();
				obj.setSelectionRange(pos, pos);
			} else if (obj.createTextRange) {
				var range = obj.createTextRange();
				range.collapse(true);
				range.moveEnd('character', pos);
				range.moveStart('character', pos);
				range.select();
			}
		},
		showIfameMask: function showIfameMask(setting, showSign) {
			var root = data.getRoot(setting);
			//clear full mask
			while (root.dragMaskList.length > 0) {
				root.dragMaskList[0].remove();
				root.dragMaskList.shift();
			}
			if (showSign) {
				//show mask
				var iframeList = $("iframe");
				for (var i = 0, l = iframeList.length; i < l; i++) {
					var obj = iframeList.get(i),
					    r = tools.getAbs(obj),
					    dragMask = $("<div id='zTreeMask_" + i + "' class='zTreeMask' style='top:" + r[1] + "px; left:" + r[0] + "px; width:" + obj.offsetWidth + "px; height:" + obj.offsetHeight + "px;'></div>");
					dragMask.appendTo("body");
					root.dragMaskList.push(dragMask);
				}
			}
		}
	},

	//method of operate ztree dom
	_view = {
		addEditBtn: function addEditBtn(setting, node) {
			if (node.editNameFlag || $("#" + node.tId + consts.id.EDIT).length > 0) {
				return;
			}
			if (!tools.apply(setting.edit.showRenameBtn, [setting.treeId, node], setting.edit.showRenameBtn)) {
				return;
			}
			var aObj = $("#" + node.tId + consts.id.A),
			    editStr = "<span class='button edit' id='" + node.tId + consts.id.EDIT + "' title='" + tools.apply(setting.edit.renameTitle, [setting.treeId, node], setting.edit.renameTitle) + "' treeNode" + consts.id.EDIT + " style='display:none;'></span>";
			aObj.append(editStr);

			$("#" + node.tId + consts.id.EDIT).bind('click', function () {
				if (!tools.uCanDo(setting) || tools.apply(setting.callback.beforeEditName, [setting.treeId, node], true) == false) return false;
				view.editNode(setting, node);
				return false;
			}).show();
		},
		addRemoveBtn: function addRemoveBtn(setting, node) {
			if (node.editNameFlag || $("#" + node.tId + consts.id.REMOVE).length > 0) {
				return;
			}
			if (!tools.apply(setting.edit.showRemoveBtn, [setting.treeId, node], setting.edit.showRemoveBtn)) {
				return;
			}
			var aObj = $("#" + node.tId + consts.id.A),
			    removeStr = "<span class='button remove' id='" + node.tId + consts.id.REMOVE + "' title='" + tools.apply(setting.edit.removeTitle, [setting.treeId, node], setting.edit.removeTitle) + "' treeNode" + consts.id.REMOVE + " style='display:none;'></span>";
			aObj.append(removeStr);

			$("#" + node.tId + consts.id.REMOVE).bind('click', function () {
				if (!tools.uCanDo(setting) || tools.apply(setting.callback.beforeRemove, [setting.treeId, node], true) == false) return false;
				view.removeNode(setting, node);
				setting.treeObj.trigger(consts.event.REMOVE, [setting.treeId, node]);
				return false;
			}).bind('mousedown', function (eventMouseDown) {
				return true;
			}).show();
		},
		addAddBtn: function addAddBtn(setting, node) {
			if (node.editNameFlag || $("#" + node.tId + consts.id.ADD).length > 0) {
				return;
			}
			if (!tools.apply(setting.edit.showAddBtn, [setting.treeId, node], setting.edit.showAddBtn)) {
				return;
			}
			var aObj = $("#" + node.tId + consts.id.A),
			    addStr = "<span class='button add' id='" + node.tId + consts.id.ADD + "' title='" + tools.apply(setting.edit.addTitle, [setting.treeId, node], setting.edit.addTitle) + "' treeNode" + consts.id.ADD + " style='display:none;'></span>";
			aObj.append(addStr);

			$("#" + node.tId + consts.id.ADD).bind('click', function () {
				if (!tools.uCanDo(setting) || tools.apply(setting.callback.beforeAdd, [setting.treeId, node], true) == false) return true;
				setting.treeObj.trigger(consts.event.ADD, [setting.treeId, node]);
				return false;
			}).show();
		},
		addAcceptBtn: function addAcceptBtn(setting, node) {
			if (node.editNameFlag || $("#" + node.tId + consts.id.ACCEPT).length > 0) {
				return;
			}
			if (!tools.apply(setting.edit.showAcceptBtn, [setting.treeId, node], setting.edit.showAcceptBtn)) {
				return;
			}
			var aObj = $("#" + node.tId + consts.id.A),
			    acceptStr = "<span class='button accept' id='" + node.tId + consts.id.ACCEPT + "' title='" + tools.apply(setting.edit.acceptTitle, [setting.treeId, node], setting.edit.acceptTitle) + "' treeNode" + consts.id.ACCEPT + " style='display:none;'></span>";
			aObj.append(acceptStr);

			$("#" + node.tId + consts.id.ACCEPT).bind('click', function () {
				if (!tools.uCanDo(setting) || tools.apply(setting.callback.beforeAccept, [setting.treeId, node], true) == false) return true;
				setting.treeObj.trigger(consts.event.ACCEPT, [setting.treeId, node]);
				return false;
			}).bind('mousedown', function (eventMouseDown) {
				return true;
			}).show();
		},
		addHoverDom: function addHoverDom(setting, node) {
			if (data.getRoot(setting).showHoverDom) {
				node.isHover = true;
				if (setting.edit.enable) {
					view.addEditBtn(setting, node);
					view.addRemoveBtn(setting, node);
					view.addAddBtn(setting, node);
					view.addAcceptBtn(setting, node);
				}
				tools.apply(setting.view.addHoverDom, [setting.treeId, node]);
			}
		},
		cancelCurEditNode: function cancelCurEditNode(setting, forceName) {
			var root = data.getRoot(setting),
			    nameKey = setting.data.key.name,
			    node = root.curEditNode;

			if (node) {
				var inputObj = root.curEditInput;
				var newName = forceName ? forceName : inputObj.val();
				if (!forceName && tools.apply(setting.callback.beforeRename, [setting.treeId, node, newName], true) === false) {
					node.editNameFlag = true;
					return false;
				} else {
					node[nameKey] = newName ? newName : inputObj.val();
					if (!forceName) {
						setting.treeObj.trigger(consts.event.RENAME, [setting.treeId, node]);
					}
				}
				var aObj = $("#" + node.tId + consts.id.A);
				aObj.removeClass(consts.node.CURSELECTED_EDIT);
				inputObj.unbind();
				view.setNodeName(setting, node);
				node.editNameFlag = false;
				root.curEditNode = null;
				root.curEditInput = null;
				view.selectNode(setting, node, false);
			}
			root.noSelection = true;
			return true;
		},
		editNode: function editNode(setting, node) {
			var root = data.getRoot(setting);
			view.editNodeBlur = false;
			if (data.isSelectedNode(setting, node) && root.curEditNode == node && node.editNameFlag) {
				setTimeout(function () {
					tools.inputFocus(root.curEditInput);
				}, 0);
				return;
			}
			var nameKey = setting.data.key.name;
			node.editNameFlag = true;
			view.removeTreeDom(setting, node);
			view.cancelCurEditNode(setting);
			view.selectNode(setting, node, false);
			$("#" + node.tId + consts.id.SPAN).html("<input type=text class='rename' id='" + node.tId + consts.id.INPUT + "' treeNode" + consts.id.INPUT + " >");
			var inputObj = $("#" + node.tId + consts.id.INPUT);
			inputObj.attr("value", node[nameKey]);
			if (setting.edit.editNameSelectAll) {
				tools.inputSelect(inputObj);
			} else {
				tools.inputFocus(inputObj);
			}

			inputObj.bind('blur', function (event) {
				if (!view.editNodeBlur) {
					view.cancelCurEditNode(setting);
				}
			}).bind('keydown', function (event) {
				if (event.keyCode == "13") {
					view.editNodeBlur = true;
					view.cancelCurEditNode(setting, null, true);
				} else if (event.keyCode == "27") {
					view.cancelCurEditNode(setting, node[nameKey]);
				}
			}).bind('click', function (event) {
				return false;
			}).bind('dblclick', function (event) {
				return false;
			});

			$("#" + node.tId + consts.id.A).addClass(consts.node.CURSELECTED_EDIT);
			root.curEditInput = inputObj;
			root.noSelection = false;
			root.curEditNode = node;
		},
		moveNode: function moveNode(setting, targetNode, node, moveType, animateFlag, isSilent) {
			var root = data.getRoot(setting),
			    childKey = setting.data.key.children;
			if (targetNode == node) return;
			if (setting.data.keep.leaf && targetNode && !targetNode.isParent && moveType == consts.move.TYPE_INNER) return;
			var oldParentNode = node.parentTId ? node.getParentNode() : root,
			    targetNodeIsRoot = targetNode === null || targetNode == root;
			if (targetNodeIsRoot && targetNode === null) targetNode = root;
			if (targetNodeIsRoot) moveType = consts.move.TYPE_INNER;
			var targetParentNode = targetNode.parentTId ? targetNode.getParentNode() : root;

			if (moveType != consts.move.TYPE_PREV && moveType != consts.move.TYPE_NEXT) {
				moveType = consts.move.TYPE_INNER;
			}

			if (moveType == consts.move.TYPE_INNER) {
				if (targetNodeIsRoot) {
					//parentTId of root node is null
					node.parentTId = null;
				} else {
					if (!targetNode.isParent) {
						targetNode.isParent = true;
						targetNode.open = !!targetNode.open;
						view.setNodeLineIcos(setting, targetNode);
					}
					node.parentTId = targetNode.tId;
				}
			}

			//move node Dom
			var targetObj, target_ulObj;
			if (targetNodeIsRoot) {
				targetObj = setting.treeObj;
				target_ulObj = targetObj;
			} else {
				if (!isSilent && moveType == consts.move.TYPE_INNER) {
					view.expandCollapseNode(setting, targetNode, true, false);
				} else if (!isSilent) {
					view.expandCollapseNode(setting, targetNode.getParentNode(), true, false);
				}
				targetObj = $("#" + targetNode.tId);
				target_ulObj = $("#" + targetNode.tId + consts.id.UL);
				if (!!targetObj.get(0) && !target_ulObj.get(0)) {
					var ulstr = [];
					view.makeUlHtml(setting, targetNode, ulstr, '');
					targetObj.append(ulstr.join(''));
				}
				target_ulObj = $("#" + targetNode.tId + consts.id.UL);
			}
			var nodeDom = $("#" + node.tId);
			if (!nodeDom.get(0)) {
				nodeDom = view.appendNodes(setting, node.level, [node], null, false, true).join('');
			} else if (!targetObj.get(0)) {
				nodeDom.remove();
			}
			if (target_ulObj.get(0) && moveType == consts.move.TYPE_INNER) {
				target_ulObj.append(nodeDom);
			} else if (targetObj.get(0) && moveType == consts.move.TYPE_PREV) {
				targetObj.before(nodeDom);
			} else if (targetObj.get(0) && moveType == consts.move.TYPE_NEXT) {
				targetObj.after(nodeDom);
			}

			//repair the data after move
			var i,
			    l,
			    tmpSrcIndex = -1,
			    tmpTargetIndex = 0,
			    oldNeighbor = null,
			    newNeighbor = null,
			    oldLevel = node.level;
			if (node.isFirstNode) {
				tmpSrcIndex = 0;
				if (oldParentNode[childKey].length > 1) {
					oldNeighbor = oldParentNode[childKey][1];
					oldNeighbor.isFirstNode = true;
				}
			} else if (node.isLastNode) {
				tmpSrcIndex = oldParentNode[childKey].length - 1;
				oldNeighbor = oldParentNode[childKey][tmpSrcIndex - 1];
				oldNeighbor.isLastNode = true;
			} else {
				for (i = 0, l = oldParentNode[childKey].length; i < l; i++) {
					if (oldParentNode[childKey][i].tId == node.tId) {
						tmpSrcIndex = i;
						break;
					}
				}
			}
			if (tmpSrcIndex >= 0) {
				oldParentNode[childKey].splice(tmpSrcIndex, 1);
			}
			if (moveType != consts.move.TYPE_INNER) {
				for (i = 0, l = targetParentNode[childKey].length; i < l; i++) {
					if (targetParentNode[childKey][i].tId == targetNode.tId) tmpTargetIndex = i;
				}
			}
			if (moveType == consts.move.TYPE_INNER) {
				if (!targetNode[childKey]) targetNode[childKey] = new Array();
				if (targetNode[childKey].length > 0) {
					newNeighbor = targetNode[childKey][targetNode[childKey].length - 1];
					newNeighbor.isLastNode = false;
				}
				targetNode[childKey].splice(targetNode[childKey].length, 0, node);
				node.isLastNode = true;
				node.isFirstNode = targetNode[childKey].length == 1;
			} else if (targetNode.isFirstNode && moveType == consts.move.TYPE_PREV) {
				targetParentNode[childKey].splice(tmpTargetIndex, 0, node);
				newNeighbor = targetNode;
				newNeighbor.isFirstNode = false;
				node.parentTId = targetNode.parentTId;
				node.isFirstNode = true;
				node.isLastNode = false;
			} else if (targetNode.isLastNode && moveType == consts.move.TYPE_NEXT) {
				targetParentNode[childKey].splice(tmpTargetIndex + 1, 0, node);
				newNeighbor = targetNode;
				newNeighbor.isLastNode = false;
				node.parentTId = targetNode.parentTId;
				node.isFirstNode = false;
				node.isLastNode = true;
			} else {
				if (moveType == consts.move.TYPE_PREV) {
					targetParentNode[childKey].splice(tmpTargetIndex, 0, node);
				} else {
					targetParentNode[childKey].splice(tmpTargetIndex + 1, 0, node);
				}
				node.parentTId = targetNode.parentTId;
				node.isFirstNode = false;
				node.isLastNode = false;
			}
			data.fixPIdKeyValue(setting, node);
			data.setSonNodeLevel(setting, node.getParentNode(), node);

			//repair node what been moved
			view.setNodeLineIcos(setting, node);
			view.repairNodeLevelClass(setting, node, oldLevel);

			//repair node's old parentNode dom
			if (!setting.data.keep.parent && oldParentNode[childKey].length < 1) {
				//old parentNode has no child nodes
				oldParentNode.isParent = false;
				oldParentNode.open = false;
				var tmp_ulObj = $("#" + oldParentNode.tId + consts.id.UL),
				    tmp_switchObj = $("#" + oldParentNode.tId + consts.id.SWITCH),
				    tmp_icoObj = $("#" + oldParentNode.tId + consts.id.ICON);
				view.replaceSwitchClass(oldParentNode, tmp_switchObj, consts.folder.DOCU);
				view.replaceIcoClass(oldParentNode, tmp_icoObj, consts.folder.DOCU);
				tmp_ulObj.css("display", "none");
			} else if (oldNeighbor) {
				//old neigbor node
				view.setNodeLineIcos(setting, oldNeighbor);
			}

			//new neigbor node
			if (newNeighbor) {
				view.setNodeLineIcos(setting, newNeighbor);
			}

			//repair checkbox / radio
			if (!!setting.check && setting.check.enable && view.repairChkClass) {
				view.repairChkClass(setting, oldParentNode);
				view.repairParentChkClassWithSelf(setting, oldParentNode);
				if (oldParentNode != node.parent) view.repairParentChkClassWithSelf(setting, node);
			}

			//expand parents after move
			if (!isSilent) {
				view.expandCollapseParentNode(setting, node.getParentNode(), true, animateFlag);
			}
		},
		removeEditBtn: function removeEditBtn(node) {
			$("#" + node.tId + consts.id.EDIT).unbind().remove();
		},
		removeRemoveBtn: function removeRemoveBtn(node) {
			$("#" + node.tId + consts.id.REMOVE).unbind().remove();
		},
		removeAddBtn: function removeAddBtn(node) {
			$("#" + node.tId + consts.id.ADD).unbind().remove();
		},
		removeAcceptBtn: function removeAcceptBtn(node) {
			$("#" + node.tId + consts.id.ACCEPT).unbind().remove();
		},
		removeTreeDom: function removeTreeDom(setting, node) {
			node.isHover = false;
			view.removeEditBtn(node);
			view.removeRemoveBtn(node);
			view.removeAddBtn(node);
			view.removeAcceptBtn(node);
			tools.apply(setting.view.removeHoverDom, [setting.treeId, node]);
		},
		repairNodeLevelClass: function repairNodeLevelClass(setting, node, oldLevel) {
			if (oldLevel === node.level) return;
			var liObj = $("#" + node.tId),
			    aObj = $("#" + node.tId + consts.id.A),
			    ulObj = $("#" + node.tId + consts.id.UL),
			    oldClass = "level" + oldLevel,
			    newClass = "level" + node.level;
			liObj.removeClass(oldClass);
			liObj.addClass(newClass);
			aObj.removeClass(oldClass);
			aObj.addClass(newClass);
			ulObj.removeClass(oldClass);
			ulObj.addClass(newClass);
		}
	},
	    _z = {
		tools: _tools,
		view: _view,
		event: _event,
		data: _data
	};
	$.extend(true, $.fn.zTree.consts, _consts);
	$.extend(true, $.fn.zTree._z, _z);

	var zt = $.fn.zTree,
	    tools = zt._z.tools,
	    consts = zt.consts,
	    view = zt._z.view,
	    data = zt._z.data,
	    event = zt._z.event;

	data.exSetting(_setting);
	data.addInitBind(_bindEvent);
	data.addInitUnBind(_unbindEvent);
	data.addInitCache(_initCache);
	data.addInitNode(_initNode);
	data.addInitProxy(_eventProxy);
	data.addInitRoot(_initRoot);
	data.addZTreeTools(_zTreeTools);

	var _cancelPreSelectedNode = view.cancelPreSelectedNode;
	view.cancelPreSelectedNode = function (setting, node) {
		var list = data.getRoot(setting).curSelectedList;
		for (var i = 0, j = list.length; i < j; i++) {
			if (!node || node === list[i]) {
				view.removeTreeDom(setting, list[i]);
				if (node) break;
			}
		}
		if (_cancelPreSelectedNode) _cancelPreSelectedNode.apply(view, arguments);
	};

	var _createNodes = view.createNodes;
	view.createNodes = function (setting, level, nodes, parentNode) {
		if (_createNodes) {
			_createNodes.apply(view, arguments);
		}
		if (!nodes) return;
		if (view.repairParentChkClassWithSelf) {
			view.repairParentChkClassWithSelf(setting, parentNode);
		}
	};

	view.makeNodeUrl = function (setting, node) {
		return node.url && !setting.edit.enable ? node.url : null;
	};

	var _removeNode = view.removeNode;
	view.removeNode = function (setting, node) {
		var root = data.getRoot(setting);
		if (root.curEditNode === node) root.curEditNode = null;
		if (_removeNode) {
			_removeNode.apply(view, arguments);
		}
	};

	var _selectNode = view.selectNode;
	view.selectNode = function (setting, node, addFlag) {
		var root = data.getRoot(setting);
		if (data.isSelectedNode(setting, node) && root.curEditNode == node && node.editNameFlag) {
			return false;
		}
		if (_selectNode) _selectNode.apply(view, arguments);
		view.addHoverDom(setting, node);
		return true;
	};

	var _uCanDo = tools.uCanDo;
	tools.uCanDo = function (setting, e) {
		var root = data.getRoot(setting);
		if (e && (tools.eqs(e.type, "mouseover") || tools.eqs(e.type, "mouseout") || tools.eqs(e.type, "mousedown") || tools.eqs(e.type, "mouseup"))) {
			return true;
		}
		return !root.curEditNode && (_uCanDo ? _uCanDo.apply(view, arguments) : true);
	};
});

/***/ }),
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(factory){
	if (true) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0),__webpack_require__(5), __webpack_require__(105)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {
		factory(jQuery);
	}
}(function(i){i.extend(!0,i.fn.zTree._z,{view:{clearOldFirstNode:function(c,b){for(var a=b.getNextNode();a;){if(a.isFirstNode){a.isFirstNode=!1;f.setNodeLineIcos(c,a);break}if(a.isLastNode)break;a=a.getNextNode()}},clearOldLastNode:function(c,b){for(var a=b.getPreNode();a;){if(a.isLastNode){a.isLastNode=!1;f.setNodeLineIcos(c,a);break}if(a.isFirstNode)break;a=a.getPreNode()}},makeDOMNodeMainBefore:function(c,b,a){c.push("<li ",a.isHidden?"style='display:none;' ":"","id='",a.tId,"' class='level",a.level,
"' tabindex='0' hidefocus='true' treenode>")},showNode:function(c,b){b.isHidden=!1;e.initShowForExCheck(c,b);i("#"+b.tId).show()},showNodes:function(c,b,a){if(b&&b.length!=0){var d={},h,j;for(h=0,j=b.length;h<j;h++){var g=b[h];if(!d[g.parentTId]){var i=g.getParentNode();d[g.parentTId]=i===null?e.getRoot(c):g.getParentNode()}f.showNode(c,g,a)}for(var k in d)b=d[k][c.data.key.children],f.setFirstNodeForShow(c,b),f.setLastNodeForShow(c,b)}},hideNode:function(c,b){b.isHidden=!0;b.isFirstNode=!1;b.isLastNode=
!1;e.initHideForExCheck(c,b);f.cancelPreSelectedNode(c,b);i("#"+b.tId).hide()},hideNodes:function(c,b,a){if(b&&b.length!=0){var d={},h,j;for(h=0,j=b.length;h<j;h++){var g=b[h];if((g.isFirstNode||g.isLastNode)&&!d[g.parentTId]){var i=g.getParentNode();d[g.parentTId]=i===null?e.getRoot(c):g.getParentNode()}f.hideNode(c,g,a)}for(var k in d)b=d[k][c.data.key.children],f.setFirstNodeForHide(c,b),f.setLastNodeForHide(c,b)}},setFirstNode:function(c,b){var a=c.data.key.children,d=b[a].length;d>0&&!b[a][0].isHidden?
b[a][0].isFirstNode=!0:d>0&&f.setFirstNodeForHide(c,b[a])},setLastNode:function(c,b){var a=c.data.key.children,d=b[a].length;d>0&&!b[a][0].isHidden?b[a][d-1].isLastNode=!0:d>0&&f.setLastNodeForHide(c,b[a])},setFirstNodeForHide:function(c,b){var a,d,h;for(d=0,h=b.length;d<h;d++){a=b[d];if(a.isFirstNode)break;if(!a.isHidden&&!a.isFirstNode){a.isFirstNode=!0;f.setNodeLineIcos(c,a);break}else a=null}return a},setFirstNodeForShow:function(c,b){var a,d,h,e,g;for(d=0,h=b.length;d<h;d++)if(a=b[d],!e&&!a.isHidden&&
a.isFirstNode){e=a;break}else if(!e&&!a.isHidden&&!a.isFirstNode)a.isFirstNode=!0,e=a,f.setNodeLineIcos(c,a);else if(e&&a.isFirstNode){a.isFirstNode=!1;g=a;f.setNodeLineIcos(c,a);break}return{"new":e,old:g}},setLastNodeForHide:function(c,b){var a,d;for(d=b.length-1;d>=0;d--){a=b[d];if(a.isLastNode)break;if(!a.isHidden&&!a.isLastNode){a.isLastNode=!0;f.setNodeLineIcos(c,a);break}else a=null}return a},setLastNodeForShow:function(c,b){var a,d,e,j;for(d=b.length-1;d>=0;d--)if(a=b[d],!e&&!a.isHidden&&
a.isLastNode){e=a;break}else if(!e&&!a.isHidden&&!a.isLastNode)a.isLastNode=!0,e=a,f.setNodeLineIcos(c,a);else if(e&&a.isLastNode){a.isLastNode=!1;j=a;f.setNodeLineIcos(c,a);break}return{"new":e,old:j}}},data:{initHideForExCheck:function(c,b){if(b.isHidden&&c.check&&c.check.enable)b._nocheck=!!b.nocheck,b.nocheck=!0,b.check_Child_State=-1,f.repairParentChkClassWithSelf&&f.repairParentChkClassWithSelf(c,b)},initShowForExCheck:function(c,b){if(!b.isHidden&&c.check&&c.check.enable){b.nocheck=b._nocheck;
delete b._nocheck;if(f.setChkClass){var a=i("#"+b.tId+r.id.CHECK);f.setChkClass(c,a,b)}f.repairParentChkClassWithSelf&&f.repairParentChkClassWithSelf(c,b)}}}});var k=i.fn.zTree,s=k._z.tools,r=k.consts,f=k._z.view,e=k._z.data;e.addInitNode(function(c,b,a){if(typeof a.isHidden=="string")a.isHidden=s.eqs(a.isHidden,"true");a.isHidden=!!a.isHidden;e.initHideForExCheck(c,a)});e.addBeforeA(function(){});e.addZTreeTools(function(c,b){b.showNodes=function(a,b){f.showNodes(c,a,b)};b.showNode=function(a,b){a&&
f.showNodes(c,[a],b)};b.hideNodes=function(a,b){f.hideNodes(c,a,b)};b.hideNode=function(a,b){a&&f.hideNodes(c,[a],b)};var a=b.checkNode;if(a)b.checkNode=function(c,e,f,g){(!c||!c.isHidden)&&a.apply(b,arguments)}});var l=e.initNode;e.tmpHideParent=-1;e.initNode=function(c,b,a,d,h,j,g){if(e.tmpHideParent!==d){e.tmpHideParent=d;var i=(d?d:e.getRoot(c))[c.data.key.children];e.tmpHideFirstNode=f.setFirstNodeForHide(c,i);e.tmpHideLastNode=f.setLastNodeForHide(c,i);f.setNodeLineIcos(c,e.tmpHideFirstNode);
f.setNodeLineIcos(c,e.tmpHideLastNode)}h=e.tmpHideFirstNode===a;j=e.tmpHideLastNode===a;l&&l.apply(e,arguments);j&&f.clearOldLastNode(c,a)};var m=e.makeChkFlag;if(m)e.makeChkFlag=function(c,b){(!b||!b.isHidden)&&m.apply(e,arguments)};var n=e.getTreeCheckedNodes;if(n)e.getTreeCheckedNodes=function(c,b,a,d){if(b&&b.length>0){var f=b[0].getParentNode();if(f&&f.isHidden)return[]}return n.apply(e,arguments)};var o=e.getTreeChangeCheckedNodes;if(o)e.getTreeChangeCheckedNodes=function(c,b,a){if(b&&b.length>
0){var d=b[0].getParentNode();if(d&&d.isHidden)return[]}return o.apply(e,arguments)};var p=f.setSonNodeCheckBox;if(p)f.setSonNodeCheckBox=function(c,b,a,d){(!b||!b.isHidden)&&p.apply(f,arguments)};var q=f.repairParentChkClassWithSelf;if(q)f.repairParentChkClassWithSelf=function(c,b){(!b||!b.isHidden)&&q.apply(f,arguments)}}));


/***/ }),
/* 244 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 245 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Created by Administrator on 2016/10/31.
 */

__webpack_require__(247);

/***/ }),
/* 247 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

(function (factory) {
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {
        factory(jQuery);
    }
})(function ($) {
    $.extend(true, window, {
        button: TaButton
    });
    __webpack_require__(249);
    function TaButton(buttonId, options) {
        var self = this;
        var $obj = $("#" + buttonId);
        var $btnIcon = $obj.find(".button-icon");
        var $btnBadge = $obj.find(".badge-button");
        var _this = $obj[0];
        options = $.extend({
            type: "",
            disabled: false,
            loading: false,
            isSyncSubmit: false,
            submitIds: null,
            url: null,
            parameter: null,
            onSubmit: null,
            isValidate: true,
            successCallBack: null,
            failureCallBack: null,
            isIncludeNullFields: null,
            badgeKey: null,
            badgeMax: null,
            badgeIcon: null
        }, options || {});
        function init() {
            $obj.attr("realId", buttonId);
            initType();
            initStatus();
            initKeySupport();
            if ($btnBadge.length) {
                initBadge();
            }
        } // end init

        //初始化按钮类型
        function initType() {
            //刷新页面
            if (options.type == "resetPage") {
                $obj.on("click", function () {
                    window.location.reload(); //可选参数true 每次重新加载 false 每次从缓存中加载
                    window.event.returnValue = false;
                });
            }
            // 把submit的东西搬过来 提交按钮
            if (options.type == "submit") {
                $obj.on("click", function () {
                    if (options.isSyncSubmit != null && options.isSyncSubmit) {
                        Base.submitForm(options.submitIds, options.onSubmit, options.isValidate, options.url);
                    } else {
                        Base.submit.call(this, options.submitIds, options.url, options.parameter, options.onSubmit, options.isValidate, options.successCallBack, options.failureCallBack, options.isIncludeNullFields);
                    }
                });
            }
        }

        //初始化按钮状态
        function initStatus() {
            if (options.disabled == true) {
                setEnable(false);
            }
            if (options.loading == true) {
                setLoading(true);
            }
        }

        //左右键以及快捷键支持
        function initKeySupport() {
            //左右键支持
            $obj.focus(function () {
                $obj.bind('keydown.leftright', function (event) {
                    if (event.keyCode == 37) {
                        var f = Base._getPreFormField(_this.id);
                        if (f && f.id) Base.focus(f.id);
                    } else if (event.keyCode == 39) {
                        var f = Base._getNextFormField(_this.id);
                        if (f && f.id) Base.focus(f.id);
                    }
                });
            }).blur(function () {
                $obj.unbind('keydown.leftright');
            });
            //快捷键支持
            var m = _this.disabled;
            if (!$obj.is(':hidden') && !_this.disabled) {
                var hotKey = $obj.attr('hotKey');
                if (hotKey && hotKeyregister) {
                    hotKeyregister.add(hotKey, function () {
                        _this.focus();
                        _this.click();
                        return false;
                    });
                }
            }
        }

        //初始化徽标记
        function initBadge() {
            if (options.badgeKey) {
                setBadgeValue(options.badgeKey);
            } else {
                if (!options.badgeIcon) {
                    $btnBadge.addClass("isDot");
                }
                _setBadgePosition();
            }
        }

        /**
         * 设置组件是否可用。
         * @method setEnable
         * @param {bool} enable true/false 默认true可用
         * @author cy
         */

        function setEnable(enable) {
            enable = enable === false ? false : true;
            if (enable) {
                //如果可用
                $obj.removeClass("disabled");
                _this.disabled = false;
            } else {
                //如果不可用
                $obj.addClass("disabled");
                _this.disabled = true;
            }
            var hotKey = $obj.attr('hotKey');
            if (hotKey && hotKeyregister) {
                if (enable) {
                    if (!hotKeyregister.all_shortcuts[hotKey.toLowerCase()]) hotKeyregister.add(hotKey, function () {
                        _this.focus();
                        _this.click();
                        return false;
                    });
                } else {
                    hotKeyregister.remove(hotKey);
                }
            }
        }

        /**
         * 设置组件获得焦点
         * @method SetFocus
         * @author cy
         */
        function setFocus() {
            $obj.focus();
        }
        /**
         * 设置组件显示或者隐藏
         * @method setVisible
         * @param {bool} showOrHide 是设置隐藏还是显示
         * @param {bool} isHold 是否占位
         * @author cy
         */
        function setVisible(showOrHide, isHold) {
            var showOrHide = showOrHide === false ? false : true;
            if (showOrHide) {
                //如果是显示
                $obj.show().css('visibility', 'visible');
                var hotKey = $obj.attr('hotKey');
                if (hotKey && hotKeyregister) {
                    hotKeyregister.add(hotKey, function () {
                        _this.focus();
                        _this.click();
                        return false;
                    });
                }
            } else {
                if (isHold) {
                    $obj.css('visibility', 'hidden');
                } else {
                    $obj.hide();
                }
                var hotKey = $obj.attr('hotKey');
                if (hotKey && hotKeyregister) {
                    var _this = $obj[0];
                    hotKeyregister.remove(hotKey);
                }
            }
        }

        /**
         * 设置组件是否加载中。
         * @method setLoading
         * @param {bool} isLoading true/false 默认true加载中
         * @author Selina
         */
        function setLoading(isLoading) {
            isLoading = isLoading === false ? false : true;
            //按钮是可用状态时
            if (!$obj.hasClass("disabled")) {
                setEnable(!isLoading);
                if (isLoading) {
                    $obj.addClass("loading").removeClass("disabled");
                }
            }

            if (isLoading) {
                $btnIcon.addClass("icon-loading");
            } else {
                $obj.removeClass("loading");
                $btnIcon.removeClass("icon-loading");
            }
        }

        /**
         * 设置徽标记显示值
         * @method setBadgeValue
         * @param {value} 若徽标记为数字且大于最大值，显示为 "最大值+"。否则直接显示
         * @author Selina
         */
        function setBadgeValue(value) {
            if (options.badgeMax != null && !isNaN(options.badgeMax) && !isNaN(value)) {
                var badgeKey = parseInt(value),
                    badgeMax = parseInt(options.badgeMax);
                if (badgeMax > 0) {
                    if (badgeKey > badgeMax) {
                        $btnBadge.html(badgeMax + "+");
                    } else {
                        $btnBadge.html(badgeKey);
                    }
                } else {
                    setBadgeVisible(false);
                }
            } else {
                $btnBadge.html(value);
            }
            _setBadgePosition();
        }

        /**
         * 设置徽标记是否显示
         * @method setBadgeVisible
         * @param {showOrHide} 设置隐藏还是显示，默认true显示
         * @author Selina
         */
        function setBadgeVisible(showOrHide) {
            var showOrHide = showOrHide === false ? false : true;
            if (showOrHide) {
                $btnBadge.show();
            } else {
                $btnBadge.hide();
            }
        }

        /**
         * 设置徽标记位置
         * @method _setBadgePosition
         * @author Selina
         */
        function _setBadgePosition() {
            var badgeW = $btnBadge.outerWidth(true);
            $btnBadge.css("right", -badgeW / 2);
        }

        init(); // 调用初始化方法
        $.extend(this, { // 为this对象
            "cmptype": 'tabutton', // 将方法注册为公共方法
            "version": "1.1.0",
            setEnable: setEnable,
            setVisible: setVisible,
            setFocus: setFocus,
            setLoading: setLoading,
            setBadgeValue: setBadgeValue,
            setBadgeVisible: setBadgeVisible
        });
    }

    return TaButton;
});

/***/ }),
/* 249 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 250 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

(function (factory) {
	if (true) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {
		factory(jQuery);
	}
})(function ($) {
	$.extend(true, window, {
		TaButtonGroup: TaButtonGroup
	});

	__webpack_require__(251);
	function TaButtonGroup(id, options) {
		var self = this;
		options = $.extend({}, options || {});
		function init() {
			return self;
		} // end init

		init(); // 调用初始化方法
		function setEnable(isEnable) {
			TaContainerSupport.setEnable(id, isEnable);
		}
		function setVisible(isVisible, isHold) {
			TaContainerSupport.setVisible(id, isVisible, isHold);
		}
		$.extend(this, { // 为this对象
			"cmptype": 'TaButtonGroup', // 将方法注册为公共方法
			"version": "1.1.0",
			setEnable: setEnable,
			setVisible: setVisible
		});
	}

	return TaButtonGroup;
});

/***/ }),
/* 251 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 252 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 253 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(jQuery) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

(function (factory) {
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(154), __webpack_require__(17), __webpack_require__(28)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {
        factory(jQuery);
    }
})(function ($) {
    $.extend(true, window, {
        TaCheckboxGroup: TaCheckboxGroup
    });
    __webpack_require__(254);
    function TaCheckboxGroup(id, options) {
        options = $.extend({
            bpopTipMsg: null,
            bpopTipWidth: 500,
            bpopTipHeight: 300,
            bpopTipPosition: "top",
            checked: false,
            required: false,
            readOnly: false,
            disabled: false,
            validType: null,
            triggerHandles: "click mouseover focus blur"
        }, options || {});
        var $layoutContainer = $("#" + id);
        $layoutContainer.attr("realId", id);
        var $checkboxContainer = $(">div.checkboxgroup-Container", $layoutContainer);
        var validObj = null;
        //组件事件静默标志 true 静默，静默类事件不执行
        var isSilence = false;

        function init() {
            if (options.bpopTipMsg) {
                var _op = {
                    width: options.bpopTipWidth,
                    height: options.bpopTipHeight,
                    position: options.bpopTipPosition,
                    info: options.bpopTipMsg
                };
                Bubble.setBubbleEvent($checkboxContainer, _op);
            }

            if (options.validType) {
                $checkboxContainer.addClass("validate");
                validObj = new validateObj(id, $checkboxContainer, options);
            }
            // 对于checkboxgroup单击做处理，全选或取消
            $layoutContainer.find('>label.checkboxgroup-label').bind("click", function () {
                if (isSilence) return;
                var checkAll = true;
                if (!$(this).hasClass("checkAll")) {
                    $(this).addClass("checkAll");
                    checkAll = true;
                } else {
                    $(this).removeClass("checkAll");
                    checkAll = false;
                }
                $layoutContainer.find('input[type=checkbox]').not("[readonly]").not("[disabled]").each(function () {
                    this.checked = checkAll;
                    var obj = Base.getObj(this.id);
                    if (obj && obj.cmptype == 'tacheckbox') {
                        obj.setChecked(this.checked);
                    }
                });
            });

            _declarationState(true);
        }

        //初始化组件状态
        function _declarationState(isInit) {
            if (isInit) {
                if (options.readOnly) setReadOnly();
                if (options.disabled) setEnable(false);
                if (options.value !== null) setValue(options.value);
                if (options.required) setRequired();
            } else {
                setReadOnly(options.readOnly);
                setEnable(!options.disabled);
                setValue(options.value);
                setRequired(options.required);
            }
        }

        //全选/全不选
        function setAllChecked(checked) {
            checked = !(checked === false);
            $layoutContainer.find('input[type=checkbox]').each(function () {
                this.checked = checked;
                var obj = Base.getObj(this.id);
                if (obj && obj.cmptype == 'tacheckbox') {
                    obj.setChecked(this.checked);
                }
            });
        }

        //反选
        function setAllInvert() {
            $layoutContainer.find('input[type=checkbox]').each(function () {
                this.checked = !this.checked;
                var obj = Base.getObj(this.id);
                if (obj && obj.cmptype == 'tacheckbox') {
                    obj.setChecked(this.checked);
                }
            });
        }

        function setValue(value) {
            $layoutContainer.find('input[type=checkbox]').each(function () {
                // if (this.disabled == true || this.disabled == "disabled") return true;
                if (!((typeof value === "undefined" ? "undefined" : _typeof(value)) == 'object')) {
                    this.checked = this.value == value; //处理原始标签
                    var obj = Base.getObj(this.id); //处理框架标签
                    if (obj && obj.cmptype == 'tacheckbox') {
                        obj.setValue(value);
                    }
                } else if (jQuery.isArray(value)) {
                    var flag = false;
                    for (var i = 0; i < value.length; i++) {
                        if (value[i] == this.value) flag = true;
                    }
                    this.checked = flag;

                    var obj = Base.getObj(this.id);
                    if (obj && obj.cmptype == 'tacheckbox') {
                        obj.setValue(flag ? this.value : undefined);
                    }
                }
            });
        }

        function getValue() {
            var ret = [];
            $layoutContainer.find('input[type=checkbox]:checked').each(function () {
                ret.push(this.value);
            });
            return ret;
        }

        function setReadOnly(isReadOnly, isIconSilence) {
            var bool = isReadOnly === false;
            $layoutContainer.find('input[type=checkbox]').each(function () {
                if (bool) {
                    $(this).removeAttr('readOnly');
                } else {
                    $(this).attr('readOnly', true);
                }
                var obj = Base.getObj(this.id);
                if (obj && obj.cmptype == 'tacheckbox') {
                    obj.setReadOnly(isReadOnly, isIconSilence);
                }
            });
            _silenceControl(!bool, !bool && !(isIconSilence === false));
        }

        function setEnable(isEnable) {
            var bool = isEnable === false;
            $layoutContainer.find('input[type=checkbox]').each(function () {
                if (bool) {
                    $(this).attr('disabled', 'disabled');
                } else {
                    $(this).removeAttr('disabled');
                }
                var obj = Base.getObj(this.id);
                if (obj && obj.cmptype == 'tacheckbox') {
                    obj.setEnable(isEnable);
                }
            });
            _silenceControl(bool, bool);
        }

        function setVisible(isVisiable, isHold) {
            if (isVisiable) {
                $layoutContainer.show().css('visibility', 'visible');
            } else {
                if (isHold) {
                    $layoutContainer.css('visibility', 'hidden');
                } else {
                    $layoutContainer.hide();
                }
            }
        }

        //组件静默状态控制，按事件和图标区分，readOnly,disable默认都是事件不执行，图标不显示 add by xp
        function _silenceControl(eventBool, iconBool) {
            // if (iconBool) {
            //     $inputContainer.find(".textIcon").hide();
            // } else {
            //     $inputContainer.find(".textIcon").show();
            // }
            isSilence = eventBool;
        }

        function setRequired(bool) {
            if (bool === false) {
                $layoutContainer.removeClass("required");
                validObj && validObj.removeOrder("required");
            } else {
                //必输
                $layoutContainer.addClass("required");
                if (validObj) {
                    validObj.addOrder({ type: "required", msg: options.toolTip });
                } else {
                    validObj = new validateObj(id, $checkboxContainer, options);
                    $checkboxContainer.addClass("validate");
                    validObj.addOrder({ type: "required", msg: options.toolTip });
                }
            }
        }

        function doValidate() {
            if (validObj) {
                return validObj.executeValidate();
            } else {
                return true;
            }
        }

        function getInputLabel() {
            if ($layoutContainer.find(">label")[0]) {
                return $layoutContainer.find(">label");
            }
        }

        function reset() {
            _declarationState();
        }

        init();
        return {
            "cmptype": 'tacheckboxGroup',
            "version": '1.1.0',
            "setValue": setValue,
            "getValue": getValue,
            "setReadOnly": setReadOnly,
            "setVisible": setVisible,
            "setEnable": setEnable,
            "setAllChecked": setAllChecked,
            "setAllInvert": setAllInvert,
            "setRequired": setRequired,
            "doValidate": doValidate,
            "getInputLabel": getInputLabel,
            "reset": reset
        };
    }
    TaCheckboxGroup.prototype = new TaContainer();
    TaCheckboxGroup.prototype.constructor = TaCheckboxGroup;
    return TaCheckboxGroup;
});
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 254 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 255 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;__webpack_require__(256);
(function(factory){
	if (true) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0),__webpack_require__(33),__webpack_require__(53),__webpack_require__(41),__webpack_require__(65),__webpack_require__(64)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {
		factory(jQuery);
	}
})(function($){
	$.extend(true, window, {
		TaDate : TaDate
	});
	function TaDate(dateId,options){
        options = $.extend({
            key: null,
            value: null,
            required:false,
            readOnly: false,
            disabled: false,
            validType: null,
            bpopTipWidth: "300",
            bpopTipHeight: "500",
            bpopTipPosition: "top",
            //i18n: 按n键可自动输入当前时间
            bpopTipMsg: Base.I18n.getLangText("taface.module.validatebox.datedefualtbpopmsg"),
            textHelpWidth:"200",
            textHelpPosition:"bottomLeft",
            textHelp: null,
            toolTip:"",
			params:{
                isShowWeek:false
			}
        }, options || {});

        var $showInput = $("#" + dateId).attr("realId",dateId);
        var $inputContainer = $showInput.parent("div.date-input-Container");
        var $layoutContainer = $inputContainer.parent("div.date-layout-Container");
        var $Label = $(".date-label",$layoutContainer);
        var $textHelp = $showInput.siblings(".textHelp-layout-Container");
        var $validateIcon = $showInput.siblings(".validateIcon");
        var $dateIcon = $showInput.siblings(".dateIcon");
        var validObj=null;
        //组件事件静默标志 true 静默，静默类事件不执行
        var isSilence = false;

		var taDatetimemask = new TaDatetimeMask($showInput);

        options.params["skin"] = Base.globvar.FaceSkin||"shebaoBlue";//支持皮肤切换
        options.params["lang"] = Base.globvar.langType||"zh_CN";//支持国际化语言切换
		var defineConfig = {};
		defineConfig.$lang = {}
		//创建日期输入
		if($showInput.hasClass('datefield')){
            options.validType = options.validType ||[{type:'date'}];
			defineConfig.$lang["en_US"] = {todayStr:"Today"};
			defineConfig.$lang["zh_CN"] = {todayStr:"\u4ECA\u5929"};//今天
			defineConfig.$lang["zh_TW"] = {todayStr:"\u4ECA\u5929"};
			taDatetimemask.datetimeMask(1);//今天
		}
		//创建日期时间输入
		if($showInput.hasClass('datetimefield')){
            options.validType = options.validType ||[{type:'datetime'}];
			defineConfig.$lang["en_US"] = {todayStr:"Today"};
			defineConfig.$lang["zh_CN"] = {todayStr:"\u73b0\u5728"};//现在
			defineConfig.$lang["zh_TW"] = {todayStr:"\u73fe\u5728"};
			taDatetimemask.datetimeMask(2);
		}
		//创建年月输入
		if($showInput.hasClass('dateMonthfield')){
            options.validType = options.validType ||[{type:'dateMonth'}];
			defineConfig.$lang["en_US"] = {todayStr:"Today"};
			defineConfig.$lang["zh_CN"] = {todayStr:"\u4eca\u6708"};//今月
			defineConfig.$lang["zh_TW"] = {todayStr:"\u4eca\u6708"};
			taDatetimemask.datetimeMask(5);
		}
		//期号
		if($showInput.hasClass('issuefield')){
            options.validType = options.validType ||[{type:'issue'}];
			defineConfig.$lang["en_US"] = {todayStr:"Today"};
			defineConfig.$lang["zh_CN"] = {todayStr:"\u5f53\u671f"};//当期
			defineConfig.$lang["zh_TW"] = {todayStr:"\u7576\u671f"};
			taDatetimemask.datetimeMask(3);
		}

		//创建年输入
		if($showInput.hasClass('dateYearfield')){
            options.validType = options.validType ||[{type:'dateYear'}];
			defineConfig.$lang["en_US"] = {todayStr:"Today"}
			defineConfig.$lang["zh_CN"] = {todayStr:"\u4eca\u5e74"}//今年
			defineConfig.$lang["zh_TW"] = {todayStr:"\u4eca\u5e74"}
			taDatetimemask.datetimeMask(6);
		}
		//创建年输入
		if($showInput.hasClass('dateFulltimefield')){
            options.validType = options.validType ||[{type:'dateFulltime'}];
			defineConfig.$lang["en_US"] = {todayStr:"Today"};
			defineConfig.$lang["zh_CN"] = {todayStr:"\u73b0\u5728"};//现在
			defineConfig.$lang["zh_TW"] = {todayStr:"\u73fe\u5728"};
			taDatetimemask.datetimeMask(7);
		}
		//创建时间输入
		if($showInput.hasClass("dailyTimefield")){
            options.validType = options.validType ||[{type:'dailyTime'}];
			defineConfig.$lang["en_US"] = {todayStr:"Today"};
			defineConfig.$lang["zh_CN"] = {todayStr:"\u73b0\u5728"};//现在
			defineConfig.$lang["zh_TW"] = {todayStr:"\u73fe\u5728"};
			taDatetimemask.datetimeMask(8);
		}
		//创建不要秒的日期时间输入
		if($showInput.hasClass("dateNoSecondfield")){
            options.validType = options.validType ||[{type:'dateNoSecond'}];
			defineConfig.$lang["en_US"] = {todayStr:"Today"};
			defineConfig.$lang["zh_CN"] = {todayStr:"\u73b0\u5728"};//现在
			defineConfig.$lang["zh_TW"] = {todayStr:"\u73fe\u5728"};
			taDatetimemask.datetimeMask(9);
		}
        //创建季度输入
        if($showInput.hasClass("seasonfield")){
            options.validType = options.validType ||[{type:'season'}];
            defineConfig.$lang["en_US"] = {todayStr:"Today"};
            defineConfig.$lang["zh_CN"] = {todayStr:"\u73b0\u5728"};//现在
            defineConfig.$lang["zh_TW"] = {todayStr:"\u73fe\u5728"};
            taDatetimemask.datetimeMask(10);
        }
        //创建自定义格式输入
        if($showInput.hasClass("customDatefield")){
            options.validType = options.validType ||[{type:'customDatefield'}];
            defineConfig.$lang["en_US"] = {todayStr:"Today"};
            defineConfig.$lang["zh_CN"] = {todayStr:"\u73b0\u5728"};//现在
            defineConfig.$lang["zh_TW"] = {todayStr:"\u73fe\u5728"};
            taDatetimemask.datetimeMask(0,{
                format : options.params.dateFmt
            });
        }

		options.params["defineConfig"] = defineConfig;


		function init(){
            $showInput.on("focus.silenceEvent", function (e) {
                if (isSilence)return;
                $inputContainer.addClass("active");
            });
            $showInput.on("blur.silenceEvent", function (e) {
                if (isSilence)return;
                $inputContainer.removeClass("active");
            });
            $showInput.on("focus",function(){
                if(isSilence)return;
                if (options.showSelectPanel){
                    //尝试隐藏日期面板即可，try catch 是为了解决有iframe弹框时，引起的$dp 对象无法访问的问题
                    try{
                        if($dp)$dp.hide();
                    }catch (Exception){

                    }

                    //add by zhouhy 新增日期组件季度格式
                    if(options.season){

                        $.extend(options.params,{disabledDates:['....-0[5-9]-..','....-1[0-2]-..'],startDate:'%y-01-01'});
                        $dp.showJD = "hide($d.MI, $d.leftImg, $d.rightImg)";
                    }else{
                        $dp.showJD = "";
                    }

                    WdatePicker(options.params);
                    if($dp){
                        if($showInput.hasClass('readonly')||$showInput.hasClass('disabled')){
                            $dp.hide();
                        }else{
                            if (options.isFocusShowPanel)$dp.show();
                        }
                    }
                }
            })

            $validateIcon.on("click.silenceEvent", function (e) {
                var $this = $(this);
                if (isSilence || !$this.hasClass("icon-close2"))return;
                setValue("");
                setStateStyle();
            });

            $dateIcon.on("click.silenceEvent", function (e) {
                $showInput.trigger("focus");
            });

            if (options.textHelp) {
                var _op = {
                    width: options.textHelpWidth,
                    position: options.textHelpPosition,
                    info: options.textHelp,
                    arrowWidth: 16
                };
                Bubble.setBubbleEvent($textHelp,_op);
            }

            if (options.bpopTipMsg) {
                var _op = {
                    width: options.bpopTipWidth,
                    height: options.bpopTipHeight,
                    position: options.bpopTipPosition,
                    info: options.bpopTipMsg
                }
                Bubble.setBubbleEvent($showInput,_op);
            }


            if (options.validType) {
                $showInput.addClass("validate");
                validObj=new validateObj(dateId,$showInput,options,setStateStyle);
            }
            setState(true);

		}

		function setState(isInit) {
		    if(isInit){
                if (options.readOnly)setReadOnly();
                if (options.disabled)setEnable(false);
                if (options.value !== null)setValue(options.value);
                if(options.required){
                    setRequired();
                }
            }else {
                setReadOnly(options.readOnly);
                setEnable(!options.disabled);
                setValue(options.value);
                setRequired(options.required)
            }


        }

		/**
		* 设置日期不可用
		* array 例如: ['2017-01-01','2017-03-04']
		* */
		function setDisabledDates(array){
			$.extend(options.params,{disabledDates:array});
			$dp.hide();
			WdatePicker(options.params);
			$dp.show();
		}

		function setValue(value){
			$showInput.val(value);
			if($showInput.hasClass('datefield')){
				if(value && value.length>10){
					$showInput.val(value.substring(0,10));
				}
			}else if($showInput.hasClass('datetimefield')){
				if(value && value.length>19){
					$showInput.val(value.substring(0,19));
				}
			}
		}

		function clear() {
            $showInput.val("");
            if(validObj){
                validObj.executeValidate();
            }
        }

		function getValue(){
			return $showInput.val();
		}		

        function setReadOnly(isReadOnly, isIconSilence) {
            if($dp) $dp.hide();
            $showInput.blur();
            setStateStyle();
            var bool = isReadOnly === false;
            if (bool) {
                $inputContainer.removeClass("readonly");
                $showInput.removeAttr('readOnly');
                $Label.attr("for",dateId);
            } else {
                $inputContainer.addClass("readonly");
                $showInput.attr('readOnly', true);
                $Label.attr("for",dateId+"_readonly");
                Bubble.hideInfo();
            }

            _silenceControl(!bool,  !bool && !(isIconSilence === false));
        }

        function setEnable(isEnable) {
		    if($dp) $dp.hide();
            setStateStyle();
            var bool = isEnable === false;
            if (bool) {
                $showInput.attr('disabled', true);
                $inputContainer.addClass("disabled");
                $showInput.prev(".textIcon").css("display", "");
                Bubble.hideInfo();
            } else {
                $showInput.attr('disabled', false);
                $inputContainer.removeClass("disabled");
                $showInput.prev(".textIcon").css("display", "none");

            }
            _silenceControl(bool, bool);
        }

        function setVisible(isVisiable, isHold) {
            if($dp) $dp.hide();
            setStateStyle();
            if (isVisiable) {
                $layoutContainer.show().css('visibility', 'visible');
            } else {
                Bubble.hideInfo();
                if (isHold) {
                    $layoutContainer.css('visibility', 'hidden');
                } else {
                    $layoutContainer.hide();
                }
            }

        }

        function setFocus() {
            $showInput.focus();
        }

        //组件静默状态控制，按事件和图标区分，readOnly,disable默认都是事件不执行，图标不显示 add by xp
        function _silenceControl(eventBool, iconBool) {
            if (iconBool) {
                $inputContainer.find(".dateIcon").hide();
            } else {
                $inputContainer.find(".dateIcon").show();
            }
            isSilence = eventBool;
        }

        /**
         * 设置是是否必输。
         */
        function setRequired(bool) {
            if (bool === false) {
                $layoutContainer.removeClass("required");
                validObj && validObj.removeOrder("required");
            } else {//必输
                $layoutContainer.addClass("required");
                if(validObj){
                    validObj.addOrder({type:"required",msg:options.toolTip})
                }else {
                    validObj= new validateObj(textId,$showInput,options,setStateStyle);
                    $showInput.addClass("validate");
                    validObj.addOrder({type:"required",msg:options.toolTip})
                }
            }
        }

        function doValidate(){
            if(validObj){
                return validObj.executeValidate();
            }else {
                return true;
            }
        }
        //验证状态样式调整
        function setStateStyle(value) {
            if (value===false) {
                $inputContainer.removeClass("successvalidate").addClass("failvalidate");
                $validateIcon.removeClass("icon-correct2").addClass("icon-close2");
                return;
            } else if(value===true) {
                $inputContainer.removeClass("failvalidate").addClass("successvalidate");
                $validateIcon.removeClass("icon-close2").addClass("icon-correct2");
                return;
            }else {
                $inputContainer.removeClass("failvalidate successvalidate");
                $validateIcon.removeClass("icon-close2 icon-correct2");
                return;
            }
        }

        //获取输入域
        function getInput(){
        	return $showInput;
		}
        function getInputLabel(){
            return $layoutContainer.find("label");
        }
        function reset() {
            setState();//重置状态
            setStateStyle();//重置样式
        }
        function newSerialize(id, isIncludeNullFields) {
            return $showInput?$showInput.taserialize(isIncludeNullFields):"";
        }

		init();
		return {
			"cmptype" : 'tadate',
			"setValue" : setValue,
			"getValue" : getValue,
			"setFocus" : setFocus,
			"setVisible" : setVisible,
			"setReadOnly" : setReadOnly,
			"setEnable" : setEnable,
			"setDisabledDates":setDisabledDates,
            "doValidate": doValidate,
            "setRequired":setRequired,
			"getInput":getInput,
            "getInputLabel":getInputLabel,
            "reset":reset,
            "setValidateStyle":setStateStyle,
            "newSerialize":newSerialize,
            "clear":clear
		};
	}
	TaDate.prototype=new TaFieldComponent();
	TaDate.prototype.constructor = TaDate;
	return TaDate;
});

/***/ }),
/* 256 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 257 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Created by Administrator on 2016/10/31.
 */

__webpack_require__(258);

/***/ }),
/* 258 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 259 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

(function (factory) {
  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(28)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {
    factory(jQuery);
  }
})(function ($) {
  $.extend(true, window, {
    taform: TaForm
  });

  __webpack_require__(260);
  function TaForm(options) {

    var self = this;
    options = $.extend({
      txtId: "form"
    }, options || {});
    function init() {
      return self;
    }

    init(); // 调用初始化方法
    function setReadOnly(isReadOnly) {
      TaContainerSupport.setReadOnly(options.txtId, isReadOnly);
    }
    function setEnable(isEnable) {
      TaContainerSupport.setEnable(options.txtId, isEnable);
    }
    function setVisible(isVisiable, isHold) {
      TaContainerSupport.setVisible(options.txtId, isVisiable, isHold);
    }
    function setRequired(isRequired) {
      TaContainerSupport.setRequired(options.txtId, isRequired);
    }
    function resetData() {
      TaContainerSupport.resetData(options.txtId);
    }
    function clearData() {
      TaContainerSupport.clearData(options.txtId);
    }
    function doValidate() {
      var result = TaContainerSupport.doValidate(options.txtId);
      if (typeof result == 'string') {
        return false;
      }
      return result;
    }
    function cleanValidateStyle() {
      TaContainerSupport.cleanValidateStyle(options.txtId);
    }

    $.extend(this, { // 为this对象
      "cmptype": 'taform', // 将方法注册为公共方法
      "version": "3.13.0",
      setReadOnly: setReadOnly,
      setEnable: setEnable,
      setVisible: setVisible,
      setRequired: setRequired,
      reset: resetData,
      clearData: clearData,
      doValidate: doValidate,
      cleanValidateStyle: cleanValidateStyle
    });
  }
  TaForm.prototype = new TaContainer();
  TaForm.prototype.constructor = TaForm;
  return TaForm;
});

/***/ }),
/* 260 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 261 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Created by Administrator on 2016/10/31.
 */

__webpack_require__(262);

/***/ }),
/* 262 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 263 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

(function (factory) {
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(41), __webpack_require__(63)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {
        factory(jQuery);
    }
})(function ($) {
    $.extend(true, window, {
        TaIssue: TaIssue
    });
    __webpack_require__(264);
    function TaIssue(issueId, options) {

        var self = this;
        options = $.extend({
            showSelectPanel: true,
            value: null,
            required: false,
            readOnly: false,
            disabled: false,
            onClick: null,
            onFocus: null,
            onBlur: null,
            onChange: null,
            validType: [{ type: 'issue' }],
            textHelpWidth: "200",
            textHelpPosition: "bottomLeft",
            textHelp: null,
            bpopTipWidth: "300",
            bpopTipHeight: "500",
            bpopTipPosition: "top",
            bpopTipMsg: null,
            rangeMin: 1900,
            rangeMax: 2099
        }, options || {});
        var $showInput = $("#" + issueId).attr("realId", issueId);
        var $inputContainer = $showInput.parent("div.issue-input-Container");
        var $layoutContainer = $inputContainer.parents("div.issue-layout-Container");
        var $winContainer = $("#" + issueId + "_issue_winContainer");
        var $Label = $(".issue-label", $layoutContainer);
        var $textHelp = $showInput.siblings(".textHelp-layout-Container");
        var $validateIcon = $showInput.siblings(".validateIcon");
        var $issueIcon = $showInput.siblings(".issueIcon");
        //组件事件静默标志 true 静默，静默类事件不执行
        var isSilence = false;
        var validObj = null;

        function init() {

            //自定义事件绑定 注意silenceEvent 标注静默事件
            $showInput.on("click.silenceEvent", function (e) {
                if (isSilence) return;
                if (typeof options.onClick == "string") eval(options.onClick);
                // if(typeof options.onClick == "function")options.onClick(this);
            });
            $showInput.on("focus.silenceEvent", function (e) {
                if (isSilence) return;
                $inputContainer.addClass("active");
                if (options.showSelectPanel) {

                    showYear($showInput);
                }
                if (typeof options.onFocus == "string") eval(options.onFocus);
                // if(typeof options.onFocus == "function")options.onFocus(this);
            });
            $showInput.on("blur.silenceEvent", function (event) {
                if (isSilence) return;
                $inputContainer.removeClass("active");
                if (typeof options.onBlur == "string") eval(options.onBlur);
                // $winContainer.hide();
                // if(typeof options.onBlur == "function")options.onBlur(this);
            });
            $showInput.on("change.silenceEvent", function (e) {
                if (isSilence) return;
                if (typeof options.onChange == "string") eval(options.onChange);
                // if(typeof options.onChange == "function")options.onChange(this);
            });
            $showInput.on("keydown", function (e) {
                //回车、TAB、ESC 都可以隐藏面板
                if (e.keyCode == 13 || e.keyCode == 9 || e.keyCode == 27) {
                    $winContainer.hide();
                }
            });

            // 页面加载完成绑定函数
            $(document).on("mousedown", function (event) {
                if (!(event.target.id == issueId + "_issue_winContainer" || $(event.target).parents("#" + issueId + "_issue_winContainer").length > 0)) {
                    $winContainer.hide();
                }
            });

            $validateIcon.on("click.silenceEvent", function (e) {
                var $this = $(this);
                if (isSilence || !$this.hasClass("icon-close2")) return;
                setValue("");
                setStateStyle();
            });

            $issueIcon.on("click.silenceEvent", function (e) {
                $showInput.trigger("focus");
            });

            if (options.textHelp) {
                var _op = {
                    width: options.textHelpWidth,
                    position: options.textHelpPosition,
                    info: options.textHelp,
                    arrowWidth: 16
                };
                Bubble.setBubbleEvent($textHelp, _op);
            }
            if (options.bpopTipMsg) {
                var _op = {
                    width: options.bpopTipWidth,
                    height: options.bpopTipHeight,
                    position: options.bpopTipPosition,
                    info: options.bpopTipMsg
                };
                Bubble.setBubbleEvent($showInput, _op);
            }
            if (options.validType) {
                $showInput.addClass("validate");
                validObj = new validateObj(issueId, $showInput, options, setStateStyle);
            }
            _declarationState(true);

            return self;
        } // end init


        /**
         * 声明组件状态
         * @param isInit 是否是组件初始化
         * @private
         */
        function _declarationState(isInit) {
            if (isInit) {
                if (options.value !== null) setValue(options.value);
                if (options.readOnly) setReadOnly();
                if (options.disabled) setEnable(false);
                if (options.required) setRequired();
            } else {
                setValue(options.value);
                setReadOnly(options.readOnly);
                setEnable(!options.disabled);
                setRequired(options.required);
            }
        }

        // 显示年份面板
        function showYear($input) {
            new TaDatetimeMask($input).datetimeMask(3); // 调用datetimemask中的期号判断，阻止非数字输入和非期号格式输入
            var year;
            var val = $input.val();
            var mYear = parseInt(new Date().getFullYear()); // 获取当前年份
            if (val == "" || val == null) {
                year = mYear;
            } else {
                // 设置输入框的值长度不低于4位
                switch (val.length) {
                    case 1:
                        val = val + "000";
                        break;
                    case 2:
                        val = val + "00";
                        break;
                    case 3:
                        val = val + "0";
                        break;
                    default:
                        break;
                }
                year = parseInt(val.substring(0, 4));
            }

            loadYears(year, issueId, options.rangeMin, options.rangeMax); // 加载年份面板
        }

        // 加载年份面板并绑定事件
        function loadYears(year, id, start, end) {
            start = parseInt(start);
            var $yearsDiv = $("#" + id + "_years");
            if ($yearsDiv[0]) {
                $yearsDiv.remove();
            }
            $yearsDiv = $("<div id=\"" + id + "_years\"></div>");
            $yearsDiv.addClass("issue-years-Container");
            //年内容
            var content = "";
            for (var i = start; i <= end; i++) {
                content = "<div _id=\"" + i + "\">" + i + "</div>";
                $(content).addClass("issue-item-year").appendTo($yearsDiv).click(function () {
                    clickYear(this, id);
                });
            }
            $yearsDiv.appendTo($winContainer);
            $winContainer.show();

            var selYear = $("div[_id='" + year + "']");
            selYear.addClass("selected");
            gotoPostion($yearsDiv, start, year);
            clickYear(selYear, issueId);
        }

        function gotoPostion($yearsDiv, start, year) {
            var offset = year - start;
            var offsety = offset * 30;
            $yearsDiv.scrollTop(offsety);
        }

        // 单击年份显示月份面板
        function clickYear(o, id) {
            //年选中
            if (!$(o).hasClass("selected")) {
                $(o).addClass("selected").siblings().removeClass("selected");
            }

            var $in = $("#" + issueId);
            var $months = $("#" + id + "_months");
            if ($months[0]) {
                $months.remove();
            }
            $months = $("<div id=\"" + id + "_months\"></div>");
            $months.addClass("issue-months-Container");

            // var $monDiv = $("<div style='height:100%;'></div>");
            //             // $monDiv.appendTo($months);

            var $monTab = $("<div class='table-box'></div>");
            $monTab.appendTo($months);
            var n = 0;
            var $inp = $("#" + issueId);
            for (var i = 1; i < 5; i++) {
                // 循环添加tr
                var $conTr = $("<div></div>");
                var conTd = "";
                $conTr.appendTo($monTab);
                for (var j = 1; j < 4; j++) {
                    // 循环添加td
                    n = parseInt(n) + 1;
                    var tempn = n + "";
                    if (n < 10) {
                        tempn = "0" + n;
                    }
                    //modify by xp 月回选
                    var value = $(o).attr("_id") + tempn;
                    if (value == $showInput.val()) {
                        conTd = "<span val=\"" + value + "\"><span class='selected'>" + tempn + "</span></span>";
                    } else {
                        conTd = "<span val=\"" + value + "\"><span>" + tempn + "</span></span>";
                    }
                    $(conTd).addClass("issue-item-month").appendTo($conTr).click(function () {

                        var value = $(this).attr("val");
                        $("#" + id).val(value);
                        $winContainer.hide();
                        //add by cy 解决input失去焦点后点击选项面板不会触发blur事件
                        if ($inp.blur) {
                            $inp.triggerHandler("blur");
                        }
                    });
                }
            }
            $months.insertAfter($("#" + id + "_years"));
            $months.show();
        }

        function setValue(value) {
            $showInput.val(value);
        }

        function clear() {
            $showInput.val("");
            if (validObj) {
                validObj.executeValidate();
            }
        }

        function getValue() {
            return $showInput.val();
        }

        function setReadOnly(isReadOnly, isIconSilence) {
            if ($winContainer) $winContainer.hide();
            $showInput.blur();
            var bool = isReadOnly === false;
            setStateStyle();
            if (bool) {
                $inputContainer.removeClass("readonly");
                $showInput.removeAttr('readOnly');
                $Label.attr("for", issueId);
            } else {
                $inputContainer.addClass("readonly");
                $showInput.attr('readOnly', true);
                Bubble.hideInfo();
                $Label.attr("for", issueId + "_readonly");
            }
            _silenceControl(!bool, !bool && !(isIconSilence === false));
        }

        function setEnable(isEnable) {
            if ($winContainer) $winContainer.hide();
            var bool = isEnable === false;
            setStateStyle();
            if (bool) {
                $showInput.attr('disabled', true);
                $inputContainer.addClass("disabled");
                $showInput.prev(".issueIcon").css("display", "");
                Bubble.hideInfo();
            } else {
                $showInput.attr('disabled', false);
                $inputContainer.removeClass("disabled");
                $showInput.prev(".issueIcon").css("display", "none");
            }
            _silenceControl(bool, bool);
        }

        function setVisible(showOrHide, isHold) {
            if (showOrHide) {
                $layoutContainer.show().css('visibility', 'visible');
            } else {
                if (isHold) {
                    $layoutContainer.css('visibility', 'hidden');
                } else {
                    $layoutContainer.hide();
                }
            }
        }

        function setFocus() {
            $showInput.focus();
        }

        /**
         * 设置是是否必输。
         */
        function setRequired(bool) {
            if (bool === false) {
                $layoutContainer.removeClass("required");
                validObj && validObj.removeOrder("required");
            } else {
                //必输
                $layoutContainer.addClass("required");
                if (validObj) {
                    validObj.addOrder({ type: "required", msg: options.toolTip });
                } else {
                    validObj = new validateObj(issueId, $showInput, options, setStateStyle);
                    $showInput.addClass("validate");
                    validObj.addOrder({ type: "required", msg: options.toolTip });
                }
            }
        }

        function doValidate() {
            if (validObj) {
                return validObj.executeValidate();
            } else {
                return true;
            }
        }
        //验证状态样式调整
        function setStateStyle(bool) {
            if (bool === false) {
                $inputContainer.removeClass("successvalidate").addClass("failvalidate");
                $validateIcon.removeClass("icon-correct2").addClass("icon-close2");
            } else if (bool === true) {
                $inputContainer.removeClass("failvalidate").addClass("successvalidate");
                $validateIcon.removeClass("icon-close2").addClass("icon-correct2");
            } else {
                $inputContainer.removeClass("failvalidate successvalidate");
                $validateIcon.removeClass("icon-close2 icon-correct2");
            }
        }

        //获取显示的input
        function getInput() {
            return $showInput;
        }

        //组件静默状态控制，按事件和图标区分，readOnly,disable默认都是事件不执行，图标不显示 add by xp
        function _silenceControl(eventBool, iconBool) {
            if (iconBool) {
                $inputContainer.find(".issueIcon").hide();
            } else {
                $inputContainer.find(".issueIcon").show();
            }
            isSilence = eventBool;
        }

        function getInputLabel() {
            if ($layoutContainer.find("label")[0]) {
                return $layoutContainer.find("label");
            }
        }
        function reset() {
            _declarationState();
            setStateStyle();
            Bubble.hideInfo();
        }
        init(); // 调用初始化方法
        $.extend(this, { // 为this对象
            "cmptype": 'taissue', // 将方法注册为公共方法
            "version": "1.1.0",
            setValue: setValue,
            getValue: getValue,
            setReadOnly: setReadOnly,
            setEnable: setEnable,
            setFocus: setFocus,
            setVisible: setVisible,
            setRequired: setRequired,
            doValidate: doValidate,
            getInput: getInput,
            getInputLabel: getInputLabel,
            setValidateStyle: setStateStyle,
            reset: reset,
            clear: clear
        });
    }

    //继承父类
    TaIssue.prototype = new TaFieldComponent();
    TaIssue.prototype.constructor = TaIssue;

    return TaIssue;
});

/***/ }),
/* 264 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 265 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Created by Administrator on 2016/10/31.
 */

__webpack_require__(266);

/***/ }),
/* 266 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 267 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 268 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

(function (factory) {
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(155), __webpack_require__(17), __webpack_require__(28)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {
        factory(jQuery);
    }
})(function ($) {

    __webpack_require__(269);
    $.extend(true, window, {
        TaRadioGroup: TaRadioGroup
    });
    function TaRadioGroup(id, options) {

        options = $.extend({
            bpopTipMsg: null,
            bpopTipWidth: 500,
            bpopTipHeight: 300,
            bpopTipPosition: "top",
            value: null,
            toolTip: null,
            required: false,
            readOnly: false,
            disabled: false,
            validType: null,
            triggerHandles: "click mouseover focus blur"
        }, options || {});

        var $layoutContainer = $("#" + id);
        $layoutContainer.attr("realId", id);
        var $radioContainer = $(">div.radiogroup-Container", $layoutContainer);
        var validObj = null;
        //组件事件静默标志 true 静默，静默类事件不执行
        var isSilence = false;

        function init() {
            if (options.bpopTipMsg) {
                var _op = {
                    width: options.bpopTipWidth,
                    height: options.bpopTipHeight,
                    position: options.bpopTipPosition,
                    info: options.bpopTipMsg
                };
                Bubble.setBubbleEvent($radioContainer, _op);
            }
            if (options.validType) {
                $radioContainer.addClass("validate");
                validObj = new validateObj(id, $radioContainer, options);
            }

            _declarationState(true);
        }

        //初始化组件状态
        function _declarationState(isInit) {
            if (isInit) {
                if (options.value !== null) setValue(options.value);
                if (options.readOnly) setReadOnly();
                if (options.disabled) setEnable(false);
                if (options.required) setRequired();
            } else {
                setValue(options.value);
                setReadOnly(options.readOnly);
                setEnable(!options.disabled);
                setRequired(options.required);
            }
        }

        function setValue(value) {
            $layoutContainer.find('input[type=radio]').each(function () {
                this.checked = this.value == value;

                var obj = Base.getObj(this.id);
                if (obj && obj.cmptype == 'TaRadio') {
                    obj.setValue(value);
                }
            });
        }
        function getValue() {
            return $layoutContainer.find('input[type=radio]:checked').eq(0).val();
        }

        function setReadOnly(isReadOnly, isIconSilence) {
            var bool = isReadOnly === false;
            $layoutContainer.find('input[type=radio]').each(function () {
                if (bool) {
                    $(this).removeAttr('readOnly');
                } else {
                    $(this).attr('readOnly', true);
                }
                var obj = Base.getObj(this.id);
                if (obj && obj.cmptype == 'TaRadio') {
                    obj.setReadOnly(isReadOnly, isIconSilence);
                }
            });
            _silenceControl(!bool, !bool && !(isIconSilence === false));
        }

        function setEnable(isEnable) {
            var bool = isEnable === false;
            $layoutContainer.find('input[type=radio]').each(function () {
                if (bool) {
                    $(this).attr('disabled', 'disabled');
                } else {
                    $(this).removeAttr('disabled');
                }
                var obj = Base.getObj(this.id);
                if (obj && obj.cmptype == 'TaRadio') {
                    obj.setEnable(isEnable);
                }
            });
            _silenceControl(bool, bool);
        }

        function setVisible(isVisiable, isHold) {
            if (isVisiable) {
                $layoutContainer.show().css('visibility', 'visible');
            } else {
                if (isHold) {
                    $layoutContainer.css('visibility', 'hidden');
                } else {
                    $layoutContainer.hide();
                }
            }
        }

        //组件静默状态控制，按事件和图标区分，readOnly,disable默认都是事件不执行，图标不显示 add by xp
        function _silenceControl(eventBool, iconBool) {
            // if (iconBool) {
            //     $inputContainer.find(".textIcon").hide();
            // } else {
            //     $inputContainer.find(".textIcon").show();
            // }
            isSilence = eventBool;
        }

        function setRequired(bool) {
            if (bool === false) {
                $layoutContainer.removeClass("required");
                validObj && validObj.removeOrder("required");
            } else {
                //必输
                $layoutContainer.addClass("required");
                if (validObj) {
                    validObj.addOrder({ type: "required", msg: options.toolTip });
                } else {
                    validObj = new validateObj(id, $radioContainer, options);
                    $radioContainer.addClass("validate");
                    validObj.addOrder({ type: "required", msg: options.toolTip });
                }
            }
        }

        function doValidate() {
            if (validObj) {
                return validObj.executeValidate();
            } else {
                return true;
            }
        }

        function getInputLabel() {
            return $(".radiogroup-label", $layoutContainer);
        }

        function reset() {
            _declarationState();
        }

        init();

        return {
            "cmptype": 'TaRadioGroup',
            "version": '1.1.0',
            "setValue": setValue,
            "getValue": getValue,
            "setReadOnly": setReadOnly,
            "setEnable": setEnable,
            "setVisible": setVisible,
            "setRequired": setRequired,
            "doValidate": doValidate,
            "getInputLabel": getInputLabel,
            "reset": reset
        };
    }
    TaRadioGroup.prototype = new TaContainer();
    TaRadioGroup.prototype.constructor = TaRadioGroup;
    return TaRadioGroup;
});

/***/ }),
/* 269 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 270 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

(function (factory) {
	if (true) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {
		factory(jQuery);
	}
})(function ($) {

	__webpack_require__(271);
	$.extend(true, window, {
		TaSoftKeyBoard: TaSoftKeyBoard
	});

	function TaSoftKeyBoard(id, options) {

		var defaults = {
			title: Base.I18n.getLangText("taface.module.softkeyboard.defaults.title")
		};
		var $writeBox = $('#' + id),
		    shift = false,
		    capslock = false;
		function init() {
			//检查输入框是否为只读
			if ($writeBox.hasClass('readonly') || $writeBox.hasClass('disabled')) {
				return;
			}
			options = $.extend({}, defaults, options); //默认option和自订opetion结合
			/*	var $handleClickSpan = $('<span class="softkeyboard faceIcon icon-jianpan"></span>').insertBefore($writeBox);
   	$handleClickSpan.click(createSoftKeyBoard);*/
			//modify by cy
			createSoftKeyBoard();
		}
		function createSoftKeyBoard() {
			var str = '<div id="softkeyboard_container"> ' + '<ul id="keyboard_ul">' + '<li class="softkeyboard_symbol"><span class="off">`</span><span class="softkeyboard_on">~</span></li>' + '<li class="softkeyboard_symbol"><span class="off">1</span><span class="softkeyboard_on">!</span></li>' + '<li class="softkeyboard_symbol"><span class="off">2</span><span class="softkeyboard_on">@</span></li>' + '<li class="softkeyboard_symbol"><span class="off">3</span><span class="softkeyboard_on">#</span></li>' + '<li class="softkeyboard_symbol"><span class="off">4</span><span class="softkeyboard_on">$</span></li>' + '<li class="softkeyboard_symbol"><span class="off">5</span><span class="softkeyboard_on">%</span></li>' + '<li class="softkeyboard_symbol"><span class="off">6</span><span class="softkeyboard_on">^</span></li>' + '<li class="softkeyboard_symbol"><span class="off">7</span><span class="softkeyboard_on">&</span></li>' + '<li class="softkeyboard_symbol"><span class="off">8</span><span class="softkeyboard_on">*</span></li>' + '<li class="softkeyboard_symbol"><span class="off">9</span><span class="softkeyboard_on">(</span></li>' + '<li class="softkeyboard_symbol"><span class="off">0</span><span class="softkeyboard_on">)</span></li>' + '<li class="softkeyboard_symbol"><span class="off">-</span><span class="softkeyboard_on">_</span></li>' + '<li class="softkeyboard_symbol"><span class="off">=</span><span class="softkeyboard_on">+</span></li>' + '<li class="softkeyboard_delete softkeyboard_lastitem">' + Base.I18n.getLangText("taface.general.delete") + '</li>' + //国际化修改，原内容：删除
			'<li class="softkeyboard_tab">tab</li> ' + '<li class="softkeyboard_letter">q</li>' + '<li class="softkeyboard_letter">w</li>  ' + '<li class="softkeyboard_letter">e</li>' + '<li class="softkeyboard_letter">r</li> ' + '<li class="softkeyboard_letter">t</li>' + '<li class="softkeyboard_letter">y</li> ' + '<li class="softkeyboard_letter">u</li>' + '<li class="softkeyboard_letter">i</li>' + '<li class="softkeyboard_letter">o</li>' + '<li class="softkeyboard_letter">p</li>' + '<li class="softkeyboard_symbol"><span class="off">[</span><span class="softkeyboard_on">{</span></li>' + '<li class="softkeyboard_symbol"><span class="off">]</span><span class="softkeyboard_on">}</span></li> ' + '<li class="softkeyboard_symbol softkeyboard_lastitem"><span class="off">\</span><span class="softkeyboard_on">|</span></li>' + '<li class="softkeyboard_capslock">' + Base.I18n.getLangText("taface.module.softkeyboard.li.capslock") + '</li>' + //国际化修改，原内容：大小写
			'<li class="softkeyboard_letter">a</li>' + '<li class="softkeyboard_letter">s</li>' + '<li class="softkeyboard_letter">d</li>' + '<li class="softkeyboard_letter">f</li>' + '<li class="softkeyboard_letter">g</li>' + '<li class="softkeyboard_letter">h</li>' + '<li class="softkeyboard_letter">j</li>' + '<li class="softkeyboard_letter">k</li>' + '<li class="softkeyboard_letter">l</li>' + '<li class="softkeyboard_symbol"><span class="off">;</span><span class="softkeyboard_on">:</span></li>' + '<li class="softkeyboard_symbol"><span class="off">\'</span><span class="softkeyboard_on">"</span></li>' + '<li class="softkeyboard_enter softkeyboard_lastitem" title="' + Base.I18n.getLangText("taface.module.softkeyboard.enter.title") + '">' + Base.I18n.getLangText("taface.module.softkeyboard.li.enter") + '</li>' + //国际化修改，原内容：关闭软键盘，回车
			'<li class="softkeyboard_left-shift" title="' + Base.I18n.getLangText("taface.module.softkeyboard.li.leftshif") + '">shift</li>  ' + //国际化修改，原内容：大小写及符号切换
			'<li class="softkeyboard_letter">z</li>' + '<li class="softkeyboard_letter">x</li>  ' + '<li class="softkeyboard_letter">c</li>' + '<li class="softkeyboard_letter">v</li> ' + '<li class="softkeyboard_letter">b</li>' + '<li class="softkeyboard_letter">n</li>' + '<li class="softkeyboard_letter">m</li>' + '<li class="softkeyboard_symbol"><span class="off">,</span><span class="softkeyboard_on"><</span></li>' + '<li class="softkeyboard_symbol"><span class="off">.</span><span class="softkeyboard_on">></span></li>  ' + '<li class="softkeyboard_symbol"><span class="off">/</span><span class="softkeyboard_on">?</span></li>' + '<li class="softkeyboard_right-shift softkeyboard_lastitem" title="' + Base.I18n.getLangText("taface.module.softkeyboard.li.leftshift") + '">shift</li>  ' + //国际化修改，原内容：大小写及符号切换
			'<li class="softkeyboard_space softkeyboard_lastitem">space</li>' + '<li class="softkeyboard_close" title="' + Base.I18n.getLangText("taface.module.softkeyboard.enter.title") + '">' + Base.I18n.getLangText("taface.general.close") + '</li>' + //国际化修改，原内容：关闭软键盘，关闭
			'</ul>' + '</div>';
			$writeBox.after(str);
			$('#keyboard_ul li').hover(function () {
				$(this).addClass('softkeyboard_hover');
			}, function () {
				$(this).removeClass('softkeyboard_hover');
			}).click(function () {
				var $this = $(this),
				    charater = $this.text();
				// 一键两意
				if ($this.hasClass('softkeyboard_symbol')) charater = $('span:visible', $this).html();

				// Button detele
				if ($this.hasClass('softkeyboard_delete')) {
					var html = $writeBox.val();
					$writeBox.val(html.substring(0, html.length - 1));
					return false;
				};

				// Button tab
				if ($this.hasClass('softkeyboard_tab')) return;

				// Button capslock
				if ($this.hasClass('softkeyboard_capslock')) {
					$('.softkeyboard_letter').toggleClass('softkeyboard_uppercase');
					capslock = true;
					return false;
				};

				// Button enter  or close
				if ($this.hasClass('softkeyboard_enter') || $this.hasClass('softkeyboard_close')) {
					$("#softkeyboard_container").remove();
					Base.focus(id, 300);
					return;
				}

				// Button shift
				if ($this.hasClass('softkeyboard_left-shift') || $this.hasClass('softkeyboard_right-shift')) {
					$('.softkeyboard_letter').toggleClass('softkeyboard_uppercase');
					$('.softkeyboard_symbol span').toggle();
					shift = shift === true ? false : true;
					capslock = false;
					return false;
				};

				// Button space
				if ($this.hasClass('softkeyboard_space')) charater = ' ';

				// 转换为大写
				if ($this.hasClass('softkeyboard_uppercase')) charater = charater.toUpperCase();

				// 输出所按的键值
				$writeBox.val($writeBox.val() + charater);
			});
		}
		$.extend(this, {
			"cmptype": 'TaSoftKeyBoard', //组建类型
			"version": "1.1.0" //组建版本
		});
		init();
	}
});

/***/ }),
/* 271 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 272 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

(function (factory) {
	if (true) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(54)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {
		factory(jQuery);
	}
})(function ($) {
	__webpack_require__(273);
	$.extend(true, window, {
		submit: TaSubmit
	});
	function TaSubmit(submitId, options) {
		var self = this;
		options = $.extend({
			isSyncSubmit: false,
			submitIds: null,
			url: null,
			parameter: null,
			onSubmit: null,
			isValidate: true,
			successCallBack: null,
			failureCallBack: null,
			isIncludeNullFields: null
		}, options || {});
		function init() {
			//页面加载完成给$("#<%=id%>")绑定点击事件
			$(function () {
				$("#" + submitId).click(function () {
					if (options.isSyncSubmit != null && options.isSyncSubmit) {
						Base.submitForm(options.submitIds, options.onSubmit, options.isValidate, options.url);
					} else {
						Base.submit.call(this, options.submitIds, options.url, options.parameter, options.onSubmit, options.isValidate, options.successCallBack, options.failureCallBack, options.isIncludeNullFields);
					}
				});
			});

			return self;
		} // end init
		var $obj = $("#" + submitId);
		//taSubmitSetReadOnly()方法
		function taSubmitSetReadOnly() {
			$obj.attr('readOnly', true);
			$obj.addClass('readonly');
			$obj.parent("div.fielddiv2").addClass("readonly");
		}
		//_taSubmitSetEnable()方法
		function _taSubmitSetEnable(enable) {
			enable ? $obj[0].disabled = false : $obj[0].disabled = true;
			if (enable) {
				//加入对readOnly后的样式的修改
				$obj.removeAttr('readonly');
				$obj.removeClass('readonly');
				$obj.parent("div").removeClass('readonly');
			}
			var hotKey = $obj.attr('hotKey');
			if (hotKey && hotKeyregister) {
				var _this = $obj[0];
				if (enable) {
					if (!hotKeyregister.all_shortcuts[hotKey.toLowerCase()]) hotKeyregister.add(hotKey, function () {
						_this.focus();_this.click();return false;
					});
				} else {
					hotKeyregister.remove(hotKey);
				}
			}
		}
		//setEnable
		function taSubmitSetEnable(isEnable) {
			if (isEnable === false) {
				_taSubmitSetEnable(false);
			} else {
				_taSubmitSetEnable(true);
			}
		}
		//focus()方法
		function taSubmitSetFocus(delay) {
			if (delay) {
				$obj.delay(delay).focus();
			} else {
				$obj.focus();
			}
		}
		//setVisible()方法
		function taSubmitsetVisible(showOrHide, isHold) {
			if (showOrHide) {
				//代理以前的showObj
				$obj.show().css('visibility', 'visible');
				var hotKey = $obj.attr('hotKey');
				if (hotKey && hotKeyregister) {
					var _this = $obj;
					hotKeyregister.add(hotKey, function () {
						_this.focus();_this.click();return false;
					});
				}
			} else {
				//代理以前版本的hideObj
				if (isHold) $obj.css('visibility', 'hidden');else $obj.hide();

				var hotKey = $obj.attr('hotKey');
				if (hotKey && hotKeyregister) {
					var _this = $obj[0];
					hotKeyregister.remove(hotKey);
				}
			}
		}
		init(); // 调用初始化方法
		$.extend(this, { // 为this对象
			"cmptype": 'tasubmit', // 将方法注册为公共方法
			"version": "3.13.0",
			setReadOnly: taSubmitSetReadOnly,
			setEnable: taSubmitSetEnable,
			setFocus: taSubmitSetFocus,
			setVisible: taSubmitsetVisible
		});
	}

	return TaSubmit;
});

/***/ }),
/* 273 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 274 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

(function (factory) {
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(17), __webpack_require__(22), __webpack_require__(33), __webpack_require__(53), __webpack_require__(65)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {
        factory(jQuery);
    }
})(function ($) {
    __webpack_require__(275);
    $.extend(true, window, {
        TaText: TaText
    });
    function TaText(textId, options) {
        options = $.extend({
            bpopTipMsg: null,
            bpopTipWidth: 500,
            bpopTipHeight: 300,
            bpopTipPosition: "top",
            popWinFn: false,
            popWinBeforeClick: null,
            popParam: null,
            key: null,
            keys: null,
            popSubmitIds: null,
            popWinUrl: "",
            popWinWidth: null,
            popWinHeight: null,
            popWinType: "self",
            softkeyboard: false,
            placeholder: false,
            textHelp: false,
            textHelpWidth: 200,
            textHelpPosition: "bottomLeft",
            isTrim: true,
            sensitive: null,
            value: null,
            required: false,
            readOnly: false,
            disabled: false,
            onClick: null,
            onFocus: null,
            onBlur: null,
            onChange: null,
            onKeydown: null,
            validType: null
        }, options || {});
        //组件核心部件
        var $showInput = $("#" + textId).attr("realId", textId);
        var $inputContainer = $showInput.parent("div.text-input-Container");
        var $layoutContainer = $inputContainer.parent("div.text-layout-Container");
        var $Label = $(".text-label", $layoutContainer);
        var $textHelp = $showInput.siblings(".textHelp-layout-Container");
        var $validateIcon = $showInput.siblings(".validateIcon");
        var $hiddenInput = null;
        var validObj = null;
        //组件事件静默标志 true 静默，静默类事件不执行
        var isSilence = false;

        function init() {
            //自定义事件绑定 注意silenceEvent 标注静默事件
            $showInput.on("click.silenceEvent", function (e) {
                if (isSilence) return;
                if (typeof options.onClick == "string") eval(options.onClick);
                // if(typeof options.onClick == "function")options.onClick(this);
            });
            $showInput.on("focus.silenceEvent", function (e) {
                if (isSilence) return;
                $inputContainer.addClass("active");
                if (typeof options.onFocus == "string") eval(options.onFocus);
                // if(typeof options.onFocus == "function")options.onFocus(this);
            });
            $showInput.on("blur.silenceEvent", function (e) {
                if (isSilence) return;
                $inputContainer.removeClass("active");
                if (typeof options.onBlur == "string") eval(options.onBlur);
                // if(typeof options.onBlur == "function")options.onBlur(this);
            });
            $showInput.on("keydown.silenceEvent", function (e) {
                if (isSilence) return;
                if (typeof options.onKeydown == "string") eval(options.onKeydown);
                // if(typeof options.onKeydown == "function")options.onKeydown(this);
            });
            $showInput.on("change.silenceEvent", function (e) {
                if (isSilence) return;
                if (typeof options.onChange == "string") eval(options.onChange);
                // if(typeof options.onChange == "function")options.onChange(this);
            });

            $validateIcon.on("click.silenceEvent", function (e) {
                var $this = $(this);
                if (isSilence || !$this.hasClass("icon-close2")) return;
                setValue("");
                setStateStyle();
            });

            if ($.isArray(options.keys)) {
                $Label.addClass("text-selectLabel");
                var $labelBtn = $("<span class='text-selectLabel-area faceIcon icon-arrow_down'></span>");
                $Label.after($labelBtn);

                var $selectLabelWin = $("<div id='" + textId + "_selectLabel_win'  class='selectLabelText-label-win'/>");
                options.keys.map(function (value, index, array) {
                    if (index == 0) {
                        setFieldScope({ name: value.name, key: value.key });
                        $selectLabelWin.append("<div class='selectLableItem' style='display: none;'  _name='" + value.name + "'>" + value.key + "</div>");
                    } else {
                        $selectLabelWin.append("<div class='selectLableItem'  _name='" + value.name + "'>" + value.key + "</div>");
                    }
                });
                $selectLabelWin.appendTo($layoutContainer);
                $labelBtn.on("click.silenceEvent", function () {
                    if (isSilence) return;
                    if ($labelBtn.hasClass("icon-arrow_down")) {
                        $selectLabelWin.show();
                        $labelBtn.removeClass("icon-arrow_down");
                        $labelBtn.removeClass("active");
                        $labelBtn.addClass("icon-arrow_up");
                        $labelBtn.addClass("active");
                    } else {
                        $selectLabelWin.hide();
                        $labelBtn.removeClass("icon-arrow_up");
                        $labelBtn.addClass("icon-arrow_down");
                    }
                });
                $(".selectLableItem", $selectLabelWin).on("click", function () {
                    var self = this;
                    setFieldScope({ name: self.getAttribute("_name"), key: self.innerHTML });
                    $(this).siblings(".selectLableItem").show();
                    $(this).hide();
                    $selectLabelWin.hide();
                    $labelBtn.removeClass("icon-arrow_up");
                    $labelBtn.removeClass("active");
                    $labelBtn.addClass("icon-arrow_down");
                });
                $(document).on("mousedown", function (e) {
                    var target = e.target || e.srcElement;
                    if (!$(target).parents().is(".selectLabelText-label-win")) {
                        $selectLabelWin.hide();
                        $labelBtn.removeClass("icon-arrow_up");
                        $labelBtn.removeClass("active");
                        $labelBtn.addClass("icon-arrow_down");
                    }
                });
            }

            if (options.popWinFn) {
                $(".textPopIcon", $layoutContainer).on("click", function () {
                    if (options.popWinBeforeClick != null) {
                        var result = options.popWinBeforeClick();
                        if (result == true || result == "true") {} else {
                            return;
                        }
                    }
                    Base.openWindowWithSubmitIds("w_" + textId, options.key == null ? "" : options.key, options.popWinUrl, options.popSubmitIds == null ? "" : options.popSubmitIds, options.popParam == null ? {} : options.popParam, options.popWinWidth == null ? "800" : options.popWinWidth, options.popWinHeight == null ? "500" : options.popWinHeight, null, null, true, null, null, options.popWinType == null ? null : options.popWinType);
                });
            }
            // 绑定软键盘点击事件
            if (options.softkeyboard) {
                if (window.TaSoftKeyBoard) {
                    $(".textSoftKeyboardIcon", $inputContainer).on("click", function () {
                        new TaSoftKeyBoard(textId);
                    });
                }
            }
            // 提示文字 代替全局的方法
            if (options.placeholder) {
                Base.funPlaceholder($showInput[0]);
            }

            //yanglq text showDetail 属性
            if (options.showDetailed) {
                $showInput.mouseenter(function (e) {
                    if ($showInput.val().length == 0) return;
                    if ($("#" + textId + "_tips").length == 0) {
                        $("<div id='" + textId + "_tips'  class='text-showdetail-win-div'/>").html("<span style='word-break:break-all'>" + $showInput.val() + "</span>").appendTo($inputContainer);
                    } else {
                        $("#" + textId + "_tips").find("span").html($showInput.val());
                    }
                    $("#" + textId + "_tips").css({
                        "left": e.clientX + 4,
                        "top": e.clientY + 4,
                        "position": "fixed"
                    });
                    $("#" + textId + "_tips").show();
                });
                $showInput.mouseleave(function () {
                    $("#" + textId + "_tips").hide();
                });
            }

            if (options.isTrim) {
                $showInput.on("change", function () {
                    var val = $showInput.val();
                    if (hasGBK(val)) {
                        var vals = val.split("");
                        val = "";
                        vals.forEach(function (v) {
                            val += v.trim();
                        });
                    } else {
                        val = val.trim();
                    }
                    $showInput.val(val);
                });
            }

            //脱敏 add by zhouhy
            if (options.sensitive) {
                var name = $showInput.attr("name");
                $showInput.removeAttr("name");
                $hiddenInput = $("<input id=\"" + textId + "_hidden\" type=\"hidden\" style=\"display:none\" name=\"" + name + "\" class='ComponentsSerialize' />");
                $showInput.after($hiddenInput);

                if ($showInput.attr("value")) {
                    setSensitiveInfo(options.sensitive);
                }

                $showInput.on("blur", function () {
                    setSensitiveInfo(options.sensitive);
                });
                $showInput.on("focus", function () {
                    setRealInfo();
                });
            }

            if (options.textHelp) {
                var _op = {
                    width: options.textHelpWidth,
                    position: options.textHelpPosition,
                    info: options.textHelp,
                    arrowWidth: 16
                };
                Bubble.setBubbleEvent($textHelp, _op);
            }

            if (options.bpopTipMsg) {
                var _op = {
                    width: options.bpopTipWidth,
                    height: options.bpopTipHeight,
                    position: options.bpopTipPosition,
                    info: options.bpopTipMsg
                };
                Bubble.setBubbleEvent($showInput, _op);
            }
            if (options.validType) {
                $showInput.addClass("validate");
                validObj = new validateObj(textId, $showInput, options, setStateStyle);
            }

            _declarationState(true);
        } // end init


        function setFieldScope(scope) {
            // $Label.attr("for",scope.id);
            $Label.html(scope.key);
            // $showInput.attr("id",scope.id);
            $showInput.attr("name", "dto['" + scope.name + "']");
        }

        /**
         * 声明组件状态
         * @param isInit 是否是组件初始化
         * @private
         */
        function _declarationState(isInit) {
            if (isInit) {
                if (options.value !== null) setValue(options.value); //setValue 放前面，是为了处理部分组件setValue生成新元素的情况，新元素如有必要也要纳入后续的readOnly、disabled状态管理范围 xp
                if (options.readOnly) setReadOnly();
                if (options.disabled) setEnable(false);
                if (options.required) setRequired();
            } else {
                setValue(options.value);
                setReadOnly(options.readOnly);
                setEnable(!options.disabled);
                setRequired(options.required);
            }
        }

        /**
         * 设置是是否必输。
         * @method setRequired
         * @param {bool} value true:必输 false 没有必输要求,默认true
         * @author cy
         */
        function setRequired(bool) {
            if (bool === false) {
                $layoutContainer.removeClass("required");
                validObj && validObj.removeOrder("required");
            } else {
                //必输
                $layoutContainer.addClass("required");
                if (validObj) {
                    validObj.addOrder({ type: "required", msg: options.toolTip });
                } else {
                    validObj = new validateObj(textId, $showInput, options, setStateStyle);
                    $showInput.addClass("validate");
                    validObj.addOrder({ type: "required", msg: options.toolTip });
                }
            }
        }

        function doValidate() {
            if (validObj) {
                return validObj.executeValidate();
            } else {
                return true;
            }
        }
        //验证状态样式调整
        function setStateStyle(bool) {
            if (bool === false) {
                $inputContainer.removeClass("successvalidate").addClass("failvalidate");
                $validateIcon.removeClass("icon-correct2").addClass("icon-close2");
            } else if (bool === true) {
                $inputContainer.removeClass("failvalidate").addClass("successvalidate");
                $validateIcon.removeClass("icon-close2").addClass("icon-correct2");
            } else {
                $inputContainer.removeClass("failvalidate successvalidate");
                $validateIcon.removeClass("icon-close2 icon-correct2");
            }
        }
        //获取显示的input
        function getInput() {
            return $showInput;
        }

        function getInputLabel() {
            return $Label;
        }

        //脱敏信息转换 add by zhouhy
        function formatSensitive(type, info) {
            //调用工具类脱敏函数
            return Ta.util.dataSensitive.format(type, info);
        }

        //设置脱敏信息
        function setSensitiveInfo(type) {
            var realInfo = $showInput.val();
            $hiddenInput.val(realInfo);
            var sensitiveInfo = formatSensitive(type, realInfo);
            $showInput.val(sensitiveInfo);
        }

        //设置真实信息
        function setRealInfo() {
            var realInfo = $hiddenInput.val();
            $showInput.val(realInfo);
        }

        function hasGBK(val) {
            var gbkRep = new RegExp("[\u4E00-\u9FA5]+");
            return gbkRep.test(val);
        }

        function getValue() {
            if (!$showInput) return null;
            //脱敏情况
            if ($hiddenInput) {
                return $hiddenInput.val();
            }
            return $showInput.val();
        }

        function setValue(value) {
            if (!$showInput) return false;
            $showInput.val(value);
            //脱敏情况
            if ($hiddenInput) {
                setSensitiveInfo(options.sensitive);
            }
            //验证触发 add by zhouhy ,修复setValue方法验证状态不改变
            if (validObj) {
                validObj.executeValidate();
            }
        }

        function clear() {
            if (!$showInput) return false;
            $showInput.val("");
            //有脱敏情况
            if ($hiddenInput) {
                $hiddenInput.val("");
            }
            //验证触发 add by zhouhy ,修复setValue方法验证状态不改变
            if (validObj) {
                validObj.executeValidate();
            }
        }

        function setReadOnly(isReadOnly, isIconSilence) {
            var bool = isReadOnly === false;
            $showInput.blur();
            if (bool) {
                $inputContainer.removeClass("readonly");
                $showInput.removeAttr('readOnly');
                $Label.attr("for", textId);
            } else {
                $inputContainer.addClass("readonly");
                $showInput.attr('readOnly', true);
                $Label.attr("for", textId + "_readonly");
            }
            _silenceControl(!bool, !bool && !(isIconSilence === false));
            setStateStyle();
        }

        function setEnable(isEnable) {
            var bool = isEnable === false;
            if (bool) {
                $showInput.attr('disabled', true);
                $inputContainer.addClass("disabled");
            } else {
                $showInput.attr('disabled', false);
                $inputContainer.removeClass("disabled");
            }
            _silenceControl(bool, bool);
            setStateStyle();
        }

        function setVisible(isVisiable, isHold) {
            if (isVisiable) {
                $layoutContainer.show().css('visibility', 'visible');
            } else {
                if (isHold) {
                    $layoutContainer.css('visibility', 'hidden');
                } else {
                    $layoutContainer.hide();
                }
            }
        }

        function setFocus() {
            $showInput.focus();
        }

        function reset() {
            _declarationState();
            setStateStyle();
        }

        //组件静默状态控制，按事件和图标区分，readOnly,disable默认都是事件不执行，图标不显示 add by xp
        function _silenceControl(eventBool, iconBool) {
            if (iconBool) {
                $inputContainer.find(".textIcon").hide();
            } else {
                $inputContainer.find(".textIcon").show();
            }
            isSilence = eventBool;
        }

        /**
         *序列化方法,用于提交时拼接数据
         */
        function newSerialize(id, isIncludeNullFields) {
            var str = "";
            if ($hiddenInput) {
                str += $hiddenInput.taserialize(isIncludeNullFields);
            } else {
                str += $showInput.taserialize(isIncludeNullFields);
            }
            return str;
        }

        init(); // 调初始化方法

        $.extend(this, { // 为this对象
            "cmptype": 'TaText', // 将方法注册为公共方法
            "version": "1.1.0",
            "getValue": getValue,
            "setValue": setValue,
            "setReadOnly": setReadOnly,
            "setEnable": setEnable,
            "setVisible": setVisible,
            "setFocus": setFocus,
            "newSerialize": newSerialize,
            "doValidate": doValidate,
            "setValidateStyle": setStateStyle,
            "setRequired": setRequired,
            "getInput": getInput,
            "getInputLabel": getInputLabel,
            "reset": reset,
            "clear": clear
        });
    }

    //继承父类
    TaText.prototype = new TaFieldComponent();
    TaText.prototype.constructor = TaText;
    return TaText;
});

/***/ }),
/* 275 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 276 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

(function (factory) {
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(33), __webpack_require__(53)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {
        factory(jQuery);
    }
})(function ($) {
    __webpack_require__(277);
    $.extend(true, window, {
        TaTextarea: TaTextarea
    });
    function TaTextarea(textareaId, options) {
        options = $.extend({
            key: null,
            value: null,
            required: false,
            toolTip: null,
            bpopTipMsg: null,
            bpopTipWidth: 500,
            bpopTipHeight: 300,
            bpopTipPosition: "top",
            readOnly: false,
            disabled: false,
            onClick: null,
            onFocus: null,
            onBlur: null,
            onChange: null,
            onKeydown: null,
            onMouseover: null,
            onMouseout: null,
            validType: null
        }, options || {});
        var $showInput = $("#" + textareaId).attr("realId", textareaId);
        var $inputContainer = $showInput.parent("div.textarea-input-Container");
        var $layoutContainer = $inputContainer.parent("div.textarea-layout-Container");
        var $Label = $(".textarea-label", $layoutContainer);
        var validObj = null;
        //组件事件静默标志 true 静默，静默类事件不执行
        var isSilence = false;

        function init() {
            //自定义事件绑定 注意silenceEvent 标注静默事件
            $showInput.on("click.silenceEvent", function (e) {
                if (isSilence) return;
                if (typeof options.onClick == "string") eval(options.onClick);
            });
            $showInput.on("focus.silenceEvent", function (e) {
                if (isSilence) return;
                $inputContainer.addClass("active");
                if (typeof options.onFocus == "string") eval(options.onFocus);
            });
            $showInput.on("blur.silenceEvent", function (e) {
                if (isSilence) return;
                $inputContainer.removeClass("active");
                if (typeof options.onBlur == "string") eval(options.onBlur);
            });
            $showInput.on("keydown.silenceEvent", function (e) {
                if (isSilence) return;
                if (typeof options.onKeydown == "string") eval(options.onKeydown);
            });
            $showInput.on("change.silenceEvent", function (e) {
                if (isSilence) return;
                if (typeof options.onChange == "string") eval(options.onChange);
            });
            $showInput.on("mouseover.silenceEvent", function (e) {
                if (isSilence) return;
                if (typeof options.onMouseover == "string") eval(options.onMouseover);
            });
            $showInput.on("mouseout.silenceEvent", function (e) {
                if (isSilence) return;
                if (typeof options.onMouseout == "string") eval(options.onMouseout);
            });

            if (options.bpopTipMsg) {
                var _op = {
                    width: options.bpopTipWidth,
                    height: options.bpopTipHeight,
                    position: options.bpopTipPosition,
                    info: options.bpopTipMsg
                };
                Bubble.setBubbleEvent($showInput, _op);
            }

            if (options.validType) {
                $showInput.addClass("validate");
                validObj = new validateObj(textareaId, $showInput, options, setStateStyle);
            }

            _declarationState(true);
        }

        /**
         * 声明组件状态
         * @param isInit 是否是组件初始化
         * @private
         */
        function _declarationState(isInit) {
            if (isInit) {
                if (options.value !== null) setValue(options.value);
                if (options.readOnly) setReadOnly();
                if (options.disabled) setEnable(false);
                if (options.required) setRequired();
            } else {
                setValue(options.value);
                setReadOnly(options.readOnly);
                setEnable(!options.disabled);
                setRequired(options.required);
            }
        }

        function setValue(value) {
            if (!$showInput) return false;
            $showInput.val(value);
        }

        function clear() {
            if (!$showInput) return false;
            $showInput.val("");
        }

        function getValue() {
            if (!$showInput) return null;
            return $showInput.val();
        }

        function setReadOnly(isReadOnly) {
            var bool = isReadOnly === false;
            $showInput.blur();
            setStateStyle();
            if (bool) {
                $inputContainer.removeClass("readonly");
                $showInput.removeAttr('readOnly');
                $Label.attr("for", textareaId);
            } else {
                $inputContainer.addClass("readonly");
                $showInput.attr('readOnly', true);
                $Label.attr("for", textareaId + "_readonly");
                Bubble.hideInfo();
            }
            _silenceControl(!bool);
        }

        function setEnable(isEnable) {
            var bool = isEnable === false;
            setStateStyle();
            if (bool) {
                $showInput.attr('disabled', true);
                $inputContainer.addClass("disabled");
                Bubble.hideInfo();
            } else {
                $showInput.attr('disabled', false);
                $inputContainer.removeClass("disabled");
            }
            _silenceControl(bool);
        }

        function setFocus() {
            $showInput.focus();
        }

        function setVisible(isVisiable, isHold) {
            if (isVisiable) {
                $layoutContainer.show().css('visibility', 'visible');
            } else {
                if (isHold) {
                    $layoutContainer.css('visibility', 'hidden');
                } else {
                    $layoutContainer.hide();
                }
            }
        }

        /**
         * 设置是是否必输。
         * @method setRequired
         * @param {bool} value true:必输 false 没有必输要求,默认true
         * @author cy
         */
        function setRequired(bool) {
            if (bool === false) {
                $layoutContainer.removeClass("required");
                validObj && validObj.removeOrder("required");
            } else {
                //必输
                $layoutContainer.addClass("required");
                if (validObj) {
                    validObj.addOrder({ type: "required", msg: options.toolTip });
                } else {
                    validObj = new validateObj(textareaId, $showInput, options, setStateStyle);
                    $showInput.addClass("validate");
                    validObj.addOrder({ type: "required", msg: options.toolTip });
                }
            }
        }

        function doValidate() {
            if (validObj) {
                return validObj.executeValidate();
            } else {
                return true;
            }
        }

        //获取显示的input
        function getInput() {
            return $showInput;
        }

        function getInputLabel() {
            if ($layoutContainer.find("label")[0]) {
                return $layoutContainer.find("label");
            }
        }

        //验证状态样式调整
        function setStateStyle(bool) {
            if (bool === false) {
                $inputContainer.removeClass("successvalidate").addClass("failvalidate");
            } else if (bool === true) {
                $inputContainer.removeClass("failvalidate").addClass("successvalidate");
            } else {
                $inputContainer.removeClass("failvalidate successvalidate");
            }
        }

        function reset() {
            _declarationState();
            setStateStyle();
            Bubble.hideInfo();
        }

        //组件静默状态控制，readOnly,disable默认都是事件不执行
        function _silenceControl(eventBool) {
            isSilence = eventBool;
        }

        init(); // 调初始化方法

        $.extend(this, { // 为this对象
            "cmptype": 'textarea', // 将方法注册为公共方法
            "version": "3.13.0",
            setValue: setValue,
            getValue: getValue,
            setReadOnly: setReadOnly,
            setEnable: setEnable,
            setFocus: setFocus,
            setVisible: setVisible,
            setRequired: setRequired,
            doValidate: doValidate,
            getInput: getInput,
            getInputLabel: getInputLabel,
            setValidateStyle: setStateStyle,
            reset: reset,
            clear: clear
        });
    }
    //继承父类
    TaTextarea.prototype = new TaFieldComponent();
    TaTextarea.prototype.constructor = TaTextarea;

    return TaTextarea;
});

/***/ }),
/* 277 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 278 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

(function (factory) {
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {
        factory(jQuery);
    }
})(function ($) {
    __webpack_require__(279);
    $.extend(true, window, {
        TaSwitch: TaSwitch
    });

    function TaSwitch(id, options) {
        options = $.extend({
            isOpen: false,
            disabled: false,
            onClick: null
        }, options || {});

        var $switch = $("#" + id).attr("realId", id);
        var $switchBox = $switch.siblings(".switch-box");
        var $layoutContainer = $switch.parent().parent(".switch-layout-Container");

        //组件事件静默标志 true 静默，静默类事件不执行
        var isSilence = false;

        function init() {
            $switch.bind("change", function () {
                if (isSilence) return;

                setValue(this.checked);

                if (options.onClick) {
                    eval(options.onClick)(getValue());
                }
            });

            if (options.isOpen) {
                setValue(options.isOpen);
            };
            if (options.disabled) {
                setEnable(!options.disabled);
            };
        }

        function setValue(isOpen) {
            var checked = !(isOpen == false);
            $switch[0].checked = checked;
            if (checked) {
                $switchBox.addClass("switch-open");
            } else {
                $switchBox.removeClass("switch-open");
            }
        }

        function getValue() {
            return $switch[0].checked;
        }

        function setEnable(isEnable) {
            var bool = isEnable === false;
            if (bool) {
                $switchBox.addClass("disabled");
                $switch.attr('disabled', 'disabled');
            } else {
                $switchBox.removeClass("disabled");
                $switch.removeAttr('disabled');
            }
            _silenceControl(bool);
        }

        function _silenceControl(eventBool) {
            isSilence = eventBool;
        }

        function setVisible(isVisiable, isHold) {
            if (isVisiable) {
                $switchBox.removeClass("display");
                $layoutContainer.show().css('visibility', 'visible');
            } else {
                if (isHold) {
                    $switchBox.addClass("display");
                    $layoutContainer.css('visibility', 'hidden');
                } else {
                    $layoutContainer.hide();
                }
            }
        }

        function getLabel() {
            return $(".switch-label", $layoutContainer);
        }

        /**
         *序列化方法,用于提交时拼接数据
         */
        function newSerialize(id, isIncludeNullFields) {
            return "" + $switch.taserialize(isIncludeNullFields);
        }

        init();

        return {
            "cmptype": 'TaSwitch',
            'version': '1.1.0',
            "setValue": setValue,
            "getValue": getValue,
            "setEnable": setEnable,
            "setVisible": setVisible,
            "getLabel": getLabel,
            "newSerialize": newSerialize
        };
    }
    return TaSwitch;
});

/***/ }),
/* 279 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 280 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

__webpack_require__(281);
(function (factory) {
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(33), __webpack_require__(53), __webpack_require__(65), __webpack_require__(64)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {
        factory(jQuery);
    }
})(function ($) {
    $.extend(true, window, {
        TaRangeDate: TaRangeDate
    });
    function TaRangeDate(dateId, options) {
        options = $.extend({
            max: "",
            min: "",
            value: null,
            required: false,
            readOnly: false,
            disabled: false,
            validType: null,
            bpopTipWidth: "300",
            bpopTipHeight: "500",
            bpopTipPosition: "top",
            bpopTipMsg: null,
            textHelpWidth: "200",
            textHelpPosition: "bottomLeft",
            textHelp: null,
            toolTip: ""
        }, options || {});

        var $inputContainer = $("#" + dateId);
        var $layoutContainer = $inputContainer.parent(".rangeDate-layout-Container");
        var $Label = $(".rangeDate-label", $layoutContainer);
        var $inputBox = $(".rangeDate-input-box", $inputContainer);
        var $inputS = $("#" + dateId + "_start"),
            $inputE = $("#" + dateId + "_end");
        var taDatetimemaskS = new TaDatetimeMask($inputS);
        var taDatetimemaskE = new TaDatetimeMask($inputE);
        var $dateIcon = $inputContainer.find(".dateIcon");
        var $validateIcon = $inputContainer.find(".validateIcon");
        var validObjS = null,
            validObjE = null;
        var $textHelp = $inputContainer.find(".textHelp-layout-Container");

        //组件事件静默标志 true 静默，静默类事件不执行
        var isSilence = false;

        options.params["skin"] = Base.globvar.FaceSkin || "shebaoBlue"; //支持皮肤切换
        options.params["lang"] = Base.globvar.langType || "zh_CN"; //支持国际化语言切换
        var defineConfig = {};
        defineConfig.$lang = {};
        //创建日期输入
        if ($inputContainer.hasClass('datefield')) {
            options.validType = options.validType || [{ type: 'date' }];
            defineConfig.$lang["en_US"] = { todayStr: "Today" };
            defineConfig.$lang["zh_CN"] = { todayStr: "\u4ECA\u5929" }; //今天
            defineConfig.$lang["zh_TW"] = { todayStr: "\u4ECA\u5929" };
            taDatetimemaskS.datetimeMask(1); //今天
            taDatetimemaskE.datetimeMask(1); //今天
        }
        //创建日期时间输入
        if ($inputContainer.hasClass('datetimefield')) {
            options.validType = options.validType || [{ type: 'datetime' }];
            defineConfig.$lang["en_US"] = { todayStr: "Today" };
            defineConfig.$lang["zh_CN"] = { todayStr: "\u73B0\u5728" }; //现在
            defineConfig.$lang["zh_TW"] = { todayStr: "\u73FE\u5728" };
            taDatetimemaskS.datetimeMask(2);
            taDatetimemaskE.datetimeMask(2);
        }
        //创建年月输入
        if ($inputContainer.hasClass('dateMonthfield')) {
            options.validType = options.validType || [{ type: 'dateMonth' }];
            defineConfig.$lang["en_US"] = { todayStr: "Today" };
            defineConfig.$lang["zh_CN"] = { todayStr: "\u4ECA\u6708" }; //今月
            defineConfig.$lang["zh_TW"] = { todayStr: "\u4ECA\u6708" };
            taDatetimemaskS.datetimeMask(5);
            taDatetimemaskE.datetimeMask(5);
        }
        //期号
        if ($inputContainer.hasClass('issuefield')) {
            options.validType = options.validType || [{ type: 'issue' }];
            defineConfig.$lang["en_US"] = { todayStr: "Today" };
            defineConfig.$lang["zh_CN"] = { todayStr: "\u5F53\u671F" }; //当期
            defineConfig.$lang["zh_TW"] = { todayStr: "\u7576\u671F" };
            taDatetimemaskS.datetimeMask(3);
            taDatetimemaskE.datetimeMask(3);
        }
        //创建年输入
        if ($inputContainer.hasClass('dateYearfield')) {
            options.validType = options.validType || [{ type: 'dateYear' }];
            defineConfig.$lang["en_US"] = { todayStr: "Today" };
            defineConfig.$lang["zh_CN"] = { todayStr: "\u4ECA\u5E74" //今年
            };defineConfig.$lang["zh_TW"] = { todayStr: "\u4ECA\u5E74" };
            taDatetimemaskS.datetimeMask(6);
            taDatetimemaskE.datetimeMask(6);
        }
        //创建年输入
        if ($inputContainer.hasClass('dateFulltimefield')) {
            options.validType = options.validType || [{ type: 'dateFulltime' }];
            defineConfig.$lang["en_US"] = { todayStr: "Today" };
            defineConfig.$lang["zh_CN"] = { todayStr: "\u73B0\u5728" }; //现在
            defineConfig.$lang["zh_TW"] = { todayStr: "\u73FE\u5728" };
            taDatetimemaskS.datetimeMask(7);
            taDatetimemaskE.datetimeMask(7);
        }
        //创建时间输入
        if ($inputContainer.hasClass("timefield")) {
            options.validType = options.validType || [{ type: 'time' }];
            defineConfig.$lang["en_US"] = { todayStr: "Today" };
            defineConfig.$lang["zh_CN"] = { todayStr: "\u73B0\u5728" }; //现在
            defineConfig.$lang["zh_TW"] = { todayStr: "\u73FE\u5728" };
            taDatetimemaskS.datetimeMask(8);
            taDatetimemaskE.datetimeMask(8);
        }
        //创建不要秒的日期时间输入
        if ($inputContainer.hasClass("dateNoSecondfield")) {
            options.validType = options.validType || [{ type: 'dateNoSecond' }];
            defineConfig.$lang["en_US"] = { todayStr: "Today" };
            defineConfig.$lang["zh_CN"] = { todayStr: "\u73B0\u5728" }; //现在
            defineConfig.$lang["zh_TW"] = { todayStr: "\u73FE\u5728" };
            taDatetimemaskS.datetimeMask(9);
            taDatetimemaskE.datetimeMask(9);
        }
        //创建季度格式
        if ($inputContainer.hasClass("seasonfield")) {
            options.validType = options.validType || [{ type: 'season' }];
            defineConfig.$lang["en_US"] = { todayStr: "Today" };
            defineConfig.$lang["zh_CN"] = { todayStr: "\u73B0\u5728" }; //现在
            defineConfig.$lang["zh_TW"] = { todayStr: "\u73FE\u5728" };
            taDatetimemaskS.datetimeMask(10);
            taDatetimemaskE.datetimeMask(10);
        }
        //创建自定义格式输入
        if ($inputContainer.hasClass("customDatefield")) {
            options.validType = options.validType || [{ type: 'customDatefield' }];
            defineConfig.$lang["en_US"] = { todayStr: "Today" };
            defineConfig.$lang["zh_CN"] = { todayStr: "\u73B0\u5728" }; //现在
            defineConfig.$lang["zh_TW"] = { todayStr: "\u73FE\u5728" };
            taDatetimemaskS.datetimeMask(0, options.params.dateFmt);
            taDatetimemaskE.datetimeMask(0, options.params.dateFmt);
        }
        options.params["defineConfig"] = defineConfig;

        function init() {
            $inputS.on({
                "focus.silenceEvent": function focusSilenceEvent() {
                    if (isSilence) return;
                    $inputContainer.addClass("active");
                    if (typeof $dp != "undefined" && $dp) {
                        $dp.hide();
                    }
                    if (options.showSelectPanel != undefined && options.showSelectPanel == true) {
                        var dateOptions = $.extend({
                            el: $inputS[0],
                            // minDate:options.min,
                            maxDate: "#F{$dp.$D(\'" + dateId + "_end\')}",
                            onpicked: function onpicked() {
                                $inputE[0].focus();
                            }
                        }, options.params || {});

                        if (options.season) {
                            $.extend(options.params, { disabledDates: ['....-0[5-9]-..', '....-1[0-2]-..'], startDate: '%y-01-01' });
                            $dp.showJD = "hide($d.MI, $d.leftImg, $d.rightImg)";
                        } else {
                            $dp.showJD = "";
                        }
                        WdatePicker(dateOptions);
                    }
                },
                "blur.silenceEvent": function blurSilenceEvent() {
                    if (isSilence) return;
                    $inputContainer.removeClass("active");
                },
                "keydown.silenceEvent": function keydownSilenceEvent(e) {
                    if (e.keyCode === 39 || e.keyCode === 40) {
                        //如果是右和下//下一个输入框选中
                        $dp.hide();
                        $inputE.focus();
                    } else if (e.keyCode === 13) {
                        //如果是enter 判定为选中跳出选择
                        if (options.showSelectPanel != undefined && options.showSelectPanel == true) {
                            $dp.hide();
                            e.stopImmediatePropagation();
                        }
                    }
                }
            });

            $inputE.on({
                "focus.silenceEvent": function focusSilenceEvent() {
                    if (isSilence) return;
                    $inputContainer.addClass("active");
                    if (typeof $dp != "undefined" && $dp) {
                        $dp.hide();
                    }
                    if (options.showSelectPanel != undefined && options.showSelectPanel == true) {
                        var dateOptions = $.extend({
                            el: $inputE[0],
                            minDate: "#F{$dp.$D(\'" + dateId + "_start\')}"
                            // maxDate:options.max,
                        }, options.params || {});

                        if (options.season) {
                            $.extend(options.params, { disabledDates: ['....-0[5-9]-..', '....-1[0-2]-..'], startDate: '%y-01-01' });
                            $dp.showJD = "hide($d.MI, $d.leftImg, $d.rightImg)";
                        } else {
                            $dp.showJD = "";
                        }
                        WdatePicker(dateOptions);
                    }
                },
                "blur.silenceEvent": function blurSilenceEvent() {
                    if (isSilence) return;
                    $inputContainer.removeClass("active");
                },
                "keydown.silenceEvent": function keydownSilenceEvent(e) {
                    if (e.keyCode === 37 || e.keyCode === 38) {
                        //如果是左和上开始时间获得焦点
                        $dp.hide();
                        $inputS.focus();
                    } else if (e.keyCode === 13) {
                        //如果是enter//判定为输入
                        if (options.showSelectPanel != undefined && options.showSelectPanel == true) {
                            $dp.hide();
                            e.stopImmediatePropagation();
                        }
                    } else if (e.keyCode == 9) {
                        //如果是tab那么就跳出选择
                        e.stopImmediatePropagation();
                    }
                }
            });

            $validateIcon.on("click.silenceEvent", function () {
                var $this = $(this);
                if (isSilence || !$this.hasClass("icon-close2")) return;
                setValue(["", ""]);
                setStateStyle();
            });

            $dateIcon.on("click.silenceEvent", function () {
                if (isSilence) return;
                $inputS.trigger("focus");
            });

            if (options.textHelp) {
                var _op = {
                    width: options.textHelpWidth,
                    position: options.textHelpPosition,
                    info: options.textHelp,
                    arrowWidth: 16
                };
                Bubble.setBubbleEvent($textHelp, _op);
            }

            if (options.bpopTipMsg) {
                var _op = {
                    width: options.bpopTipWidth,
                    height: options.bpopTipHeight,
                    position: options.bpopTipPosition,
                    info: options.bpopTipMsg
                };
                Bubble.setBubbleEvent($inputBox, _op);
            }

            if (options.validateTypeStart) {
                $inputContainer.addClass("validate");
                var validType = options.validType;
                options.validType = options.validateTypeStart;
                validObjS = new validateObj(dateId + "_start", $inputS, options, setStateStyle);
            }
            if (options.validateTypeEnd) {
                $inputContainer.addClass("validate");
                options.validType = options.validateTypeEnd;
                validObjE = new validateObj(dateId + "_end", $inputE, options, setStateStyle);
            }

            setState(true);
        }

        function setState(isInit) {
            if (isInit) {
                if (options.readOnly) setReadOnly();
                if (options.disabled) setEnable(false);
                if (options.value !== null) setValue(options.value);
                if (options.required) {
                    setRequired();
                }
            } else {
                setReadOnly(options.readOnly);
                setEnable(!options.disabled);
                setValue(options.value);
                setRequired(options.required);
            }
        }

        function setValue(aryVal) {
            var valueStart = aryVal[0],
                valueEnd = aryVal[1];
            $inputS.val(valueStart);
            $inputE.val(valueEnd);
            if ($inputContainer.hasClass('datefield')) {
                if (valueStart && valueStart.length > 10) {
                    $inputS.val(valueStart.substring(0, 10));
                }
                if (valueEnd && valueEnd.length > 10) {
                    $inputE.val(valueEnd.substring(0, 10));
                }
            } else if ($inputContainer.hasClass('datetimefield')) {
                if (valueStart && valueStart.length > 19) {
                    $inputS.val(valueStart.substring(0, 19));
                }
                if (valueEnd && valueEnd.length > 19) {
                    $inputE.val(valueEnd.substring(0, 19));
                }
            }
        }

        function clear() {
            $inputS.val("");
            $inputE.val("");
            if (validObjS) {
                validObjS.executeValidate();
            }
            if (validObjE) {
                validObjE.executeValidate();
            }
        }

        function getValue() {
            var ary = [];
            ary.push($inputS.val());
            ary.push($inputE.val());
            return ary;
        }

        function setReadOnly(isReadOnly, isIconSilence) {
            if ($dp) $dp.hide();
            $inputS.blur();
            $inputE.blur();
            setStateStyle();
            var bool = isReadOnly === false;
            if (bool) {
                $inputContainer.removeClass("readonly");
                $inputS.removeAttr('readOnly');
                $inputE.removeAttr('readOnly');
                $Label.attr("for", dateId + "_start");
            } else {
                $inputContainer.addClass("readonly");
                $inputS.attr('readOnly', true);
                $inputE.attr('readOnly', true);
                $Label.attr("for", dateId + "_start_readonly");
                Bubble.hideInfo();
            }

            _silenceControl(!bool, !bool && !(isIconSilence === false));
        }

        function setEnable(isEnable) {
            if ($dp) $dp.hide();
            setStateStyle();
            var bool = isEnable === false;
            if (bool) {
                $inputS.attr('disabled', true);
                $inputE.attr('disabled', true);
                $inputContainer.addClass("disabled");
                Bubble.hideInfo();
            } else {
                $inputS.attr('disabled', false);
                $inputE.attr('disabled', false);
                $inputContainer.removeClass("disabled");
            }
            _silenceControl(bool, bool);
        }

        function setVisible(isVisiable, isHold) {
            if ($dp) $dp.hide();
            setStateStyle();
            if (isVisiable) {
                $layoutContainer.show().css('visibility', 'visible');
            } else {
                Bubble.hideInfo();
                if (isHold) {
                    $layoutContainer.css('visibility', 'hidden');
                } else {
                    $layoutContainer.hide();
                }
            }
        }

        function setFocus() {
            $inputS.focus();
        }

        function _silenceControl(eventBool, iconBool) {
            if (iconBool) {
                $inputContainer.find(".dateIcon").hide();
            } else {
                $inputContainer.find(".dateIcon").show();
            }
            isSilence = eventBool;
        }

        /**
         * 设置是是否必输。
         */
        function setRequired(bool) {
            if (bool === false) {
                $layoutContainer.removeClass("required");
                if (validObjS && validObjE) {
                    validObjS.removeOrder("required");
                    validObjE.removeOrder("required");
                }
            } else {
                //必输
                $layoutContainer.addClass("required");
                if (validObjS && validObjE) {
                    validObjS.addOrder({ type: "required", msg: options.toolTip });
                    validObjE.addOrder({ type: "required", msg: options.toolTip });
                } else {
                    validObjS = new validateObj(dateId + "_start", $inputS, options, setStateStyle);
                    validObjE = new validateObj(dateId + "_end", $inputE, options, setStateStyle);
                    $inputContainer.addClass("validate");
                    validObjS.addOrder({ type: "required", msg: options.toolTip });
                    validObjE.addOrder({ type: "required", msg: options.toolTip });
                }
            }
        }

        function doValidate() {
            if (validObjS && validObjE) {
                return validObjS.executeValidate() && validObjE.executeValidate();
            } else {
                return true;
            }
        }

        function setStateStyle(value) {
            if (value === false) {
                $inputContainer.removeClass("successvalidate").addClass("failvalidate");
                $validateIcon.removeClass("icon-correct2").addClass("icon-close2");
                return;
            } else if (value === true) {
                $inputContainer.removeClass("failvalidate").addClass("successvalidate");
                $validateIcon.removeClass("icon-close2").addClass("icon-correct2");
                return;
            } else {
                $inputContainer.removeClass("failvalidate successvalidate");
                $validateIcon.removeClass("icon-close2 icon-correct2");
                return;
            }
        }

        //获取输入域:起始时间
        function getInputS() {
            return $inputS;
        }

        //获取输入域:结束时间
        function getInputE() {
            return $inputE;
        }

        function getInputLabel() {
            return $layoutContainer.find("label");
        }

        function reset() {
            setState(); //重置状态
            setStateStyle(); //重置样式
        }

        /**
         *序列化方法,用于提交时拼接数据
         */
        function newSerialize(id, isIncludeNullFields) {
            var str = "";
            str += $inputS.taserialize(isIncludeNullFields);
            str += "&";
            str += $inputE.taserialize(isIncludeNullFields);
            return str;
        }
        init();

        return {
            "cmptype": 'tarangedate',
            "setValue": setValue,
            "getValue": getValue,
            "setFocus": setFocus,
            "setVisible": setVisible,
            "setReadOnly": setReadOnly,
            "setEnable": setEnable,
            "doValidate": doValidate,
            "setRequired": setRequired,
            "getInputS": getInputS,
            "getInputE": getInputE,
            "getInputLabel": getInputLabel,
            "reset": reset,
            "setValidateStyle": setStateStyle,
            "newSerialize": newSerialize,
            "clear": clear
        };
    }
    TaRangeDate.prototype = new TaFieldComponent();
    TaRangeDate.prototype.constructor = TaRangeDate;
    return TaRangeDate;
});

/***/ }),
/* 281 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 282 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(jQuery) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

__webpack_require__(283);
(function (factory) {
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(33), __webpack_require__(53), __webpack_require__(41), __webpack_require__(65), __webpack_require__(64)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {
        factory(jQuery);
    }
})(function ($) {
    $.extend(true, window, {
        TaLayDate: TaLayDate
    });
    function TaLayDate(dateId, options) {
        options = $.extend(true, {
            name: dateId,
            key: null,
            value: null,
            required: false,
            readOnly: false,
            disabled: false,
            validType: null,
            bpopTipWidth: "300",
            bpopTipHeight: "500",
            bpopTipPosition: "top",
            bpopTipMsg: null,
            textHelpWidth: "200",
            textHelpPosition: "bottomLeft",
            textHelp: null,
            toolTip: "",
            onClick: null,
            onFocus: null,
            onBlur: null,
            onChange: null,
            onKeydown: null,
            params: {
                // 控件选择类型 year\month\date\time\datetime
                type: 'date',
                // 开启左右面板范围选择
                range: false,
                // 自定义格式
                format: 'yyyy-MM-dd', //默认日期格式
                //最小/大范围内的日期时间值
                max: '2099-12-31',
                min: '1900-1-1',
                //自定义弹出控件的事件
                trigger: "focus",
                //用于设定控件的定位方式，有以下三种可选值：absolute\fixed\static
                position: "absolute",
                //是否显示底部栏,如果设置 false，将不会显示控件的底部栏区域
                showBottom: true,
                //右下角显示的按钮，会按照数组顺序排列，内置可识别的值有：clear、now、confirm
                btns: ['clear', 'now', 'confirm'],
                //内置了两种语言版本：cn（中文版）、en（国际版，即英文版）
                lang: 'cn',
                //是否显示公历节日
                calendar: false,
                //calendar 参数所代表的公历节日更多情况下是一个摆设。因此，我们还需要自定义标注重要日子，比如结婚纪念日？日程等？如{'0-0-15': '中旬'}
                mark: {},
                //控件初始打开的回调，回调返回一个参数：初始的日期时间对象
                ready: null,
                //日期时间被切换后的回调，回调返回三个参数，分别代表：生成的值、日期时间对象、结束的日期时间对象  该属性很扯淡，强调的是切换时触发，发生在数据进入input前，而且类试date 类型只触发done
                change: null,
                //控件选择完毕后的回调，点击日期、清空、现在、确定均会触发。回调返回三个参数，分别代表：生成的值、日期时间对象、结束的日期时间对象
                done: null,
                elem: "#" + dateId,
                eventElem: "#" + dateId + "_dateIcon"
            }
        }, options || {});

        var $showInput = $("#" + dateId).attr("realId", dateId);
        var $inputContainer = $showInput.parent("div.layDate-input-Container");
        var $layoutContainer = $inputContainer.parent("div.layDate-layout-Container");
        var $Label = $(".layDate-label", $layoutContainer);
        var $textHelp = $showInput.siblings(".textHelp-layout-Container");
        var $validateIcon = $showInput.siblings(".validateIcon");
        var $dateIcon = $showInput.siblings(".dateIcon");
        var validObj = null;
        //组件事件静默标志 true 静默，静默类事件不执行
        var isSilence = false;
        var layDateObj;

        var taDatetimemask = new TaDatetimeMask($showInput);

        // options.params["lang"] = Base.globvar.langType||"zh_CN";//支持国际化语言切换
        //创建日期输入
        if ($showInput.hasClass('datefield')) {
            options.validType = options.validType || [{ type: 'date' }];
            taDatetimemask.datetimeMask(1, {
                inputAuxiliary: false,
                range: options.params.range
            }); //今天
        }
        //创建日期时间输入
        if ($showInput.hasClass('datetimefield')) {
            options.validType = options.validType || [{ type: 'datetime' }];
            taDatetimemask.datetimeMask(2, {
                inputAuxiliary: false,
                range: options.params.range
            });
        }
        //创建年月输入
        if ($showInput.hasClass('dateMonthfield')) {
            options.validType = options.validType || [{ type: 'dateMonth' }];
            taDatetimemask.datetimeMask(5, {
                inputAuxiliary: false,
                range: options.params.range
            });
        }
        //创建年输入
        if ($showInput.hasClass('dateYearfield')) {
            options.validType = options.validType || [{ type: 'dateYear' }];
            taDatetimemask.datetimeMask(6, {
                inputAuxiliary: false,
                range: options.params.range
            });
        }
        //创建时间输入
        if ($showInput.hasClass("timefield")) {
            options.validType = options.validType || [{ type: 'time' }];
            taDatetimemask.datetimeMask(4, {
                inputAuxiliary: false,
                range: options.params.range
            });
        }
        //创建自定义格式输入
        if ($showInput.hasClass("customDatefield")) {
            options.validType = options.validType || [{ type: 'customDatefield' }];
            taDatetimemask.datetimeMask(0, {
                inputAuxiliary: false,
                range: options.params.range,
                format: options.params.format
            });
        }

        function init() {
            var changeCall = options.onChange;
            var doneCall = options.params.done;
            options.params.done = function (value, dateObj, endDateObj) {
                setTimeout(function () {
                    $showInput.triggerHandler("datecompletion");
                }, 0);

                if (changeCall) {
                    //TODO type=date 时，无法获取到旧值，layDate 这个很恶心了
                    changeCall();
                }
                if (doneCall) {
                    doneCall(value, dateObj, endDateObj);
                }
            };

            layDateObj = window.laydate.render(options.params);
            $showInput.on("focus.silenceEvent", function (e) {
                if (isSilence) {
                    breakEventBehavior(e);
                    return;
                }
                $inputContainer.addClass("active");
                if (typeof options.onFocus == "function") options.onFocus();
            });
            $showInput.on("blur.silenceEvent", function (e) {
                if (isSilence) {
                    breakEventBehavior(e);
                    return;
                };
                $inputContainer.removeClass("active");
                if (typeof options.onBlur == "function") options.onBlur();
            });
            $showInput.on("change.silenceEvent", function (e) {
                if (isSilence) {
                    breakEventBehavior(e);
                    return;
                };
                if (typeof options.onChange == "function") options.onChange();
            });
            $showInput.on("click.silenceEvent", function (e) {
                if (isSilence) {
                    breakEventBehavior(e);
                    return;
                };
                if (typeof options.onClick == "function") options.onClick();
            });
            $validateIcon.on("click.silenceEvent", function (e) {
                var $this = $(this);
                if (isSilence || !$this.hasClass("icon-close2")) return;
                setValue("");
                setStateStyle();
            });

            $dateIcon.on("click.silenceEvent", function (e) {
                $showInput.trigger("focus");
            });

            if (options.textHelp) {
                var _op = {
                    width: options.textHelpWidth,
                    position: options.textHelpPosition,
                    info: options.textHelp,
                    arrowWidth: 16
                };
                Bubble.setBubbleEvent($textHelp, _op);
            }

            if (options.bpopTipMsg) {
                var _op = {
                    width: options.bpopTipWidth,
                    height: options.bpopTipHeight,
                    position: options.bpopTipPosition,
                    info: options.bpopTipMsg
                };
                Bubble.setBubbleEvent($showInput, _op);
            }

            if (options.validType) {
                $showInput.addClass("validate");
                validObj = new validateObj(dateId, $showInput, options, setStateStyle);
            }
            _declarationState(true);
        }

        function breakEventBehavior(e) {
            e.cancelBubble = true;
            e.returnValue = false;
            if (e.preventDefault) e.preventDefault();
            if (e.stopPropagation) e.stopPropagation();

            setTimeout(function () {
                layDateObj.remove();
            }, 0);
        }

        /**
         * 声明组件状态
         * @param isInit 是否是组件初始化
         * @private
         */
        function _declarationState(isInit) {
            if (isInit) {
                if (options.readOnly) setReadOnly();
                if (options.disabled) setEnable(false);
                if (options.value !== null) setValue(options.value);
                if (options.required) {
                    setRequired();
                }
            } else {
                setReadOnly(options.readOnly);
                setEnable(!options.disabled);
                setValue(options.value);
                setRequired(options.required);
            }
        }

        function setValue(value) {
            layDateObj.setValue(value);
        }

        function clear() {
            layDateObj.setValue("");
            if (validObj) {
                validObj.executeValidate();
            }
        }

        function getValue() {
            return layDateObj.getValue();
        }

        function setReadOnly(isReadOnly, isIconSilence) {
            if (layDateObj) layDateObj.remove();
            $showInput.blur();
            setStateStyle();
            var bool = isReadOnly === false;
            if (bool) {
                $inputContainer.removeClass("readonly");
                $showInput.removeAttr('readOnly');
                $Label.attr("for", dateId);
            } else {
                $inputContainer.addClass("readonly");
                $showInput.attr('readOnly', true);
                $Label.attr("for", dateId + "_readonly");
                Bubble.hideInfo();
            }

            _silenceControl(!bool, !bool && !(isIconSilence === false));
        }

        function setEnable(isEnable) {
            if (layDateObj) layDateObj.remove();
            setStateStyle();
            var bool = isEnable === false;
            if (bool) {
                $showInput.attr('disabled', true);
                $inputContainer.addClass("disabled");
                $showInput.prev(".textIcon").css("display", "");
                Bubble.hideInfo();
            } else {
                $showInput.attr('disabled', false);
                $inputContainer.removeClass("disabled");
                $showInput.prev(".textIcon").css("display", "none");
            }
            _silenceControl(bool, bool);
        }

        function setVisible(isVisiable, isHold) {
            if (layDateObj) layDateObj.remove();
            setStateStyle();
            if (isVisiable) {
                $layoutContainer.show().css('visibility', 'visible');
            } else {
                Bubble.hideInfo();
                if (isHold) {
                    $layoutContainer.css('visibility', 'hidden');
                } else {
                    $layoutContainer.hide();
                }
            }
        }

        function setFocus() {
            $showInput.focus();
        }

        //组件静默状态控制，按事件和图标区分，readOnly,disable默认都是事件不执行，图标不显示 add by xp
        function _silenceControl(eventBool, iconBool) {
            if (iconBool) {
                $inputContainer.find(".dateIcon").hide();
            } else {
                $inputContainer.find(".dateIcon").show();
            }
            isSilence = eventBool;
        }

        /**
         * 设置是是否必输。
         */
        function setRequired(bool) {
            if (bool === false) {
                $layoutContainer.removeClass("required");
                validObj && validObj.removeOrder("required");
            } else {
                //必输
                $layoutContainer.addClass("required");
                if (validObj) {
                    validObj.addOrder({ type: "required", msg: options.toolTip });
                } else {
                    validObj = new validateObj(textId, $showInput, options, setStateStyle);
                    $showInput.addClass("validate");
                    validObj.addOrder({ type: "required", msg: options.toolTip });
                }
            }
        }

        function doValidate() {
            if (validObj) {
                return validObj.executeValidate();
            } else {
                return true;
            }
        }
        //验证状态样式调整
        function setStateStyle(value) {
            if (value === false) {
                $inputContainer.removeClass("successvalidate").addClass("failvalidate");
                $validateIcon.removeClass("icon-correct2").addClass("icon-close2");
                return;
            } else if (value === true) {
                $inputContainer.removeClass("failvalidate").addClass("successvalidate");
                $validateIcon.removeClass("icon-close2").addClass("icon-correct2");
                return;
            } else {
                $inputContainer.removeClass("failvalidate successvalidate");
                $validateIcon.removeClass("icon-close2 icon-correct2");
                return;
            }
        }

        //获取输入域
        function getInput() {
            return $showInput;
        }
        function getInputLabel() {
            return $layoutContainer.find("label");
        }
        function reset() {
            _declarationState(); //重置状态
            setStateStyle(); //重置样式
        }

        //自定义标注
        function markCalendar(mark, calendar) {
            if (!$.isPlainObject(mark)) mark = {};
            layDateObj.markCalendar(mark, calendar);
            options.params.calendar = layDateObj.config.calendar;
            options.params.mark = mark;
        }
        /**
         *序列化方法,用于提交时拼接数据
         */
        function newSerialize(id, isIncludeNullFields) {
            var str = "";
            var value = getValue();
            if (isIncludeNullFields === false && (value == null || value == "" || typeof value == "undefined")) return str;
            var name = "dto['" + options.name + "']";
            var obj = {};
            if (options.params.range) {
                value = value || ["", ""];
                if ($.isArray(value)) {
                    for (var i = 0; i < value.length; i++) {
                        obj = {};
                        if (str != "") str += "&";
                        obj[name] = value[i];
                        str += jQuery.param(obj);
                    }
                }
            } else {
                value = value || "";
                obj[name] = value;
                str += jQuery.param(obj);
            }

            return str;
        }

        init();
        return {
            "cmptype": 'TaLayDate',
            "setValue": setValue,
            "getValue": getValue,
            "setFocus": setFocus,
            "setVisible": setVisible,
            "setReadOnly": setReadOnly,
            "setEnable": setEnable,
            "doValidate": doValidate,
            "setRequired": setRequired,
            "getInput": getInput,
            "getInputLabel": getInputLabel,
            "reset": reset,
            "setValidateStyle": setStateStyle,
            "newSerialize": newSerialize,
            "clear": clear,
            "markCalendar": markCalendar
        };
    }
    TaLayDate.prototype = new TaFieldComponent();
    TaLayDate.prototype.constructor = TaLayDate;
    return TaLayDate;
});
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 283 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 284 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

__webpack_require__(285);

__webpack_require__(482);

__webpack_require__(483);

if (global._babelPolyfill) {
  throw new Error("only one instance of babel-polyfill is allowed");
}
global._babelPolyfill = true;

var DEFINE_PROPERTY = "defineProperty";
function define(O, key, value) {
  O[key] || Object[DEFINE_PROPERTY](O, key, {
    writable: true,
    configurable: true,
    value: value
  });
}

define(String.prototype, "padLeft", "".padStart);
define(String.prototype, "padRight", "".padEnd);

"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function (key) {
  [][key] && define(Array, key, Function.call.bind([][key]));
});
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(156)))

/***/ }),
/* 285 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(286);
__webpack_require__(289);
__webpack_require__(290);
__webpack_require__(291);
__webpack_require__(292);
__webpack_require__(293);
__webpack_require__(294);
__webpack_require__(295);
__webpack_require__(296);
__webpack_require__(297);
__webpack_require__(298);
__webpack_require__(299);
__webpack_require__(300);
__webpack_require__(301);
__webpack_require__(302);
__webpack_require__(303);
__webpack_require__(304);
__webpack_require__(305);
__webpack_require__(306);
__webpack_require__(307);
__webpack_require__(308);
__webpack_require__(309);
__webpack_require__(310);
__webpack_require__(311);
__webpack_require__(312);
__webpack_require__(313);
__webpack_require__(314);
__webpack_require__(315);
__webpack_require__(316);
__webpack_require__(317);
__webpack_require__(318);
__webpack_require__(319);
__webpack_require__(320);
__webpack_require__(321);
__webpack_require__(322);
__webpack_require__(323);
__webpack_require__(324);
__webpack_require__(325);
__webpack_require__(326);
__webpack_require__(327);
__webpack_require__(328);
__webpack_require__(329);
__webpack_require__(330);
__webpack_require__(331);
__webpack_require__(332);
__webpack_require__(333);
__webpack_require__(334);
__webpack_require__(335);
__webpack_require__(336);
__webpack_require__(337);
__webpack_require__(338);
__webpack_require__(339);
__webpack_require__(340);
__webpack_require__(341);
__webpack_require__(342);
__webpack_require__(343);
__webpack_require__(344);
__webpack_require__(345);
__webpack_require__(346);
__webpack_require__(347);
__webpack_require__(348);
__webpack_require__(349);
__webpack_require__(350);
__webpack_require__(351);
__webpack_require__(352);
__webpack_require__(353);
__webpack_require__(354);
__webpack_require__(355);
__webpack_require__(356);
__webpack_require__(357);
__webpack_require__(358);
__webpack_require__(359);
__webpack_require__(360);
__webpack_require__(361);
__webpack_require__(362);
__webpack_require__(363);
__webpack_require__(364);
__webpack_require__(366);
__webpack_require__(367);
__webpack_require__(369);
__webpack_require__(370);
__webpack_require__(371);
__webpack_require__(372);
__webpack_require__(373);
__webpack_require__(374);
__webpack_require__(375);
__webpack_require__(377);
__webpack_require__(378);
__webpack_require__(379);
__webpack_require__(380);
__webpack_require__(381);
__webpack_require__(382);
__webpack_require__(383);
__webpack_require__(384);
__webpack_require__(385);
__webpack_require__(386);
__webpack_require__(387);
__webpack_require__(388);
__webpack_require__(389);
__webpack_require__(126);
__webpack_require__(390);
__webpack_require__(176);
__webpack_require__(391);
__webpack_require__(177);
__webpack_require__(392);
__webpack_require__(393);
__webpack_require__(394);
__webpack_require__(395);
__webpack_require__(396);
__webpack_require__(180);
__webpack_require__(182);
__webpack_require__(183);
__webpack_require__(397);
__webpack_require__(398);
__webpack_require__(399);
__webpack_require__(400);
__webpack_require__(401);
__webpack_require__(402);
__webpack_require__(403);
__webpack_require__(404);
__webpack_require__(405);
__webpack_require__(406);
__webpack_require__(407);
__webpack_require__(408);
__webpack_require__(409);
__webpack_require__(410);
__webpack_require__(411);
__webpack_require__(412);
__webpack_require__(413);
__webpack_require__(414);
__webpack_require__(415);
__webpack_require__(416);
__webpack_require__(417);
__webpack_require__(418);
__webpack_require__(419);
__webpack_require__(420);
__webpack_require__(421);
__webpack_require__(422);
__webpack_require__(423);
__webpack_require__(424);
__webpack_require__(425);
__webpack_require__(426);
__webpack_require__(427);
__webpack_require__(428);
__webpack_require__(429);
__webpack_require__(430);
__webpack_require__(431);
__webpack_require__(432);
__webpack_require__(433);
__webpack_require__(434);
__webpack_require__(435);
__webpack_require__(436);
__webpack_require__(437);
__webpack_require__(438);
__webpack_require__(439);
__webpack_require__(440);
__webpack_require__(441);
__webpack_require__(442);
__webpack_require__(443);
__webpack_require__(444);
__webpack_require__(445);
__webpack_require__(446);
__webpack_require__(447);
__webpack_require__(448);
__webpack_require__(449);
__webpack_require__(450);
__webpack_require__(451);
__webpack_require__(452);
__webpack_require__(453);
__webpack_require__(454);
__webpack_require__(455);
__webpack_require__(456);
__webpack_require__(457);
__webpack_require__(458);
__webpack_require__(459);
__webpack_require__(460);
__webpack_require__(461);
__webpack_require__(462);
__webpack_require__(463);
__webpack_require__(464);
__webpack_require__(465);
__webpack_require__(466);
__webpack_require__(467);
__webpack_require__(468);
__webpack_require__(469);
__webpack_require__(470);
__webpack_require__(471);
__webpack_require__(472);
__webpack_require__(473);
__webpack_require__(474);
__webpack_require__(475);
__webpack_require__(476);
__webpack_require__(477);
__webpack_require__(478);
__webpack_require__(479);
__webpack_require__(480);
__webpack_require__(481);
module.exports = __webpack_require__(23);


/***/ }),
/* 286 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// ECMAScript 6 symbols shim
var global = __webpack_require__(3);
var has = __webpack_require__(18);
var DESCRIPTORS = __webpack_require__(9);
var $export = __webpack_require__(1);
var redefine = __webpack_require__(15);
var META = __webpack_require__(39).KEY;
var $fails = __webpack_require__(4);
var shared = __webpack_require__(66);
var setToStringTag = __webpack_require__(56);
var uid = __webpack_require__(43);
var wks = __webpack_require__(7);
var wksExt = __webpack_require__(158);
var wksDefine = __webpack_require__(107);
var enumKeys = __webpack_require__(288);
var isArray = __webpack_require__(76);
var anObject = __webpack_require__(2);
var isObject = __webpack_require__(6);
var toIObject = __webpack_require__(19);
var toPrimitive = __webpack_require__(29);
var createDesc = __webpack_require__(42);
var _create = __webpack_require__(46);
var gOPNExt = __webpack_require__(161);
var $GOPD = __webpack_require__(20);
var $DP = __webpack_require__(10);
var $keys = __webpack_require__(44);
var gOPD = $GOPD.f;
var dP = $DP.f;
var gOPN = gOPNExt.f;
var $Symbol = global.Symbol;
var $JSON = global.JSON;
var _stringify = $JSON && $JSON.stringify;
var PROTOTYPE = 'prototype';
var HIDDEN = wks('_hidden');
var TO_PRIMITIVE = wks('toPrimitive');
var isEnum = {}.propertyIsEnumerable;
var SymbolRegistry = shared('symbol-registry');
var AllSymbols = shared('symbols');
var OPSymbols = shared('op-symbols');
var ObjectProto = Object[PROTOTYPE];
var USE_NATIVE = typeof $Symbol == 'function';
var QObject = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function () {
  return _create(dP({}, 'a', {
    get: function () { return dP(this, 'a', { value: 7 }).a; }
  })).a != 7;
}) ? function (it, key, D) {
  var protoDesc = gOPD(ObjectProto, key);
  if (protoDesc) delete ObjectProto[key];
  dP(it, key, D);
  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function (tag) {
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D) {
  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if (has(AllSymbols, key)) {
    if (!D.enumerable) {
      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
      D = _create(D, { enumerable: createDesc(0, false) });
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P) {
  anObject(it);
  var keys = enumKeys(P = toIObject(P));
  var i = 0;
  var l = keys.length;
  var key;
  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P) {
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key) {
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
  it = toIObject(it);
  key = toPrimitive(key, true);
  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
  var D = gOPD(it, key);
  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it) {
  var names = gOPN(toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
  var IS_OP = it === ObjectProto;
  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if (!USE_NATIVE) {
  $Symbol = function Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function (value) {
      if (this === ObjectProto) $set.call(OPSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f = $defineProperty;
  __webpack_require__(47).f = gOPNExt.f = $getOwnPropertyNames;
  __webpack_require__(68).f = $propertyIsEnumerable;
  __webpack_require__(75).f = $getOwnPropertySymbols;

  if (DESCRIPTORS && !__webpack_require__(38)) {
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function (name) {
    return wrap(wks(name));
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

for (var es6Symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);

for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function (key) {
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
  },
  useSetter: function () { setter = true; },
  useSimple: function () { setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it) {
    var args = [it];
    var i = 1;
    var replacer, $replacer;
    while (arguments.length > i) args.push(arguments[i++]);
    $replacer = replacer = args[1];
    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
    if (!isArray(replacer)) replacer = function (key, value) {
      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
      if (!isSymbol(value)) return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(14)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);


/***/ }),
/* 287 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(66)('native-function-to-string', Function.toString);


/***/ }),
/* 288 */
/***/ (function(module, exports, __webpack_require__) {

// all enumerable object keys, includes symbols
var getKeys = __webpack_require__(44);
var gOPS = __webpack_require__(75);
var pIE = __webpack_require__(68);
module.exports = function (it) {
  var result = getKeys(it);
  var getSymbols = gOPS.f;
  if (getSymbols) {
    var symbols = getSymbols(it);
    var isEnum = pIE.f;
    var i = 0;
    var key;
    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
  } return result;
};


/***/ }),
/* 289 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(1);
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
$export($export.S, 'Object', { create: __webpack_require__(46) });


/***/ }),
/* 290 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(1);
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S + $export.F * !__webpack_require__(9), 'Object', { defineProperty: __webpack_require__(10).f });


/***/ }),
/* 291 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(1);
// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
$export($export.S + $export.F * !__webpack_require__(9), 'Object', { defineProperties: __webpack_require__(160) });


/***/ }),
/* 292 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
var toIObject = __webpack_require__(19);
var $getOwnPropertyDescriptor = __webpack_require__(20).f;

__webpack_require__(31)('getOwnPropertyDescriptor', function () {
  return function getOwnPropertyDescriptor(it, key) {
    return $getOwnPropertyDescriptor(toIObject(it), key);
  };
});


/***/ }),
/* 293 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 Object.getPrototypeOf(O)
var toObject = __webpack_require__(11);
var $getPrototypeOf = __webpack_require__(21);

__webpack_require__(31)('getPrototypeOf', function () {
  return function getPrototypeOf(it) {
    return $getPrototypeOf(toObject(it));
  };
});


/***/ }),
/* 294 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 Object.keys(O)
var toObject = __webpack_require__(11);
var $keys = __webpack_require__(44);

__webpack_require__(31)('keys', function () {
  return function keys(it) {
    return $keys(toObject(it));
  };
});


/***/ }),
/* 295 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.7 Object.getOwnPropertyNames(O)
__webpack_require__(31)('getOwnPropertyNames', function () {
  return __webpack_require__(161).f;
});


/***/ }),
/* 296 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.5 Object.freeze(O)
var isObject = __webpack_require__(6);
var meta = __webpack_require__(39).onFreeze;

__webpack_require__(31)('freeze', function ($freeze) {
  return function freeze(it) {
    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
  };
});


/***/ }),
/* 297 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.17 Object.seal(O)
var isObject = __webpack_require__(6);
var meta = __webpack_require__(39).onFreeze;

__webpack_require__(31)('seal', function ($seal) {
  return function seal(it) {
    return $seal && isObject(it) ? $seal(meta(it)) : it;
  };
});


/***/ }),
/* 298 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.15 Object.preventExtensions(O)
var isObject = __webpack_require__(6);
var meta = __webpack_require__(39).onFreeze;

__webpack_require__(31)('preventExtensions', function ($preventExtensions) {
  return function preventExtensions(it) {
    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
  };
});


/***/ }),
/* 299 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.12 Object.isFrozen(O)
var isObject = __webpack_require__(6);

__webpack_require__(31)('isFrozen', function ($isFrozen) {
  return function isFrozen(it) {
    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
  };
});


/***/ }),
/* 300 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.13 Object.isSealed(O)
var isObject = __webpack_require__(6);

__webpack_require__(31)('isSealed', function ($isSealed) {
  return function isSealed(it) {
    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
  };
});


/***/ }),
/* 301 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.11 Object.isExtensible(O)
var isObject = __webpack_require__(6);

__webpack_require__(31)('isExtensible', function ($isExtensible) {
  return function isExtensible(it) {
    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
  };
});


/***/ }),
/* 302 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.1 Object.assign(target, source)
var $export = __webpack_require__(1);

$export($export.S + $export.F, 'Object', { assign: __webpack_require__(162) });


/***/ }),
/* 303 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.10 Object.is(value1, value2)
var $export = __webpack_require__(1);
$export($export.S, 'Object', { is: __webpack_require__(163) });


/***/ }),
/* 304 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export = __webpack_require__(1);
$export($export.S, 'Object', { setPrototypeOf: __webpack_require__(111).set });


/***/ }),
/* 305 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 19.1.3.6 Object.prototype.toString()
var classof = __webpack_require__(57);
var test = {};
test[__webpack_require__(7)('toStringTag')] = 'z';
if (test + '' != '[object z]') {
  __webpack_require__(15)(Object.prototype, 'toString', function toString() {
    return '[object ' + classof(this) + ']';
  }, true);
}


/***/ }),
/* 306 */
/***/ (function(module, exports, __webpack_require__) {

// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
var $export = __webpack_require__(1);

$export($export.P, 'Function', { bind: __webpack_require__(164) });


/***/ }),
/* 307 */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(10).f;
var FProto = Function.prototype;
var nameRE = /^\s*function ([^ (]*)/;
var NAME = 'name';

// 19.2.4.2 name
NAME in FProto || __webpack_require__(9) && dP(FProto, NAME, {
  configurable: true,
  get: function () {
    try {
      return ('' + this).match(nameRE)[1];
    } catch (e) {
      return '';
    }
  }
});


/***/ }),
/* 308 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var isObject = __webpack_require__(6);
var getPrototypeOf = __webpack_require__(21);
var HAS_INSTANCE = __webpack_require__(7)('hasInstance');
var FunctionProto = Function.prototype;
// 19.2.3.6 Function.prototype[@@hasInstance](V)
if (!(HAS_INSTANCE in FunctionProto)) __webpack_require__(10).f(FunctionProto, HAS_INSTANCE, { value: function (O) {
  if (typeof this != 'function' || !isObject(O)) return false;
  if (!isObject(this.prototype)) return O instanceof this;
  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
  while (O = getPrototypeOf(O)) if (this.prototype === O) return true;
  return false;
} });


/***/ }),
/* 309 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(1);
var $parseInt = __webpack_require__(166);
// 18.2.5 parseInt(string, radix)
$export($export.G + $export.F * (parseInt != $parseInt), { parseInt: $parseInt });


/***/ }),
/* 310 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(1);
var $parseFloat = __webpack_require__(167);
// 18.2.4 parseFloat(string)
$export($export.G + $export.F * (parseFloat != $parseFloat), { parseFloat: $parseFloat });


/***/ }),
/* 311 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(3);
var has = __webpack_require__(18);
var cof = __webpack_require__(25);
var inheritIfRequired = __webpack_require__(113);
var toPrimitive = __webpack_require__(29);
var fails = __webpack_require__(4);
var gOPN = __webpack_require__(47).f;
var gOPD = __webpack_require__(20).f;
var dP = __webpack_require__(10).f;
var $trim = __webpack_require__(58).trim;
var NUMBER = 'Number';
var $Number = global[NUMBER];
var Base = $Number;
var proto = $Number.prototype;
// Opera ~12 has broken Object#toString
var BROKEN_COF = cof(__webpack_require__(46)(proto)) == NUMBER;
var TRIM = 'trim' in String.prototype;

// 7.1.3 ToNumber(argument)
var toNumber = function (argument) {
  var it = toPrimitive(argument, false);
  if (typeof it == 'string' && it.length > 2) {
    it = TRIM ? it.trim() : $trim(it, 3);
    var first = it.charCodeAt(0);
    var third, radix, maxCode;
    if (first === 43 || first === 45) {
      third = it.charCodeAt(2);
      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
    } else if (first === 48) {
      switch (it.charCodeAt(1)) {
        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i
        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i
        default: return +it;
      }
      for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {
        code = digits.charCodeAt(i);
        // parseInt parses a string to a first unavailable symbol
        // but ToNumber should return NaN if a string contains unavailable symbols
        if (code < 48 || code > maxCode) return NaN;
      } return parseInt(digits, radix);
    }
  } return +it;
};

if (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {
  $Number = function Number(value) {
    var it = arguments.length < 1 ? 0 : value;
    var that = this;
    return that instanceof $Number
      // check on 1..constructor(foo) case
      && (BROKEN_COF ? fails(function () { proto.valueOf.call(that); }) : cof(that) != NUMBER)
        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
  };
  for (var keys = __webpack_require__(9) ? gOPN(Base) : (
    // ES3:
    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
    // ES6 (in case, if modules with ES6 Number statics required before):
    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
  ).split(','), j = 0, key; keys.length > j; j++) {
    if (has(Base, key = keys[j]) && !has($Number, key)) {
      dP($Number, key, gOPD(Base, key));
    }
  }
  $Number.prototype = proto;
  proto.constructor = $Number;
  __webpack_require__(15)(global, NUMBER, $Number);
}


/***/ }),
/* 312 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(1);
var toInteger = __webpack_require__(26);
var aNumberValue = __webpack_require__(168);
var repeat = __webpack_require__(114);
var $toFixed = 1.0.toFixed;
var floor = Math.floor;
var data = [0, 0, 0, 0, 0, 0];
var ERROR = 'Number.toFixed: incorrect invocation!';
var ZERO = '0';

var multiply = function (n, c) {
  var i = -1;
  var c2 = c;
  while (++i < 6) {
    c2 += n * data[i];
    data[i] = c2 % 1e7;
    c2 = floor(c2 / 1e7);
  }
};
var divide = function (n) {
  var i = 6;
  var c = 0;
  while (--i >= 0) {
    c += data[i];
    data[i] = floor(c / n);
    c = (c % n) * 1e7;
  }
};
var numToString = function () {
  var i = 6;
  var s = '';
  while (--i >= 0) {
    if (s !== '' || i === 0 || data[i] !== 0) {
      var t = String(data[i]);
      s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;
    }
  } return s;
};
var pow = function (x, n, acc) {
  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
};
var log = function (x) {
  var n = 0;
  var x2 = x;
  while (x2 >= 4096) {
    n += 12;
    x2 /= 4096;
  }
  while (x2 >= 2) {
    n += 1;
    x2 /= 2;
  } return n;
};

$export($export.P + $export.F * (!!$toFixed && (
  0.00008.toFixed(3) !== '0.000' ||
  0.9.toFixed(0) !== '1' ||
  1.255.toFixed(2) !== '1.25' ||
  1000000000000000128.0.toFixed(0) !== '1000000000000000128'
) || !__webpack_require__(4)(function () {
  // V8 ~ Android 4.3-
  $toFixed.call({});
})), 'Number', {
  toFixed: function toFixed(fractionDigits) {
    var x = aNumberValue(this, ERROR);
    var f = toInteger(fractionDigits);
    var s = '';
    var m = ZERO;
    var e, z, j, k;
    if (f < 0 || f > 20) throw RangeError(ERROR);
    // eslint-disable-next-line no-self-compare
    if (x != x) return 'NaN';
    if (x <= -1e21 || x >= 1e21) return String(x);
    if (x < 0) {
      s = '-';
      x = -x;
    }
    if (x > 1e-21) {
      e = log(x * pow(2, 69, 1)) - 69;
      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
      z *= 0x10000000000000;
      e = 52 - e;
      if (e > 0) {
        multiply(0, z);
        j = f;
        while (j >= 7) {
          multiply(1e7, 0);
          j -= 7;
        }
        multiply(pow(10, j, 1), 0);
        j = e - 1;
        while (j >= 23) {
          divide(1 << 23);
          j -= 23;
        }
        divide(1 << j);
        multiply(1, 1);
        divide(2);
        m = numToString();
      } else {
        multiply(0, z);
        multiply(1 << -e, 0);
        m = numToString() + repeat.call(ZERO, f);
      }
    }
    if (f > 0) {
      k = m.length;
      m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
    } else {
      m = s + m;
    } return m;
  }
});


/***/ }),
/* 313 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(1);
var $fails = __webpack_require__(4);
var aNumberValue = __webpack_require__(168);
var $toPrecision = 1.0.toPrecision;

$export($export.P + $export.F * ($fails(function () {
  // IE7-
  return $toPrecision.call(1, undefined) !== '1';
}) || !$fails(function () {
  // V8 ~ Android 4.3-
  $toPrecision.call({});
})), 'Number', {
  toPrecision: function toPrecision(precision) {
    var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision);
  }
});


/***/ }),
/* 314 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.1 Number.EPSILON
var $export = __webpack_require__(1);

$export($export.S, 'Number', { EPSILON: Math.pow(2, -52) });


/***/ }),
/* 315 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.2 Number.isFinite(number)
var $export = __webpack_require__(1);
var _isFinite = __webpack_require__(3).isFinite;

$export($export.S, 'Number', {
  isFinite: function isFinite(it) {
    return typeof it == 'number' && _isFinite(it);
  }
});


/***/ }),
/* 316 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.3 Number.isInteger(number)
var $export = __webpack_require__(1);

$export($export.S, 'Number', { isInteger: __webpack_require__(169) });


/***/ }),
/* 317 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.4 Number.isNaN(number)
var $export = __webpack_require__(1);

$export($export.S, 'Number', {
  isNaN: function isNaN(number) {
    // eslint-disable-next-line no-self-compare
    return number != number;
  }
});


/***/ }),
/* 318 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.5 Number.isSafeInteger(number)
var $export = __webpack_require__(1);
var isInteger = __webpack_require__(169);
var abs = Math.abs;

$export($export.S, 'Number', {
  isSafeInteger: function isSafeInteger(number) {
    return isInteger(number) && abs(number) <= 0x1fffffffffffff;
  }
});


/***/ }),
/* 319 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.6 Number.MAX_SAFE_INTEGER
var $export = __webpack_require__(1);

$export($export.S, 'Number', { MAX_SAFE_INTEGER: 0x1fffffffffffff });


/***/ }),
/* 320 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.10 Number.MIN_SAFE_INTEGER
var $export = __webpack_require__(1);

$export($export.S, 'Number', { MIN_SAFE_INTEGER: -0x1fffffffffffff });


/***/ }),
/* 321 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(1);
var $parseFloat = __webpack_require__(167);
// 20.1.2.12 Number.parseFloat(string)
$export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', { parseFloat: $parseFloat });


/***/ }),
/* 322 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(1);
var $parseInt = __webpack_require__(166);
// 20.1.2.13 Number.parseInt(string, radix)
$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', { parseInt: $parseInt });


/***/ }),
/* 323 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.3 Math.acosh(x)
var $export = __webpack_require__(1);
var log1p = __webpack_require__(170);
var sqrt = Math.sqrt;
var $acosh = Math.acosh;

$export($export.S + $export.F * !($acosh
  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
  && Math.floor($acosh(Number.MAX_VALUE)) == 710
  // Tor Browser bug: Math.acosh(Infinity) -> NaN
  && $acosh(Infinity) == Infinity
), 'Math', {
  acosh: function acosh(x) {
    return (x = +x) < 1 ? NaN : x > 94906265.62425156
      ? Math.log(x) + Math.LN2
      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
  }
});


/***/ }),
/* 324 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.5 Math.asinh(x)
var $export = __webpack_require__(1);
var $asinh = Math.asinh;

function asinh(x) {
  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
}

// Tor Browser bug: Math.asinh(0) -> -0
$export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', { asinh: asinh });


/***/ }),
/* 325 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.7 Math.atanh(x)
var $export = __webpack_require__(1);
var $atanh = Math.atanh;

// Tor Browser bug: Math.atanh(-0) -> 0
$export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
  atanh: function atanh(x) {
    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
  }
});


/***/ }),
/* 326 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.9 Math.cbrt(x)
var $export = __webpack_require__(1);
var sign = __webpack_require__(115);

$export($export.S, 'Math', {
  cbrt: function cbrt(x) {
    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
  }
});


/***/ }),
/* 327 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.11 Math.clz32(x)
var $export = __webpack_require__(1);

$export($export.S, 'Math', {
  clz32: function clz32(x) {
    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
  }
});


/***/ }),
/* 328 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.12 Math.cosh(x)
var $export = __webpack_require__(1);
var exp = Math.exp;

$export($export.S, 'Math', {
  cosh: function cosh(x) {
    return (exp(x = +x) + exp(-x)) / 2;
  }
});


/***/ }),
/* 329 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.14 Math.expm1(x)
var $export = __webpack_require__(1);
var $expm1 = __webpack_require__(116);

$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', { expm1: $expm1 });


/***/ }),
/* 330 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.16 Math.fround(x)
var $export = __webpack_require__(1);

$export($export.S, 'Math', { fround: __webpack_require__(171) });


/***/ }),
/* 331 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
var $export = __webpack_require__(1);
var abs = Math.abs;

$export($export.S, 'Math', {
  hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars
    var sum = 0;
    var i = 0;
    var aLen = arguments.length;
    var larg = 0;
    var arg, div;
    while (i < aLen) {
      arg = abs(arguments[i++]);
      if (larg < arg) {
        div = larg / arg;
        sum = sum * div * div + 1;
        larg = arg;
      } else if (arg > 0) {
        div = arg / larg;
        sum += div * div;
      } else sum += arg;
    }
    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
  }
});


/***/ }),
/* 332 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.18 Math.imul(x, y)
var $export = __webpack_require__(1);
var $imul = Math.imul;

// some WebKit versions fails with big numbers, some has wrong arity
$export($export.S + $export.F * __webpack_require__(4)(function () {
  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
}), 'Math', {
  imul: function imul(x, y) {
    var UINT16 = 0xffff;
    var xn = +x;
    var yn = +y;
    var xl = UINT16 & xn;
    var yl = UINT16 & yn;
    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
  }
});


/***/ }),
/* 333 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.21 Math.log10(x)
var $export = __webpack_require__(1);

$export($export.S, 'Math', {
  log10: function log10(x) {
    return Math.log(x) * Math.LOG10E;
  }
});


/***/ }),
/* 334 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.20 Math.log1p(x)
var $export = __webpack_require__(1);

$export($export.S, 'Math', { log1p: __webpack_require__(170) });


/***/ }),
/* 335 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.22 Math.log2(x)
var $export = __webpack_require__(1);

$export($export.S, 'Math', {
  log2: function log2(x) {
    return Math.log(x) / Math.LN2;
  }
});


/***/ }),
/* 336 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.28 Math.sign(x)
var $export = __webpack_require__(1);

$export($export.S, 'Math', { sign: __webpack_require__(115) });


/***/ }),
/* 337 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.30 Math.sinh(x)
var $export = __webpack_require__(1);
var expm1 = __webpack_require__(116);
var exp = Math.exp;

// V8 near Chromium 38 has a problem with very small numbers
$export($export.S + $export.F * __webpack_require__(4)(function () {
  return !Math.sinh(-2e-17) != -2e-17;
}), 'Math', {
  sinh: function sinh(x) {
    return Math.abs(x = +x) < 1
      ? (expm1(x) - expm1(-x)) / 2
      : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
  }
});


/***/ }),
/* 338 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.33 Math.tanh(x)
var $export = __webpack_require__(1);
var expm1 = __webpack_require__(116);
var exp = Math.exp;

$export($export.S, 'Math', {
  tanh: function tanh(x) {
    var a = expm1(x = +x);
    var b = expm1(-x);
    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
  }
});


/***/ }),
/* 339 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.34 Math.trunc(x)
var $export = __webpack_require__(1);

$export($export.S, 'Math', {
  trunc: function trunc(it) {
    return (it > 0 ? Math.floor : Math.ceil)(it);
  }
});


/***/ }),
/* 340 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(1);
var toAbsoluteIndex = __webpack_require__(45);
var fromCharCode = String.fromCharCode;
var $fromCodePoint = String.fromCodePoint;

// length should be 1, old FF problem
$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
  // 21.1.2.2 String.fromCodePoint(...codePoints)
  fromCodePoint: function fromCodePoint(x) { // eslint-disable-line no-unused-vars
    var res = [];
    var aLen = arguments.length;
    var i = 0;
    var code;
    while (aLen > i) {
      code = +arguments[i++];
      if (toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');
      res.push(code < 0x10000
        ? fromCharCode(code)
        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
      );
    } return res.join('');
  }
});


/***/ }),
/* 341 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(1);
var toIObject = __webpack_require__(19);
var toLength = __webpack_require__(8);

$export($export.S, 'String', {
  // 21.1.2.4 String.raw(callSite, ...substitutions)
  raw: function raw(callSite) {
    var tpl = toIObject(callSite.raw);
    var len = toLength(tpl.length);
    var aLen = arguments.length;
    var res = [];
    var i = 0;
    while (len > i) {
      res.push(String(tpl[i++]));
      if (i < aLen) res.push(String(arguments[i]));
    } return res.join('');
  }
});


/***/ }),
/* 342 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 21.1.3.25 String.prototype.trim()
__webpack_require__(58)('trim', function ($trim) {
  return function trim() {
    return $trim(this, 3);
  };
});


/***/ }),
/* 343 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $at = __webpack_require__(77)(true);

// 21.1.3.27 String.prototype[@@iterator]()
__webpack_require__(117)(String, 'String', function (iterated) {
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var index = this._i;
  var point;
  if (index >= O.length) return { value: undefined, done: true };
  point = $at(O, index);
  this._i += point.length;
  return { value: point, done: false };
});


/***/ }),
/* 344 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(1);
var $at = __webpack_require__(77)(false);
$export($export.P, 'String', {
  // 21.1.3.3 String.prototype.codePointAt(pos)
  codePointAt: function codePointAt(pos) {
    return $at(this, pos);
  }
});


/***/ }),
/* 345 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])

var $export = __webpack_require__(1);
var toLength = __webpack_require__(8);
var context = __webpack_require__(119);
var ENDS_WITH = 'endsWith';
var $endsWith = ''[ENDS_WITH];

$export($export.P + $export.F * __webpack_require__(120)(ENDS_WITH), 'String', {
  endsWith: function endsWith(searchString /* , endPosition = @length */) {
    var that = context(this, searchString, ENDS_WITH);
    var endPosition = arguments.length > 1 ? arguments[1] : undefined;
    var len = toLength(that.length);
    var end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);
    var search = String(searchString);
    return $endsWith
      ? $endsWith.call(that, search, end)
      : that.slice(end - search.length, end) === search;
  }
});


/***/ }),
/* 346 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 21.1.3.7 String.prototype.includes(searchString, position = 0)

var $export = __webpack_require__(1);
var context = __webpack_require__(119);
var INCLUDES = 'includes';

$export($export.P + $export.F * __webpack_require__(120)(INCLUDES), 'String', {
  includes: function includes(searchString /* , position = 0 */) {
    return !!~context(this, searchString, INCLUDES)
      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
  }
});


/***/ }),
/* 347 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(1);

$export($export.P, 'String', {
  // 21.1.3.13 String.prototype.repeat(count)
  repeat: __webpack_require__(114)
});


/***/ }),
/* 348 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 21.1.3.18 String.prototype.startsWith(searchString [, position ])

var $export = __webpack_require__(1);
var toLength = __webpack_require__(8);
var context = __webpack_require__(119);
var STARTS_WITH = 'startsWith';
var $startsWith = ''[STARTS_WITH];

$export($export.P + $export.F * __webpack_require__(120)(STARTS_WITH), 'String', {
  startsWith: function startsWith(searchString /* , position = 0 */) {
    var that = context(this, searchString, STARTS_WITH);
    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));
    var search = String(searchString);
    return $startsWith
      ? $startsWith.call(that, search, index)
      : that.slice(index, index + search.length) === search;
  }
});


/***/ }),
/* 349 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.2 String.prototype.anchor(name)
__webpack_require__(16)('anchor', function (createHTML) {
  return function anchor(name) {
    return createHTML(this, 'a', 'name', name);
  };
});


/***/ }),
/* 350 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.3 String.prototype.big()
__webpack_require__(16)('big', function (createHTML) {
  return function big() {
    return createHTML(this, 'big', '', '');
  };
});


/***/ }),
/* 351 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.4 String.prototype.blink()
__webpack_require__(16)('blink', function (createHTML) {
  return function blink() {
    return createHTML(this, 'blink', '', '');
  };
});


/***/ }),
/* 352 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.5 String.prototype.bold()
__webpack_require__(16)('bold', function (createHTML) {
  return function bold() {
    return createHTML(this, 'b', '', '');
  };
});


/***/ }),
/* 353 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.6 String.prototype.fixed()
__webpack_require__(16)('fixed', function (createHTML) {
  return function fixed() {
    return createHTML(this, 'tt', '', '');
  };
});


/***/ }),
/* 354 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.7 String.prototype.fontcolor(color)
__webpack_require__(16)('fontcolor', function (createHTML) {
  return function fontcolor(color) {
    return createHTML(this, 'font', 'color', color);
  };
});


/***/ }),
/* 355 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.8 String.prototype.fontsize(size)
__webpack_require__(16)('fontsize', function (createHTML) {
  return function fontsize(size) {
    return createHTML(this, 'font', 'size', size);
  };
});


/***/ }),
/* 356 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.9 String.prototype.italics()
__webpack_require__(16)('italics', function (createHTML) {
  return function italics() {
    return createHTML(this, 'i', '', '');
  };
});


/***/ }),
/* 357 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.10 String.prototype.link(url)
__webpack_require__(16)('link', function (createHTML) {
  return function link(url) {
    return createHTML(this, 'a', 'href', url);
  };
});


/***/ }),
/* 358 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.11 String.prototype.small()
__webpack_require__(16)('small', function (createHTML) {
  return function small() {
    return createHTML(this, 'small', '', '');
  };
});


/***/ }),
/* 359 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.12 String.prototype.strike()
__webpack_require__(16)('strike', function (createHTML) {
  return function strike() {
    return createHTML(this, 'strike', '', '');
  };
});


/***/ }),
/* 360 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.13 String.prototype.sub()
__webpack_require__(16)('sub', function (createHTML) {
  return function sub() {
    return createHTML(this, 'sub', '', '');
  };
});


/***/ }),
/* 361 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.14 String.prototype.sup()
__webpack_require__(16)('sup', function (createHTML) {
  return function sup() {
    return createHTML(this, 'sup', '', '');
  };
});


/***/ }),
/* 362 */
/***/ (function(module, exports, __webpack_require__) {

// 20.3.3.1 / 15.9.4.4 Date.now()
var $export = __webpack_require__(1);

$export($export.S, 'Date', { now: function () { return new Date().getTime(); } });


/***/ }),
/* 363 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(1);
var toObject = __webpack_require__(11);
var toPrimitive = __webpack_require__(29);

$export($export.P + $export.F * __webpack_require__(4)(function () {
  return new Date(NaN).toJSON() !== null
    || Date.prototype.toJSON.call({ toISOString: function () { return 1; } }) !== 1;
}), 'Date', {
  // eslint-disable-next-line no-unused-vars
  toJSON: function toJSON(key) {
    var O = toObject(this);
    var pv = toPrimitive(O);
    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
  }
});


/***/ }),
/* 364 */
/***/ (function(module, exports, __webpack_require__) {

// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
var $export = __webpack_require__(1);
var toISOString = __webpack_require__(365);

// PhantomJS / old WebKit has a broken implementations
$export($export.P + $export.F * (Date.prototype.toISOString !== toISOString), 'Date', {
  toISOString: toISOString
});


/***/ }),
/* 365 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
var fails = __webpack_require__(4);
var getTime = Date.prototype.getTime;
var $toISOString = Date.prototype.toISOString;

var lz = function (num) {
  return num > 9 ? num : '0' + num;
};

// PhantomJS / old WebKit has a broken implementations
module.exports = (fails(function () {
  return $toISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';
}) || !fails(function () {
  $toISOString.call(new Date(NaN));
})) ? function toISOString() {
  if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');
  var d = this;
  var y = d.getUTCFullYear();
  var m = d.getUTCMilliseconds();
  var s = y < 0 ? '-' : y > 9999 ? '+' : '';
  return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +
    '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +
    'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +
    ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
} : $toISOString;


/***/ }),
/* 366 */
/***/ (function(module, exports, __webpack_require__) {

var DateProto = Date.prototype;
var INVALID_DATE = 'Invalid Date';
var TO_STRING = 'toString';
var $toString = DateProto[TO_STRING];
var getTime = DateProto.getTime;
if (new Date(NaN) + '' != INVALID_DATE) {
  __webpack_require__(15)(DateProto, TO_STRING, function toString() {
    var value = getTime.call(this);
    // eslint-disable-next-line no-self-compare
    return value === value ? $toString.call(this) : INVALID_DATE;
  });
}


/***/ }),
/* 367 */
/***/ (function(module, exports, __webpack_require__) {

var TO_PRIMITIVE = __webpack_require__(7)('toPrimitive');
var proto = Date.prototype;

if (!(TO_PRIMITIVE in proto)) __webpack_require__(14)(proto, TO_PRIMITIVE, __webpack_require__(368));


/***/ }),
/* 368 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var anObject = __webpack_require__(2);
var toPrimitive = __webpack_require__(29);
var NUMBER = 'number';

module.exports = function (hint) {
  if (hint !== 'string' && hint !== NUMBER && hint !== 'default') throw TypeError('Incorrect hint');
  return toPrimitive(anObject(this), hint != NUMBER);
};


/***/ }),
/* 369 */
/***/ (function(module, exports, __webpack_require__) {

// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
var $export = __webpack_require__(1);

$export($export.S, 'Array', { isArray: __webpack_require__(76) });


/***/ }),
/* 370 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ctx = __webpack_require__(24);
var $export = __webpack_require__(1);
var toObject = __webpack_require__(11);
var call = __webpack_require__(172);
var isArrayIter = __webpack_require__(121);
var toLength = __webpack_require__(8);
var createProperty = __webpack_require__(122);
var getIterFn = __webpack_require__(123);

$export($export.S + $export.F * !__webpack_require__(79)(function (iter) { Array.from(iter); }), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
    var O = toObject(arrayLike);
    var C = typeof this == 'function' ? this : Array;
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var index = 0;
    var iterFn = getIterFn(O);
    var length, result, step, iterator;
    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
    // if object isn't iterable or it's array with default iterator - use simple case
    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
      }
    } else {
      length = toLength(O.length);
      for (result = new C(length); length > index; index++) {
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }
    result.length = index;
    return result;
  }
});


/***/ }),
/* 371 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(1);
var createProperty = __webpack_require__(122);

// WebKit Array.of isn't generic
$export($export.S + $export.F * __webpack_require__(4)(function () {
  function F() { /* empty */ }
  return !(Array.of.call(F) instanceof F);
}), 'Array', {
  // 22.1.2.3 Array.of( ...items)
  of: function of(/* ...args */) {
    var index = 0;
    var aLen = arguments.length;
    var result = new (typeof this == 'function' ? this : Array)(aLen);
    while (aLen > index) createProperty(result, index, arguments[index++]);
    result.length = aLen;
    return result;
  }
});


/***/ }),
/* 372 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 22.1.3.13 Array.prototype.join(separator)
var $export = __webpack_require__(1);
var toIObject = __webpack_require__(19);
var arrayJoin = [].join;

// fallback for not array-like strings
$export($export.P + $export.F * (__webpack_require__(67) != Object || !__webpack_require__(27)(arrayJoin)), 'Array', {
  join: function join(separator) {
    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);
  }
});


/***/ }),
/* 373 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(1);
var html = __webpack_require__(110);
var cof = __webpack_require__(25);
var toAbsoluteIndex = __webpack_require__(45);
var toLength = __webpack_require__(8);
var arraySlice = [].slice;

// fallback for not array-like ES3 strings and DOM objects
$export($export.P + $export.F * __webpack_require__(4)(function () {
  if (html) arraySlice.call(html);
}), 'Array', {
  slice: function slice(begin, end) {
    var len = toLength(this.length);
    var klass = cof(this);
    end = end === undefined ? len : end;
    if (klass == 'Array') return arraySlice.call(this, begin, end);
    var start = toAbsoluteIndex(begin, len);
    var upTo = toAbsoluteIndex(end, len);
    var size = toLength(upTo - start);
    var cloned = new Array(size);
    var i = 0;
    for (; i < size; i++) cloned[i] = klass == 'String'
      ? this.charAt(start + i)
      : this[start + i];
    return cloned;
  }
});


/***/ }),
/* 374 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(1);
var aFunction = __webpack_require__(12);
var toObject = __webpack_require__(11);
var fails = __webpack_require__(4);
var $sort = [].sort;
var test = [1, 2, 3];

$export($export.P + $export.F * (fails(function () {
  // IE8-
  test.sort(undefined);
}) || !fails(function () {
  // V8 bug
  test.sort(null);
  // Old WebKit
}) || !__webpack_require__(27)($sort)), 'Array', {
  // 22.1.3.25 Array.prototype.sort(comparefn)
  sort: function sort(comparefn) {
    return comparefn === undefined
      ? $sort.call(toObject(this))
      : $sort.call(toObject(this), aFunction(comparefn));
  }
});


/***/ }),
/* 375 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(1);
var $forEach = __webpack_require__(32)(0);
var STRICT = __webpack_require__(27)([].forEach, true);

$export($export.P + $export.F * !STRICT, 'Array', {
  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
  forEach: function forEach(callbackfn /* , thisArg */) {
    return $forEach(this, callbackfn, arguments[1]);
  }
});


/***/ }),
/* 376 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(6);
var isArray = __webpack_require__(76);
var SPECIES = __webpack_require__(7)('species');

module.exports = function (original) {
  var C;
  if (isArray(original)) {
    C = original.constructor;
    // cross-realm fallback
    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
    if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  } return C === undefined ? Array : C;
};


/***/ }),
/* 377 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(1);
var $map = __webpack_require__(32)(1);

$export($export.P + $export.F * !__webpack_require__(27)([].map, true), 'Array', {
  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
  map: function map(callbackfn /* , thisArg */) {
    return $map(this, callbackfn, arguments[1]);
  }
});


/***/ }),
/* 378 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(1);
var $filter = __webpack_require__(32)(2);

$export($export.P + $export.F * !__webpack_require__(27)([].filter, true), 'Array', {
  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
  filter: function filter(callbackfn /* , thisArg */) {
    return $filter(this, callbackfn, arguments[1]);
  }
});


/***/ }),
/* 379 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(1);
var $some = __webpack_require__(32)(3);

$export($export.P + $export.F * !__webpack_require__(27)([].some, true), 'Array', {
  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
  some: function some(callbackfn /* , thisArg */) {
    return $some(this, callbackfn, arguments[1]);
  }
});


/***/ }),
/* 380 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(1);
var $every = __webpack_require__(32)(4);

$export($export.P + $export.F * !__webpack_require__(27)([].every, true), 'Array', {
  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
  every: function every(callbackfn /* , thisArg */) {
    return $every(this, callbackfn, arguments[1]);
  }
});


/***/ }),
/* 381 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(1);
var $reduce = __webpack_require__(173);

$export($export.P + $export.F * !__webpack_require__(27)([].reduce, true), 'Array', {
  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
  reduce: function reduce(callbackfn /* , initialValue */) {
    return $reduce(this, callbackfn, arguments.length, arguments[1], false);
  }
});


/***/ }),
/* 382 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(1);
var $reduce = __webpack_require__(173);

$export($export.P + $export.F * !__webpack_require__(27)([].reduceRight, true), 'Array', {
  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
  reduceRight: function reduceRight(callbackfn /* , initialValue */) {
    return $reduce(this, callbackfn, arguments.length, arguments[1], true);
  }
});


/***/ }),
/* 383 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(1);
var $indexOf = __webpack_require__(74)(false);
var $native = [].indexOf;
var NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(27)($native)), 'Array', {
  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
    return NEGATIVE_ZERO
      // convert -0 to +0
      ? $native.apply(this, arguments) || 0
      : $indexOf(this, searchElement, arguments[1]);
  }
});


/***/ }),
/* 384 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(1);
var toIObject = __webpack_require__(19);
var toInteger = __webpack_require__(26);
var toLength = __webpack_require__(8);
var $native = [].lastIndexOf;
var NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(27)($native)), 'Array', {
  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
  lastIndexOf: function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {
    // convert -0 to +0
    if (NEGATIVE_ZERO) return $native.apply(this, arguments) || 0;
    var O = toIObject(this);
    var length = toLength(O.length);
    var index = length - 1;
    if (arguments.length > 1) index = Math.min(index, toInteger(arguments[1]));
    if (index < 0) index = length + index;
    for (;index >= 0; index--) if (index in O) if (O[index] === searchElement) return index || 0;
    return -1;
  }
});


/***/ }),
/* 385 */
/***/ (function(module, exports, __webpack_require__) {

// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
var $export = __webpack_require__(1);

$export($export.P, 'Array', { copyWithin: __webpack_require__(174) });

__webpack_require__(40)('copyWithin');


/***/ }),
/* 386 */
/***/ (function(module, exports, __webpack_require__) {

// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
var $export = __webpack_require__(1);

$export($export.P, 'Array', { fill: __webpack_require__(125) });

__webpack_require__(40)('fill');


/***/ }),
/* 387 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
var $export = __webpack_require__(1);
var $find = __webpack_require__(32)(5);
var KEY = 'find';
var forced = true;
// Shouldn't skip holes
if (KEY in []) Array(1)[KEY](function () { forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  find: function find(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
__webpack_require__(40)(KEY);


/***/ }),
/* 388 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
var $export = __webpack_require__(1);
var $find = __webpack_require__(32)(6);
var KEY = 'findIndex';
var forced = true;
// Shouldn't skip holes
if (KEY in []) Array(1)[KEY](function () { forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  findIndex: function findIndex(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
__webpack_require__(40)(KEY);


/***/ }),
/* 389 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(48)('Array');


/***/ }),
/* 390 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(3);
var inheritIfRequired = __webpack_require__(113);
var dP = __webpack_require__(10).f;
var gOPN = __webpack_require__(47).f;
var isRegExp = __webpack_require__(78);
var $flags = __webpack_require__(69);
var $RegExp = global.RegExp;
var Base = $RegExp;
var proto = $RegExp.prototype;
var re1 = /a/g;
var re2 = /a/g;
// "new" creates a new object, old webkit buggy here
var CORRECT_NEW = new $RegExp(re1) !== re1;

if (__webpack_require__(9) && (!CORRECT_NEW || __webpack_require__(4)(function () {
  re2[__webpack_require__(7)('match')] = false;
  // RegExp constructor can alter flags and IsRegExp works correct with @@match
  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
}))) {
  $RegExp = function RegExp(p, f) {
    var tiRE = this instanceof $RegExp;
    var piRE = isRegExp(p);
    var fiU = f === undefined;
    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p
      : inheritIfRequired(CORRECT_NEW
        ? new Base(piRE && !fiU ? p.source : p, f)
        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)
      , tiRE ? this : proto, $RegExp);
  };
  var proxy = function (key) {
    key in $RegExp || dP($RegExp, key, {
      configurable: true,
      get: function () { return Base[key]; },
      set: function (it) { Base[key] = it; }
    });
  };
  for (var keys = gOPN(Base), i = 0; keys.length > i;) proxy(keys[i++]);
  proto.constructor = $RegExp;
  $RegExp.prototype = proto;
  __webpack_require__(15)(global, 'RegExp', $RegExp);
}

__webpack_require__(48)('RegExp');


/***/ }),
/* 391 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

__webpack_require__(177);
var anObject = __webpack_require__(2);
var $flags = __webpack_require__(69);
var DESCRIPTORS = __webpack_require__(9);
var TO_STRING = 'toString';
var $toString = /./[TO_STRING];

var define = function (fn) {
  __webpack_require__(15)(RegExp.prototype, TO_STRING, fn, true);
};

// 21.2.5.14 RegExp.prototype.toString()
if (__webpack_require__(4)(function () { return $toString.call({ source: 'a', flags: 'b' }) != '/a/b'; })) {
  define(function toString() {
    var R = anObject(this);
    return '/'.concat(R.source, '/',
      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
  });
// FF44- RegExp#toString has a wrong name
} else if ($toString.name != TO_STRING) {
  define(function toString() {
    return $toString.call(this);
  });
}


/***/ }),
/* 392 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var anObject = __webpack_require__(2);
var toLength = __webpack_require__(8);
var advanceStringIndex = __webpack_require__(128);
var regExpExec = __webpack_require__(80);

// @@match logic
__webpack_require__(81)('match', 1, function (defined, MATCH, $match, maybeCallNative) {
  return [
    // `String.prototype.match` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.match
    function match(regexp) {
      var O = defined(this);
      var fn = regexp == undefined ? undefined : regexp[MATCH];
      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
    },
    // `RegExp.prototype[@@match]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match
    function (regexp) {
      var res = maybeCallNative($match, regexp, this);
      if (res.done) return res.value;
      var rx = anObject(regexp);
      var S = String(this);
      if (!rx.global) return regExpExec(rx, S);
      var fullUnicode = rx.unicode;
      rx.lastIndex = 0;
      var A = [];
      var n = 0;
      var result;
      while ((result = regExpExec(rx, S)) !== null) {
        var matchStr = String(result[0]);
        A[n] = matchStr;
        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
        n++;
      }
      return n === 0 ? null : A;
    }
  ];
});


/***/ }),
/* 393 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var anObject = __webpack_require__(2);
var toObject = __webpack_require__(11);
var toLength = __webpack_require__(8);
var toInteger = __webpack_require__(26);
var advanceStringIndex = __webpack_require__(128);
var regExpExec = __webpack_require__(80);
var max = Math.max;
var min = Math.min;
var floor = Math.floor;
var SUBSTITUTION_SYMBOLS = /\$([$&`']|\d\d?|<[^>]*>)/g;
var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&`']|\d\d?)/g;

var maybeToString = function (it) {
  return it === undefined ? it : String(it);
};

// @@replace logic
__webpack_require__(81)('replace', 2, function (defined, REPLACE, $replace, maybeCallNative) {
  return [
    // `String.prototype.replace` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.replace
    function replace(searchValue, replaceValue) {
      var O = defined(this);
      var fn = searchValue == undefined ? undefined : searchValue[REPLACE];
      return fn !== undefined
        ? fn.call(searchValue, O, replaceValue)
        : $replace.call(String(O), searchValue, replaceValue);
    },
    // `RegExp.prototype[@@replace]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace
    function (regexp, replaceValue) {
      var res = maybeCallNative($replace, regexp, this, replaceValue);
      if (res.done) return res.value;

      var rx = anObject(regexp);
      var S = String(this);
      var functionalReplace = typeof replaceValue === 'function';
      if (!functionalReplace) replaceValue = String(replaceValue);
      var global = rx.global;
      if (global) {
        var fullUnicode = rx.unicode;
        rx.lastIndex = 0;
      }
      var results = [];
      while (true) {
        var result = regExpExec(rx, S);
        if (result === null) break;
        results.push(result);
        if (!global) break;
        var matchStr = String(result[0]);
        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
      }
      var accumulatedResult = '';
      var nextSourcePosition = 0;
      for (var i = 0; i < results.length; i++) {
        result = results[i];
        var matched = String(result[0]);
        var position = max(min(toInteger(result.index), S.length), 0);
        var captures = [];
        // NOTE: This is equivalent to
        //   captures = result.slice(1).map(maybeToString)
        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
        // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
        for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));
        var namedCaptures = result.groups;
        if (functionalReplace) {
          var replacerArgs = [matched].concat(captures, position, S);
          if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
          var replacement = String(replaceValue.apply(undefined, replacerArgs));
        } else {
          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
        }
        if (position >= nextSourcePosition) {
          accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
          nextSourcePosition = position + matched.length;
        }
      }
      return accumulatedResult + S.slice(nextSourcePosition);
    }
  ];

    // https://tc39.github.io/ecma262/#sec-getsubstitution
  function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {
    var tailPos = position + matched.length;
    var m = captures.length;
    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
    if (namedCaptures !== undefined) {
      namedCaptures = toObject(namedCaptures);
      symbols = SUBSTITUTION_SYMBOLS;
    }
    return $replace.call(replacement, symbols, function (match, ch) {
      var capture;
      switch (ch.charAt(0)) {
        case '$': return '$';
        case '&': return matched;
        case '`': return str.slice(0, position);
        case "'": return str.slice(tailPos);
        case '<':
          capture = namedCaptures[ch.slice(1, -1)];
          break;
        default: // \d\d?
          var n = +ch;
          if (n === 0) return match;
          if (n > m) {
            var f = floor(n / 10);
            if (f === 0) return match;
            if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
            return match;
          }
          capture = captures[n - 1];
      }
      return capture === undefined ? '' : capture;
    });
  }
});


/***/ }),
/* 394 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var anObject = __webpack_require__(2);
var sameValue = __webpack_require__(163);
var regExpExec = __webpack_require__(80);

// @@search logic
__webpack_require__(81)('search', 1, function (defined, SEARCH, $search, maybeCallNative) {
  return [
    // `String.prototype.search` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.search
    function search(regexp) {
      var O = defined(this);
      var fn = regexp == undefined ? undefined : regexp[SEARCH];
      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
    },
    // `RegExp.prototype[@@search]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@search
    function (regexp) {
      var res = maybeCallNative($search, regexp, this);
      if (res.done) return res.value;
      var rx = anObject(regexp);
      var S = String(this);
      var previousLastIndex = rx.lastIndex;
      if (!sameValue(previousLastIndex, 0)) rx.lastIndex = 0;
      var result = regExpExec(rx, S);
      if (!sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;
      return result === null ? -1 : result.index;
    }
  ];
});


/***/ }),
/* 395 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isRegExp = __webpack_require__(78);
var anObject = __webpack_require__(2);
var speciesConstructor = __webpack_require__(70);
var advanceStringIndex = __webpack_require__(128);
var toLength = __webpack_require__(8);
var callRegExpExec = __webpack_require__(80);
var regexpExec = __webpack_require__(127);
var fails = __webpack_require__(4);
var $min = Math.min;
var $push = [].push;
var $SPLIT = 'split';
var LENGTH = 'length';
var LAST_INDEX = 'lastIndex';
var MAX_UINT32 = 0xffffffff;

// babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError
var SUPPORTS_Y = !fails(function () { RegExp(MAX_UINT32, 'y'); });

// @@split logic
__webpack_require__(81)('split', 2, function (defined, SPLIT, $split, maybeCallNative) {
  var internalSplit;
  if (
    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||
    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||
    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||
    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||
    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||
    ''[$SPLIT](/.?/)[LENGTH]
  ) {
    // based on es5-shim implementation, need to rework it
    internalSplit = function (separator, limit) {
      var string = String(this);
      if (separator === undefined && limit === 0) return [];
      // If `separator` is not a regex, use native split
      if (!isRegExp(separator)) return $split.call(string, separator, limit);
      var output = [];
      var flags = (separator.ignoreCase ? 'i' : '') +
                  (separator.multiline ? 'm' : '') +
                  (separator.unicode ? 'u' : '') +
                  (separator.sticky ? 'y' : '');
      var lastLastIndex = 0;
      var splitLimit = limit === undefined ? MAX_UINT32 : limit >>> 0;
      // Make `global` and avoid `lastIndex` issues by working with a copy
      var separatorCopy = new RegExp(separator.source, flags + 'g');
      var match, lastIndex, lastLength;
      while (match = regexpExec.call(separatorCopy, string)) {
        lastIndex = separatorCopy[LAST_INDEX];
        if (lastIndex > lastLastIndex) {
          output.push(string.slice(lastLastIndex, match.index));
          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));
          lastLength = match[0][LENGTH];
          lastLastIndex = lastIndex;
          if (output[LENGTH] >= splitLimit) break;
        }
        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
      }
      if (lastLastIndex === string[LENGTH]) {
        if (lastLength || !separatorCopy.test('')) output.push('');
      } else output.push(string.slice(lastLastIndex));
      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
    };
  // Chakra, V8
  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {
    internalSplit = function (separator, limit) {
      return separator === undefined && limit === 0 ? [] : $split.call(this, separator, limit);
    };
  } else {
    internalSplit = $split;
  }

  return [
    // `String.prototype.split` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.split
    function split(separator, limit) {
      var O = defined(this);
      var splitter = separator == undefined ? undefined : separator[SPLIT];
      return splitter !== undefined
        ? splitter.call(separator, O, limit)
        : internalSplit.call(String(O), separator, limit);
    },
    // `RegExp.prototype[@@split]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split
    //
    // NOTE: This cannot be properly polyfilled in engines that don't support
    // the 'y' flag.
    function (regexp, limit) {
      var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== $split);
      if (res.done) return res.value;

      var rx = anObject(regexp);
      var S = String(this);
      var C = speciesConstructor(rx, RegExp);

      var unicodeMatching = rx.unicode;
      var flags = (rx.ignoreCase ? 'i' : '') +
                  (rx.multiline ? 'm' : '') +
                  (rx.unicode ? 'u' : '') +
                  (SUPPORTS_Y ? 'y' : 'g');

      // ^(? + rx + ) is needed, in combination with some S slicing, to
      // simulate the 'y' flag.
      var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);
      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
      if (lim === 0) return [];
      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];
      var p = 0;
      var q = 0;
      var A = [];
      while (q < S.length) {
        splitter.lastIndex = SUPPORTS_Y ? q : 0;
        var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));
        var e;
        if (
          z === null ||
          (e = $min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p
        ) {
          q = advanceStringIndex(S, q, unicodeMatching);
        } else {
          A.push(S.slice(p, q));
          if (A.length === lim) return A;
          for (var i = 1; i <= z.length - 1; i++) {
            A.push(z[i]);
            if (A.length === lim) return A;
          }
          q = p = e;
        }
      }
      A.push(S.slice(p));
      return A;
    }
  ];
});


/***/ }),
/* 396 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY = __webpack_require__(38);
var global = __webpack_require__(3);
var ctx = __webpack_require__(24);
var classof = __webpack_require__(57);
var $export = __webpack_require__(1);
var isObject = __webpack_require__(6);
var aFunction = __webpack_require__(12);
var anInstance = __webpack_require__(49);
var forOf = __webpack_require__(50);
var speciesConstructor = __webpack_require__(70);
var task = __webpack_require__(129).set;
var microtask = __webpack_require__(130)();
var newPromiseCapabilityModule = __webpack_require__(131);
var perform = __webpack_require__(178);
var userAgent = __webpack_require__(82);
var promiseResolve = __webpack_require__(179);
var PROMISE = 'Promise';
var TypeError = global.TypeError;
var process = global.process;
var versions = process && process.versions;
var v8 = versions && versions.v8 || '';
var $Promise = global[PROMISE];
var isNode = classof(process) == 'process';
var empty = function () { /* empty */ };
var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;

var USE_NATIVE = !!function () {
  try {
    // correct subclassing with @@species support
    var promise = $Promise.resolve(1);
    var FakePromise = (promise.constructor = {})[__webpack_require__(7)('species')] = function (exec) {
      exec(empty, empty);
    };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function')
      && promise.then(empty) instanceof FakePromise
      // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
      // we can't detect it synchronously, so just check versions
      && v8.indexOf('6.6') !== 0
      && userAgent.indexOf('Chrome/66') === -1;
  } catch (e) { /* empty */ }
}();

// helpers
var isThenable = function (it) {
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var notify = function (promise, isReject) {
  if (promise._n) return;
  promise._n = true;
  var chain = promise._c;
  microtask(function () {
    var value = promise._v;
    var ok = promise._s == 1;
    var i = 0;
    var run = function (reaction) {
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then, exited;
      try {
        if (handler) {
          if (!ok) {
            if (promise._h == 2) onHandleUnhandled(promise);
            promise._h = 1;
          }
          if (handler === true) result = value;
          else {
            if (domain) domain.enter();
            result = handler(value); // may throw
            if (domain) {
              domain.exit();
              exited = true;
            }
          }
          if (result === reaction.promise) {
            reject(TypeError('Promise-chain cycle'));
          } else if (then = isThenable(result)) {
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch (e) {
        if (domain && !exited) domain.exit();
        reject(e);
      }
    };
    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if (isReject && !promise._h) onUnhandled(promise);
  });
};
var onUnhandled = function (promise) {
  task.call(global, function () {
    var value = promise._v;
    var unhandled = isUnhandled(promise);
    var result, handler, console;
    if (unhandled) {
      result = perform(function () {
        if (isNode) {
          process.emit('unhandledRejection', value, promise);
        } else if (handler = global.onunhandledrejection) {
          handler({ promise: promise, reason: value });
        } else if ((console = global.console) && console.error) {
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    } promise._a = undefined;
    if (unhandled && result.e) throw result.v;
  });
};
var isUnhandled = function (promise) {
  return promise._h !== 1 && (promise._a || promise._c).length === 0;
};
var onHandleUnhandled = function (promise) {
  task.call(global, function () {
    var handler;
    if (isNode) {
      process.emit('rejectionHandled', promise);
    } else if (handler = global.onrejectionhandled) {
      handler({ promise: promise, reason: promise._v });
    }
  });
};
var $reject = function (value) {
  var promise = this;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if (!promise._a) promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function (value) {
  var promise = this;
  var then;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if (promise === value) throw TypeError("Promise can't be resolved itself");
    if (then = isThenable(value)) {
      microtask(function () {
        var wrapper = { _w: promise, _d: false }; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch (e) {
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch (e) {
    $reject.call({ _w: promise, _d: false }, e); // wrap
  }
};

// constructor polyfill
if (!USE_NATIVE) {
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor) {
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);
    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch (err) {
      $reject.call(this, err);
    }
  };
  // eslint-disable-next-line no-unused-vars
  Internal = function Promise(executor) {
    this._c = [];             // <- awaiting reactions
    this._a = undefined;      // <- checked in isUnhandled reactions
    this._s = 0;              // <- state
    this._d = false;          // <- done
    this._v = undefined;      // <- value
    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false;          // <- notify
  };
  Internal.prototype = __webpack_require__(51)($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected) {
      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if (this._a) this._a.push(reaction);
      if (this._s) notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function (onRejected) {
      return this.then(undefined, onRejected);
    }
  });
  OwnPromiseCapability = function () {
    var promise = new Internal();
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject = ctx($reject, promise, 1);
  };
  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
    return C === $Promise || C === Wrapper
      ? new OwnPromiseCapability(C)
      : newGenericPromiseCapability(C);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });
__webpack_require__(56)($Promise, PROMISE);
__webpack_require__(48)(PROMISE);
Wrapper = __webpack_require__(23)[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r) {
    var capability = newPromiseCapability(this);
    var $$reject = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x) {
    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
  }
});
$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(79)(function (iter) {
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var values = [];
      var index = 0;
      var remaining = 1;
      forOf(iterable, false, function (promise) {
        var $index = index++;
        var alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.e) reject(result.v);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var reject = capability.reject;
    var result = perform(function () {
      forOf(iterable, false, function (promise) {
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if (result.e) reject(result.v);
    return capability.promise;
  }
});


/***/ }),
/* 397 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var weak = __webpack_require__(184);
var validate = __webpack_require__(52);
var WEAK_SET = 'WeakSet';

// 23.4 WeakSet Objects
__webpack_require__(83)(WEAK_SET, function (get) {
  return function WeakSet() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.4.3.1 WeakSet.prototype.add(value)
  add: function add(value) {
    return weak.def(validate(this, WEAK_SET), value, true);
  }
}, weak, false, true);


/***/ }),
/* 398 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(1);
var $typed = __webpack_require__(84);
var buffer = __webpack_require__(132);
var anObject = __webpack_require__(2);
var toAbsoluteIndex = __webpack_require__(45);
var toLength = __webpack_require__(8);
var isObject = __webpack_require__(6);
var ArrayBuffer = __webpack_require__(3).ArrayBuffer;
var speciesConstructor = __webpack_require__(70);
var $ArrayBuffer = buffer.ArrayBuffer;
var $DataView = buffer.DataView;
var $isView = $typed.ABV && ArrayBuffer.isView;
var $slice = $ArrayBuffer.prototype.slice;
var VIEW = $typed.VIEW;
var ARRAY_BUFFER = 'ArrayBuffer';

$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), { ArrayBuffer: $ArrayBuffer });

$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
  // 24.1.3.1 ArrayBuffer.isView(arg)
  isView: function isView(it) {
    return $isView && $isView(it) || isObject(it) && VIEW in it;
  }
});

$export($export.P + $export.U + $export.F * __webpack_require__(4)(function () {
  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
}), ARRAY_BUFFER, {
  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
  slice: function slice(start, end) {
    if ($slice !== undefined && end === undefined) return $slice.call(anObject(this), start); // FF fix
    var len = anObject(this).byteLength;
    var first = toAbsoluteIndex(start, len);
    var fin = toAbsoluteIndex(end === undefined ? len : end, len);
    var result = new (speciesConstructor(this, $ArrayBuffer))(toLength(fin - first));
    var viewS = new $DataView(this);
    var viewT = new $DataView(result);
    var index = 0;
    while (first < fin) {
      viewT.setUint8(index++, viewS.getUint8(first++));
    } return result;
  }
});

__webpack_require__(48)(ARRAY_BUFFER);


/***/ }),
/* 399 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(1);
$export($export.G + $export.W + $export.F * !__webpack_require__(84).ABV, {
  DataView: __webpack_require__(132).DataView
});


/***/ }),
/* 400 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(34)('Int8', 1, function (init) {
  return function Int8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 401 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(34)('Uint8', 1, function (init) {
  return function Uint8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 402 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(34)('Uint8', 1, function (init) {
  return function Uint8ClampedArray(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
}, true);


/***/ }),
/* 403 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(34)('Int16', 2, function (init) {
  return function Int16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 404 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(34)('Uint16', 2, function (init) {
  return function Uint16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 405 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(34)('Int32', 4, function (init) {
  return function Int32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 406 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(34)('Uint32', 4, function (init) {
  return function Uint32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 407 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(34)('Float32', 4, function (init) {
  return function Float32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 408 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(34)('Float64', 8, function (init) {
  return function Float64Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 409 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
var $export = __webpack_require__(1);
var aFunction = __webpack_require__(12);
var anObject = __webpack_require__(2);
var rApply = (__webpack_require__(3).Reflect || {}).apply;
var fApply = Function.apply;
// MS Edge argumentsList argument is optional
$export($export.S + $export.F * !__webpack_require__(4)(function () {
  rApply(function () { /* empty */ });
}), 'Reflect', {
  apply: function apply(target, thisArgument, argumentsList) {
    var T = aFunction(target);
    var L = anObject(argumentsList);
    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
  }
});


/***/ }),
/* 410 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
var $export = __webpack_require__(1);
var create = __webpack_require__(46);
var aFunction = __webpack_require__(12);
var anObject = __webpack_require__(2);
var isObject = __webpack_require__(6);
var fails = __webpack_require__(4);
var bind = __webpack_require__(164);
var rConstruct = (__webpack_require__(3).Reflect || {}).construct;

// MS Edge supports only 2 arguments and argumentsList argument is optional
// FF Nightly sets third argument as `new.target`, but does not create `this` from it
var NEW_TARGET_BUG = fails(function () {
  function F() { /* empty */ }
  return !(rConstruct(function () { /* empty */ }, [], F) instanceof F);
});
var ARGS_BUG = !fails(function () {
  rConstruct(function () { /* empty */ });
});

$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
  construct: function construct(Target, args /* , newTarget */) {
    aFunction(Target);
    anObject(args);
    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
    if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);
    if (Target == newTarget) {
      // w/o altered newTarget, optimization for 0-4 arguments
      switch (args.length) {
        case 0: return new Target();
        case 1: return new Target(args[0]);
        case 2: return new Target(args[0], args[1]);
        case 3: return new Target(args[0], args[1], args[2]);
        case 4: return new Target(args[0], args[1], args[2], args[3]);
      }
      // w/o altered newTarget, lot of arguments case
      var $args = [null];
      $args.push.apply($args, args);
      return new (bind.apply(Target, $args))();
    }
    // with altered newTarget, not support built-in constructors
    var proto = newTarget.prototype;
    var instance = create(isObject(proto) ? proto : Object.prototype);
    var result = Function.apply.call(Target, instance, args);
    return isObject(result) ? result : instance;
  }
});


/***/ }),
/* 411 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
var dP = __webpack_require__(10);
var $export = __webpack_require__(1);
var anObject = __webpack_require__(2);
var toPrimitive = __webpack_require__(29);

// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
$export($export.S + $export.F * __webpack_require__(4)(function () {
  // eslint-disable-next-line no-undef
  Reflect.defineProperty(dP.f({}, 1, { value: 1 }), 1, { value: 2 });
}), 'Reflect', {
  defineProperty: function defineProperty(target, propertyKey, attributes) {
    anObject(target);
    propertyKey = toPrimitive(propertyKey, true);
    anObject(attributes);
    try {
      dP.f(target, propertyKey, attributes);
      return true;
    } catch (e) {
      return false;
    }
  }
});


/***/ }),
/* 412 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.4 Reflect.deleteProperty(target, propertyKey)
var $export = __webpack_require__(1);
var gOPD = __webpack_require__(20).f;
var anObject = __webpack_require__(2);

$export($export.S, 'Reflect', {
  deleteProperty: function deleteProperty(target, propertyKey) {
    var desc = gOPD(anObject(target), propertyKey);
    return desc && !desc.configurable ? false : delete target[propertyKey];
  }
});


/***/ }),
/* 413 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 26.1.5 Reflect.enumerate(target)
var $export = __webpack_require__(1);
var anObject = __webpack_require__(2);
var Enumerate = function (iterated) {
  this._t = anObject(iterated); // target
  this._i = 0;                  // next index
  var keys = this._k = [];      // keys
  var key;
  for (key in iterated) keys.push(key);
};
__webpack_require__(118)(Enumerate, 'Object', function () {
  var that = this;
  var keys = that._k;
  var key;
  do {
    if (that._i >= keys.length) return { value: undefined, done: true };
  } while (!((key = keys[that._i++]) in that._t));
  return { value: key, done: false };
});

$export($export.S, 'Reflect', {
  enumerate: function enumerate(target) {
    return new Enumerate(target);
  }
});


/***/ }),
/* 414 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.6 Reflect.get(target, propertyKey [, receiver])
var gOPD = __webpack_require__(20);
var getPrototypeOf = __webpack_require__(21);
var has = __webpack_require__(18);
var $export = __webpack_require__(1);
var isObject = __webpack_require__(6);
var anObject = __webpack_require__(2);

function get(target, propertyKey /* , receiver */) {
  var receiver = arguments.length < 3 ? target : arguments[2];
  var desc, proto;
  if (anObject(target) === receiver) return target[propertyKey];
  if (desc = gOPD.f(target, propertyKey)) return has(desc, 'value')
    ? desc.value
    : desc.get !== undefined
      ? desc.get.call(receiver)
      : undefined;
  if (isObject(proto = getPrototypeOf(target))) return get(proto, propertyKey, receiver);
}

$export($export.S, 'Reflect', { get: get });


/***/ }),
/* 415 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
var gOPD = __webpack_require__(20);
var $export = __webpack_require__(1);
var anObject = __webpack_require__(2);

$export($export.S, 'Reflect', {
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
    return gOPD.f(anObject(target), propertyKey);
  }
});


/***/ }),
/* 416 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.8 Reflect.getPrototypeOf(target)
var $export = __webpack_require__(1);
var getProto = __webpack_require__(21);
var anObject = __webpack_require__(2);

$export($export.S, 'Reflect', {
  getPrototypeOf: function getPrototypeOf(target) {
    return getProto(anObject(target));
  }
});


/***/ }),
/* 417 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.9 Reflect.has(target, propertyKey)
var $export = __webpack_require__(1);

$export($export.S, 'Reflect', {
  has: function has(target, propertyKey) {
    return propertyKey in target;
  }
});


/***/ }),
/* 418 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.10 Reflect.isExtensible(target)
var $export = __webpack_require__(1);
var anObject = __webpack_require__(2);
var $isExtensible = Object.isExtensible;

$export($export.S, 'Reflect', {
  isExtensible: function isExtensible(target) {
    anObject(target);
    return $isExtensible ? $isExtensible(target) : true;
  }
});


/***/ }),
/* 419 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.11 Reflect.ownKeys(target)
var $export = __webpack_require__(1);

$export($export.S, 'Reflect', { ownKeys: __webpack_require__(186) });


/***/ }),
/* 420 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.12 Reflect.preventExtensions(target)
var $export = __webpack_require__(1);
var anObject = __webpack_require__(2);
var $preventExtensions = Object.preventExtensions;

$export($export.S, 'Reflect', {
  preventExtensions: function preventExtensions(target) {
    anObject(target);
    try {
      if ($preventExtensions) $preventExtensions(target);
      return true;
    } catch (e) {
      return false;
    }
  }
});


/***/ }),
/* 421 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
var dP = __webpack_require__(10);
var gOPD = __webpack_require__(20);
var getPrototypeOf = __webpack_require__(21);
var has = __webpack_require__(18);
var $export = __webpack_require__(1);
var createDesc = __webpack_require__(42);
var anObject = __webpack_require__(2);
var isObject = __webpack_require__(6);

function set(target, propertyKey, V /* , receiver */) {
  var receiver = arguments.length < 4 ? target : arguments[3];
  var ownDesc = gOPD.f(anObject(target), propertyKey);
  var existingDescriptor, proto;
  if (!ownDesc) {
    if (isObject(proto = getPrototypeOf(target))) {
      return set(proto, propertyKey, V, receiver);
    }
    ownDesc = createDesc(0);
  }
  if (has(ownDesc, 'value')) {
    if (ownDesc.writable === false || !isObject(receiver)) return false;
    if (existingDescriptor = gOPD.f(receiver, propertyKey)) {
      if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false) return false;
      existingDescriptor.value = V;
      dP.f(receiver, propertyKey, existingDescriptor);
    } else dP.f(receiver, propertyKey, createDesc(0, V));
    return true;
  }
  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
}

$export($export.S, 'Reflect', { set: set });


/***/ }),
/* 422 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.14 Reflect.setPrototypeOf(target, proto)
var $export = __webpack_require__(1);
var setProto = __webpack_require__(111);

if (setProto) $export($export.S, 'Reflect', {
  setPrototypeOf: function setPrototypeOf(target, proto) {
    setProto.check(target, proto);
    try {
      setProto.set(target, proto);
      return true;
    } catch (e) {
      return false;
    }
  }
});


/***/ }),
/* 423 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/tc39/Array.prototype.includes
var $export = __webpack_require__(1);
var $includes = __webpack_require__(74)(true);

$export($export.P, 'Array', {
  includes: function includes(el /* , fromIndex = 0 */) {
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
  }
});

__webpack_require__(40)('includes');


/***/ }),
/* 424 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap
var $export = __webpack_require__(1);
var flattenIntoArray = __webpack_require__(187);
var toObject = __webpack_require__(11);
var toLength = __webpack_require__(8);
var aFunction = __webpack_require__(12);
var arraySpeciesCreate = __webpack_require__(124);

$export($export.P, 'Array', {
  flatMap: function flatMap(callbackfn /* , thisArg */) {
    var O = toObject(this);
    var sourceLen, A;
    aFunction(callbackfn);
    sourceLen = toLength(O.length);
    A = arraySpeciesCreate(O, 0);
    flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments[1]);
    return A;
  }
});

__webpack_require__(40)('flatMap');


/***/ }),
/* 425 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatten
var $export = __webpack_require__(1);
var flattenIntoArray = __webpack_require__(187);
var toObject = __webpack_require__(11);
var toLength = __webpack_require__(8);
var toInteger = __webpack_require__(26);
var arraySpeciesCreate = __webpack_require__(124);

$export($export.P, 'Array', {
  flatten: function flatten(/* depthArg = 1 */) {
    var depthArg = arguments[0];
    var O = toObject(this);
    var sourceLen = toLength(O.length);
    var A = arraySpeciesCreate(O, 0);
    flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toInteger(depthArg));
    return A;
  }
});

__webpack_require__(40)('flatten');


/***/ }),
/* 426 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/mathiasbynens/String.prototype.at
var $export = __webpack_require__(1);
var $at = __webpack_require__(77)(true);

$export($export.P, 'String', {
  at: function at(pos) {
    return $at(this, pos);
  }
});


/***/ }),
/* 427 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/tc39/proposal-string-pad-start-end
var $export = __webpack_require__(1);
var $pad = __webpack_require__(188);
var userAgent = __webpack_require__(82);

// https://github.com/zloirock/core-js/issues/280
var WEBKIT_BUG = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(userAgent);

$export($export.P + $export.F * WEBKIT_BUG, 'String', {
  padStart: function padStart(maxLength /* , fillString = ' ' */) {
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
  }
});


/***/ }),
/* 428 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/tc39/proposal-string-pad-start-end
var $export = __webpack_require__(1);
var $pad = __webpack_require__(188);
var userAgent = __webpack_require__(82);

// https://github.com/zloirock/core-js/issues/280
var WEBKIT_BUG = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(userAgent);

$export($export.P + $export.F * WEBKIT_BUG, 'String', {
  padEnd: function padEnd(maxLength /* , fillString = ' ' */) {
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
  }
});


/***/ }),
/* 429 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
__webpack_require__(58)('trimLeft', function ($trim) {
  return function trimLeft() {
    return $trim(this, 1);
  };
}, 'trimStart');


/***/ }),
/* 430 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
__webpack_require__(58)('trimRight', function ($trim) {
  return function trimRight() {
    return $trim(this, 2);
  };
}, 'trimEnd');


/***/ }),
/* 431 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/String.prototype.matchAll/
var $export = __webpack_require__(1);
var defined = __webpack_require__(30);
var toLength = __webpack_require__(8);
var isRegExp = __webpack_require__(78);
var getFlags = __webpack_require__(69);
var RegExpProto = RegExp.prototype;

var $RegExpStringIterator = function (regexp, string) {
  this._r = regexp;
  this._s = string;
};

__webpack_require__(118)($RegExpStringIterator, 'RegExp String', function next() {
  var match = this._r.exec(this._s);
  return { value: match, done: match === null };
});

$export($export.P, 'String', {
  matchAll: function matchAll(regexp) {
    defined(this);
    if (!isRegExp(regexp)) throw TypeError(regexp + ' is not a regexp!');
    var S = String(this);
    var flags = 'flags' in RegExpProto ? String(regexp.flags) : getFlags.call(regexp);
    var rx = new RegExp(regexp.source, ~flags.indexOf('g') ? flags : 'g' + flags);
    rx.lastIndex = toLength(regexp.lastIndex);
    return new $RegExpStringIterator(rx, S);
  }
});


/***/ }),
/* 432 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(107)('asyncIterator');


/***/ }),
/* 433 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(107)('observable');


/***/ }),
/* 434 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-object-getownpropertydescriptors
var $export = __webpack_require__(1);
var ownKeys = __webpack_require__(186);
var toIObject = __webpack_require__(19);
var gOPD = __webpack_require__(20);
var createProperty = __webpack_require__(122);

$export($export.S, 'Object', {
  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
    var O = toIObject(object);
    var getDesc = gOPD.f;
    var keys = ownKeys(O);
    var result = {};
    var i = 0;
    var key, desc;
    while (keys.length > i) {
      desc = getDesc(O, key = keys[i++]);
      if (desc !== undefined) createProperty(result, key, desc);
    }
    return result;
  }
});


/***/ }),
/* 435 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-object-values-entries
var $export = __webpack_require__(1);
var $values = __webpack_require__(189)(false);

$export($export.S, 'Object', {
  values: function values(it) {
    return $values(it);
  }
});


/***/ }),
/* 436 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-object-values-entries
var $export = __webpack_require__(1);
var $entries = __webpack_require__(189)(true);

$export($export.S, 'Object', {
  entries: function entries(it) {
    return $entries(it);
  }
});


/***/ }),
/* 437 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(1);
var toObject = __webpack_require__(11);
var aFunction = __webpack_require__(12);
var $defineProperty = __webpack_require__(10);

// B.2.2.2 Object.prototype.__defineGetter__(P, getter)
__webpack_require__(9) && $export($export.P + __webpack_require__(85), 'Object', {
  __defineGetter__: function __defineGetter__(P, getter) {
    $defineProperty.f(toObject(this), P, { get: aFunction(getter), enumerable: true, configurable: true });
  }
});


/***/ }),
/* 438 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(1);
var toObject = __webpack_require__(11);
var aFunction = __webpack_require__(12);
var $defineProperty = __webpack_require__(10);

// B.2.2.3 Object.prototype.__defineSetter__(P, setter)
__webpack_require__(9) && $export($export.P + __webpack_require__(85), 'Object', {
  __defineSetter__: function __defineSetter__(P, setter) {
    $defineProperty.f(toObject(this), P, { set: aFunction(setter), enumerable: true, configurable: true });
  }
});


/***/ }),
/* 439 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(1);
var toObject = __webpack_require__(11);
var toPrimitive = __webpack_require__(29);
var getPrototypeOf = __webpack_require__(21);
var getOwnPropertyDescriptor = __webpack_require__(20).f;

// B.2.2.4 Object.prototype.__lookupGetter__(P)
__webpack_require__(9) && $export($export.P + __webpack_require__(85), 'Object', {
  __lookupGetter__: function __lookupGetter__(P) {
    var O = toObject(this);
    var K = toPrimitive(P, true);
    var D;
    do {
      if (D = getOwnPropertyDescriptor(O, K)) return D.get;
    } while (O = getPrototypeOf(O));
  }
});


/***/ }),
/* 440 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(1);
var toObject = __webpack_require__(11);
var toPrimitive = __webpack_require__(29);
var getPrototypeOf = __webpack_require__(21);
var getOwnPropertyDescriptor = __webpack_require__(20).f;

// B.2.2.5 Object.prototype.__lookupSetter__(P)
__webpack_require__(9) && $export($export.P + __webpack_require__(85), 'Object', {
  __lookupSetter__: function __lookupSetter__(P) {
    var O = toObject(this);
    var K = toPrimitive(P, true);
    var D;
    do {
      if (D = getOwnPropertyDescriptor(O, K)) return D.set;
    } while (O = getPrototypeOf(O));
  }
});


/***/ }),
/* 441 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export = __webpack_require__(1);

$export($export.P + $export.R, 'Map', { toJSON: __webpack_require__(190)('Map') });


/***/ }),
/* 442 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export = __webpack_require__(1);

$export($export.P + $export.R, 'Set', { toJSON: __webpack_require__(190)('Set') });


/***/ }),
/* 443 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-map.of
__webpack_require__(86)('Map');


/***/ }),
/* 444 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-set.of
__webpack_require__(86)('Set');


/***/ }),
/* 445 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.of
__webpack_require__(86)('WeakMap');


/***/ }),
/* 446 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.of
__webpack_require__(86)('WeakSet');


/***/ }),
/* 447 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-map.from
__webpack_require__(87)('Map');


/***/ }),
/* 448 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-set.from
__webpack_require__(87)('Set');


/***/ }),
/* 449 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.from
__webpack_require__(87)('WeakMap');


/***/ }),
/* 450 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.from
__webpack_require__(87)('WeakSet');


/***/ }),
/* 451 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-global
var $export = __webpack_require__(1);

$export($export.G, { global: __webpack_require__(3) });


/***/ }),
/* 452 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-global
var $export = __webpack_require__(1);

$export($export.S, 'System', { global: __webpack_require__(3) });


/***/ }),
/* 453 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/ljharb/proposal-is-error
var $export = __webpack_require__(1);
var cof = __webpack_require__(25);

$export($export.S, 'Error', {
  isError: function isError(it) {
    return cof(it) === 'Error';
  }
});


/***/ }),
/* 454 */
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(1);

$export($export.S, 'Math', {
  clamp: function clamp(x, lower, upper) {
    return Math.min(upper, Math.max(lower, x));
  }
});


/***/ }),
/* 455 */
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(1);

$export($export.S, 'Math', { DEG_PER_RAD: Math.PI / 180 });


/***/ }),
/* 456 */
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(1);
var RAD_PER_DEG = 180 / Math.PI;

$export($export.S, 'Math', {
  degrees: function degrees(radians) {
    return radians * RAD_PER_DEG;
  }
});


/***/ }),
/* 457 */
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(1);
var scale = __webpack_require__(192);
var fround = __webpack_require__(171);

$export($export.S, 'Math', {
  fscale: function fscale(x, inLow, inHigh, outLow, outHigh) {
    return fround(scale(x, inLow, inHigh, outLow, outHigh));
  }
});


/***/ }),
/* 458 */
/***/ (function(module, exports, __webpack_require__) {

// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = __webpack_require__(1);

$export($export.S, 'Math', {
  iaddh: function iaddh(x0, x1, y0, y1) {
    var $x0 = x0 >>> 0;
    var $x1 = x1 >>> 0;
    var $y0 = y0 >>> 0;
    return $x1 + (y1 >>> 0) + (($x0 & $y0 | ($x0 | $y0) & ~($x0 + $y0 >>> 0)) >>> 31) | 0;
  }
});


/***/ }),
/* 459 */
/***/ (function(module, exports, __webpack_require__) {

// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = __webpack_require__(1);

$export($export.S, 'Math', {
  isubh: function isubh(x0, x1, y0, y1) {
    var $x0 = x0 >>> 0;
    var $x1 = x1 >>> 0;
    var $y0 = y0 >>> 0;
    return $x1 - (y1 >>> 0) - ((~$x0 & $y0 | ~($x0 ^ $y0) & $x0 - $y0 >>> 0) >>> 31) | 0;
  }
});


/***/ }),
/* 460 */
/***/ (function(module, exports, __webpack_require__) {

// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = __webpack_require__(1);

$export($export.S, 'Math', {
  imulh: function imulh(u, v) {
    var UINT16 = 0xffff;
    var $u = +u;
    var $v = +v;
    var u0 = $u & UINT16;
    var v0 = $v & UINT16;
    var u1 = $u >> 16;
    var v1 = $v >> 16;
    var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
    return u1 * v1 + (t >> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >> 16);
  }
});


/***/ }),
/* 461 */
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(1);

$export($export.S, 'Math', { RAD_PER_DEG: 180 / Math.PI });


/***/ }),
/* 462 */
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(1);
var DEG_PER_RAD = Math.PI / 180;

$export($export.S, 'Math', {
  radians: function radians(degrees) {
    return degrees * DEG_PER_RAD;
  }
});


/***/ }),
/* 463 */
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(1);

$export($export.S, 'Math', { scale: __webpack_require__(192) });


/***/ }),
/* 464 */
/***/ (function(module, exports, __webpack_require__) {

// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = __webpack_require__(1);

$export($export.S, 'Math', {
  umulh: function umulh(u, v) {
    var UINT16 = 0xffff;
    var $u = +u;
    var $v = +v;
    var u0 = $u & UINT16;
    var v0 = $v & UINT16;
    var u1 = $u >>> 16;
    var v1 = $v >>> 16;
    var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
    return u1 * v1 + (t >>> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >>> 16);
  }
});


/***/ }),
/* 465 */
/***/ (function(module, exports, __webpack_require__) {

// http://jfbastien.github.io/papers/Math.signbit.html
var $export = __webpack_require__(1);

$export($export.S, 'Math', { signbit: function signbit(x) {
  // eslint-disable-next-line no-self-compare
  return (x = +x) != x ? x : x == 0 ? 1 / x == Infinity : x > 0;
} });


/***/ }),
/* 466 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// https://github.com/tc39/proposal-promise-finally

var $export = __webpack_require__(1);
var core = __webpack_require__(23);
var global = __webpack_require__(3);
var speciesConstructor = __webpack_require__(70);
var promiseResolve = __webpack_require__(179);

$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {
  var C = speciesConstructor(this, core.Promise || global.Promise);
  var isFunction = typeof onFinally == 'function';
  return this.then(
    isFunction ? function (x) {
      return promiseResolve(C, onFinally()).then(function () { return x; });
    } : onFinally,
    isFunction ? function (e) {
      return promiseResolve(C, onFinally()).then(function () { throw e; });
    } : onFinally
  );
} });


/***/ }),
/* 467 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/tc39/proposal-promise-try
var $export = __webpack_require__(1);
var newPromiseCapability = __webpack_require__(131);
var perform = __webpack_require__(178);

$export($export.S, 'Promise', { 'try': function (callbackfn) {
  var promiseCapability = newPromiseCapability.f(this);
  var result = perform(callbackfn);
  (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);
  return promiseCapability.promise;
} });


/***/ }),
/* 468 */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(35);
var anObject = __webpack_require__(2);
var toMetaKey = metadata.key;
var ordinaryDefineOwnMetadata = metadata.set;

metadata.exp({ defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey) {
  ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetaKey(targetKey));
} });


/***/ }),
/* 469 */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(35);
var anObject = __webpack_require__(2);
var toMetaKey = metadata.key;
var getOrCreateMetadataMap = metadata.map;
var store = metadata.store;

metadata.exp({ deleteMetadata: function deleteMetadata(metadataKey, target /* , targetKey */) {
  var targetKey = arguments.length < 3 ? undefined : toMetaKey(arguments[2]);
  var metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);
  if (metadataMap === undefined || !metadataMap['delete'](metadataKey)) return false;
  if (metadataMap.size) return true;
  var targetMetadata = store.get(target);
  targetMetadata['delete'](targetKey);
  return !!targetMetadata.size || store['delete'](target);
} });


/***/ }),
/* 470 */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(35);
var anObject = __webpack_require__(2);
var getPrototypeOf = __webpack_require__(21);
var ordinaryHasOwnMetadata = metadata.has;
var ordinaryGetOwnMetadata = metadata.get;
var toMetaKey = metadata.key;

var ordinaryGetMetadata = function (MetadataKey, O, P) {
  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
  if (hasOwn) return ordinaryGetOwnMetadata(MetadataKey, O, P);
  var parent = getPrototypeOf(O);
  return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;
};

metadata.exp({ getMetadata: function getMetadata(metadataKey, target /* , targetKey */) {
  return ordinaryGetMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
} });


/***/ }),
/* 471 */
/***/ (function(module, exports, __webpack_require__) {

var Set = __webpack_require__(182);
var from = __webpack_require__(191);
var metadata = __webpack_require__(35);
var anObject = __webpack_require__(2);
var getPrototypeOf = __webpack_require__(21);
var ordinaryOwnMetadataKeys = metadata.keys;
var toMetaKey = metadata.key;

var ordinaryMetadataKeys = function (O, P) {
  var oKeys = ordinaryOwnMetadataKeys(O, P);
  var parent = getPrototypeOf(O);
  if (parent === null) return oKeys;
  var pKeys = ordinaryMetadataKeys(parent, P);
  return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;
};

metadata.exp({ getMetadataKeys: function getMetadataKeys(target /* , targetKey */) {
  return ordinaryMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
} });


/***/ }),
/* 472 */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(35);
var anObject = __webpack_require__(2);
var ordinaryGetOwnMetadata = metadata.get;
var toMetaKey = metadata.key;

metadata.exp({ getOwnMetadata: function getOwnMetadata(metadataKey, target /* , targetKey */) {
  return ordinaryGetOwnMetadata(metadataKey, anObject(target)
    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
} });


/***/ }),
/* 473 */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(35);
var anObject = __webpack_require__(2);
var ordinaryOwnMetadataKeys = metadata.keys;
var toMetaKey = metadata.key;

metadata.exp({ getOwnMetadataKeys: function getOwnMetadataKeys(target /* , targetKey */) {
  return ordinaryOwnMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
} });


/***/ }),
/* 474 */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(35);
var anObject = __webpack_require__(2);
var getPrototypeOf = __webpack_require__(21);
var ordinaryHasOwnMetadata = metadata.has;
var toMetaKey = metadata.key;

var ordinaryHasMetadata = function (MetadataKey, O, P) {
  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
  if (hasOwn) return true;
  var parent = getPrototypeOf(O);
  return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;
};

metadata.exp({ hasMetadata: function hasMetadata(metadataKey, target /* , targetKey */) {
  return ordinaryHasMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
} });


/***/ }),
/* 475 */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(35);
var anObject = __webpack_require__(2);
var ordinaryHasOwnMetadata = metadata.has;
var toMetaKey = metadata.key;

metadata.exp({ hasOwnMetadata: function hasOwnMetadata(metadataKey, target /* , targetKey */) {
  return ordinaryHasOwnMetadata(metadataKey, anObject(target)
    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
} });


/***/ }),
/* 476 */
/***/ (function(module, exports, __webpack_require__) {

var $metadata = __webpack_require__(35);
var anObject = __webpack_require__(2);
var aFunction = __webpack_require__(12);
var toMetaKey = $metadata.key;
var ordinaryDefineOwnMetadata = $metadata.set;

$metadata.exp({ metadata: function metadata(metadataKey, metadataValue) {
  return function decorator(target, targetKey) {
    ordinaryDefineOwnMetadata(
      metadataKey, metadataValue,
      (targetKey !== undefined ? anObject : aFunction)(target),
      toMetaKey(targetKey)
    );
  };
} });


/***/ }),
/* 477 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-09/sept-25.md#510-globalasap-for-enqueuing-a-microtask
var $export = __webpack_require__(1);
var microtask = __webpack_require__(130)();
var process = __webpack_require__(3).process;
var isNode = __webpack_require__(25)(process) == 'process';

$export($export.G, {
  asap: function asap(fn) {
    var domain = isNode && process.domain;
    microtask(domain ? domain.bind(fn) : fn);
  }
});


/***/ }),
/* 478 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/zenparsing/es-observable
var $export = __webpack_require__(1);
var global = __webpack_require__(3);
var core = __webpack_require__(23);
var microtask = __webpack_require__(130)();
var OBSERVABLE = __webpack_require__(7)('observable');
var aFunction = __webpack_require__(12);
var anObject = __webpack_require__(2);
var anInstance = __webpack_require__(49);
var redefineAll = __webpack_require__(51);
var hide = __webpack_require__(14);
var forOf = __webpack_require__(50);
var RETURN = forOf.RETURN;

var getMethod = function (fn) {
  return fn == null ? undefined : aFunction(fn);
};

var cleanupSubscription = function (subscription) {
  var cleanup = subscription._c;
  if (cleanup) {
    subscription._c = undefined;
    cleanup();
  }
};

var subscriptionClosed = function (subscription) {
  return subscription._o === undefined;
};

var closeSubscription = function (subscription) {
  if (!subscriptionClosed(subscription)) {
    subscription._o = undefined;
    cleanupSubscription(subscription);
  }
};

var Subscription = function (observer, subscriber) {
  anObject(observer);
  this._c = undefined;
  this._o = observer;
  observer = new SubscriptionObserver(this);
  try {
    var cleanup = subscriber(observer);
    var subscription = cleanup;
    if (cleanup != null) {
      if (typeof cleanup.unsubscribe === 'function') cleanup = function () { subscription.unsubscribe(); };
      else aFunction(cleanup);
      this._c = cleanup;
    }
  } catch (e) {
    observer.error(e);
    return;
  } if (subscriptionClosed(this)) cleanupSubscription(this);
};

Subscription.prototype = redefineAll({}, {
  unsubscribe: function unsubscribe() { closeSubscription(this); }
});

var SubscriptionObserver = function (subscription) {
  this._s = subscription;
};

SubscriptionObserver.prototype = redefineAll({}, {
  next: function next(value) {
    var subscription = this._s;
    if (!subscriptionClosed(subscription)) {
      var observer = subscription._o;
      try {
        var m = getMethod(observer.next);
        if (m) return m.call(observer, value);
      } catch (e) {
        try {
          closeSubscription(subscription);
        } finally {
          throw e;
        }
      }
    }
  },
  error: function error(value) {
    var subscription = this._s;
    if (subscriptionClosed(subscription)) throw value;
    var observer = subscription._o;
    subscription._o = undefined;
    try {
      var m = getMethod(observer.error);
      if (!m) throw value;
      value = m.call(observer, value);
    } catch (e) {
      try {
        cleanupSubscription(subscription);
      } finally {
        throw e;
      }
    } cleanupSubscription(subscription);
    return value;
  },
  complete: function complete(value) {
    var subscription = this._s;
    if (!subscriptionClosed(subscription)) {
      var observer = subscription._o;
      subscription._o = undefined;
      try {
        var m = getMethod(observer.complete);
        value = m ? m.call(observer, value) : undefined;
      } catch (e) {
        try {
          cleanupSubscription(subscription);
        } finally {
          throw e;
        }
      } cleanupSubscription(subscription);
      return value;
    }
  }
});

var $Observable = function Observable(subscriber) {
  anInstance(this, $Observable, 'Observable', '_f')._f = aFunction(subscriber);
};

redefineAll($Observable.prototype, {
  subscribe: function subscribe(observer) {
    return new Subscription(observer, this._f);
  },
  forEach: function forEach(fn) {
    var that = this;
    return new (core.Promise || global.Promise)(function (resolve, reject) {
      aFunction(fn);
      var subscription = that.subscribe({
        next: function (value) {
          try {
            return fn(value);
          } catch (e) {
            reject(e);
            subscription.unsubscribe();
          }
        },
        error: reject,
        complete: resolve
      });
    });
  }
});

redefineAll($Observable, {
  from: function from(x) {
    var C = typeof this === 'function' ? this : $Observable;
    var method = getMethod(anObject(x)[OBSERVABLE]);
    if (method) {
      var observable = anObject(method.call(x));
      return observable.constructor === C ? observable : new C(function (observer) {
        return observable.subscribe(observer);
      });
    }
    return new C(function (observer) {
      var done = false;
      microtask(function () {
        if (!done) {
          try {
            if (forOf(x, false, function (it) {
              observer.next(it);
              if (done) return RETURN;
            }) === RETURN) return;
          } catch (e) {
            if (done) throw e;
            observer.error(e);
            return;
          } observer.complete();
        }
      });
      return function () { done = true; };
    });
  },
  of: function of() {
    for (var i = 0, l = arguments.length, items = new Array(l); i < l;) items[i] = arguments[i++];
    return new (typeof this === 'function' ? this : $Observable)(function (observer) {
      var done = false;
      microtask(function () {
        if (!done) {
          for (var j = 0; j < items.length; ++j) {
            observer.next(items[j]);
            if (done) return;
          } observer.complete();
        }
      });
      return function () { done = true; };
    });
  }
});

hide($Observable.prototype, OBSERVABLE, function () { return this; });

$export($export.G, { Observable: $Observable });

__webpack_require__(48)('Observable');


/***/ }),
/* 479 */
/***/ (function(module, exports, __webpack_require__) {

// ie9- setTimeout & setInterval additional parameters fix
var global = __webpack_require__(3);
var $export = __webpack_require__(1);
var userAgent = __webpack_require__(82);
var slice = [].slice;
var MSIE = /MSIE .\./.test(userAgent); // <- dirty ie9- check
var wrap = function (set) {
  return function (fn, time /* , ...args */) {
    var boundArgs = arguments.length > 2;
    var args = boundArgs ? slice.call(arguments, 2) : false;
    return set(boundArgs ? function () {
      // eslint-disable-next-line no-new-func
      (typeof fn == 'function' ? fn : Function(fn)).apply(this, args);
    } : fn, time);
  };
};
$export($export.G + $export.B + $export.F * MSIE, {
  setTimeout: wrap(global.setTimeout),
  setInterval: wrap(global.setInterval)
});


/***/ }),
/* 480 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(1);
var $task = __webpack_require__(129);
$export($export.G + $export.B, {
  setImmediate: $task.set,
  clearImmediate: $task.clear
});


/***/ }),
/* 481 */
/***/ (function(module, exports, __webpack_require__) {

var $iterators = __webpack_require__(126);
var getKeys = __webpack_require__(44);
var redefine = __webpack_require__(15);
var global = __webpack_require__(3);
var hide = __webpack_require__(14);
var Iterators = __webpack_require__(59);
var wks = __webpack_require__(7);
var ITERATOR = wks('iterator');
var TO_STRING_TAG = wks('toStringTag');
var ArrayValues = Iterators.Array;

var DOMIterables = {
  CSSRuleList: true, // TODO: Not spec compliant, should be false.
  CSSStyleDeclaration: false,
  CSSValueList: false,
  ClientRectList: false,
  DOMRectList: false,
  DOMStringList: false,
  DOMTokenList: true,
  DataTransferItemList: false,
  FileList: false,
  HTMLAllCollection: false,
  HTMLCollection: false,
  HTMLFormElement: false,
  HTMLSelectElement: false,
  MediaList: true, // TODO: Not spec compliant, should be false.
  MimeTypeArray: false,
  NamedNodeMap: false,
  NodeList: true,
  PaintRequestList: false,
  Plugin: false,
  PluginArray: false,
  SVGLengthList: false,
  SVGNumberList: false,
  SVGPathSegList: false,
  SVGPointList: false,
  SVGStringList: false,
  SVGTransformList: false,
  SourceBufferList: false,
  StyleSheetList: true, // TODO: Not spec compliant, should be false.
  TextTrackCueList: false,
  TextTrackList: false,
  TouchList: false
};

for (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {
  var NAME = collections[i];
  var explicit = DOMIterables[NAME];
  var Collection = global[NAME];
  var proto = Collection && Collection.prototype;
  var key;
  if (proto) {
    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);
    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
    Iterators[NAME] = ArrayValues;
    if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);
  }
}


/***/ }),
/* 482 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/**
 * Copyright (c) 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
 * additional grant of patent rights can be found in the PATENTS file in
 * the same directory.
 */

!(function(global) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    }
    // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.
    return;
  }

  // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  runtime.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  runtime.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration. If the Promise is rejected, however, the
          // result for this iteration will be rejected with the same
          // reason. Note that rejections of yielded Promises are not
          // thrown back into the generator function, as is the case
          // when an awaited Promise is rejected. This difference in
          // behavior between yield and await is important, because it
          // allows the consumer to decide what to do with the yielded
          // rejection (swallow it and continue, manually .throw it back
          // into the generator, abandon iteration, whatever). With
          // await, by contrast, there is no opportunity to examine the
          // rejection reason outside the generator function, so the
          // only option is to throw it from the await expression, and
          // let the generator function handle the exception.
          result.value = unwrapped;
          resolve(result);
        }, reject);
      }
    }

    if (typeof global.process === "object" && global.process.domain) {
      invoke = global.process.domain.bind(invoke);
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  runtime.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return runtime.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        if (delegate.iterator.return) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };
})(
  // Among the various tricks for obtaining a reference to the global
  // object, this seems to be the most reliable technique that does not
  // use indirect eval (which violates Content Security Policy).
  typeof global === "object" ? global :
  typeof window === "object" ? window :
  typeof self === "object" ? self : this
);

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(156)))

/***/ }),
/* 483 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(484);
module.exports = __webpack_require__(23).RegExp.escape;


/***/ }),
/* 484 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/benjamingr/RexExp.escape
var $export = __webpack_require__(1);
var $re = __webpack_require__(485)(/[\\^$*+?.()|[\]{}]/g, '\\$&');

$export($export.S, 'RegExp', { escape: function escape(it) { return $re(it); } });


/***/ }),
/* 485 */
/***/ (function(module, exports) {

module.exports = function (regExp, replace) {
  var replacer = replace === Object(replace) ? function (part) {
    return replace[part];
  } : replace;
  return function (it) {
    return String(it).replace(regExp, replacer);
  };
};


/***/ })
/******/ ]);